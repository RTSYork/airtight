<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="25:MCCC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb47860020"/></from>
      <to><interface-ref name="FlowSend" scoped="" ref="0x7fbb47d0f020"/></to>
    </wire>
    <wire loc="26:MCCC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb4785da30"/></from>
      <to><interface-ref name="FlowSend" scoped="" ref="0x7fbb47d0f020"/></to>
    </wire>
    <wire loc="27:MCCC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbb47d0fce0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbb48f32b20"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbb48f32b20"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbb48f2cdb0"/></to>
    </wire>
    <wire loc="29:MCCC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb47d0c5f0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b0e0c0"/></to>
    </wire>
    <wire loc="30:MCCC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb47d0d900"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb48b3db00"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb48b3db00"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb48b0f410"/></to>
    </wire>
    <wire loc="32:MCCC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb47d0e320"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb48f31890"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb48f31890"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb48d552a0"/></to>
    </wire>
    <wire loc="33:MCCC.nc">
      <from><interface-ref name="MacControl" scoped="" ref="0x7fbb47d0bd00"/></from>
      <to><interface-ref name="MacPowerControl" scoped="" ref="0x7fbb491a5020"/></to>
    </wire>
    <wire loc="36:TdmaMacC.nc">
      <from><interface-ref name="MacPowerControl" scoped="" ref="0x7fbb491a5020"/></from>
      <to><interface-ref name="MacPowerControl" scoped="" ref="0x7fbb490bbdc0"/></to>
    </wire>
    <wire loc="34:MCCC.nc">
      <from><interface-ref name="MacSend" scoped="" ref="0x7fbb47d093b0"/></from>
      <to><interface-ref name="MacSend" scoped="" ref="0x7fbb49130c80"/></to>
    </wire>
    <wire loc="40:TdmaMacC.nc">
      <from><interface-ref name="MacSend" scoped="" ref="0x7fbb49130c80"/></from>
      <to><interface-ref name="MacSend" scoped="" ref="0x7fbb490bc8e0"/></to>
    </wire>
    <wire loc="35:MCCC.nc">
      <from><interface-ref name="MacReceive" scoped="" ref="0x7fbb47d08130"/></from>
      <to><interface-ref name="MacReceive" scoped="" ref="0x7fbb4912c680"/></to>
    </wire>
    <wire loc="41:TdmaMacC.nc">
      <from><interface-ref name="MacReceive" scoped="" ref="0x7fbb4912c680"/></from>
      <to><interface-ref name="MacReceive" scoped="" ref="0x7fbb490bb690"/></to>
    </wire>
    <wire loc="36:MCCC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb47d087c0"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb491a9020"/></to>
    </wire>
    <wire loc="37:TdmaMacC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb491a9020"/></from>
      <to><interface-ref name="Frame" scoped="" ref="0x7fbb490bdc80"/></to>
    </wire>
    <wire loc="49:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb478c2020"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x7fbb47a54bc0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x7fbb47a4fb50"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47ac4770"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47c61bb0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb478f03c0"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47191420"/></to>
    </wire>
    <wire loc="120:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48341600"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb4855cb40"/></to>
    </wire>
    <wire loc="52:../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48620080"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb472f9760"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47328b60"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb473ee460"/></to>
    </wire>
    <wire loc="47:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47480d90"/></to>
    </wire>
    <wire loc="49:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48d2cb30"/></to>
    </wire>
    <wire loc="38:MCCC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47fed2e0"/></to>
    </wire>
    <wire loc="58:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb47fed2e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47f3cc10"/></to>
    </wire>
    <wire loc="39:MCCC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbb47feeb30"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbb48f32b20"/></to>
    </wire>
    <wire loc="33:TdmaMacC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb491ab020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb490bd570"/></to>
    </wire>
    <wire loc="45:TdmaMacC.nc">
      <from><interface-ref name="Slotter" scoped="" ref="0x7fbb4908ab40"/></from>
      <to><interface-ref name="Slotter" scoped="" ref="0x7fbb48f38e40"/></to>
    </wire>
    <wire loc="45:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Slotter" scoped="" ref="0x7fbb48f38e40"/></from>
      <to><interface-ref name="Slotter" scoped="" ref="0x7fbb48d29ac0"/></to>
    </wire>
    <wire loc="46:TdmaMacC.nc">
      <from><interface-ref name="SlotterControl" scoped="" ref="0x7fbb49084130"/></from>
      <to><interface-ref name="SlotterControl" scoped="" ref="0x7fbb48f354c0"/></to>
    </wire>
    <wire loc="53:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="SlotterControl" scoped="" ref="0x7fbb48f354c0"/></from>
      <to><interface-ref name="SlotterControl" scoped="" ref="0x7fbb48d28150"/></to>
    </wire>
    <wire loc="47:TdmaMacC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb49090330"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb48f344d0"/></to>
    </wire>
    <wire loc="46:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb48f344d0"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb48d27180"/></to>
    </wire>
    <wire loc="50:TdmaMacC.nc">
      <from><interface-ref name="RadioPowerControl" scoped="" ref="0x7fbb4906a170"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb48b42020"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb48b42020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb48b142e0"/></to>
    </wire>
    <wire loc="51:TdmaMacC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb4909a4e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></to>
    </wire>
    <wire loc="52:TdmaMacC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb490aa020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb48b3db00"/></to>
    </wire>
    <wire loc="53:TdmaMacC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb490ac9a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb48f31890"/></to>
    </wire>
    <wire loc="54:TdmaMacC.nc">
      <from><interface-ref name="ACK" scoped="" ref="0x7fbb49062630"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48b39e40"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48b39e40"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48b0d800"/></to>
    </wire>
    <wire loc="55:TdmaMacC.nc">
      <from><interface-ref name="phyDataSend" scoped="" ref="0x7fbb49068c30"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb48b41050"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:TdmaMacC.nc">
      <from><interface-ref name="phyDataReceive" scoped="" ref="0x7fbb490669d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb48b3f210"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:TdmaMacC.nc">
      <from><interface-ref name="phyNotificationSend" scoped="" ref="0x7fbb490586c0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb48b41050"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:TdmaMacC.nc">
      <from><interface-ref name="phyNotificationReceive" scoped="" ref="0x7fbb49068570"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb48b3f210"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:TdmaMacC.nc">
      <from><interface-ref name="forwardQueue" scoped="" ref="0x7fbb49073730"/></from>
      <to><interface-ref name="PCQ" scoped="" ref="0x7fbb480022f0"/></to>
    </wire>
    <wire loc="17:PrioCritQueueC.nc">
      <from><interface-ref name="PCQ" scoped="" ref="0x7fbb480022f0"/></from>
      <to><interface-ref name="PrioCritQueue" scoped="" ref="0x7fbb4712c770"/></to>
    </wire>
    <wire loc="66:TdmaMacC.nc">
      <from><interface-ref name="GlobalTime" scoped="" ref="0x7fbb49052a10"/></from>
      <to><interface-ref name="GlobalTime" scoped="" ref="0x7fbb47fec300"/></to>
    </wire>
    <wire loc="56:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="GlobalTime" scoped="" ref="0x7fbb47fec300"/></from>
      <to><interface-ref name="GlobalTime" scoped="" ref="0x7fbb47f3baf0"/></to>
    </wire>
    <wire loc="67:TdmaMacC.nc">
      <from><interface-ref name="TimeSyncInfo" scoped="" ref="0x7fbb4903c990"/></from>
      <to><interface-ref name="TimeSyncInfo" scoped="" ref="0x7fbb47fea580"/></to>
    </wire>
    <wire loc="60:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncInfo" scoped="" ref="0x7fbb47fea580"/></from>
      <to><interface-ref name="TimeSyncInfo" scoped="" ref="0x7fbb47f39bc0"/></to>
    </wire>
    <wire loc="68:TdmaMacC.nc">
      <from><interface-ref name="TimeSyncMode" scoped="" ref="0x7fbb49038c60"/></from>
      <to><interface-ref name="TimeSyncMode" scoped="" ref="0x7fbb47fe8650"/></to>
    </wire>
    <wire loc="61:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncMode" scoped="" ref="0x7fbb47fe8650"/></from>
      <to><interface-ref name="TimeSyncMode" scoped="" ref="0x7fbb47f37bd0"/></to>
    </wire>
    <wire loc="70:TdmaMacC.nc">
      <from><interface-ref name="FaultClearTimer" scoped="" ref="0x7fbb49046850"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb480c2b00"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb480c2b00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbb483b62e0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="47:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7fbb48f30980"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7fbb48d29310"/></to>
    </wire>
    <wire loc="44:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbb48d1ba90"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbb48f32b20"/></to>
    </wire>
    <wire loc="50:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb48d26290"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb48b4c4e0"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb48b4c4e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb47505890"/></to>
    </wire>
    <wire loc="54:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb48d1c440"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb48f31890"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fbb48d66470"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fbb492c99d0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fbb492c99d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fbb491f4e40"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48d65020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48234680"/></to>
    </wire>
    <wire loc="123:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48d65020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48342a60"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48d65020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48f2bb50"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb48f2bb50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48f1f0c0"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48d65720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fbb48f29d50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47938c60"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fbb48f29d50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48c252a0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fbb48f29020"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fbb48d86690"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7fbb48f1e020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48d86020"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fbb48f1f7a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48d312e0"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fbb48f1f7a0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48f219d0"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48f219d0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48f16530"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fbb48f19110"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7fbb48f29d50"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7fbb48f0fad0"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7fbb48f04060"/></to>
    </wire>
    <wire loc="141:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7fbb48f04060"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fbb48e78da0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fbb48f15cd0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7fbb48f19110"/></to>
    </wire>
    <wire loc="191:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7fbb48ececb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb48dde160"/></to>
    </wire>
    <wire loc="165:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7fbb48eea4e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fbb48e4d2b0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fbb48e4d2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476cae20"/></to>
    </wire>
    <wire loc="176:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7fbb48edd350"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fbb48e3b8f0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fbb48e3b8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476583f0"/></to>
    </wire>
    <wire loc="185:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7fbb48ed4cb0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fbb48e2cc10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fbb48e2cc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb475e43f0"/></to>
    </wire>
    <wire loc="196:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x7fbb48ec6060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb48dc46d0"/></to>
    </wire>
    <wire loc="143:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7fbb48f02670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fbb48e752b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fbb48e752b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477fde20"/></to>
    </wire>
    <wire loc="183:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7fbb48ed6670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fbb48e2e8f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fbb48e2e8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb475ebe20"/></to>
    </wire>
    <wire loc="146:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7fbb48effcb0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fbb48e6da20"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fbb48e6da20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477a3c90"/></to>
    </wire>
    <wire loc="157:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7fbb48ef3cb0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fbb48e5b020"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fbb48e5b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477310a0"/></to>
    </wire>
    <wire loc="168:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7fbb48ee7e40"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fbb48e4a760"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fbb48e4a760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476c06d0"/></to>
    </wire>
    <wire loc="179:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7fbb48edacb0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fbb48e38da0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fbb48e38da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4764fe20"/></to>
    </wire>
    <wire loc="138:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7fbb48f08800"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fbb48e7c8f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fbb48e7c8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4780de20"/></to>
    </wire>
    <wire loc="149:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7fbb48efb670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fbb48e69020"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fbb48e69020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477993f0"/></to>
    </wire>
    <wire loc="160:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7fbb48eef670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fbb48e585d0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fbb48e585d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477289b0"/></to>
    </wire>
    <wire loc="171:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7fbb48ee2670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fbb48e46c10"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fbb48e46c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476b60a0"/></to>
    </wire>
    <wire loc="188:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7fbb48ed0670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fbb48e282b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fbb48e282b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb475dbe20"/></to>
    </wire>
    <wire loc="194:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7fbb48ecab20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb48dce160"/></to>
    </wire>
    <wire loc="174:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7fbb48ee0cb0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fbb48e3e5d0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fbb48e3e5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4765fe20"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fbb48e78da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb478036d0"/></to>
    </wire>
    <wire loc="152:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7fbb48ef7020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fbb48e665d0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fbb48e665d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb47790e20"/></to>
    </wire>
    <wire loc="192:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7fbb48ecc4e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb48ddac90"/></to>
    </wire>
    <wire loc="155:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7fbb48ef5670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fbb48e5ed30"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fbb48e5ed30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb47738c90"/></to>
    </wire>
    <wire loc="166:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7fbb48ee9800"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fbb48e4c440"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fbb48e4c440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476c60a0"/></to>
    </wire>
    <wire loc="177:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7fbb48edc670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fbb48e3aa80"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fbb48e3aa80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476556d0"/></to>
    </wire>
    <wire loc="186:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7fbb48ed2020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fbb48e2bda0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fbb48e2bda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb475e16d0"/></to>
    </wire>
    <wire loc="144:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7fbb48f01990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fbb48e74440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fbb48e74440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477f80a0"/></to>
    </wire>
    <wire loc="147:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7fbb48efd020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fbb48e6cc10"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fbb48e6cc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477a0e20"/></to>
    </wire>
    <wire loc="158:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7fbb48ef1020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fbb48e5a2b0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fbb48e5a2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4772e3f0"/></to>
    </wire>
    <wire loc="169:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7fbb48ee5060"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fbb48e498f0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fbb48e498f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476bd9b0"/></to>
    </wire>
    <wire loc="180:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7fbb48ed8020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fbb48e36020"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fbb48e36020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4764b0a0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7fbb48f07b20"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fbb48e7ba80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fbb48e7ba80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb478090a0"/></to>
    </wire>
    <wire loc="150:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7fbb48efa990"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fbb48e682b0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fbb48e682b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477966d0"/></to>
    </wire>
    <wire loc="161:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7fbb48eee990"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fbb48e57760"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fbb48e57760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb47725e20"/></to>
    </wire>
    <wire loc="189:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7fbb48ecf990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fbb48e27440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fbb48e27440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb475d70a0"/></to>
    </wire>
    <wire loc="164:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7fbb48eeb020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fbb48e4e020"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fbb48e4e020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476cdc90"/></to>
    </wire>
    <wire loc="175:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7fbb48ede020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fbb48e3d760"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fbb48e3d760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4765b0a0"/></to>
    </wire>
    <wire loc="184:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7fbb48ed5990"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fbb48e2da80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fbb48e2da80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb475e70a0"/></to>
    </wire>
    <wire loc="195:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7fbb48ec9e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb48dcac90"/></to>
    </wire>
    <wire loc="142:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7fbb48f03350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fbb48e76020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fbb48e76020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb478009b0"/></to>
    </wire>
    <wire loc="153:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7fbb48ef6350"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fbb48e65760"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fbb48e65760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4778b0a0"/></to>
    </wire>
    <wire loc="182:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7fbb48ed7350"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fbb48e2f7a0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fbb48e2f7a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb475eec90"/></to>
    </wire>
    <wire loc="156:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7fbb48ef4990"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fbb48e5de60"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fbb48e5de60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb47735e20"/></to>
    </wire>
    <wire loc="167:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7fbb48ee8b20"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fbb48e4b5d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fbb48e4b5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476c33f0"/></to>
    </wire>
    <wire loc="178:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7fbb48edb990"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fbb48e39c10"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fbb48e39c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476529b0"/></to>
    </wire>
    <wire loc="187:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7fbb48ed1350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fbb48e29020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fbb48e29020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb475de9b0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7fbb48f17530"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fbb48e7d6b0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fbb48e7d6b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb47810a60"/></to>
    </wire>
    <wire loc="148:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7fbb48efc350"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fbb48e6bda0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fbb48e6bda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4779c0a0"/></to>
    </wire>
    <wire loc="159:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7fbb48ef0350"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fbb48e59440"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fbb48e59440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb4772b6d0"/></to>
    </wire>
    <wire loc="170:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7fbb48ee4350"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fbb48e47a80"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fbb48e47a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb476bae20"/></to>
    </wire>
    <wire loc="193:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7fbb48ecb800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb48dd46d0"/></to>
    </wire>
    <wire loc="173:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7fbb48ee1990"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fbb48e3f3f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fbb48e3f3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb47662c90"/></to>
    </wire>
    <wire loc="162:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7fbb48eedcb0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fbb48e568f0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fbb48e568f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477210a0"/></to>
    </wire>
    <wire loc="140:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7fbb48f06e40"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fbb48e79c10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fbb48e79c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb478063f0"/></to>
    </wire>
    <wire loc="151:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7fbb48ef9cb0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fbb48e67440"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fbb48e67440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbb477939b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb491f3d30"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7fbb491ed2c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7fbb4920a3b0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7fbb491cf330"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7fbb484b5cb0"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb48d312e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48d58c30"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fbb48d54a00"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7fbb48d56a00"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fbb48d56a00"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x7fbb48f07b20"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fbb48d53ca0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7fbb48d34ce0"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fbb48d34ce0"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x7fbb48f08800"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fbb48d51020"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7fbb48d32020"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fbb48d32020"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x7fbb48f17530"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fbb474fe0a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb4750b7c0"/></to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb4750b7c0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb474f5d90"/></to>
    </wire>
    <wire loc="38:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb47502c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb48bd2290"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb48bd2290"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb48b8d0f0"/></to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7fbb474f00b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb48cdea90"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb48cdea90"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb48cbab80"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7fbb474eb570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbb48cc5650"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb48cd2d80"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb48cb2020"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7fbb48cc9bf0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbb48cb1850"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fbb48cc5650"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7fbb48cac5a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fbb48cc5650"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7fbb48ca8ba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fbb48cc5650"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7fbb48ca3120"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb48c25a10"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb48cdea90"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fbb48b8b540"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb48bca290"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb48bca290"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb48bc4020"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb48bb1280"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb48cdea90"/></to>
    </wire>
    <wire loc="75:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb48b142e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb48aec080"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48b3d4f0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48b11d60"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48b11d60"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48ae8bb0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb48b0f410"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7fbb48ae6a10"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb48b41050"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb48b13320"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb48b13320"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb48aea1d0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fbb48b3fdf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fbb48b111d0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fbb48b111d0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fbb48ae8020"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48b318a0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48b0c320"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48b0c320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48acb320"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb48b3f210"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb48b12510"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb48b12510"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb48ae93f0"/></to>
    </wire>
    <wire loc="85:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48b0d800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48acc800"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7fbb48b2abf0"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7fbb48b0ce10"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7fbb48b0ce10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7fbb48acbe10"/></to>
    </wire>
    <wire loc="83:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b0e0c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48ae72d0"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7fbb48b26960"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7fbb48b0bad0"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7fbb48b0bad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7fbb48acaad0"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7fbb48b1d9e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb48afa8a0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb48afa8a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb48abd270"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48b1caf0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48af3970"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48af3970"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48ab93f0"/></to>
    </wire>
    <wire loc="254:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb48aec080"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb486f4880"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb48b00a00"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb48ac21c0"/></to>
    </wire>
    <wire loc="345:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb48ac21c0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb483603b0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48ae8bb0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fbb488db3a0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7fbb48ae6a10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb488de720"/></to>
    </wire>
    <wire loc="136:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb48aea1d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb488dd530"/></to>
    </wire>
    <wire loc="138:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fbb48ae8020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fbb488dcb00"/></to>
    </wire>
    <wire loc="91:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb48b02400"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb48ac7c90"/></to>
    </wire>
    <wire loc="343:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb48ac7c90"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb48364e80"/></to>
    </wire>
    <wire loc="255:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48acb320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb486dd270"/></to>
    </wire>
    <wire loc="137:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb48ae93f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb488dc3a0"/></to>
    </wire>
    <wire loc="309:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb48abd270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb483a9020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48afb270"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48ac0d70"/></to>
    </wire>
    <wire loc="347:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48ac0d70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48356a40"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb48b04df0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb48ac96d0"/></to>
    </wire>
    <wire loc="344:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb48ac96d0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb4835be70"/></to>
    </wire>
    <wire loc="288:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48acc800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb485dd560"/></to>
    </wire>
    <wire loc="226:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7fbb48acbe10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7fbb48700d60"/></to>
    </wire>
    <wire loc="140:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb48ae72d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb488df020"/></to>
    </wire>
    <wire loc="264:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7fbb48acaad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7fbb486695f0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb48af74c0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb48ac0510"/></to>
    </wire>
    <wire loc="346:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb48ac0510"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb483561e0"/></to>
    </wire>
    <wire loc="310:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48ab93f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb483ad020"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb486f4880"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7fbb486ddd90"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb483603b0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb4833aa40"/></to>
    </wire>
    <wire loc="172:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0x7fbb48adc020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48829d30"/></to>
    </wire>
    <wire loc="160:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0x7fbb48adb2c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbb4885d390"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbb4885d390"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbb473eb9d0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7fbb488db3a0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fbb47440420"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb483ad020"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb4725d360"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb488dd530"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb474426c0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fbb488dcb00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fbb47441c90"/></to>
    </wire>
    <wire loc="173:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb48acd3c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb4874add0"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb4874add0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb4737e2e0"/></to>
    </wire>
    <wire loc="174:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7fbb48ad5890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb48858e00"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb486dd270"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb47302640"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb48364e80"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb4833d550"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb488dc3a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb47441530"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb488de720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb474438b0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb483a9020"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb472592a0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48356a40"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48238020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb4835be70"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb48333560"/></to>
    </wire>
    <wire loc="170:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0x7fbb48adda60"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7fbb4882aa50"/></to>
    </wire>
    <wire loc="117:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7fbb48700d60"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7fbb486fa100"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb488df020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb47444270"/></to>
    </wire>
    <wire loc="171:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0x7fbb48ae4840"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7fbb48829760"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7fbb486695f0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7fbb472f8d00"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb483561e0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb483308b0"/></to>
    </wire>
    <wire loc="116:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb48a1d880"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb4874de00"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb4874de00"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb47381020"/></to>
    </wire>
    <wire loc="117:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48a168d0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48989480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fbb48a15160"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb483a9020"/></to>
    </wire>
    <wire loc="119:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0x7fbb48a1a020"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48365d90"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48365d90"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb4833e470"/></to>
    </wire>
    <wire loc="124:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb48986020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb48355dd0"/></to>
    </wire>
    <wire loc="101:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb48355dd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb4823dac0"/></to>
    </wire>
    <wire loc="125:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fbb48987140"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fbb48ab4e50"/></to>
    </wire>
    <wire loc="131:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb488d98c0"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7fbb48a39e30"/></to>
    </wire>
    <wire loc="132:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb488da8f0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7fbb488d2880"/></to>
    </wire>
    <wire loc="133:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb488d92b0"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0x7fbb487e7020"/></to>
    </wire>
    <wire loc="134:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb488dba30"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0x7fbb487e7630"/></to>
    </wire>
    <wire loc="149:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbb488c2c00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbb4885d390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb488c2310"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0x7fbb487e85d0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb48828390"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb4874de00"/></to>
    </wire>
    <wire loc="166:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb488232b0"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7fbb4881c7c0"/></to>
    </wire>
    <wire loc="167:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb48823be0"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7fbb487e9120"/></to>
    </wire>
    <wire loc="168:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48824470"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb487e9730"/></to>
    </wire>
    <wire loc="182:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb487e64a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb48714840"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb48714840"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb473299b0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb487e6dd0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb48748e60"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb48748e60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb4737c440"/></to>
    </wire>
    <wire loc="184:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb487e5410"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48748080"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48748080"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb4737d590"/></to>
    </wire>
    <wire loc="190:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb48747500"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb486fea10"/></to>
    </wire>
    <wire loc="115:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fbb486fea10"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fbb486fc8c0"/></to>
    </wire>
    <wire loc="194:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb48746440"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb48700790"/></to>
    </wire>
    <wire loc="114:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb48700790"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fbb486fc2b0"/></to>
    </wire>
    <wire loc="217:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb48712be0"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0x7fbb48a4fe40"/></to>
    </wire>
    <wire loc="218:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb48713a70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb4870ae40"/></to>
    </wire>
    <wire loc="113:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb4870ae40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fbb486fd950"/></to>
    </wire>
    <wire loc="219:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7fbb48710720"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7fbb48a68390"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7fbb48a68390"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7fbb4747f3d0"/></to>
    </wire>
    <wire loc="220:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb4870f400"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb48a67150"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb486fb720"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb485dd560"/></to>
    </wire>
    <wire loc="232:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb486fd950"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb486df440"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb486df440"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fbb486dc8c0"/></to>
    </wire>
    <wire loc="233:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb486fc2b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb486dfd70"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb486dfd70"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fbb486db2b0"/></to>
    </wire>
    <wire loc="234:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb486fc8c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb486de3d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fbb486de3d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fbb486db8c0"/></to>
    </wire>
    <wire loc="250:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7fbb486ddd90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb4866ba10"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb4866ba10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb472fbbf0"/></to>
    </wire>
    <wire loc="251:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb486dc8c0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb4866a5d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb4866a5d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb472f9d70"/></to>
    </wire>
    <wire loc="252:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb486db2b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb48669020"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb48669020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb472f8730"/></to>
    </wire>
    <wire loc="253:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb486db8c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb483a7c20"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fbb483a7c20"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb47255020"/></to>
    </wire>
    <wire loc="260:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fbb486668b0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fbb486111d0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fbb486111d0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fbb472bb660"/></to>
    </wire>
    <wire loc="261:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48665270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48713270"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48713270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb47328400"/></to>
    </wire>
    <wire loc="262:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fbb48667aa0"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7fbb48378b60"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fbb48378b60"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7fbb48372410"/></to>
    </wire>
    <wire loc="263:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fbb48667020"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fbb48ab4e50"/></to>
    </wire>
    <wire loc="268:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb48712440"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48611ac0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48611ac0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb472ba020"/></to>
    </wire>
    <wire loc="277:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb4860d0a0"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7fbb48a466b0"/></to>
    </wire>
    <wire loc="278:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb48610310"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fbb48608470"/></to>
    </wire>
    <wire loc="279:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb48610c40"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48608d60"/></to>
    </wire>
    <wire loc="280:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb4860f400"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48989480"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0x7fbb485dae60"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fbb4839e9b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb485db0e0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48989480"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb485dbd30"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7fbb48a559c0"/></to>
    </wire>
    <wire loc="293:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb485dc020"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fbb485bd270"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fbb485bd270"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fbb485b7b00"/></to>
    </wire>
    <wire loc="294:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb485dc950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb485bdb60"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fbb485bdb60"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fbb485b6450"/></to>
    </wire>
    <wire loc="299:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb485b42b0"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7fbb48a3fa30"/></to>
    </wire>
    <wire loc="300:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb485b7b00"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fbb48377a40"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fbb48377a40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fbb48371440"/></to>
    </wire>
    <wire loc="301:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb485b6450"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48376400"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48376400"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fbb48371d70"/></to>
    </wire>
    <wire loc="302:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0x7fbb485b6bf0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7fbb483655c0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7fbb483655c0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7fbb4833fc40"/></to>
    </wire>
    <wire loc="307:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb483a6c00"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48356a40"/></to>
    </wire>
    <wire loc="308:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb483a4cd0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb4839d590"/></to>
    </wire>
    <wire loc="311:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7fbb483a3b00"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fbb4839e9b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb4837d4a0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48365d90"/></to>
    </wire>
    <wire loc="326:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb4836eb40"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7fbb48a3fa30"/></to>
    </wire>
    <wire loc="327:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb48371440"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fbb48366460"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fbb48366460"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fbb48340aa0"/></to>
    </wire>
    <wire loc="328:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb48371d70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48366dd0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48366dd0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb4833f480"/></to>
    </wire>
    <wire loc="329:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0x7fbb48372410"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7fbb48369600"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fbb48369600"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7fbb48341c40"/></to>
    </wire>
    <wire loc="341:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb483501f0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0x7fbb48a5e7c0"/></to>
    </wire>
    <wire loc="342:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fbb4834f2e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb483a9020"/></to>
    </wire>
    <wire loc="349:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fbb4834b110"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fbb4839e9b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7fbb4834bca0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fbb4839e9b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fbb4834a8d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fbb4839e9b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48349470"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48989480"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fbb48348110"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fbb48ab4e50"/></to>
    </wire>
    <wire loc="46:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb48a67150"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb4747e150"/></to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48989480"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb47460300"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb4745f260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb48986020"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fbb4745b410"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fbb48987140"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fbb4743c8b0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fbb488f8260"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb47440ab0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fbb488dba30"/></to>
    </wire>
    <wire loc="69:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb4743f8f0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fbb488da8f0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb4743d2b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fbb488d92b0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb4743d8c0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fbb488d98c0"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fbb4885c150"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fbb473ea850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbb4885c8d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbb473e9020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb473e9910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb4885b1f0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fbb473e8120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fbb473eea70"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fbb473e8c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fbb4737ca70"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fbb488f8260"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb4737b5d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fbb48747500"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb47379440"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fbb48746440"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7fbb47326e80"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7fbb48710720"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb47325ab0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb4870f400"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb47327310"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fbb48713a70"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb47327c40"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fbb48712440"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0x7fbb47326400"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fbb48712be0"/></to>
    </wire>
    <wire loc="118:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7fbb486fad90"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb486fb720"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fbb472f6590"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fbb48667020"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fbb472f7670"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7fbb48667aa0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fbb472f5060"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fbb486668b0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fbb472f5950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48665270"/></to>
    </wire>
    <wire loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x7fbb472f4940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0x7fbb472f3160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0x7fbb472f4160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb472ba820"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fbb48610310"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb472b7020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fbb4860d0a0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb472b92b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fbb48610c40"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb472b9a10"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb4860f400"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7fbb472b8720"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7fbb48626a20"/></to>
    </wire>
    <wire loc="56:../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7fbb48626a20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7fbb4861fa20"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0x7fbb472b7b20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7fbb48624920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7fbb48620940"/></to>
    </wire>
    <wire loc="54:../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb4862a9a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48620080"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb485c0ac0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7fbb485ba120"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7fbb485bc400"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7fbb485b6bf0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fbb485be470"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7fbb485b9be0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fbb485bcb60"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fbb485b5440"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7fbb485bba80"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fbb485b42b0"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7fbb485bfe80"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7fbb485b95d0"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7fbb485bf590"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7fbb485babe0"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb47252cd0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fbb483a4cd0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb47254a70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb483a6c00"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7fbb47253c40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fbb4855d080"/></to>
    </wire>
    <wire loc="26:../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fbb4855d080"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fbb48553020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7fbb47255e60"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0x7fbb483a3b00"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fbb48553020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fbb483ca790"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fbb48559a40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb483d8150"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb4855cb40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48550790"/></to>
    </wire>
    <wire loc="35:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb48550790"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48456530"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fbb483d3640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb48427d60"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb484211d0"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7fbb4854d1d0"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7fbb4854d1d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb48456d40"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb483c9a60"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7fbb48549850"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7fbb48549850"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb48452180"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb48452180"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb4722b8d0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb48456530"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47230c20"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb48456d40"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb4722f4b0"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb47229bc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb484d2e20"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb484d2e20"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb484bf060"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb47224e20"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb484ca2b0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb484ca2b0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb484ba570"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fbb472210a0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbb484c96b0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fbb484c96b0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbb484b99d0"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7fbb4721e450"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7fbb484c5b30"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7fbb484c5b30"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7fbb484b4460"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7fbb4841e490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7fbb483cda00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fbb483b62e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbb48559a40"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb4837a0e0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7fbb48374920"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7fbb48376b60"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7fbb4836f5a0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48375400"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fbb4836fd40"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7fbb483742b0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fbb4836eb40"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7fbb48378590"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7fbb48373d70"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7fbb4837ab60"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7fbb48373440"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb4823dac0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb4814bc60"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb4835d940"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb48336020"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48238020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fbb48145880"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbb48321b50"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fbb483501f0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fbb4831da10"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fbb4834b110"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7fbb4831c6a0"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0x7fbb4834bca0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fbb4831b3a0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fbb4834a8d0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fbb48319200"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fbb4834f2e0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fbb483249d0"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48238020"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48316b70"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48349470"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7fbb4832f020"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0x7fbb48245940"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7fbb48245940"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7fbb48effcb0"/></to>
    </wire>
    <wire loc="105:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7fbb4832e380"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0x7fbb48242b50"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7fbb48242b50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbb4821abd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb48327270"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb48241920"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb48241920"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb4821d320"/></to>
    </wire>
    <wire loc="108:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7fbb48327dd0"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0x7fbb482404e0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7fbb482404e0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x7fbb48ef6350"/></to>
    </wire>
    <wire loc="109:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7fbb4832b020"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7fbb4823f7f0"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7fbb4823f7f0"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x7fbb48f02670"/></to>
    </wire>
    <wire loc="111:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7fbb48322b30"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7fbb4823eb10"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7fbb4823eb10"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7fbb482379c0"/></to>
    </wire>
    <wire loc="112:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fbb48316080"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fbb48348110"/></to>
    </wire>
    <wire loc="113:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7fbb4831e430"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7fbb4812d990"/></to>
    </wire>
    <wire loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0x7fbb48285e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbb4814bc60"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbb471654c0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb4821d320"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb4820f660"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fbb48145880"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fbb48136020"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0x7fbb4822fa20"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x7fbb48ee4350"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0x7fbb4822dcc0"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x7fbb48ee7e40"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7fbb48232020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbb48cc9bf0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7fbb48212e60"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7fbb4820e2d0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7fbb4821bc20"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7fbb4820f020"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb48220630"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb48210900"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbb4821abd0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbb48155210"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbb48155210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbb4718e9d0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb481530d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb4820c050"/></to>
    </wire>
    <wire loc="100:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x7fbb481f2a40"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x7fbb481b1c70"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x7fbb481b1c70"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x7fbb481aab40"/></to>
    </wire>
    <wire loc="101:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7fbb481f07b0"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7fbb491d1bc0"/></to>
    </wire>
    <wire loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x7fbb481cf190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x7fbb481a0e50"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7fbb491d1bc0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x7fbb481a4390"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7fbb48effcb0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7fbb481a3650"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x7fbb48efd020"/></to>
    </wire>
    <wire loc="88:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x7fbb481a2800"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x7fbb48efc350"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x7fbb481a1b10"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x7fbb48efb670"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fbb48154020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fbb4718d850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbb481547a0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbb4718c020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb4718c910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb481530d0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fbb4718b120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fbb47191a30"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fbb4718bc20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7fbb471617f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb48cdea90"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7fbb4715cc10"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbb48cc5650"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb48135300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb4813e180"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fbb4813c540"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb48bca290"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb480c8140"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbb483b62e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:PrioCritQueueC.nc">
      <from><interface-ref name="prio1Queue" scoped="" ref="0x7fbb47122b00"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7fbb47110720"/></to>
    </wire>
    <wire loc="19:PrioCritQueueC.nc">
      <from><interface-ref name="prio2Queue" scoped="" ref="0x7fbb4711d5e0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7fbb4710aa00"/></to>
    </wire>
    <wire loc="20:PrioCritQueueC.nc">
      <from><interface-ref name="prio3Queue" scoped="" ref="0x7fbb471180f0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7fbb47104d60"/></to>
    </wire>
    <wire loc="62:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncNotify" scoped="" ref="0x7fbb47fe4490"/></from>
      <to><interface-ref name="TimeSyncNotify" scoped="" ref="0x7fbb47f36590"/></to>
    </wire>
    <wire loc="57:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fbb47fed960"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fbb47f3b270"/></to>
    </wire>
    <wire loc="59:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbb47f36d50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbb47feeb30"/></to>
    </wire>
    <wire loc="65:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x7fbb47f35390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb47f1fda0"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb47f1fda0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb47efd020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb47f340f0"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47f07920"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb47f30020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb47f1ce10"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncPacket" scoped="" ref="0x7fbb47f29c80"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47f03b00"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47f03b00"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47ee2020"/></to>
    </wire>
    <wire loc="71:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fbb47f26600"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fbb4855d080"/></to>
    </wire>
    <wire loc="74:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb47f30710"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb47d3c5a0"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb47d3c5a0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbb483b62e0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7fbb47f2b980"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7fbb48626a20"/></to>
    </wire>
    <wire loc="84:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb47f2a270"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb47d339c0"/></to>
    </wire>
    <wire loc="349:../../tos/lib/ftsp/TimeSyncP.nc">
      <from><interface-ref name="sendMsg" scoped="" ref="0x7fbb47f256c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/lib/ftsp/TimeSyncP.nc">
      <from><interface-ref name="processMsg" scoped="" ref="0x7fbb47f24020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb47efd020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb48b142e0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47ee2020"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47d63600"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb47f1a080"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb47efb2b0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb47efb2b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb47d708b0"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47f07920"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47ee8d60"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47ee8d60"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47d68510"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fbb47f1ba20"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fbb47efcc30"/></to>
    </wire>
    <wire loc="67:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fbb47efcc30"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fbb47d72bf0"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb47f18e80"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb47ef8320"/></to>
    </wire>
    <wire loc="70:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb47ef8320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48b0c320"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb47f123f0"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb47ef3920"/></to>
    </wire>
    <wire loc="73:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb47ef3920"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb47d6f940"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb47f1ce10"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb47efc050"/></to>
    </wire>
    <wire loc="66:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb47efc050"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb47d72490"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb47f0e590"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb47eefb00"/></to>
    </wire>
    <wire loc="74:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb47eefb00"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb47d6b9b0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47f17db0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47ef6270"/></to>
    </wire>
    <wire loc="72:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47ef6270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb48afa8a0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47f184e0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47ef9800"/></to>
    </wire>
    <wire loc="69:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47ef9800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48b0d800"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb47f1acf0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb47efa020"/></to>
    </wire>
    <wire loc="65:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb47efa020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb47d71270"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47f0b220"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47eec780"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47eec780"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48af3970"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47d63600"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb4702c570"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb47d708b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb47039720"/></to>
    </wire>
    <wire loc="79:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47d68510"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47034a60"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fbb47d72bf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fbb4703b8b0"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb47d6f940"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb470387b0"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb47d72490"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb4703b150"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb47d6b9b0"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb4702fac0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb47d71270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb4703a020"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47d610a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb48afa8a0"/></to>
    </wire>
    <wire loc="81:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47d5d060"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48af3970"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb47d5bd80"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48356a40"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb47d58020"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb4835d940"/></to>
    </wire>
    <wire loc="84:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubAMSend" scoped="" ref="0x7fbb4702bdc0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb47015cf0"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb47015cf0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb46fbe020"/></to>
    </wire>
    <wire loc="85:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubAMPacket" scoped="" ref="0x7fbb470296b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb47013590"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb47013590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb46fbd8b0"/></to>
    </wire>
    <wire loc="86:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fbb47028da0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb47014930"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb47014930"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb46fbec30"/></to>
    </wire>
    <wire loc="89:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb4702aa50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb48b3f210"/>
      <arguments>
        <value cst="I:61">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubSnoop" scoped="" ref="0x7fbb470290a0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fbb48b3fdf0"/>
      <arguments>
        <value cst="I:61">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47027e20"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47d610a0"/></to>
    </wire>
    <wire loc="93:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47023ce0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47d5d060"/></to>
    </wire>
    <wire loc="95:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7fbb4701ec40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fbb4855d080"/></to>
    </wire>
    <wire loc="96:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb4701fa90"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb47d5bd80"/></to>
    </wire>
    <wire loc="97:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb4701ddf0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb47d58020"/></to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb46fbe020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb46fb2a20"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb46fbec30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb48b3db00"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb46fbd8b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7fbb47012c10"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7fbb46fbb020"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7fbb46fbb020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48b39e40"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb46fb1780"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb47de5930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb46fb0400"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></to>
    </wire>
    <wire loc="53:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb47de5930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb47d974b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb47d96400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb48b41050"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb47d95060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb47d94720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb48b3db00"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7fbb47d93480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7fbb47d93c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fbb478ef330"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7fbb478f8510"/></to>
    </wire>
    <wire loc="67:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb478ead40"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb478fe540"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb478fe540"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb46f600c0"/></to>
    </wire>
    <wire loc="68:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb478e89b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb478fd270"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb478fd270"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb47cc3a00"/></to>
    </wire>
    <wire loc="71:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7fbb478c92a0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7fbb478eda70"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb47cc3a00"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb47c65400"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb478fde80"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb47cc2780"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb47cc2780"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb47c67cb0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7fbb478fb5d0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47cc1e40"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47cc1e40"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47c64060"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb46f60d30"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb47cd49f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb46f5f970"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb47cc2780"/></to>
    </wire>
    <wire loc="54:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb47cd49f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb47ccf4b0"/></to>
    </wire>
    <wire loc="55:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb47cce400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb47cc41d0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbb47cc41d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbb47cbb7d0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb47ccd060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb47cc2780"/></to>
    </wire>
    <wire loc="57:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb47ccb720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb47cc3a00"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7fbb47cca480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7fbb47ccac60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb47cc5140"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb47c5e2f0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbb47c5e2f0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb47c36c80"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb47cc33f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb47c676c0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbb47c61bb0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbb47c36630"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb47c5a940"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb47cc07e0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbb47c649f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb47c5de10"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbb47c63760"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb47c5d320"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fbb47c5a020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7fbb479131e0"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbb47c5de10"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb47b06de0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbb47c5d320"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbb47b066c0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7fbb47b05c20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fbb47c5a020"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb47c2e430"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb47c5a940"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb47b03920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb47c5a940"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbb47afacc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbb47c5a940"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fbb47b04590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fbb47c32080"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7fbb47b04e80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7fbb47c2fb10"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7fbb47c24410"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7fbb47affe00"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fbb47c2ab80"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fbb47ad4150"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fbb47ad4150"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fbb47ad14b0"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fbb47af1d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fbb47ad4960"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fbb47ad4960"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fbb47aca850"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7fbb47bd06e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7fbb47c07660"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7fbb47bd3c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fbb47bcca00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7fbb47b01020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7fbb47b01800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fbb47ad2020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fbb47ad1cb0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fbb47ad1cb0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fbb47a7e5a0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fbb47aca850"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fbb47a7c0c0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fbb47ad14b0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fbb47ac4d80"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb47ac9c20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb479ecdc0"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb479ecdc0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb47924cd0"/></to>
    </wire>
    <wire loc="53:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb47a79810"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb47ac9c20"/></to>
    </wire>
    <wire loc="56:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x7fbb47a7b0a0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7fbb47a5a0f0"/></to>
    </wire>
    <wire loc="60:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x7fbb47a5a0f0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7fbb47a513f0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x7fbb47a7b880"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7fbb47a5a990"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x7fbb47a5a990"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7fbb47a51cd0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x7fbb47a7a0a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7fbb47a593a0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x7fbb47a593a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7fbb47a505f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x7fbb47a56c40"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x7fbb47a4d5f0"/></to>
    </wire>
    <wire loc="64:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x7fbb47a589f0"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x7fbb47a4e3f0"/></to>
    </wire>
    <wire loc="65:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x7fbb47a563b0"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x7fbb47a4ecd0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fbb47a4cb20"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fbb48f29020"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7fbb47a4b980"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7fbb491d1bc0"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fbb479200f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb479e6de0"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbb479e6de0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbb479303c0"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb4792d660"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb479e1cc0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb479e1cc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb479ca020"/></to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb479d8020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb479c52c0"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7fbb479d7850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbb479c49e0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fbb479d3ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7fbb479bf5a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fbb479d3ad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7fbb479bbba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fbb479d3ad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7fbb479b6120"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb47937410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb479e1cc0"/></to>
    </wire>
    <wire loc="114:../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7fbb478e3d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7fbb478c2680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7fbb478c92a0"/></to>
    </wire>
    <wire loc="44:../../tos/lib/printf/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbb478bbd50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbb48f32b20"/></to>
    </wire>
    <wire loc="47:../../tos/lib/printf/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fbb478b84a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbb47cc5140"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb478b9370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbb483b62e0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="17:TXFlowC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbb46e50270"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbb48f32b20"/></to>
    </wire>
    <wire loc="18:TXFlowC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb46e50840"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb48b3db00"/></to>
    </wire>
    <wire loc="19:TXFlowC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb46e4f590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></to>
    </wire>
    <wire loc="20:TXFlowC.nc">
      <from><interface-ref name="SendTimer" scoped="" ref="0x7fbb46e56310"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb46e5e640"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb46e5e640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbb483b62e0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:TXFlowC.nc">
      <from><interface-ref name="AppSend" scoped="" ref="0x7fbb46e51610"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb47860020"/></to>
    </wire>
    <wire loc="27:TXFlowP.nc">
      <from><interface-ref name="send" scoped="" ref="0x7fbb46e4dc50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="17:TXFlowC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbb46e18c30"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbb48f32b20"/></to>
    </wire>
    <wire loc="18:TXFlowC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbb46e17270"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbb48b3db00"/></to>
    </wire>
    <wire loc="19:TXFlowC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbb46e17e80"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></to>
    </wire>
    <wire loc="20:TXFlowC.nc">
      <from><interface-ref name="SendTimer" scoped="" ref="0x7fbb46e1ed40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbb46e26240"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbb46e26240"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbb483b62e0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:TXFlowC.nc">
      <from><interface-ref name="AppSend" scoped="" ref="0x7fbb46e18020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbb4785da30"/></to>
    </wire>
    <wire loc="27:TXFlowP.nc">
      <from><interface-ref name="send" scoped="" ref="0x7fbb46e15610"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TdmaMacC" loc="8:TdmaMacC.nc">
      <configuration/>
    </component>
    <component qname="TdmaMacP" loc="29:TdmaMacP.nc">
      <module/>
    </component>
    <component qname="GenericSlotterC" loc="30:../../tos/system/GenericSlotterC.nc">
      <documentation loc="23:../../tos/system/GenericSlotterC.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="80:../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:../../tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="GenericSlotterP" loc="30:../../tos/system/GenericSlotterP.nc">
      <documentation loc="23:../../tos/system/GenericSlotterP.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C" loc="26(GenericSlotterC.Alarm32khz32C):../../tos/platforms/mica/Alarm32khz32C.nc">
      <documentation loc="11:../../tos/platforms/mica/Alarm32khz32C.nc">
        <short>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register). Note that creating one of these Alarms consumes a 16-bit&#10; 32kHz Alarm (see Alarm32khz16C).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Alarm16" loc="28(GenericSlotterC.Alarm32khz32C.Alarm16):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm" loc="51(GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="22:../../tos/platforms/mica/Counter32khz32C.nc">
      <documentation loc="11:../../tos/platforms/mica/Counter32khz32C.nc">
        <short>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform32" loc="54(Counter32khz32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbb4923c180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="counter_one_overflow_t" ref="0x7fbb491f71f0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Transform32" loc="51(GenericSlotterC.Alarm32khz32C.Transform32):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbb4923c180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="37:../../tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC" loc="35(RF230RadioC.NeighborhoodC):../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC.NeighborhoodP" loc="37(RF230RadioC.NeighborhoodC.NeighborhoodP):../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="37(RF230RadioC.UniqueLayerC.UniqueLayerP):../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../tos/system/RandomC.nc">
      <documentation loc="33:../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7fbb485468e0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="TdmaMacC.TimerMilliC" loc="44(TdmaMacC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.FaultClearTimer" loc="44(TdmaMacC.FaultClearTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC" loc="7(TdmaMacC.PrioCritQueueC):PrioCritQueueC.nc">
      <documentation loc="1:PrioCritQueueC.nc">
        <short>&#10;A priority queue supporting 3 levels of priority for MCC packets&#10;</short>
      </documentation>
      <instance number="0">
        <component-ref qname="PrioCritQueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:20">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.QP" loc="3(TdmaMacC.PrioCritQueueC.QP):PrioCritQueueP.nc">
      <instance number="0">
        <component-ref qname="PrioCritQueueP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fbb480bb4e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q1" loc="42(TdmaMacC.PrioCritQueueC.Q1):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fbb480bb4e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q2" loc="42(TdmaMacC.PrioCritQueueC.Q2):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fbb480bb4e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q3" loc="42(TdmaMacC.PrioCritQueueC.Q3):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fbb480bb4e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncC" loc="39:../../tos/lib/ftsp/TimeSyncC.nc">
      <configuration/>
    </component>
    <component qname="TimeSyncC.TimeSyncP" loc="37(TimeSyncC.TimeSyncP):../../tos/lib/ftsp/TimeSyncP.nc">
      <instance number="0">
        <component-ref qname="TimeSyncP"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncMessageC" loc="37:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC" loc="37:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC" loc="40(RF230TimeSyncMessageC.TimeSyncMessageLayerC):../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeSyncMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP" loc="37(RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP):../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeSyncMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC" loc="47(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:61">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC" loc="47(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP" loc="43(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncC.TimerC" loc="44(TimeSyncC.TimerC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="NoLedsC" loc="45:../../tos/system/NoLedsC.nc">
      <documentation loc="35:../../tos/system/NoLedsC.nc">
        <short>&#10; A null operation replacement for the LedsC component.</short>
        <long>&#10; A null operation replacement for the LedsC component. As many&#10; components might concurrently signal information through LEDs,&#10; using LedsC and NoLedsC allows an application builder to select&#10; which components control the LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 19, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MCCP" loc="11:MCCP.nc">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:../../tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:../../tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:../../tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):../../tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:../../tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:../../tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:../../tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:../../tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:../../tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7fbb491f8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7fbb491f8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x7fbb491f7670"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../tos/lib/printf/PutcharP.nc">
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../tos/lib/printf/SerialStartP.nc">
      <documentation loc="33:../../tos/lib/printf/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MCCC.TimerMilliC" loc="44(MCCC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1" loc="1(MCCC.TXFlow1):TXFlowC.nc">
      <instance number="0">
        <component-ref qname="TXFlowC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1.TimerMilliC" loc="44(MCCC.TXFlow1.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1.TXF" loc="11(MCCC.TXFlow1.TXF):TXFlowP.nc">
      <instance number="0">
        <component-ref qname="TXFlowP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MCCC.TXFlow2" loc="1(MCCC.TXFlow2):TXFlowC.nc">
      <instance number="1">
        <component-ref qname="TXFlowC"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:13">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow2.TimerMilliC" loc="44(MCCC.TXFlow2.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow2.TXF" loc="11(MCCC.TXFlow2.TXF):TXFlowP.nc">
      <instance number="1">
        <component-ref qname="TXFlowP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7fbb48ec3590" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7fbb48ec3900" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7fbb48ec3c70" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7fbb48eb59e0" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7fbb48eb5d70" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7fbb48eb2170" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7fbb48eb24c0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7fbb48e1e0d0" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7fbb48e1e460" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7fbb48e1e7f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7fbb48e1eb40" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Alarm32khz32C" loc="26:../../tos/platforms/mica/Alarm32khz32C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/Alarm32khz32C.nc">
        <short>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register). Note that creating one of these Alarms consumes a 16-bit&#10; 32kHz Alarm (see Alarm32khz16C).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7fbb48c247c0" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fbb48c247c0"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7fbb48c24b30" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fbb48c0f500" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fbb48c0f500"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7fbb48c0fcc0" loc="52:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fbb48c0fcc0"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x7fbb48c0e020" loc="53:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fbb48bc6900" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fbb48bc6900"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7fbb48bc3120" loc="43:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fbb48bc3120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fbb48baa830" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fbb48baa830"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fbb48ba6020" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fbb48ba6020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fbb48ba6410" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fbb48ba6410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fbb48ba6bf0" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fbb48ba6bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fbb48ba5020" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7fbb48ba5820" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7fbb48ba5820"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fbb48bd4b30" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fbb48bd4b30"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fbb48b84370" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fbb48b84370"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fbb48b84760" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fbb48b84760"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fbb48b82020" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fbb48b82020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fbb48b823f0" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7fbb48aa47d0" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
          <component-ref qname="NeighborhoodC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7fbb48a9be40" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
          <component-ref qname="NeighborhoodP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fbb488bc590" loc="83:../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7fbb488ad060" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7fbb48743820" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
          <component-ref qname="UniqueLayerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7fbb48736020" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
          <component-ref qname="UniqueLayerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7fbb485468e0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7fbb485468e0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7fbb48546bf0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7fbb48538400" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7fbb48538400"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7fbb48538710" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb4854e900" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb4854e900"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb4841b870" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb4841b870"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fbb4841bba0" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb483cbdd0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb483cbdd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PrioCritQueueC" loc="7:PrioCritQueueC.nc" abstract="">
      <documentation loc="1:PrioCritQueueC.nc">
        <short>&#10;A priority queue supporting 3 levels of priority for MCC packets&#10;</short>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7fbb480bb4e0" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fbb480bb4e0"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7fbb480bb860" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit1" ref="0x7fbb480bbbc0" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit2" ref="0x7fbb480b8020" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit3" ref="0x7fbb480b8380" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PrioCritQueueP" loc="3:PrioCritQueueP.nc" abstract="">
      <parameters>
        <typedef name="queue_t" ref="0x7fbb480add40" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fbb480add40"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7fbb480aa110" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit1" ref="0x7fbb480aa470" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit2" ref="0x7fbb480aa7d0" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit3" ref="0x7fbb480aab30" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7fbb48034290" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fbb48034290"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7fbb48034610" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimeSyncP" loc="37:../../tos/lib/ftsp/TimeSyncP.nc" abstract="">
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb47fe66f0" loc="37:../../tos/lib/ftsp/TimeSyncP.nc">
          <component-ref qname="TimeSyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb47fe66f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimeSyncMessageLayerC" loc="40:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeSyncMessageLayerP" loc="37:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7fbb47e09910" loc="47:../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7fbb47e026a0" loc="47:../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7fbb47df82e0" loc="43:../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7fbb47ddfc80" loc="45:../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7fbb47ce1b40" loc="47:../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:../../tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TXFlowC" loc="1:TXFlowC.nc" abstract="">
      <parameters>
        <constant name="flow_num" ref="0x7fbb478adcc0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="dest_id" ref="0x7fbb478aa060" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="crit_level" ref="0x7fbb478aa3e0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="periodSlots" ref="0x7fbb478aa760" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="deadlineSlots" ref="0x7fbb478aab00" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="c" ref="0x7fbb478aae20" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="priority" ref="0x7fbb478a81b0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="TXFlowP" loc="11:TXFlowP.nc" abstract="">
      <parameters>
        <constant name="flow_num" ref="0x7fbb478a0dc0" loc="11:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="dest_id" ref="0x7fbb4789d160" loc="11:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="crit_level" ref="0x7fbb4789d4e0" loc="11:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="periodSlots" ref="0x7fbb4789d860" loc="11:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="deadlineSlots" ref="0x7fbb4789dc00" loc="11:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="c" ref="0x7fbb4789c020" loc="11:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
        <constant name="priority" ref="0x7fbb4789c390" loc="11:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="1" name="MacReceive" ref="0x7fbb4912c680" loc="16:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7fbb4912c680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4912ca00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacPowerControl" ref="0x7fbb491a5020" loc="17:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacPowerControl" scoped="" ref="0x7fbb491a5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb491a53a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb491a5530"/>
        <function-ref name="start" scoped="" ref="0x7fbb491a56c0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb491a5850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb491ab020" loc="10:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb491ab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb491ab3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacSend" ref="0x7fbb49130c80" loc="15:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7fbb49130c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb491a80a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb491a8230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb491a83c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb491a8550"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb491a86e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7fbb491a9020" loc="11:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb491a9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7fbb491a93a0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7fbb491a9530"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7fbb491a96c0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7fbb491a9850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Slotter" ref="0x7fbb4908ab40" loc="55:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7fbb4908ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7fbb49099020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacReceive" ref="0x7fbb490bb690" loc="38:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7fbb490bb690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb490bba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Frame" ref="0x7fbb490bdc80" loc="33:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Frame" scoped="" ref="0x7fbb490bdc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7fbb490bc0a0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7fbb490bc230"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7fbb490bc3c0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7fbb490bc550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacPowerControl" ref="0x7fbb490bbdc0" loc="39:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacPowerControl" scoped="" ref="0x7fbb490bbdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb490ba180"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb490ba310"/>
        <function-ref name="start" scoped="" ref="0x7fbb490ba4a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb490ba630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbb490b7720" loc="43:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb490b7720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb490b7aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GlobalTime" ref="0x7fbb49052a10" loc="71:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7fbb49052a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7fbb490576b0"/>
        <function-ref name="global2Local" scoped="" ref="0x7fbb49056660"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7fbb49057b70"/>
        <function-ref name="local2Global" scoped="" ref="0x7fbb49056110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbb490aa020" loc="52:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb490aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb490aa3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb490aa530"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb490aa6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb490aa850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb490aa9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GenericSlotterPowerControl" ref="0x7fbb4908b5b0" loc="54:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GenericSlotterPowerControl" scoped="" ref="0x7fbb4908b5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb4908b930"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4908bac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="forwardQueue" ref="0x7fbb49073730" loc="58:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="forwardQueue" scoped="" ref="0x7fbb49073730"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7fbb49083c90"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7fbb490709d0"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb4906e110"/>
        <function-ref name="clear" scoped="" ref="0x7fbb4906ee60"/>
        <function-ref name="sizeLO_Q2" scoped="" ref="0x7fbb4906b0d0"/>
        <function-ref name="headPrio" scoped="" ref="0x7fbb49071770"/>
        <function-ref name="sizePrio" scoped="" ref="0x7fbb49072170"/>
        <function-ref name="full" scoped="" ref="0x7fbb49083810"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb49072640"/>
        <function-ref name="clearLO" scoped="" ref="0x7fbb4906e8e0"/>
        <function-ref name="sizeHI" scoped="" ref="0x7fbb4906d310"/>
        <function-ref name="sizeLO_Q3" scoped="" ref="0x7fbb4906b550"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb49071e70"/>
        <function-ref name="sizeLO" scoped="" ref="0x7fbb4906d790"/>
        <function-ref name="empty" scoped="" ref="0x7fbb49083390"/>
        <function-ref name="headHI" scoped="" ref="0x7fbb49071260"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7fbb49070550"/>
        <function-ref name="sizeLO_Q1" scoped="" ref="0x7fbb4906dc10"/>
        <function-ref name="head" scoped="" ref="0x7fbb49072ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPowerControl" ref="0x7fbb4906a170" loc="63:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPowerControl" scoped="" ref="0x7fbb4906a170"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb4906a4f0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb4906a680"/>
        <function-ref name="start" scoped="" ref="0x7fbb4906a810"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4906a9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7fbb4908e1d0" loc="53:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7fbb4908e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7fbb4908e550"/>
        <function-ref name="rand32" scoped="" ref="0x7fbb4908e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ACK" ref="0x7fbb49062630" loc="59:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ACK" scoped="" ref="0x7fbb49062630"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb490629b0"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb49062b40"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb49062cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyDataSend" ref="0x7fbb49068c30" loc="66:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyDataSend" scoped="" ref="0x7fbb49068c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb49066020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb490661b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb49066340"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb490664d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb49066660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyNotificationReceive" ref="0x7fbb49068570" loc="65:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyNotificationReceive" scoped="" ref="0x7fbb49068570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb490688f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncInfo" ref="0x7fbb4903c990" loc="73:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7fbb4903c990"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7fbb4903cd10"/>
        <function-ref name="getRootID" scoped="" ref="0x7fbb49041020"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7fbb490411b0"/>
        <function-ref name="getOffset" scoped="" ref="0x7fbb49041340"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7fbb490414d0"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7fbb49041660"/>
        <function-ref name="getSkew" scoped="" ref="0x7fbb490417f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb490bd570" loc="32:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb490bd570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb490bd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacSend" ref="0x7fbb490bc8e0" loc="37:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7fbb490bc8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb490bcc60"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb490bcdf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb490bb020"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb490bb1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb490bb340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncMode" ref="0x7fbb49038c60" loc="74:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7fbb49038c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb49040210"/>
        <function-ref name="getMode" scoped="" ref="0x7fbb490403a0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbb49040530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb490ac9a0" loc="47:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb490ac9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb490acd20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb490b8020"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb490b81b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb490b8340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb490b84d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb490b8660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb490b87f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb490b8e30"/>
        <function-ref name="set" scoped="" ref="0x7fbb490b8980"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb490b8b10"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb490b8ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FrameConfiguration" ref="0x7fbb49090330" loc="57:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb49090330"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7fbb490906b0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7fbb49090840"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7fbb490909d0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7fbb49090b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FaultClearTimer" ref="0x7fbb49046850" loc="72:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FaultClearTimer" scoped="" ref="0x7fbb49046850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb49044cf0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb4904f300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb490440d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb4904fc00"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb49043660"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb490431e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb4904f780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb49050480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb490446e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb49050950"/>
        <function-ref name="stop" scoped="" ref="0x7fbb49050e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbb4909a4e0" loc="51:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb4909a4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb4909a860"/>
        <function-ref name="source" scoped="" ref="0x7fbb4909a9f0"/>
        <function-ref name="address" scoped="" ref="0x7fbb4909ab80"/>
        <function-ref name="destination" scoped="" ref="0x7fbb4909ad10"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb490ab020"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb490ab1b0"/>
        <function-ref name="type" scoped="" ref="0x7fbb490ab340"/>
        <function-ref name="setType" scoped="" ref="0x7fbb490ab4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb490ab660"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb490ab7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb490ab980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyDataReceive" ref="0x7fbb490669d0" loc="67:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyDataReceive" scoped="" ref="0x7fbb490669d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb49066d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyNotificationSend" ref="0x7fbb490586c0" loc="64:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyNotificationSend" scoped="" ref="0x7fbb490586c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb49058a40"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb49058bd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb49058d60"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb49068020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb490681b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SlotterControl" ref="0x7fbb49084130" loc="56:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7fbb49084130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb49090020"/>
        <function-ref name="getSlot" scoped="" ref="0x7fbb49084740"/>
        <function-ref name="synchronize" scoped="" ref="0x7fbb490848d0"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7fbb49084a60"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb49084bf0"/>
        <function-ref name="getRemaining" scoped="" ref="0x7fbb49084d80"/>
        <function-ref name="stop" scoped="" ref="0x7fbb490845b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Slotter" ref="0x7fbb48f38e40" loc="32:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7fbb48f38e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7fbb48f351e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fbb48f30980" loc="35:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fbb48f30980"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb48f30d00"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48f32020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7fbb48f344d0" loc="34:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb48f344d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7fbb48f34850"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7fbb48f349e0"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7fbb48f34b70"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7fbb48f34d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlotterControl" ref="0x7fbb48f354c0" loc="33:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7fbb48f354c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48f341c0"/>
        <function-ref name="getSlot" scoped="" ref="0x7fbb48f359d0"/>
        <function-ref name="synchronize" scoped="" ref="0x7fbb48f35b60"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7fbb48f35cf0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48f35e80"/>
        <function-ref name="getRemaining" scoped="" ref="0x7fbb48f34030"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48f35840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fbb48f2e3a0" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48f2e3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f2e720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fbb48f32b20" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb48f32b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb48f2e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7fbb48f29d50" loc="52:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7fbb48f29d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f28100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48f2bb50" loc="46:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48f2bb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f2a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7fbb48f29020" loc="50:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fbb48f29020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7fbb48f293a0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7fbb48f29530"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7fbb48f296c0"/>
        <function-ref name="actualMicro" scoped="" ref="0x7fbb48f29850"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7fbb48f299e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7fbb48f1f7a0" loc="45:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7fbb48f1f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f1fb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48f1f0c0" loc="44:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48f1f0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f1f440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7fbb48f1e020" loc="46:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7fbb48f1e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f1e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7fbb48f19110" loc="41:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7fbb48f19110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f19490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7fbb48f219d0" loc="40:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48f219d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f21d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7fbb48f15cd0" loc="45:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7fbb48f15cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f140a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7fbb48f0fad0" loc="44:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7fbb48f0fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f0fe50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48f15020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48f151b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48f15340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48f154d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48f15660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48f157f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48f15980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7fbb48f16530" loc="43:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48f16530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48f168b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7fbb48ececb0" loc="98:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7fbb48ececb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ecd610"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ecd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ecd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ecdac0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ecdc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ecdde0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ecc020"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ecc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7fbb48eea4e0" loc="72:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7fbb48eea4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48eea860"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48eea9f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eeab80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eead10"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ee9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ee91b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ee9340"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ee94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7fbb48edd350" loc="83:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7fbb48edd350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48edd6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48edd860"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48edd9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eddb80"/>
        <function-ref name="get" scoped="" ref="0x7fbb48eddd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48edc020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48edc1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48edc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7fbb48ed4cb0" loc="92:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7fbb48ed4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed3230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed33c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ed3550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ed36e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ed3870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ed3a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ed3b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x7fbb48ec6060" loc="103:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x7fbb48ec6060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ec63e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ec6570"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ec6700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ec6890"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ec6a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ec6bb0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ec6d40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ec5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7fbb48f02670" loc="50:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7fbb48f02670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f029f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48f02b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48f02d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48f01020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48f011b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48f01340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48f014d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48f01660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7fbb48ed6670" loc="90:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7fbb48ed6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed69f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed6b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed6d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ed5020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ed51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ed5340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ed54d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ed5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7fbb48effcb0" loc="53:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7fbb48effcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48efe0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48efe230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48efe3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48efe550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48efe6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48efe870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48efea00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48efeb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7fbb48ef3cb0" loc="64:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7fbb48ef3cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ef20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef2230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef23c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef2550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef26e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ef2870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ef2a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ef2b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7fbb48ee7e40" loc="75:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7fbb48ee7e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ee61e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ee6370"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ee6500"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ee6690"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ee6820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ee69b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ee6b40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ee6cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7fbb48edacb0" loc="86:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7fbb48edacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed9230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed93c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ed9550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ed96e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ed9870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ed9a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ed9b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7fbb48f08800" loc="45:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7fbb48f08800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f08b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48f08d10"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48f07020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48f071b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48f07340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48f074d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48f07660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48f077f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7fbb48efb670" loc="56:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7fbb48efb670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48efb9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48efbb80"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48efbd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48efa020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48efa1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48efa340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48efa4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48efa660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7fbb48eef670" loc="67:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7fbb48eef670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48eef9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48eefb80"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eefd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eee020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48eee1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48eee340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eee4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48eee660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7fbb48ee2670" loc="78:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7fbb48ee2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ee29f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ee2b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ee2d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ee1020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ee11b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ee1340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ee14d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ee1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7fbb48ed0670" loc="95:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7fbb48ed0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed09f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed0b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed0d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ecf020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ecf1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ecf340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ecf4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ecf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7fbb48ecab20" loc="101:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7fbb48ecab20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ec9020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ec91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ec9340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ec94d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ec9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ec97f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ec9980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ec9b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7fbb48ee0cb0" loc="81:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7fbb48ee0cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48edf0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48edf230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48edf3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48edf550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48edf6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48edf870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48edfa00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48edfb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7fbb48f04060" loc="48:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7fbb48f04060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f043e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48f04570"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48f04700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48f04890"/>
        <function-ref name="get" scoped="" ref="0x7fbb48f04a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48f04bb0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48f04d40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48f03020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7fbb48ef7020" loc="59:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7fbb48ef7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ef73a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef7530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef76c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef7850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef79e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ef7b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ef7d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ef6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7fbb48ecc4e0" loc="99:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7fbb48ecc4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ecc860"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ecc9f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eccb80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eccd10"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ecb020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ecb1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ecb340"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ecb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7fbb48ef5670" loc="62:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7fbb48ef5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ef59f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef5b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef5d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef4020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ef4340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ef44d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ef4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7fbb48ee9800" loc="73:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7fbb48ee9800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ee9b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ee9d10"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ee8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ee81b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ee8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ee84d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ee8660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ee87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7fbb48edc670" loc="84:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7fbb48edc670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48edc9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48edcb80"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48edcd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48edb020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48edb1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48edb340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48edb4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48edb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7fbb48ed2020" loc="93:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7fbb48ed2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed23a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed2530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed26c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ed2850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ed29e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ed2b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ed2d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ed1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7fbb48f01990" loc="51:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7fbb48f01990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f01d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48eff020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eff1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eff340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48eff4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48eff660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eff7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48eff980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7fbb48efd020" loc="54:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7fbb48efd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48efd3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48efd530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48efd6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48efd850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48efd9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48efdb70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48efdd00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48efc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7fbb48ef1020" loc="65:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7fbb48ef1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ef13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef1530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef16c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef1850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef19e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ef1b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ef1d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ef0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7fbb48ee5060" loc="76:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7fbb48ee5060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ee53e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ee5570"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ee5700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ee5890"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ee5a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ee5bb0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ee5d40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ee4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7fbb48ed8020" loc="87:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7fbb48ed8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed8530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed86c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ed8850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ed89e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ed8b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ed8d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ed7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7fbb48f07b20" loc="46:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7fbb48f07b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f06020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48f061b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48f06340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48f064d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48f06660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48f067f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48f06980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48f06b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7fbb48efa990" loc="57:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7fbb48efa990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48efae10"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef9020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef9340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ef9660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ef97f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ef9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7fbb48eee990" loc="68:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7fbb48eee990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48eeed10"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48eed020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eed1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eed340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48eed4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48eed660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eed7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48eed980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7fbb48ecf990" loc="96:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7fbb48ecf990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ecfd10"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ece020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ece1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ece340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ece4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ece660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ece7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ece980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7fbb48eeb020" loc="71:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7fbb48eeb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48eeb5a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48eeb730"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eeb8c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eeba50"/>
        <function-ref name="get" scoped="" ref="0x7fbb48eebbe0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48eebd70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eea020"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48eea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7fbb48ede020" loc="82:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7fbb48ede020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ede3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ede530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ede6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ede850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ede9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48edeb70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eded00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48edd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7fbb48ed5990" loc="91:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7fbb48ed5990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed5d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed4020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ed4340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ed44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ed4660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ed47f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ed4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7fbb48ec9e40" loc="102:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7fbb48ec9e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ec81e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ec8370"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ec8500"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ec8690"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ec8820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ec89b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ec8b40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ec8cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7fbb48f03350" loc="49:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7fbb48f03350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f036d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48f03860"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48f039f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48f03b80"/>
        <function-ref name="get" scoped="" ref="0x7fbb48f03d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48f02020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48f021b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48f02340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7fbb48ef6350" loc="60:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7fbb48ef6350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ef66d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef6860"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef69f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef6b80"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef6d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ef5020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ef51b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ef5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7fbb48ed7350" loc="89:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7fbb48ed7350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed76d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed7860"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed79f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ed7b80"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ed7d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ed6020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ed61b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ed6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7fbb48ef4990" loc="63:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7fbb48ef4990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ef4d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef3020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef3340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ef3660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ef37f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ef3980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7fbb48ee8b20" loc="74:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7fbb48ee8b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ee7020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ee71b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ee7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ee74d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ee7660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ee77f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ee7980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ee7b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7fbb48edb990" loc="85:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7fbb48edb990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48edbd10"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48eda020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eda1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eda340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48eda4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48eda660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eda7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48eda980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7fbb48ed1350" loc="94:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7fbb48ed1350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ed16d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ed1860"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ed19f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ed1b80"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ed1d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ed0020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ed01b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ed0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7fbb48f17530" loc="44:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7fbb48f17530"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f178b0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48f17a40"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48f17bd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48f17d60"/>
        <function-ref name="get" scoped="" ref="0x7fbb48f08020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48f081b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48f08340"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48f084d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7fbb48efc350" loc="55:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7fbb48efc350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48efc6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48efc860"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48efc9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48efcb80"/>
        <function-ref name="get" scoped="" ref="0x7fbb48efcd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48efb020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48efb1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48efb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7fbb48ef0350" loc="66:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7fbb48ef0350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ef06d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef0860"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef09f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef0b80"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef0d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48eef020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eef1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48eef340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7fbb48ee4350" loc="77:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7fbb48ee4350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ee46d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ee4860"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ee49f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ee4b80"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ee4d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ee2020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ee21b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ee2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7fbb48ecb800" loc="100:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7fbb48ecb800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ecbb80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ecbd10"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eca020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eca1b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48eca340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48eca4d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eca660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48eca7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7fbb48ee1990" loc="80:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7fbb48ee1990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ee1d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ee0020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ee01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ee0340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ee04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ee0660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ee07f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ee0980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7fbb48eedcb0" loc="69:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7fbb48eedcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48eec0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48eec230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48eec3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48eec550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48eec6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48eec870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48eeca00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48eecb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7fbb48f06e40" loc="47:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7fbb48f06e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48f051e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48f05370"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48f05500"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48f05690"/>
        <function-ref name="get" scoped="" ref="0x7fbb48f05820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48f059b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48f05b40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48f05cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7fbb48ef9cb0" loc="58:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7fbb48ef9cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48ef80a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48ef8230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48ef83c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48ef8550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ef86e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ef8870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ef8a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ef8b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fbb48e7ba80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fbb48e7ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e7be00"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e79020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e791b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e79340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e794d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e79660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e797f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e79980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fbb48e76020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fbb48e76020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e763a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e76530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e766c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e76850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e769e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e76b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e76d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e75020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fbb48e7d6b0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fbb48e7d6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e7da30"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e7dbc0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e7dd50"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e7c020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e7c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e7c340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e7c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e7c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fbb48e79c10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fbb48e79c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e78020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e781b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e78340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e784d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e78660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e787f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e78980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e78b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fbb48e752b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fbb48e752b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e75630"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e757c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e75950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e75ae0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e75c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e75e00"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e74020"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e741b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fbb48e7c8f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fbb48e7c8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e7cc70"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e7ce00"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e7b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e7b1b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e7b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e7b4d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e7b660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e7b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fbb48e78da0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fbb48e78da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e77180"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e77310"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e774a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e77630"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e777c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e77950"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e77ae0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e77c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fbb48e74440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fbb48e74440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e747c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e74950"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e74ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e74c70"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e74e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e73020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e731b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e73340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb47810a60" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb47810a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47810de0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4780f020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4780f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4780f340"/>
        <function-ref name="get" scoped="" ref="0x7fbb4780f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4780f660"/>
        <function-ref name="set" scoped="" ref="0x7fbb4780f7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4780f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4780de20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4780de20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4780c1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4780c350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4780c4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4780c670"/>
        <function-ref name="get" scoped="" ref="0x7fbb4780c800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4780c990"/>
        <function-ref name="set" scoped="" ref="0x7fbb4780cb20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4780ccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb478090a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb478090a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47809420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb478095b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47809740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb478098d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47809a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47809bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47809d80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47808020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb478063f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb478063f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47806770"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47806900"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47806a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47806c20"/>
        <function-ref name="get" scoped="" ref="0x7fbb47806db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47805020"/>
        <function-ref name="set" scoped="" ref="0x7fbb478051b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47805340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb478036d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb478036d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47803a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47803be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47803d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47802020"/>
        <function-ref name="get" scoped="" ref="0x7fbb478021b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47802340"/>
        <function-ref name="set" scoped="" ref="0x7fbb478024d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47802660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb478009b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb478009b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47800d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb477ff020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477ff1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb477ff340"/>
        <function-ref name="get" scoped="" ref="0x7fbb477ff4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb477ff660"/>
        <function-ref name="set" scoped="" ref="0x7fbb477ff7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb477ff980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477fde20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477fde20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb477fb1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb477fb350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477fb4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb477fb670"/>
        <function-ref name="get" scoped="" ref="0x7fbb477fb800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb477fb990"/>
        <function-ref name="set" scoped="" ref="0x7fbb477fbb20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb477fbcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477f80a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477f80a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb477f8420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb477f85b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477f8740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb477f88d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb477f8a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb477f8bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb477f8d80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb477f7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fbb48e6bda0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fbb48e6bda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e6a180"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e6a310"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e6a4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e6a630"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e6a7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e6a950"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e6aae0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e6ac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fbb48e67440" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fbb48e67440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e677c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e67950"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e67ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e67c70"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e67e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e66020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e661b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e66340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fbb48e6da20" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fbb48e6da20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e6dda0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e6c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e6c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e6c340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e6c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e6c660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e6c7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e6c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fbb48e69020" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fbb48e69020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e693a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e69530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e696c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e69850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e699e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e69b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e69d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e68020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fbb48e665d0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fbb48e665d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e66950"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e66ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e66c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e66e00"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e65020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e651b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e65340"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e654d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fbb48e6cc10" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fbb48e6cc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e6b020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e6b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e6b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e6b4d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e6b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e6b7f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e6b980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e6bb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fbb48e682b0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fbb48e682b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e68630"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e687c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e68950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e68ae0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e68c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e68e00"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e67020"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e671b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fbb48e65760" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fbb48e65760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e65ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e65c70"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e65e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e64020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e641b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e64340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e644d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e64660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477a3c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477a3c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb477a20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb477a2230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477a23c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb477a2550"/>
        <function-ref name="get" scoped="" ref="0x7fbb477a26e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb477a2870"/>
        <function-ref name="set" scoped="" ref="0x7fbb477a2a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb477a2b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477a0e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477a0e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4779f1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4779f350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4779f4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4779f670"/>
        <function-ref name="get" scoped="" ref="0x7fbb4779f800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4779f990"/>
        <function-ref name="set" scoped="" ref="0x7fbb4779fb20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4779fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4779c0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4779c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4779c420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4779c5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4779c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4779c8d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4779ca60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4779cbf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4779cd80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4779b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477993f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477993f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47799770"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47799900"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47799a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47799c20"/>
        <function-ref name="get" scoped="" ref="0x7fbb47799db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47798020"/>
        <function-ref name="set" scoped="" ref="0x7fbb477981b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47798340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477966d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477966d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47796a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47796be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47796d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47795020"/>
        <function-ref name="get" scoped="" ref="0x7fbb477951b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47795340"/>
        <function-ref name="set" scoped="" ref="0x7fbb477954d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47795660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477939b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477939b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47793d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47792020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477921b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47792340"/>
        <function-ref name="get" scoped="" ref="0x7fbb477924d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47792660"/>
        <function-ref name="set" scoped="" ref="0x7fbb477927f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47792980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb47790e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb47790e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4778e1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4778e350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4778e4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4778e670"/>
        <function-ref name="get" scoped="" ref="0x7fbb4778e800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4778e990"/>
        <function-ref name="set" scoped="" ref="0x7fbb4778eb20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4778ecb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4778b0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4778b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4778b420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4778b5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4778b740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4778b8d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4778ba60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4778bbf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4778bd80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4778a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fbb48e5b020" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fbb48e5b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e5b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e5b530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e5b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e5b850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e5b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e5bb70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e5bd00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e5a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fbb48e585d0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fbb48e585d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e58950"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e58ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e58c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e58e00"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e57020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e571b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e57340"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e574d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fbb48e5ed30" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fbb48e5ed30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e5d0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e5d270"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e5d400"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e5d590"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e5d720"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e5d8b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e5da40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e5dbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fbb48e5a2b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fbb48e5a2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e5a630"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e5a7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e5a950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e5aae0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e5ac70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e5ae00"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e59020"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e591b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fbb48e57760" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fbb48e57760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e57ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e57c70"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e57e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e56020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e561b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e56340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e564d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e56660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fbb48e5de60" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fbb48e5de60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e5c210"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e5c3a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e5c530"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e5c6c0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e5c850"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e5c9e0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e5cb70"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e5cd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fbb48e59440" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fbb48e59440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e597c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e59950"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e59ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e59c70"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e59e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e58020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e581b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e58340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fbb48e568f0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fbb48e568f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e56c70"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e56e00"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e55020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e551b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e55340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e554d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e55660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e557f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb47738c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb47738c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb477370a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47737230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477373c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47737550"/>
        <function-ref name="get" scoped="" ref="0x7fbb477376e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47737870"/>
        <function-ref name="set" scoped="" ref="0x7fbb47737a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47737b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb47735e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb47735e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb477341c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47734350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477344e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47734670"/>
        <function-ref name="get" scoped="" ref="0x7fbb47734800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47734990"/>
        <function-ref name="set" scoped="" ref="0x7fbb47734b20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47734cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477310a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477310a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47731420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb477315b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47731740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb477318d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47731a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47731bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47731d80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47730020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4772e3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4772e3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4772e770"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4772e900"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4772ea90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4772ec20"/>
        <function-ref name="get" scoped="" ref="0x7fbb4772edb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4772d020"/>
        <function-ref name="set" scoped="" ref="0x7fbb4772d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4772d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4772b6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4772b6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4772ba50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4772bbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4772bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4772a020"/>
        <function-ref name="get" scoped="" ref="0x7fbb4772a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4772a340"/>
        <function-ref name="set" scoped="" ref="0x7fbb4772a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4772a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477289b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477289b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47728d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47727020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477271b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47727340"/>
        <function-ref name="get" scoped="" ref="0x7fbb477274d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47727660"/>
        <function-ref name="set" scoped="" ref="0x7fbb477277f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47727980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb47725e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb47725e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb477241c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47724350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb477244e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47724670"/>
        <function-ref name="get" scoped="" ref="0x7fbb47724800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47724990"/>
        <function-ref name="set" scoped="" ref="0x7fbb47724b20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47724cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb477210a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb477210a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47721420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb477215b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47721740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb477218d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47721a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47721bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47721d80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4771f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fbb48e4c440" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fbb48e4c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e4c7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e4c950"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e4cae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e4cc70"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e4ce00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e4b020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e4b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e4b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fbb48e498f0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fbb48e498f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e49c70"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e49e00"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e47020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e471b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e47340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e474d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e47660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e477f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fbb48e4e020" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fbb48e4e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e4e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e4e530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e4e6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e4e850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e4e9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e4eb70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e4ed00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e4d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fbb48e4b5d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fbb48e4b5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e4b950"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e4bae0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e4bc70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e4be00"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e4a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e4a1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e4a340"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e4a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fbb48e47a80" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fbb48e47a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e47e00"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e46020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e461b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e46340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e464d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e46660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e467f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e46980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fbb48e4d2b0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fbb48e4d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e4d630"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e4d7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e4d950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e4dae0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e4dc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e4de00"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e4c020"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e4c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fbb48e4a760" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fbb48e4a760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e4aae0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e4ac70"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e4ae00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e49020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e491b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e49340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e494d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e49660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fbb48e46c10" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fbb48e46c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e45020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e451b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e45340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e454d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e45660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e457f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e45980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e45b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476cdc90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476cdc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476cc0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb476cc230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476cc3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb476cc550"/>
        <function-ref name="get" scoped="" ref="0x7fbb476cc6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb476cc870"/>
        <function-ref name="set" scoped="" ref="0x7fbb476cca00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb476ccb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476cae20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476cae20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476c91c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb476c9350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476c94e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb476c9670"/>
        <function-ref name="get" scoped="" ref="0x7fbb476c9800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb476c9990"/>
        <function-ref name="set" scoped="" ref="0x7fbb476c9b20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb476c9cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476c60a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476c60a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476c6420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb476c65b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476c6740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb476c68d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb476c6a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb476c6bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb476c6d80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb476c5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476c33f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476c33f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476c3770"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb476c3900"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476c3a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb476c3c20"/>
        <function-ref name="get" scoped="" ref="0x7fbb476c3db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb476c2020"/>
        <function-ref name="set" scoped="" ref="0x7fbb476c21b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb476c2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476c06d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476c06d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476c0a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb476c0be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476c0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb476bf020"/>
        <function-ref name="get" scoped="" ref="0x7fbb476bf1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb476bf340"/>
        <function-ref name="set" scoped="" ref="0x7fbb476bf4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb476bf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476bd9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476bd9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476bdd30"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb476bc020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476bc1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb476bc340"/>
        <function-ref name="get" scoped="" ref="0x7fbb476bc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb476bc660"/>
        <function-ref name="set" scoped="" ref="0x7fbb476bc7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb476bc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476bae20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476bae20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476b91c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb476b9350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476b94e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb476b9670"/>
        <function-ref name="get" scoped="" ref="0x7fbb476b9800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb476b9990"/>
        <function-ref name="set" scoped="" ref="0x7fbb476b9b20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb476b9cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476b60a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476b60a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476b6420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb476b65b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476b6740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb476b68d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb476b6a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb476b6bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb476b6d80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb476b4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fbb48e3d760" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fbb48e3d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e3dae0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e3dc70"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e3de00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e3b020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e3b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e3b340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e3b4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e3b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fbb48e39c10" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fbb48e39c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e38020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e381b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e38340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e384d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e38660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e387f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e38980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e38b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fbb48e3f3f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fbb48e3f3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e3f770"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e3f900"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e3fa90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e3fc20"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e3fdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e3e020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e3e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e3e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fbb48e3b8f0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fbb48e3b8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e3bc70"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e3be00"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e3a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e3a1b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e3a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e3a4d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e3a660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e3a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fbb48e38da0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fbb48e38da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e37180"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e37310"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e374a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e37630"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e377c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e37950"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e37ae0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e37c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fbb48e3e5d0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fbb48e3e5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e3e950"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e3eae0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e3ec70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e3ee00"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e3d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e3d1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e3d340"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e3d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fbb48e3aa80" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fbb48e3aa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e3ae00"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e39020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e391b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e39340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e394d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e39660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e397f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e39980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fbb48e36020" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fbb48e36020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e363a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e36530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e366c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e36850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e369e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e36b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e36d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e35020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb47662c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb47662c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb476610a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47661230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476613c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47661550"/>
        <function-ref name="get" scoped="" ref="0x7fbb476616e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47661870"/>
        <function-ref name="set" scoped="" ref="0x7fbb47661a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47661b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4765fe20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4765fe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4765e1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4765e350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4765e4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4765e670"/>
        <function-ref name="get" scoped="" ref="0x7fbb4765e800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4765e990"/>
        <function-ref name="set" scoped="" ref="0x7fbb4765eb20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4765ecb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4765b0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4765b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4765b420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4765b5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4765b740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4765b8d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4765ba60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4765bbf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4765bd80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4765a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476583f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476583f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47658770"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47658900"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47658a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47658c20"/>
        <function-ref name="get" scoped="" ref="0x7fbb47658db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47657020"/>
        <function-ref name="set" scoped="" ref="0x7fbb476571b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47657340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476556d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476556d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47655a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47655be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb47655d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47654020"/>
        <function-ref name="get" scoped="" ref="0x7fbb476541b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47654340"/>
        <function-ref name="set" scoped="" ref="0x7fbb476544d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47654660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb476529b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb476529b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb47652d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb47651020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb476511b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb47651340"/>
        <function-ref name="get" scoped="" ref="0x7fbb476514d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb47651660"/>
        <function-ref name="set" scoped="" ref="0x7fbb476517f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb47651980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4764fe20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4764fe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4764e1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4764e350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4764e4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4764e670"/>
        <function-ref name="get" scoped="" ref="0x7fbb4764e800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4764e990"/>
        <function-ref name="set" scoped="" ref="0x7fbb4764eb20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4764ecb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb4764b0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb4764b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4764b420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4764b5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4764b740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4764b8d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4764ba60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4764bbf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4764bd80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4764a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fbb48e2da80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fbb48e2da80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e2de00"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e2c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e2c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e2c340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e2c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e2c660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e2c7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e2c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fbb48e29020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fbb48e29020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e293a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e29530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e296c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e29850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e299e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e29b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e29d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e28020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fbb48e2f7a0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fbb48e2f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e2fb20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e2fcb0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e2fe40"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e2e020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e2e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e2e340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e2e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e2e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fbb48e2cc10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fbb48e2cc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e2b020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e2b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e2b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e2b4d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e2b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e2b7f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e2b980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e2bb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fbb48e282b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fbb48e282b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e28630"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e287c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e28950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e28ae0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e28c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e28e00"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e27020"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e271b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fbb48e2e8f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fbb48e2e8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e2ec70"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e2ee00"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e2d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e2d1b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e2d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e2d4d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e2d660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e2d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fbb48e2bda0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fbb48e2bda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e2a180"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e2a310"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e2a4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e2a630"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e2a7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e2a950"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e2aae0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e2ac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fbb48e27440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fbb48e27440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e277c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e27950"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e27ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e27c70"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e27e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e26020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e261b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e26340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb475eec90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb475eec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb475ed0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb475ed230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb475ed3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb475ed550"/>
        <function-ref name="get" scoped="" ref="0x7fbb475ed6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb475ed870"/>
        <function-ref name="set" scoped="" ref="0x7fbb475eda00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb475edb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb475ebe20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb475ebe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb475ea1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb475ea350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb475ea4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb475ea670"/>
        <function-ref name="get" scoped="" ref="0x7fbb475ea800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb475ea990"/>
        <function-ref name="set" scoped="" ref="0x7fbb475eab20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb475eacb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb475e70a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb475e70a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb475e7420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb475e75b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb475e7740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb475e78d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb475e7a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb475e7bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb475e7d80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb475e6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb475e43f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb475e43f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb475e4770"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb475e4900"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb475e4a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb475e4c20"/>
        <function-ref name="get" scoped="" ref="0x7fbb475e4db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb475e3020"/>
        <function-ref name="set" scoped="" ref="0x7fbb475e31b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb475e3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb475e16d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb475e16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb475e1a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb475e1be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb475e1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb475e0020"/>
        <function-ref name="get" scoped="" ref="0x7fbb475e01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb475e0340"/>
        <function-ref name="set" scoped="" ref="0x7fbb475e04d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb475e0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb475de9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb475de9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb475ded30"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb475dd020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb475dd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb475dd340"/>
        <function-ref name="get" scoped="" ref="0x7fbb475dd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb475dd660"/>
        <function-ref name="set" scoped="" ref="0x7fbb475dd7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb475dd980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb475dbe20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb475dbe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb475da1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb475da350"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb475da4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb475da670"/>
        <function-ref name="get" scoped="" ref="0x7fbb475da800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb475da990"/>
        <function-ref name="set" scoped="" ref="0x7fbb475dab20"/>
        <function-ref name="clr" scoped="" ref="0x7fbb475dacb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb475d70a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb475d70a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb475d7420"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb475d75b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb475d7740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb475d78d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb475d7a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb475d7bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb475d7d80"/>
        <function-ref name="clr" scoped="" ref="0x7fbb475d6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48e1fa20" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48e1fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e1fda0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e08020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e081b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e08340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e084d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e08660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e087f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e08980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48e046d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48e046d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48e04a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48e04be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48e04d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48e03020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48e031b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48e03340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48e034d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48e03660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48dfe160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48dfe160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48dfe4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48dfe670"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48dfe800"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48dfe990"/>
        <function-ref name="get" scoped="" ref="0x7fbb48dfeb20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48dfecb0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48dfee40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48dfd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48dfac90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48dfac90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48df80a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48df8230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48df83c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48df8550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48df86e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48df8870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48df8a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48df8b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48df46d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48df46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48df4a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48df4be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48df4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48df3020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48df31b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48df3340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48df34d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48df3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48dee160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48dee160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48dee4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48dee670"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48dee800"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48dee990"/>
        <function-ref name="get" scoped="" ref="0x7fbb48deeb20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48deecb0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48deee40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ded020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48deac90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48deac90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48de90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48de9230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48de93c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48de9550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48de96e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48de9870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48de9a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48de9b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48de46d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48de46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48de4a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48de4be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48de4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48de3020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48de31b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48de3340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48de34d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48de3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48dde160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48dde160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48dde4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48dde670"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48dde800"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48dde990"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ddeb20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48ddecb0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ddee40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48ddd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48ddac90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48ddac90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48dd90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48dd9230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48dd93c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48dd9550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48dd96e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48dd9870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48dd9a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48dd9b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48dd46d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48dd46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48dd4a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48dd4be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48dd4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48dd3020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48dd31b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48dd3340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48dd34d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48dd3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48dce160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48dce160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48dce4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48dce670"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48dce800"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48dce990"/>
        <function-ref name="get" scoped="" ref="0x7fbb48dceb20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48dcecb0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48dcee40"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48dcd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48dcac90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48dcac90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48dc90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48dc9230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48dc93c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48dc9550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48dc96e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48dc9870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48dc9a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48dc9b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbb48dc46d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fbb48dc46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48dc4a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48dc4be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48dc4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48dc3020"/>
        <function-ref name="get" scoped="" ref="0x7fbb48dc31b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48dc3340"/>
        <function-ref name="set" scoped="" ref="0x7fbb48dc34d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48dc3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48d86020" loc="61:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48d86020"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7fbb493083a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7fbb493083a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48d863a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7fbb48d86690" loc="62:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fbb48d86690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7fbb48d86a10"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7fbb48d86ba0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7fbb48d86d30"/>
        <function-ref name="actualMicro" scoped="" ref="0x7fbb48d85020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7fbb48d851b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fbb48d65720" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48d65720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48d65aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fbb48f2cdb0" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb48f2cdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb48d66180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7fbb48d65020" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48d65020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48d653a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7fbb48d66470" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7fbb48d66470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48d667f0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fbb48d66980"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fbb48d66b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fbb492bfbd0" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7fbb492bfbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb4933f020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb4933f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fbb492c99d0" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7fbb492c99d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb492c9d50"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fbb49d1f020"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fbb49d1f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fbb491f3d30" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7fbb491f3d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb491f20e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb491f2270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7fbb491ed2c0" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7fbb491ed2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fbb491ed640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fbb491ed7d0"/>
        <function-ref name="sleep" scoped="" ref="0x7fbb491ed960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fbb491f4e40" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7fbb491f4e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb491f31e0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fbb491f3370"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fbb491f3500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7fbb491cf330" loc="86:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fbb491cf330"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fbb491cf6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7fbb4920a3b0" loc="82:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7fbb4920a3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fbb4920a730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fbb4920a8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7fbb4920aa50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7fbb491d1bc0" loc="83:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7fbb491d1bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fbb491d3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fbb48f31890" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb48f31890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb48f31c10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb48f31da0"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb48d59020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb48d591b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb48d59340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d594d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb48d59660"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb48d59ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d597f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb48d59980"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb48d59b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7fbb48d54a00" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7fbb48d54a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48d54d80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48d53020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48d531b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48d53340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d534d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48d53660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d537f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48d53980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48d58c30" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48d58c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48d55020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7fbb48d53ca0" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7fbb48d53ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48d520a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48d52230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48d523c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48d52550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d526e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48d52870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d52a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48d52b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fbb48d552a0" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb48d552a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb48d55620"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb48d557b0"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb48d55940"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb48d55ad0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb48d55c60"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d55df0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb48d54020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb48d54660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d541b0"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb48d54340"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb48d544d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7fbb48d51020" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7fbb48d51020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48d513a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48d51530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48d516c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48d51850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d519e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48d51b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d51d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48d50020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7fbb48d56a00" loc="44:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7fbb48d56a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48d56d80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48d34020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48d341b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48d34340"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d344d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48d34660"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d347f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48d34980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7fbb48d34ce0" loc="45:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7fbb48d34ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48d330a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48d33230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48d333c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48d33550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d336e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48d33870"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d33a00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48d33b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7fbb48d312e0" loc="47:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48d312e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48d31660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7fbb48d32020" loc="46:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7fbb48d32020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48d323a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48d32530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48d326c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48d32850"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d329e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb48d32b70"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d32d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48d31020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Slotter" ref="0x7fbb48d29ac0" loc="34:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7fbb48d29ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7fbb48d29e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbb48d1ba90" loc="42:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb48d1ba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb48d1be10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fbb48d26290" loc="39:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb48d26290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbb4923c180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48d1db30"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48d25aa0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb48d1d4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb48d1d020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48d1c020"/>
        <function-ref name="start" scoped="" ref="0x7fbb48d250d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48d255e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48d2cb30" loc="32:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48d2cb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48d29020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb48d1c440" loc="40:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb48d1c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb48d1c7c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb48d1c950"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb48d1cae0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb48d1cc70"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb48d1ce00"/>
        <function-ref name="get" scoped="" ref="0x7fbb48d1b020"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb48d1b1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb48d1b7f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48d1b340"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb48d1b4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb48d1b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fbb48d29310" loc="33:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fbb48d29310"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb48d29690"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48d29820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7fbb48d27180" loc="36:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb48d27180"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7fbb48d27500"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7fbb48d27690"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7fbb48d27820"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7fbb48d279b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlotterControl" ref="0x7fbb48d28150" loc="35:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7fbb48d28150"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48d28e30"/>
        <function-ref name="getSlot" scoped="" ref="0x7fbb48d28660"/>
        <function-ref name="synchronize" scoped="" ref="0x7fbb48d287f0"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7fbb48d28980"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48d28b10"/>
        <function-ref name="getRemaining" scoped="" ref="0x7fbb48d28ca0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48d284d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb48b4c4e0" loc="28:../../tos/platforms/mica/Alarm32khz32C.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb48b4c4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbb4923c180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48b4adb0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48b4bda0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb48b4a760"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb48b4a2a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48b492a0"/>
        <function-ref name="start" scoped="" ref="0x7fbb48b4b3d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48b4b8e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb4750b7c0" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb4750b7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb47508020"/>
        <function-ref name="fired" scoped="" ref="0x7fbb47509020"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb475099a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb475094e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb475084e0"/>
        <function-ref name="start" scoped="" ref="0x7fbb4750a620"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4750ab30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fbb48cd2d80" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb48cd2d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7fbb48cda180"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fbb48cda310"/>
        <function-ref name="getControlA" scoped="" ref="0x7fbb48cda4a0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fbb48cda630"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fbb48cda7c0"/>
        <function-ref name="setControlB" scoped="" ref="0x7fbb48cda950"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fbb48cdaae0"/>
        <function-ref name="getControlB" scoped="" ref="0x7fbb48cdac70"/>
        <function-ref name="setControlC" scoped="" ref="0x7fbb48cdae00"/>
        <function-ref name="setControlA" scoped="" ref="0x7fbb48cd9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbb48cc9bf0" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fbb48cc9bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fbb48cc6020"/>
        <function-ref name="test" scoped="" ref="0x7fbb48cc7630"/>
        <function-ref name="get" scoped="" ref="0x7fbb48cd08a0"/>
        <function-ref name="captured" scoped="" ref="0x7fbb48ccf2a0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48ccf7b0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48cc7af0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48cd0d60"/>
        <function-ref name="start" scoped="" ref="0x7fbb48ccfc70"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48cc7170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbb48cc5650" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fbb48cc5650"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb48cbc110"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48cc4da0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48cc43d0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48cbd2a0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48cbc5d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48cc4890"/>
        <function-ref name="start" scoped="" ref="0x7fbb48cbd760"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48cbdc20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb48cdea90" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb48cdea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb48cdce60"/>
        <function-ref name="test" scoped="" ref="0x7fbb48cdc4e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ce76f0"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb48cdb350"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb48cdb860"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48ce65d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48ce6110"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48cdc9a0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ce7bb0"/>
        <function-ref name="start" scoped="" ref="0x7fbb48ce6a90"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48cdc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fbb48cb2020" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb48cb2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7fbb48cb23a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fbb48cb2530"/>
        <function-ref name="getControlA" scoped="" ref="0x7fbb48cb26c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fbb48cb2850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fbb48cb29e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7fbb48cb2b70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fbb48cb2d00"/>
        <function-ref name="getControlB" scoped="" ref="0x7fbb48cb1020"/>
        <function-ref name="setControlC" scoped="" ref="0x7fbb48cb11b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7fbb48cb1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7fbb48cac5a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7fbb48cac5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb48ca8020"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48cabc10"/>
        <function-ref name="get" scoped="" ref="0x7fbb48cab240"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48caa110"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48ca84e0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48cab700"/>
        <function-ref name="start" scoped="" ref="0x7fbb48caa5d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48caaa90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbb48cb1850" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fbb48cb1850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fbb48caee60"/>
        <function-ref name="test" scoped="" ref="0x7fbb48cae4e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48cb04c0"/>
        <function-ref name="captured" scoped="" ref="0x7fbb48caf020"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48caf530"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48cae9a0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48cb0980"/>
        <function-ref name="start" scoped="" ref="0x7fbb48caf9f0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48cae020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7fbb48ca8ba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7fbb48ca8ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb48ca5550"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48ca61f0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ca77f0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48ca66b0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48ca5a10"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ca7cb0"/>
        <function-ref name="start" scoped="" ref="0x7fbb48ca6b70"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48ca5090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7fbb48ca3120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7fbb48ca3120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb48ca1a90"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48ca2770"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ca3d50"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48ca2c30"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48ca0020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ca2260"/>
        <function-ref name="start" scoped="" ref="0x7fbb48ca1110"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48ca15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb48cbab80" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb48cbab80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb48cb4020"/>
        <function-ref name="test" scoped="" ref="0x7fbb48cb5550"/>
        <function-ref name="get" scoped="" ref="0x7fbb48cb77d0"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb48cb44e0"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb48cb49f0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48cb66b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48cb61f0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48cb5a10"/>
        <function-ref name="set" scoped="" ref="0x7fbb48cb7c90"/>
        <function-ref name="start" scoped="" ref="0x7fbb48cb6b70"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48cb5090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48c252a0" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48c252a0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7fbb49308020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7fbb49308020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48c25620"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbb48c25a10" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb48c25a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb48c15e60"/>
        <function-ref name="test" scoped="" ref="0x7fbb48c154e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48c176b0"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb48c13350"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb48c13860"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48c16590"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48c160d0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48c159a0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48c17b70"/>
        <function-ref name="start" scoped="" ref="0x7fbb48c16a50"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48c15020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb474f5d90" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb474f5d90"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7fbb49309c00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7fbb49309c00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb474f1670"/>
        <function-ref name="fired" scoped="" ref="0x7fbb474f35d0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb474f1020"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb474f3a90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb474f1b30"/>
        <function-ref name="start" scoped="" ref="0x7fbb474f4bc0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb474f3110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7fbb474eb570" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7fbb474eb570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb474e8020"/>
        <function-ref name="fired" scoped="" ref="0x7fbb474eabc0"/>
        <function-ref name="get" scoped="" ref="0x7fbb474ea1f0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb474e90d0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb474e84e0"/>
        <function-ref name="set" scoped="" ref="0x7fbb474ea6b0"/>
        <function-ref name="start" scoped="" ref="0x7fbb474e9590"/>
        <function-ref name="stop" scoped="" ref="0x7fbb474e9a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7fbb474f00b0" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7fbb474f00b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb474ed4e0"/>
        <function-ref name="test" scoped="" ref="0x7fbb474eea50"/>
        <function-ref name="get" scoped="" ref="0x7fbb474f0ce0"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb474ed9a0"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb474eb020"/>
        <function-ref name="reset" scoped="" ref="0x7fbb474efbf0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb474ef730"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb474ed020"/>
        <function-ref name="set" scoped="" ref="0x7fbb474ef220"/>
        <function-ref name="start" scoped="" ref="0x7fbb474ee0d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb474ee590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb48bd2290" loc="24:../../tos/platforms/mica/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb48bd2290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbb4923c180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48bd10d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb48bd1a50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb48bd1590"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48bcd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb48bca290" loc="24:../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb48bca290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48bc90d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb48bc9a50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb48bc9590"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48bc8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb48bc4020" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb48bc4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48bc4e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb48bb2800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb48bb2340"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48bb2cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbb48bb1280" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb48bb1280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb48bad810"/>
        <function-ref name="test" scoped="" ref="0x7fbb48bafe60"/>
        <function-ref name="get" scoped="" ref="0x7fbb48bb0020"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb48badcd0"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb48bac260"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48baf020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48bb09f0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb48bad350"/>
        <function-ref name="set" scoped="" ref="0x7fbb48bb04e0"/>
        <function-ref name="start" scoped="" ref="0x7fbb48baf4e0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48baf9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fbb48b8b540" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7fbb48b8b540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48b893d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb48b89d50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb48b89890"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48b88260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb48b8d0f0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb48b8d0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbb4923c180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48b8c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb48b8c9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb48b8c4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48b8ce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb47505890" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb47505890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbb4923c180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb475020d0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb475030d0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb47503a50"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb47503590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb47502590"/>
        <function-ref name="start" scoped="" ref="0x7fbb475046e0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47504bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fbb474fe0a0" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x7fbb474fe0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb474fcb30"/>
        <function-ref name="fired" scoped="" ref="0x7fbb474fd9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb474fc4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb474fc020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb474fb020"/>
        <function-ref name="start" scoped="" ref="0x7fbb474fd020"/>
        <function-ref name="stop" scoped="" ref="0x7fbb474fd530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbb47502c00" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb47502c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbb4923c180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb47501a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb474ff4e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb474ff020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb474ff9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb48b42020" loc="41:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb48b42020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb48b423a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb48b42530"/>
        <function-ref name="start" scoped="" ref="0x7fbb48b426c0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48b42850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fbb48b3d4f0" loc="46:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48b3d4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fbb48b3d870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb48b3db00" loc="48:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb48b3db00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48b3de80"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48b3a030"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48b3a1c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48b3a350"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48b3a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb48b41050" loc="43:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb48b41050"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48b413d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48b41560"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48b416f0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48b41880"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48b41a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb48b3fdf0" loc="45:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb48b3fdf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48b3e1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fbb48b318a0" loc="52:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48b318a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fbb48b31c20"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fbb48b31db0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fbb48b37020"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fbb48b371b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb48b3f210" loc="44:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb48b3f210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48b3f590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbb48b39e40" loc="51:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48b39e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb48b381e0"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb48b38370"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb48b38500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7fbb48b2abf0" loc="53:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7fbb48b2abf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fbb48b36020"/>
        <function-ref name="setRetries" scoped="" ref="0x7fbb48b361b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7fbb48b36340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fbb48b364d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fbb48b36660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb48b3a790" loc="49:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b3a790"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb48b3ab10"/>
        <function-ref name="source" scoped="" ref="0x7fbb48b3aca0"/>
        <function-ref name="address" scoped="" ref="0x7fbb48b3ae30"/>
        <function-ref name="destination" scoped="" ref="0x7fbb48b39020"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb48b391b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb48b39340"/>
        <function-ref name="type" scoped="" ref="0x7fbb48b394d0"/>
        <function-ref name="setType" scoped="" ref="0x7fbb48b39660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb48b397f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb48b39980"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb48b39b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fbb48b26960" loc="54:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fbb48b26960"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fbb48b26ce0"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb48b26e70"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb48b30030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0x7fbb48b1d9e0" loc="56:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7fbb48b1d9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb48b25020"/>
        <function-ref name="clear" scoped="" ref="0x7fbb48b25750"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb48b28890"/>
        <function-ref name="set" scoped="" ref="0x7fbb48b25e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fbb48b1caf0" loc="57:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48b1caf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb48b1a210"/>
        <function-ref name="clear" scoped="" ref="0x7fbb48b1a940"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb48b1ba80"/>
        <function-ref name="set" scoped="" ref="0x7fbb48b18090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb48b142e0" loc="45:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb48b142e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb48b14660"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb48b147f0"/>
        <function-ref name="start" scoped="" ref="0x7fbb48b14980"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48b14b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7fbb48b00a00" loc="62:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb48b00a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48afd1b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48afec00"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48afe6b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48afd700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fbb48b11d60" loc="50:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48b11d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fbb48b0f180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb48b0f410" loc="52:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb48b0f410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48b0f790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48b0f920"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48b0fab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48b0fc40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48b0fdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb48b13320" loc="47:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb48b13320"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48b136a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48b13830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48b139c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48b13b50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48b13ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb48b111d0" loc="49:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb48b111d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48b11550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7fbb48b02400" loc="61:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb48b02400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48b01c10"/>
        <function-ref name="get" scoped="" ref="0x7fbb48b016c0"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48b01170"/>
        <function-ref name="set" scoped="" ref="0x7fbb48b001b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fbb48b0c320" loc="56:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48b0c320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fbb48b0c6a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fbb48b0c830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fbb48b0c9c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fbb48b0cb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb48b12510" loc="48:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb48b12510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48b12890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fbb48afa8a0" loc="66:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb48afa8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb48af5e10"/>
        <function-ref name="clear" scoped="" ref="0x7fbb48af45a0"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb48af56e0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48af4cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7fbb48afb270" loc="65:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48afb270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48afa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7fbb48b04df0" loc="60:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb48b04df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48b085e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48b08090"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48b09ac0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48b08b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbb48b0d800" loc="55:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48b0d800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb48b0db80"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb48b0dd10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb48b0c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7fbb48b0ce10" loc="57:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7fbb48b0ce10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fbb48b0b1c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7fbb48b0b350"/>
        <function-ref name="getRetries" scoped="" ref="0x7fbb48b0b4e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fbb48b0b670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fbb48b0b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb48b0e0c0" loc="53:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb48b0e0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb48b0e440"/>
        <function-ref name="source" scoped="" ref="0x7fbb48b0e5d0"/>
        <function-ref name="address" scoped="" ref="0x7fbb48b0e760"/>
        <function-ref name="destination" scoped="" ref="0x7fbb48b0e8f0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb48b0ea80"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb48b0ec10"/>
        <function-ref name="type" scoped="" ref="0x7fbb48b0eda0"/>
        <function-ref name="setType" scoped="" ref="0x7fbb48b0d020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb48b0d1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb48b0d340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb48b0d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fbb48b0bad0" loc="58:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fbb48b0bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fbb48b0be50"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb48b0a020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb48b0a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7fbb48af74c0" loc="63:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb48af74c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7fbb48af7840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fbb48af3970" loc="67:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48af3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb48af0020"/>
        <function-ref name="clear" scoped="" ref="0x7fbb48af0750"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb48af17c0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48af0e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb48aec080" loc="41:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb48aec080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb48aec400"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb48aec590"/>
        <function-ref name="start" scoped="" ref="0x7fbb48aec720"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48aec8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7fbb48ac21c0" loc="85:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb48ac21c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48ac1910"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ac13c0"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48ac2df0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ac1e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0x7fbb48adc020" loc="65:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0x7fbb48adc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fbb48adc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0x7fbb48adb2c0" loc="67:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0x7fbb48adb2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb48adb640"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb48adb7d0"/>
        <function-ref name="request" scoped="" ref="0x7fbb48adb960"/>
        <function-ref name="granted" scoped="" ref="0x7fbb48adbaf0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb48adbc80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fbb48ae8bb0" loc="57:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48ae8bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fbb48ae7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fbb48ab93f0" loc="90:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb48ab93f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb48ab8970"/>
        <function-ref name="clear" scoped="" ref="0x7fbb48ab70d0"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb48ab8240"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ab7800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb48aea1d0" loc="54:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb48aea1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48aea550"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48aea6e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48aea870"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48aeaa00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48aeab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb48ae8020" loc="56:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb48ae8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48ae83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7fbb48acd3c0" loc="69:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb48acd3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7fbb48acd740"/>
        <function-ref name="address" scoped="" ref="0x7fbb48acd8d0"/>
        <function-ref name="destination" scoped="" ref="0x7fbb48acda60"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb48acdbf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb48acdd80"/>
        <function-ref name="pan" scoped="" ref="0x7fbb48ad5020"/>
        <function-ref name="setPan" scoped="" ref="0x7fbb48ad51b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb48ad5340"/>
        <function-ref name="localPan" scoped="" ref="0x7fbb48ad54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0x7fbb48ad5890" loc="70:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7fbb48ad5890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48ad5d10"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48acc020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48acc1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48acc340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48acc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fbb48acb320" loc="74:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb48acb320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fbb48acb6a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fbb48acb830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fbb48acb9c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fbb48acbb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7fbb48ac7c90" loc="84:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb48ac7c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48ac43c0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ac5e30"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48ac58e0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ac4910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb48ae93f0" loc="55:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb48ae93f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48ae9770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0x7fbb48ae6a10" loc="59:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7fbb48ae6a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48ae6d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48ae5020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48ae51b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48ae5340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48ae54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fbb48abd270" loc="89:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb48abd270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb48abc800"/>
        <function-ref name="clear" scoped="" ref="0x7fbb48abb020"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb48abc0d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48abb750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7fbb48ac0d70" loc="88:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48ac0d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48abe9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7fbb48ac96d0" loc="83:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb48ac96d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48ac8e70"/>
        <function-ref name="get" scoped="" ref="0x7fbb48ac8920"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48ac83d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48ac73f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbb48acc800" loc="73:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb48acc800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb48accb80"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb48accd10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb48acb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7fbb48adda60" loc="63:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7fbb48adda60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48addde0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48ae4020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48ae41b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48ae4340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48ae44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7fbb48acbe10" loc="75:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7fbb48acbe10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fbb48aca1c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7fbb48aca350"/>
        <function-ref name="getRetries" scoped="" ref="0x7fbb48aca4e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fbb48aca670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fbb48aca800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb48ae72d0" loc="58:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb48ae72d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb48ae7650"/>
        <function-ref name="source" scoped="" ref="0x7fbb48ae77e0"/>
        <function-ref name="address" scoped="" ref="0x7fbb48ae7970"/>
        <function-ref name="destination" scoped="" ref="0x7fbb48ae7b00"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb48ae7c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb48ae7e20"/>
        <function-ref name="type" scoped="" ref="0x7fbb48ae6020"/>
        <function-ref name="setType" scoped="" ref="0x7fbb48ae61b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb48ae6340"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb48ae64d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb48ae6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7fbb48ae4840" loc="64:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7fbb48ae4840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48ae4bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fbb48acaad0" loc="81:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fbb48acaad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fbb48acae50"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb48ac9020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb48ac91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7fbb48ac0510" loc="86:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb48ac0510"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7fbb48ac0890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0x7fbb48ab4e50" loc="44:../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fbb48ab4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fbb48aa5210"/>
        <function-ref name="suspend" scoped="" ref="0x7fbb48aa53a0"/>
        <function-ref name="resume" scoped="" ref="0x7fbb48aa5530"/>
        <function-ref name="run" scoped="" ref="0x7fbb48aa56c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7fbb48a67150" loc="38:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb48a67150"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48a674f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7fbb48a67680"/>
        <function-ref name="get" scoped="" ref="0x7fbb48a67810"/>
        <function-ref name="set" scoped="" ref="0x7fbb48a679a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7fbb48a68390" loc="37:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7fbb48a68390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7fbb48a68710"/>
        <function-ref name="insertNode" scoped="" ref="0x7fbb48a688a0"/>
        <function-ref name="getNode" scoped="" ref="0x7fbb48a68a30"/>
        <function-ref name="evicted" scoped="" ref="0x7fbb48a68bc0"/>
        <function-ref name="getIndex" scoped="" ref="0x7fbb48a68d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7fbb4747e150" loc="43:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb4747e150"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4747e4f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7fbb4747e680"/>
        <function-ref name="get" scoped="" ref="0x7fbb4747e810"/>
        <function-ref name="set" scoped="" ref="0x7fbb4747e9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7fbb4747f3d0" loc="42:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7fbb4747f3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7fbb4747f750"/>
        <function-ref name="insertNode" scoped="" ref="0x7fbb4747f8e0"/>
        <function-ref name="getNode" scoped="" ref="0x7fbb4747fa70"/>
        <function-ref name="evicted" scoped="" ref="0x7fbb4747fc00"/>
        <function-ref name="getIndex" scoped="" ref="0x7fbb4747fd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47480d90" loc="41:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47480d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb4747f180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0x7fbb48a3fa30" loc="51:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0x7fbb48a3fa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fbb48a3fdb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0x7fbb48a4e020" loc="47:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0x7fbb48a4e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0x7fbb48a4e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0x7fbb48a39e30" loc="50:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7fbb48a39e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb48a401e0"/>
        <function-ref name="checkFrame" scoped="" ref="0x7fbb48a40370"/>
        <function-ref name="source" scoped="" ref="0x7fbb48a40500"/>
        <function-ref name="destination" scoped="" ref="0x7fbb48a40690"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb48a40820"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb48a409b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb48a40b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0x7fbb48a42cf0" loc="49:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0x7fbb48a42cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0x7fbb48a4a0a0"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0x7fbb48a4a230"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0x7fbb48a4a3c0"/>
        <function-ref name="getTransmitTime" scoped="" ref="0x7fbb48a4a550"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0x7fbb48a4a6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fbb48a168d0" loc="61:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48a168d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbb48a16c50"/>
        <function-ref name="wait" scoped="" ref="0x7fbb48a16de0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48a1b020"/>
        <function-ref name="isFree" scoped="" ref="0x7fbb48a1b1b0"/>
        <function-ref name="getNow" scoped="" ref="0x7fbb48a1b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0x7fbb48a1a020" loc="62:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0x7fbb48a1a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48a1a3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48a1a530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48a1a6c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48a1a850"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb48a1a9e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb48a1ab70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7fbb48a15160" loc="64:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fbb48a15160"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb48a0e7c0"/>
        <function-ref name="clear" scoped="" ref="0x7fbb48a0d020"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb48a0e090"/>
        <function-ref name="set" scoped="" ref="0x7fbb48a0d750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0x7fbb48a5e7c0" loc="43:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0x7fbb48a5e7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48a5eb40"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb48a5ecd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb48a5ee60"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7fbb48a62020"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7fbb48a621b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0x7fbb48a4d990" loc="46:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0x7fbb48a4d990"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0x7fbb48a4dd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0x7fbb48a559c0" loc="44:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7fbb48a559c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7fbb48a55d40"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7fbb48a61020"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fbb48a611b0"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7fbb48a61340"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7fbb48a614d0"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7fbb48a61660"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fbb48a617f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fbb48a61980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7fbb48a1d880" loc="60:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb48a1d880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7fbb48a1dc00"/>
        <function-ref name="getDSN" scoped="" ref="0x7fbb48a1dd90"/>
        <function-ref name="setFCF" scoped="" ref="0x7fbb48a37020"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7fbb48a371b0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7fbb48a37340"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7fbb48a374d0"/>
        <function-ref name="setDSN" scoped="" ref="0x7fbb48a37660"/>
        <function-ref name="createAckReply" scoped="" ref="0x7fbb48a377f0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7fbb48a37980"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7fbb48a37b10"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7fbb48a37ca0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7fbb48a37e30"/>
        <function-ref name="localAddr" scoped="" ref="0x7fbb48a35020"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fbb48a352b0"/>
        <function-ref name="localPan" scoped="" ref="0x7fbb48a35440"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7fbb48a355d0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7fbb48a35760"/>
        <function-ref name="setFramePending" scoped="" ref="0x7fbb48a358f0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7fbb48a35a80"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb48a35c10"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fbb48a35da0"/>
        <function-ref name="getFCF" scoped="" ref="0x7fbb48a1c020"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fbb48a1c1b0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7fbb48a1c340"/>
        <function-ref name="getFramePending" scoped="" ref="0x7fbb48a1c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0x7fbb48a4fe40" loc="45:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7fbb48a4fe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7fbb48a5c1e0"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7fbb48a5c370"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7fbb48a5c500"/>
        <function-ref name="getSender" scoped="" ref="0x7fbb48a5c690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0x7fbb48a466b0" loc="48:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7fbb48a466b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7fbb48a46a30"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7fbb48a46bc0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7fbb48a46d50"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7fbb48a4b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7fbb48989480" loc="41:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48989480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbb48989820"/>
        <function-ref name="wait" scoped="" ref="0x7fbb489899b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48989b40"/>
        <function-ref name="isFree" scoped="" ref="0x7fbb48989cd0"/>
        <function-ref name="getNow" scoped="" ref="0x7fbb48989e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fbb48986020" loc="47:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb48986020"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7fbb493083a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7fbb493083a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7fbb49161180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48984870"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48985840"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb48984220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb48985d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48984d30"/>
        <function-ref name="start" scoped="" ref="0x7fbb48986e30"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48985380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fbb48987140" loc="46:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fbb48987140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fbb489874c0"/>
        <function-ref name="suspend" scoped="" ref="0x7fbb48987650"/>
        <function-ref name="resume" scoped="" ref="0x7fbb489877e0"/>
        <function-ref name="run" scoped="" ref="0x7fbb48987970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7fbb47460300" loc="54:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb47460300"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbb474606a0"/>
        <function-ref name="wait" scoped="" ref="0x7fbb47460830"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb474609c0"/>
        <function-ref name="isFree" scoped="" ref="0x7fbb47460b50"/>
        <function-ref name="getNow" scoped="" ref="0x7fbb47460ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fbb4745f260" loc="59:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb4745f260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7fbb49161180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb4745db30"/>
        <function-ref name="fired" scoped="" ref="0x7fbb4745ea60"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb4745d4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb4745d020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb4745b020"/>
        <function-ref name="start" scoped="" ref="0x7fbb4745e090"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4745e5a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fbb4745b410" loc="60:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fbb4745b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fbb4745b790"/>
        <function-ref name="suspend" scoped="" ref="0x7fbb4745b920"/>
        <function-ref name="resume" scoped="" ref="0x7fbb4745bab0"/>
        <function-ref name="run" scoped="" ref="0x7fbb4745bc40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb488da8f0" loc="50:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb488da8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb488dac70"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb488dae00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb488d9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb488d92b0" loc="51:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb488d92b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb488d9630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fbb488db3a0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fbb488db3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fbb488db740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb488de720" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb488de720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb488deaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb488dec30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb488dedc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb488dd020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb488dd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb488dd530" loc="41:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb488dd530"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb488dd8d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb488dda60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb488ddbf0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb488ddd80"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb488dc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb488dcb00" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb488dcb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb488db020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb488dba30" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb488dba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb488dbdb0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb488da020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb488da1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb488da340"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb488da4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb488da660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb488d98c0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb488d98c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb488d9c40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7fbb488d9dd0"/>
        <function-ref name="source" scoped="" ref="0x7fbb488d7020"/>
        <function-ref name="destination" scoped="" ref="0x7fbb488d71b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb488d7340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb488d74d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb488d7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb488dc3a0" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb488dc3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb488dc740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb488df020" loc="39:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb488df020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb488df3a0"/>
        <function-ref name="source" scoped="" ref="0x7fbb488df530"/>
        <function-ref name="address" scoped="" ref="0x7fbb488df6c0"/>
        <function-ref name="destination" scoped="" ref="0x7fbb488df850"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb488df9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb488dfb70"/>
        <function-ref name="type" scoped="" ref="0x7fbb488dfd00"/>
        <function-ref name="setType" scoped="" ref="0x7fbb488de020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb488de1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb488de340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb488de4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb4743f8f0" loc="54:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb4743f8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb4743fc70"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb4743fe00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb4743d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb4743d2b0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb4743d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4743d630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fbb47440420" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fbb47440420"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fbb474407c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb474438b0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb474438b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47443c30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47443dc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47442020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb474421b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47442340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb47445360" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb47445360"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb474456e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47445870"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47445a00"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47445b90"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb47445d20"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb47444020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb474426c0" loc="45:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb474426c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47442a60"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47442bf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47442d80"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47441020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb474411b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb47441c90" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb47441c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb474400a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb47440ab0" loc="53:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb47440ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47440e30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb4743f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4743f1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb4743f340"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb4743f4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb4743f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb47441530" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47441530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb474418d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb4743d8c0" loc="56:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb4743d8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb4743dc40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7fbb4743ddd0"/>
        <function-ref name="source" scoped="" ref="0x7fbb4743c020"/>
        <function-ref name="destination" scoped="" ref="0x7fbb4743c1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb4743c340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb4743c4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb4743c660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7fbb4743c8b0" loc="57:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fbb4743c8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7fbb4743cc30"/>
        <function-ref name="changed" scoped="" ref="0x7fbb4743cdc0"/>
        <function-ref name="amGroup" scoped="" ref="0x7fbb4743b020"/>
        <function-ref name="setAddress" scoped="" ref="0x7fbb4743b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb47444270" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47444270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb474445f0"/>
        <function-ref name="source" scoped="" ref="0x7fbb47444780"/>
        <function-ref name="address" scoped="" ref="0x7fbb47444910"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47444aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47444c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47444dc0"/>
        <function-ref name="type" scoped="" ref="0x7fbb47443020"/>
        <function-ref name="setType" scoped="" ref="0x7fbb474431b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47443340"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb474434d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47443660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7fbb488f8260" loc="54:../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fbb488f8260"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7fbb488f85e0"/>
        <function-ref name="changed" scoped="" ref="0x7fbb488f8770"/>
        <function-ref name="amGroup" scoped="" ref="0x7fbb488f8900"/>
        <function-ref name="setAddress" scoped="" ref="0x7fbb488f8a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb488c2310" loc="44:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb488c2310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb488c2690"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb488c2820"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb488c29b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fbb488c2c00" loc="45:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fbb488c2c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb488c1020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb488c11b0"/>
        <function-ref name="request" scoped="" ref="0x7fbb488c1340"/>
        <function-ref name="granted" scoped="" ref="0x7fbb488c14d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb488c1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7fbb488d2880" loc="39:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7fbb488d2880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb488d2c00"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb488d2d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb488c2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbb4885c150" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbb4885c150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbb4885c4f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbb4885c680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbb4885b1f0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb4885b1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbb4885b590"/>
        <function-ref name="configure" scoped="" ref="0x7fbb4885b720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbb4885d390" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fbb4885d390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb4885d730"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb4885d8c0"/>
        <function-ref name="request" scoped="" ref="0x7fbb4885da50"/>
        <function-ref name="granted" scoped="" ref="0x7fbb4885dbe0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb4885dd70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbb4885c8d0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbb4885c8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbb4885cc50"/>
        <function-ref name="userId" scoped="" ref="0x7fbb4885cde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb473ee460" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb473ee460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb473ee7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fbb473eea70" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7fbb473eea70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fbb473eedf0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fbb473ec020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fbb473ec1b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb473ec340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbb473ea850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbb473ea850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbb473eabf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbb473ead80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbb473e9910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb473e9910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbb473e9cb0"/>
        <function-ref name="configure" scoped="" ref="0x7fbb473e9e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fbb473e8120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fbb473e8120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fbb473e84a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fbb473e8630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fbb473e87c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb473e8950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbb473eb9d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fbb473eb9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb473ebd70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb473ea020"/>
        <function-ref name="request" scoped="" ref="0x7fbb473ea1b0"/>
        <function-ref name="granted" scoped="" ref="0x7fbb473ea340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb473ea4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbb473e9020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbb473e9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbb473e93a0"/>
        <function-ref name="userId" scoped="" ref="0x7fbb473e9530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fbb473e8c20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7fbb473e8c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb473e7020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb473e71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb488232b0" loc="49:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb488232b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48823630"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb488237c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48823950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb48823be0" loc="50:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb48823be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48822020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fbb48829d30" loc="42:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fbb48829d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fbb488280e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb48858e00" loc="39:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb48858e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4882a1c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb4882a350"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb4882a4e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4882a670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb4882a800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7fbb48824470" loc="48:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48824470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb488247f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48824980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48824b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48824ca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb48824e30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb48823020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7fbb48828390" loc="47:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb48828390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7fbb48828710"/>
        <function-ref name="getDSN" scoped="" ref="0x7fbb488288a0"/>
        <function-ref name="setFCF" scoped="" ref="0x7fbb48828a30"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7fbb48828bc0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7fbb48828d50"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7fbb48826020"/>
        <function-ref name="setDSN" scoped="" ref="0x7fbb488261b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7fbb48826340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7fbb488264d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7fbb48826660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7fbb488267f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7fbb48826980"/>
        <function-ref name="localAddr" scoped="" ref="0x7fbb48826b10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fbb48826da0"/>
        <function-ref name="localPan" scoped="" ref="0x7fbb48825020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7fbb488251b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7fbb48825340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7fbb488254d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7fbb48825660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb488257f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fbb48825980"/>
        <function-ref name="getFCF" scoped="" ref="0x7fbb48825b10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fbb48825ca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7fbb48825e30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7fbb48824020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7fbb4882aa50" loc="40:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7fbb4882aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb4882add0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb48829020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb488291b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48829340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb488294d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7fbb48829760" loc="41:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7fbb48829760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48829ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb487e64a0" loc="69:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb487e64a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb487e6820"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb487e69b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb487e6b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb487e6dd0" loc="70:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb487e6dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb487e5180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7fbb487e9730" loc="57:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb487e9730"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb487e9ab0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb487e9c40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb487e9dd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb487e8020"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb487e81b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb487e8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0x7fbb487e7020" loc="62:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0x7fbb487e7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb487e73a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb487e5410" loc="71:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb487e5410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb487e5790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb487e5920"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb487e5ab0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb487e5c40"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb487e5dd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb487e4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0x7fbb487e85d0" loc="61:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0x7fbb487e85d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb487e8950"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb487e8ae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb487e8c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7fbb4881c7c0" loc="55:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7fbb4881c7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb4881cb40"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb4881ccd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb4881ce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7fbb487e9120" loc="56:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7fbb487e9120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb487e94a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0x7fbb487e7630" loc="63:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0x7fbb487e7630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb487e79b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb487e7b40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb487e7cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb487e7e60"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb487e6020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb487e61b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb48746440" loc="48:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb48746440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb487467c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7fbb4874add0" loc="40:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb4874add0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7fbb48749180"/>
        <function-ref name="address" scoped="" ref="0x7fbb48749310"/>
        <function-ref name="destination" scoped="" ref="0x7fbb487494a0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb48749630"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb487497c0"/>
        <function-ref name="pan" scoped="" ref="0x7fbb48749950"/>
        <function-ref name="setPan" scoped="" ref="0x7fbb48749ae0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb48749c70"/>
        <function-ref name="localPan" scoped="" ref="0x7fbb48749e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb48748080" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48748080"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48748400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48748590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48748720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb487488b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb48748a40"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb48748bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7fbb4874de00" loc="39:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb4874de00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7fbb4874c1c0"/>
        <function-ref name="getDSN" scoped="" ref="0x7fbb4874c350"/>
        <function-ref name="setFCF" scoped="" ref="0x7fbb4874c4e0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7fbb4874c670"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7fbb4874c800"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7fbb4874c990"/>
        <function-ref name="setDSN" scoped="" ref="0x7fbb4874cb20"/>
        <function-ref name="createAckReply" scoped="" ref="0x7fbb4874ccb0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7fbb4874ce40"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7fbb4874b020"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7fbb4874b1b0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7fbb4874b340"/>
        <function-ref name="localAddr" scoped="" ref="0x7fbb4874b4d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fbb4874b760"/>
        <function-ref name="localPan" scoped="" ref="0x7fbb4874b8f0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7fbb4874ba80"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7fbb4874bc10"/>
        <function-ref name="setFramePending" scoped="" ref="0x7fbb4874bda0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7fbb4874a020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb4874a1b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fbb4874a340"/>
        <function-ref name="getFCF" scoped="" ref="0x7fbb4874a4d0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fbb4874a660"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7fbb4874a7f0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7fbb4874a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb48747500" loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb48747500"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48747880"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48747a10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48747ba0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48747d30"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb48746020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb487461b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb48748e60" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb48748e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48747210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb47379440" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb47379440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb473797c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7fbb4737e2e0" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7fbb4737e2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7fbb4737e660"/>
        <function-ref name="address" scoped="" ref="0x7fbb4737e7f0"/>
        <function-ref name="destination" scoped="" ref="0x7fbb4737e980"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb4737eb10"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb4737eca0"/>
        <function-ref name="pan" scoped="" ref="0x7fbb4737ee30"/>
        <function-ref name="setPan" scoped="" ref="0x7fbb4737d020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb4737d1b0"/>
        <function-ref name="localPan" scoped="" ref="0x7fbb4737d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb4737d590" loc="43:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb4737d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4737d910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb4737daa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4737dc30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb4737ddc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb4737c020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb4737c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7fbb47381020" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fbb47381020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7fbb473813a0"/>
        <function-ref name="getDSN" scoped="" ref="0x7fbb47381530"/>
        <function-ref name="setFCF" scoped="" ref="0x7fbb473816c0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7fbb47381850"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7fbb473819e0"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7fbb47381b70"/>
        <function-ref name="setDSN" scoped="" ref="0x7fbb47381d00"/>
        <function-ref name="createAckReply" scoped="" ref="0x7fbb47380020"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7fbb473801b0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7fbb47380340"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7fbb473804d0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7fbb47380660"/>
        <function-ref name="localAddr" scoped="" ref="0x7fbb473807f0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fbb47380a80"/>
        <function-ref name="localPan" scoped="" ref="0x7fbb47380c10"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7fbb47380da0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7fbb4737f020"/>
        <function-ref name="setFramePending" scoped="" ref="0x7fbb4737f1b0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7fbb4737f340"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb4737f4d0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fbb4737f660"/>
        <function-ref name="getFCF" scoped="" ref="0x7fbb4737f7f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fbb4737f980"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7fbb4737fb10"/>
        <function-ref name="getFramePending" scoped="" ref="0x7fbb4737fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7fbb4737ca70" loc="49:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fbb4737ca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7fbb4737cdf0"/>
        <function-ref name="changed" scoped="" ref="0x7fbb4737b020"/>
        <function-ref name="amGroup" scoped="" ref="0x7fbb4737b1b0"/>
        <function-ref name="setAddress" scoped="" ref="0x7fbb4737b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb4737c440" loc="44:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb4737c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4737c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb4737b5d0" loc="50:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb4737b5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4737b950"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb4737bae0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4737bc70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb4737be00"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb47379020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb473791b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb48713a70" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb48713a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48713df0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48712020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb487121b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb48712440" loc="46:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb48712440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb487127c0"/>
        <function-ref name="header" scoped="" ref="0x7fbb48712950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7fbb4870f400" loc="51:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb4870f400"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4870f780"/>
        <function-ref name="clearAll" scoped="" ref="0x7fbb4870f910"/>
        <function-ref name="get" scoped="" ref="0x7fbb4870faa0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4870fc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb48714840" loc="40:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb48714840"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48714bc0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48714d50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48713020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb48712be0" loc="48:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb48712be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7fbb48710020"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7fbb487101b0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7fbb48710340"/>
        <function-ref name="getSender" scoped="" ref="0x7fbb487104d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb48713270" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48713270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb487135f0"/>
        <function-ref name="header" scoped="" ref="0x7fbb48713780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7fbb48710720" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7fbb48710720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7fbb48710aa0"/>
        <function-ref name="insertNode" scoped="" ref="0x7fbb48710c30"/>
        <function-ref name="getNode" scoped="" ref="0x7fbb48710dc0"/>
        <function-ref name="evicted" scoped="" ref="0x7fbb4870f020"/>
        <function-ref name="getIndex" scoped="" ref="0x7fbb4870f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb47327310" loc="49:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb47327310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47327690"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47327820"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb473279b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb47327c40" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb47327c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47326020"/>
        <function-ref name="header" scoped="" ref="0x7fbb473261b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7fbb47325ab0" loc="54:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fbb47325ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47325e30"/>
        <function-ref name="clearAll" scoped="" ref="0x7fbb47324020"/>
        <function-ref name="get" scoped="" ref="0x7fbb473241b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47324340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb473299b0" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb473299b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47329d30"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47328020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb473281b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7fbb47326e80" loc="53:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7fbb47326e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7fbb47325220"/>
        <function-ref name="insertNode" scoped="" ref="0x7fbb473253b0"/>
        <function-ref name="getNode" scoped="" ref="0x7fbb47325540"/>
        <function-ref name="evicted" scoped="" ref="0x7fbb473256d0"/>
        <function-ref name="getIndex" scoped="" ref="0x7fbb47325860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb47328400" loc="42:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb47328400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47328780"/>
        <function-ref name="header" scoped="" ref="0x7fbb47328910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47328b60" loc="44:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47328b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47327020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0x7fbb47326400" loc="52:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7fbb47326400"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7fbb47326780"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7fbb47326910"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7fbb47326aa0"/>
        <function-ref name="getSender" scoped="" ref="0x7fbb47326c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb486fd950" loc="85:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb486fd950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb486fdcd0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb486fde60"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb486fc020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb486fc2b0" loc="86:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb486fc2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb486fc630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0x7fbb486fad90" loc="93:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7fbb486fad90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb486f9180"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb486f9310"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb486f94a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb4870ae40" loc="77:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb4870ae40"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb487001e0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48700370"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48700500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb486fea10" loc="80:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb486fea10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb486fed90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb486fd020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb486fd1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb486fd340"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb486fd4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb486fd660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb486fc8c0" loc="87:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb486fc8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb486fcc40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb486fcdd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb486fb020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb486fb1b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb486fb340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb486fb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0x7fbb486fa100" loc="92:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7fbb486fa100"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fbb486fa480"/>
        <function-ref name="setRetries" scoped="" ref="0x7fbb486fa610"/>
        <function-ref name="getRetries" scoped="" ref="0x7fbb486fa7a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fbb486fa930"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fbb486faac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb48700790" loc="78:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb48700790"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48700b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7fbb486fb720" loc="88:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb486fb720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb486fbaa0"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb486fbc30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb486fbdc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7fbb48700d60" loc="79:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7fbb48700d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fbb486fe180"/>
        <function-ref name="setRetries" scoped="" ref="0x7fbb486fe310"/>
        <function-ref name="getRetries" scoped="" ref="0x7fbb486fe4a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fbb486fe630"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fbb486fe7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb486f4880" loc="39:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb486f4880"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb486f4c00"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb486f4d90"/>
        <function-ref name="start" scoped="" ref="0x7fbb486df020"/>
        <function-ref name="stop" scoped="" ref="0x7fbb486df1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb486dc8c0" loc="49:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb486dc8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb486dcc40"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb486dcdd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb486db020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb486db2b0" loc="50:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb486db2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb486db630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb486df440" loc="40:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb486df440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb486df7c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb486df950"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb486dfae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb486de3d0" loc="42:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb486de3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb486de750"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb486de8e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb486dea70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb486dec00"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb486ded90"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb486dd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fbb486dd270" loc="44:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb486dd270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fbb486dd5f0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fbb486dd780"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fbb486dd910"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fbb486ddaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7fbb486ddd90" loc="48:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7fbb486ddd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb486dc180"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb486dc310"/>
        <function-ref name="start" scoped="" ref="0x7fbb486dc4a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb486dc630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb486dfd70" loc="41:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb486dfd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb486de180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb486db8c0" loc="51:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb486db8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb486dbc40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb486dbdd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb486d9020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb486d91b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb486d9340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb486d94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fbb47302640" loc="37:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb47302640"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fbb473029c0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fbb47302b50"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fbb47302ce0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fbb47302e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb4866ba10" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb4866ba10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb4866bd90"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb4866a020"/>
        <function-ref name="start" scoped="" ref="0x7fbb4866a1b0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4866a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7fbb48667aa0" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fbb48667aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fbb48667e20"/>
        <function-ref name="turnOn" scoped="" ref="0x7fbb48666020"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb486661b0"/>
        <function-ref name="done" scoped="" ref="0x7fbb48666340"/>
        <function-ref name="standby" scoped="" ref="0x7fbb486664d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb48666660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb4866a5d0" loc="40:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb4866a5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb4866a950"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb4866aae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb4866ac70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7fbb48665270" loc="49:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48665270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb486655f0"/>
        <function-ref name="header" scoped="" ref="0x7fbb48665780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb48669020" loc="41:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb48669020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb486693a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7fbb486668b0" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb486668b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48666c30"/>
        <function-ref name="ready" scoped="" ref="0x7fbb48666dc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48665020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fbb486695f0" loc="42:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fbb486695f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fbb48669970"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb48669b00"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb48669c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fbb48667020" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fbb48667020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fbb486673a0"/>
        <function-ref name="suspend" scoped="" ref="0x7fbb48667530"/>
        <function-ref name="resume" scoped="" ref="0x7fbb486676c0"/>
        <function-ref name="run" scoped="" ref="0x7fbb48667850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb472fbbf0" loc="43:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb472fbbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb472f9020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb472f91b0"/>
        <function-ref name="start" scoped="" ref="0x7fbb472f9340"/>
        <function-ref name="stop" scoped="" ref="0x7fbb472f94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7fbb472f9760" loc="44:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb472f9760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb472f9ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7fbb472f7670" loc="52:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fbb472f7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fbb472f79f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7fbb472f7b80"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb472f7d10"/>
        <function-ref name="done" scoped="" ref="0x7fbb472f6020"/>
        <function-ref name="standby" scoped="" ref="0x7fbb472f61b0"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb472f6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb472f9d70" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb472f9d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb472f8180"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb472f8310"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb472f84a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x7fbb472f4940" loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x7fbb472f4940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb472f4cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb472f4e50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7fbb472f5950" loc="55:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb472f5950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb472f5cd0"/>
        <function-ref name="header" scoped="" ref="0x7fbb472f5e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0x7fbb472f3160" loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0x7fbb472f3160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb472f34e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb472f3670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb472f8730" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb472f8730"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb472f8ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0x7fbb472f4160" loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0x7fbb472f4160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb472f44e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb472f4670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7fbb472f5060" loc="54:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb472f5060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb472f53e0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb472f5570"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb472f5700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fbb472f8d00" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fbb472f8d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fbb472f70a0"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb472f7230"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb472f73c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fbb472f6590" loc="53:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fbb472f6590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fbb472f6910"/>
        <function-ref name="suspend" scoped="" ref="0x7fbb472f6aa0"/>
        <function-ref name="resume" scoped="" ref="0x7fbb472f6c30"/>
        <function-ref name="run" scoped="" ref="0x7fbb472f6dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb48610310" loc="44:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb48610310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48610690"/>
        <function-ref name="ready" scoped="" ref="0x7fbb48610820"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb486109b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb48610c40" loc="45:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb48610c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4860f020"/>
        <function-ref name="header" scoped="" ref="0x7fbb4860f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fbb4860f400" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb4860f400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbb4860f780"/>
        <function-ref name="wait" scoped="" ref="0x7fbb4860f910"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb4860faa0"/>
        <function-ref name="isFree" scoped="" ref="0x7fbb4860fc30"/>
        <function-ref name="getNow" scoped="" ref="0x7fbb4860fdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb4860d0a0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb4860d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7fbb4860d420"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7fbb4860d5b0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7fbb4860d740"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7fbb4860d8d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb48611ac0" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48611ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48611e40"/>
        <function-ref name="header" scoped="" ref="0x7fbb48610020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fbb486111d0" loc="39:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb486111d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48611550"/>
        <function-ref name="ready" scoped="" ref="0x7fbb486116e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48611870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb472ba820" loc="47:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb472ba820"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb472baba0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb472bad30"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb472b9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb472b92b0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb472b92b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb472b9630"/>
        <function-ref name="header" scoped="" ref="0x7fbb472b97c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fbb472b9a10" loc="49:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb472b9a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbb472b9d90"/>
        <function-ref name="wait" scoped="" ref="0x7fbb472b8020"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb472b81b0"/>
        <function-ref name="isFree" scoped="" ref="0x7fbb472b8340"/>
        <function-ref name="getNow" scoped="" ref="0x7fbb472b84d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7fbb472b8720" loc="50:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7fbb472b8720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7fbb472b8aa0"/>
        <function-ref name="rand32" scoped="" ref="0x7fbb472b8c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb472b7020" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb472b7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7fbb472b73a0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7fbb472b7530"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7fbb472b76c0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7fbb472b7850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb472ba020" loc="43:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb472ba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb472ba3a0"/>
        <function-ref name="header" scoped="" ref="0x7fbb472ba530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fbb472bb660" loc="42:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb472bb660"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb472bb9e0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb472bbb70"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb472bbd00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0x7fbb472b7b20" loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0x7fbb472b7b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb472b6020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb472b61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7fbb48626a20" loc="46:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7fbb48626a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7fbb48626da0"/>
        <function-ref name="rand32" scoped="" ref="0x7fbb48625020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7fbb48624920" loc="45:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7fbb48624920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48626560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb4862a9a0" loc="44:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb4862a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb4862ad20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7fbb4861fa20" loc="48:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7fbb4861fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7fbb4861fda0"/>
        <function-ref name="rand32" scoped="" ref="0x7fbb4861e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7fbb48620940" loc="47:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7fbb48620940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb4861f560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48620080" loc="46:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48620080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48620400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb485dc020" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb485dc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb485dc3a0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb485dc530"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb485dc6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb485dc950" loc="50:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb485dc950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb485dccd0"/>
        <function-ref name="header" scoped="" ref="0x7fbb485dce60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fbb485db0e0" loc="51:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb485db0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbb485db460"/>
        <function-ref name="wait" scoped="" ref="0x7fbb485db5f0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb485db780"/>
        <function-ref name="isFree" scoped="" ref="0x7fbb485db910"/>
        <function-ref name="getNow" scoped="" ref="0x7fbb485dbaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0x7fbb485dae60" loc="54:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0x7fbb485dae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb485d9210"/>
        <function-ref name="get" scoped="" ref="0x7fbb485d93a0"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb485d9530"/>
        <function-ref name="set" scoped="" ref="0x7fbb485d96c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb485dbd30" loc="53:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb485dbd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7fbb485da0e0"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7fbb485da270"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fbb485da400"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7fbb485da590"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7fbb485da720"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7fbb485da8b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fbb485daa40"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fbb485dabd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb48608d60" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48608d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb485dd180"/>
        <function-ref name="header" scoped="" ref="0x7fbb485dd310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fbb48608470" loc="42:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb48608470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb486087f0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb48608980"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48608b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbb485dd560" loc="44:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb485dd560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb485dd8e0"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb485dda70"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb485ddc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb485c0ac0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb485c0ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb485c0e40"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb485bf020"/>
        <function-ref name="start" scoped="" ref="0x7fbb485bf1b0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb485bf340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7fbb485bc400" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7fbb485bc400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fbb485bc780"/>
        <function-ref name="request" scoped="" ref="0x7fbb485bc910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb485b7b00" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb485b7b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb485b7e80"/>
        <function-ref name="ready" scoped="" ref="0x7fbb485b6030"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb485b61c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb485b6450" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb485b6450"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb485b67d0"/>
        <function-ref name="header" scoped="" ref="0x7fbb485b6960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7fbb485be470" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fbb485be470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fbb485be7f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7fbb485be980"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb485beb10"/>
        <function-ref name="done" scoped="" ref="0x7fbb485beca0"/>
        <function-ref name="standby" scoped="" ref="0x7fbb485bee30"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb485bd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb485bcb60" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb485bcb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb485bb020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb485bb1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb485bb340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb485bb4d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb485bb660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb485bb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7fbb485b9be0" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7fbb485b9be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fbb485b70a0"/>
        <function-ref name="turnOn" scoped="" ref="0x7fbb485b7230"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb485b73c0"/>
        <function-ref name="done" scoped="" ref="0x7fbb485b7550"/>
        <function-ref name="standby" scoped="" ref="0x7fbb485b76e0"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb485b7870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7fbb485bba80" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7fbb485bba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fbb485bbe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb485bdb60" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb485bdb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb485bc020"/>
        <function-ref name="header" scoped="" ref="0x7fbb485bc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7fbb485b95d0" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7fbb485b95d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb485b9950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7fbb485ba120" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7fbb485ba120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb485ba4a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb485ba630"/>
        <function-ref name="start" scoped="" ref="0x7fbb485ba7c0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb485ba950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb485b5440" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb485b5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb485b57c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb485b5950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb485b5ae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb485b5c70"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb485b5e00"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb485b4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7fbb485bfe80" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7fbb485bfe80"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb485be220"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb485b42b0" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb485b42b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fbb485b4630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7fbb485babe0" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7fbb485babe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb485b9020"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb485b91b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb485b9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fbb485bd270" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb485bd270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb485bd5f0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb485bd780"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb485bd910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7fbb485b6bf0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7fbb485b6bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fbb485b5020"/>
        <function-ref name="request" scoped="" ref="0x7fbb485b51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7fbb485bf590" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7fbb485bf590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb485bf910"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb485bfaa0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb485bfc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7fbb483a3b00" loc="50:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7fbb483a3b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb483a3e80"/>
        <function-ref name="get" scoped="" ref="0x7fbb483a2030"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb483a21c0"/>
        <function-ref name="set" scoped="" ref="0x7fbb483a2350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb483a7c20" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb483a7c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb483a6020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb483a61b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb483a6340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb483a64d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb483a6660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb483a67f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb483a4cd0" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb483a4cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb483a30a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb483a3230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb483a33c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb483a3550"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb483a36e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb483a3870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fbb483a9020" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb483a9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb483a85a0"/>
        <function-ref name="clear" scoped="" ref="0x7fbb483a8cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb483a9e30"/>
        <function-ref name="set" scoped="" ref="0x7fbb483a7460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7fbb483a6c00" loc="48:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb483a6c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb483a48a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fbb483ad020" loc="41:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb483ad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb483ac5a0"/>
        <function-ref name="clear" scoped="" ref="0x7fbb483accd0"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb483ade30"/>
        <function-ref name="set" scoped="" ref="0x7fbb483ab460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7fbb47255e60" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7fbb47255e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47254210"/>
        <function-ref name="get" scoped="" ref="0x7fbb472543a0"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb47254530"/>
        <function-ref name="set" scoped="" ref="0x7fbb472546c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb47255020" loc="44:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb47255020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb472553a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47255530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb472556c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47255850"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb472559e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb47255b70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb47252cd0" loc="54:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb47252cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb472500a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47250230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb472503c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47250550"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb472506e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb47250870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fbb472592a0" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb472592a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb47258800"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47256020"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb472580d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47256750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7fbb47254a70" loc="51:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb47254a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb472536f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7fbb47253c40" loc="52:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7fbb47253c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb472528a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fbb4725d360" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb4725d360"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb4725c8e0"/>
        <function-ref name="clear" scoped="" ref="0x7fbb4725a090"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb4725c1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4725a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fbb4855d080" loc="20:../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fbb4855d080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb4855dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fbb48559a40" loc="46:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7fbb48559a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48554020"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48557510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb48556300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb48557e10"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb48554920"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb485544a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb48557990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb48558670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb48556910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb48558b40"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48557090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fbb48553020" loc="47:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fbb48553020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48553c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb4855cb40" loc="45:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb4855cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48559020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7fbb48549850" loc="29:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7fbb48549850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb485486a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb48547090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb48548b60"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48547550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48550790" loc="27:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48550790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48550b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7fbb4854d1d0" loc="28:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7fbb4854d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb4854bb30"/>
        <function-ref name="fired" scoped="" ref="0x7fbb4854c9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb4854b4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb4854b020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48549020"/>
        <function-ref name="start" scoped="" ref="0x7fbb4854c020"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4854c530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb48456d40" loc="61:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb48456d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48453670"/>
        <function-ref name="fired" scoped="" ref="0x7fbb48454590"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb48453020"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb48454a50"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48453b30"/>
        <function-ref name="start" scoped="" ref="0x7fbb48455ba0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb484540d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48456530" loc="60:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48456530"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7fbb49308020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7fbb49308020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb484568b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb48452180" loc="62:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb48452180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48450020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb484509a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb484504e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48450e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x7fbb47224e20" loc="66:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb47224e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fbb472221c0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fbb47222350"/>
        <function-ref name="getControlA" scoped="" ref="0x7fbb472224e0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fbb47222670"/>
        <function-ref name="setControlB" scoped="" ref="0x7fbb47222800"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fbb47222990"/>
        <function-ref name="getControlB" scoped="" ref="0x7fbb47222b20"/>
        <function-ref name="setControlA" scoped="" ref="0x7fbb47222cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb4722f4b0" loc="61:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb4722f4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb4722cdb0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb4722eda0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb4722c760"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb4722c2a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb4722b2a0"/>
        <function-ref name="start" scoped="" ref="0x7fbb4722e3d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4722e8e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47230c20" loc="60:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47230c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb4722f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb4722b8d0" loc="62:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb4722b8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb4722a780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb47229150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb4722ac40"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb47229610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x7fbb4721e450" loc="68:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7fbb4721e450"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7fbb4721e7d0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7fbb4721e960"/>
        <function-ref name="controlABusy" scoped="" ref="0x7fbb4721eaf0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7fbb4721ec80"/>
        <function-ref name="countBusy" scoped="" ref="0x7fbb4721ee10"/>
        <function-ref name="compareABusy" scoped="" ref="0x7fbb4721c020"/>
        <function-ref name="getAssr" scoped="" ref="0x7fbb4721c1b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7fbb4721c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x7fbb472210a0" loc="67:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fbb472210a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb4721fa10"/>
        <function-ref name="fired" scoped="" ref="0x7fbb472206c0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47221cd0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb47220b80"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb4721e020"/>
        <function-ref name="set" scoped="" ref="0x7fbb472201b0"/>
        <function-ref name="start" scoped="" ref="0x7fbb4721f090"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4721f550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbb47229bc0" loc="65:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb47229bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb47224020"/>
        <function-ref name="test" scoped="" ref="0x7fbb47225590"/>
        <function-ref name="get" scoped="" ref="0x7fbb47227820"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb472244e0"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb472249f0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb47226720"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb47226260"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb47225a50"/>
        <function-ref name="set" scoped="" ref="0x7fbb47227ce0"/>
        <function-ref name="start" scoped="" ref="0x7fbb47226be0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb472250d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fbb484ca2b0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb484ca2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fbb484ca630"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fbb484ca7c0"/>
        <function-ref name="getControlA" scoped="" ref="0x7fbb484ca950"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fbb484caae0"/>
        <function-ref name="setControlB" scoped="" ref="0x7fbb484cac70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fbb484cae00"/>
        <function-ref name="getControlB" scoped="" ref="0x7fbb484c9020"/>
        <function-ref name="setControlA" scoped="" ref="0x7fbb484c91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7fbb484c5b30" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7fbb484c5b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7fbb484c4020"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7fbb484c41b0"/>
        <function-ref name="controlABusy" scoped="" ref="0x7fbb484c4340"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7fbb484c44d0"/>
        <function-ref name="countBusy" scoped="" ref="0x7fbb484c4660"/>
        <function-ref name="compareABusy" scoped="" ref="0x7fbb484c47f0"/>
        <function-ref name="getAssr" scoped="" ref="0x7fbb484c4980"/>
        <function-ref name="setAssr" scoped="" ref="0x7fbb484c4b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbb484c96b0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fbb484c96b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb484c5110"/>
        <function-ref name="fired" scoped="" ref="0x7fbb484c8da0"/>
        <function-ref name="get" scoped="" ref="0x7fbb484c83d0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb484c62a0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb484c55d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb484c8890"/>
        <function-ref name="start" scoped="" ref="0x7fbb484c6760"/>
        <function-ref name="stop" scoped="" ref="0x7fbb484c6c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb484d2e20" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb484d2e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb484cb350"/>
        <function-ref name="test" scoped="" ref="0x7fbb484cc9a0"/>
        <function-ref name="get" scoped="" ref="0x7fbb484cfac0"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb484cb810"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb484cbd20"/>
        <function-ref name="reset" scoped="" ref="0x7fbb484ce9f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb484ce530"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb484cce60"/>
        <function-ref name="set" scoped="" ref="0x7fbb484ce020"/>
        <function-ref name="start" scoped="" ref="0x7fbb484cc020"/>
        <function-ref name="stop" scoped="" ref="0x7fbb484cc4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fbb484ba570" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb484ba570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fbb484ba8f0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fbb484baa80"/>
        <function-ref name="getControlA" scoped="" ref="0x7fbb484bac10"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fbb484bada0"/>
        <function-ref name="setControlB" scoped="" ref="0x7fbb484b9020"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fbb484b91b0"/>
        <function-ref name="getControlB" scoped="" ref="0x7fbb484b9340"/>
        <function-ref name="setControlA" scoped="" ref="0x7fbb484b94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7fbb484b5cb0" loc="85:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fbb484b5cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fbb484b40a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7fbb484b4460" loc="86:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7fbb484b4460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7fbb484b47e0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7fbb484b4970"/>
        <function-ref name="controlABusy" scoped="" ref="0x7fbb484b4b00"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7fbb484b4c90"/>
        <function-ref name="countBusy" scoped="" ref="0x7fbb484b4e20"/>
        <function-ref name="compareABusy" scoped="" ref="0x7fbb484b3020"/>
        <function-ref name="getAssr" scoped="" ref="0x7fbb484b31b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7fbb484b3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbb484b99d0" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fbb484b99d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb484b5350"/>
        <function-ref name="fired" scoped="" ref="0x7fbb484b6020"/>
        <function-ref name="get" scoped="" ref="0x7fbb484b7630"/>
        <function-ref name="reset" scoped="" ref="0x7fbb484b64e0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb484b5810"/>
        <function-ref name="set" scoped="" ref="0x7fbb484b7af0"/>
        <function-ref name="start" scoped="" ref="0x7fbb484b69a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb484b6e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb484bf060" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb484bf060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb484bb4e0"/>
        <function-ref name="test" scoped="" ref="0x7fbb484bca10"/>
        <function-ref name="get" scoped="" ref="0x7fbb484bfc90"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb484bb9a0"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb484ba020"/>
        <function-ref name="reset" scoped="" ref="0x7fbb484beb80"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb484be6c0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb484bb020"/>
        <function-ref name="set" scoped="" ref="0x7fbb484be1b0"/>
        <function-ref name="start" scoped="" ref="0x7fbb484bc090"/>
        <function-ref name="stop" scoped="" ref="0x7fbb484bc550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7fbb4841e490" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7fbb4841e490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb4841e810"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb4841e9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fbb484211d0" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb484211d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb4841fb30"/>
        <function-ref name="fired" scoped="" ref="0x7fbb484209f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb4841f4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb4841f020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb4841e020"/>
        <function-ref name="start" scoped="" ref="0x7fbb48420020"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48420530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb48427d60" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb48427d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48423220"/>
        <function-ref name="fired" scoped="" ref="0x7fbb484257d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb48424590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb48424110"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb48423b20"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb484236a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb48425c50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb48426980"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb48424ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb48426e50"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48425350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7fbb483cda00" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7fbb483cda00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb483cdd80"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb483cc020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fbb483d3640" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7fbb483d3640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb483cfc40"/>
        <function-ref name="fired" scoped="" ref="0x7fbb483d01e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb483cf020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb483d0ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb483cd590"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb483cd110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb483d0660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb483d1390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb483cf630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb483d1860"/>
        <function-ref name="stop" scoped="" ref="0x7fbb483d1d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb483d8150" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb483d8150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb483d4700"/>
        <function-ref name="fired" scoped="" ref="0x7fbb483d7c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb483d6a50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb483d65b0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb483d3090"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb483d4ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb483d6110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb483d8d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb483d40d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb483d72a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb483d7790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fbb483ca790" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fbb483ca790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb483c93f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbb483c9a60" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb483c9a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb483bf890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb483be260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb483bfd50"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb483be720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fbb483b62e0" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7fbb483b62e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb483b3870"/>
        <function-ref name="fired" scoped="" ref="0x7fbb483b5e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb483b4c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb483b4780"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb483b11e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb483b3cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb483b4300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb483b5020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb483b3260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb483b54f0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb483b59c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb4839d590" loc="43:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb4839d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4839d910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb4839daa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4839dc30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb4839ddc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb4837d020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb4837d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb4837d4a0" loc="48:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb4837d4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4837d820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb4837d9b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4837db40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb4837dcd0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb4837de60"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb4837c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x7fbb4839e9b0" loc="42:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x7fbb4839e9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4839ed50"/>
        <function-ref name="get" scoped="" ref="0x7fbb4839d020"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb4839d1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4839d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb4837a0e0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb4837a0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb4837a460"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb4837a5f0"/>
        <function-ref name="start" scoped="" ref="0x7fbb4837a780"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4837a910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7fbb48376b60" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7fbb48376b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fbb48375020"/>
        <function-ref name="request" scoped="" ref="0x7fbb483751b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb48371440" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb48371440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb483717c0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb48371950"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48371ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb48371d70" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb48371d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4836f180"/>
        <function-ref name="header" scoped="" ref="0x7fbb4836f310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7fbb48378b60" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fbb48378b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fbb48377020"/>
        <function-ref name="turnOn" scoped="" ref="0x7fbb483771b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb48377340"/>
        <function-ref name="done" scoped="" ref="0x7fbb483774d0"/>
        <function-ref name="standby" scoped="" ref="0x7fbb48377660"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb483777f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb48375400" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48375400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48375780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48375910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48375aa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48375c30"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb48375dc0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb48374020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7fbb48372410" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7fbb48372410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fbb48372890"/>
        <function-ref name="turnOn" scoped="" ref="0x7fbb48372a20"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb48372bb0"/>
        <function-ref name="done" scoped="" ref="0x7fbb48372d40"/>
        <function-ref name="standby" scoped="" ref="0x7fbb48371020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb483711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7fbb483742b0" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7fbb483742b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fbb48374630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb48376400" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48376400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48376780"/>
        <function-ref name="header" scoped="" ref="0x7fbb48376910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7fbb48373d70" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7fbb48373d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48372180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7fbb48374920" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7fbb48374920"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb48374ca0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb48374e30"/>
        <function-ref name="start" scoped="" ref="0x7fbb48373020"/>
        <function-ref name="stop" scoped="" ref="0x7fbb483731b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb4836fd40" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb4836fd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4836e0e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb4836e270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4836e400"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb4836e590"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb4836e720"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb4836e8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7fbb48378590" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7fbb48378590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48378910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb4836eb40" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb4836eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fbb4836d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7fbb48373440" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7fbb48373440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb483737c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48373950"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48373ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fbb48377a40" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb48377a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48377dc0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb48376020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb483761b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7fbb4836f5a0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7fbb4836f5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fbb4836f920"/>
        <function-ref name="request" scoped="" ref="0x7fbb4836fab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7fbb4837ab60" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7fbb4837ab60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48378020"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb483781b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48378340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7fbb483655c0" loc="45:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7fbb483655c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fbb48365940"/>
        <function-ref name="request" scoped="" ref="0x7fbb48365ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7fbb483603b0" loc="49:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb483603b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4835fac0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4835f570"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb4835f020"/>
        <function-ref name="set" scoped="" ref="0x7fbb4835d090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7fbb4834bca0" loc="64:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7fbb4834bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4834a0a0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4834a230"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb4834a3c0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4834a550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7fbb4834f2e0" loc="61:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fbb4834f2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb4834e840"/>
        <function-ref name="clear" scoped="" ref="0x7fbb4834c020"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb4834e110"/>
        <function-ref name="set" scoped="" ref="0x7fbb4834c750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7fbb48369600" loc="42:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fbb48369600"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fbb48369980"/>
        <function-ref name="turnOn" scoped="" ref="0x7fbb48369b10"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb48369ca0"/>
        <function-ref name="done" scoped="" ref="0x7fbb48369e30"/>
        <function-ref name="standby" scoped="" ref="0x7fbb48366020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb483661b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fbb48349470" loc="66:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48349470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbb483497f0"/>
        <function-ref name="wait" scoped="" ref="0x7fbb48349980"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48349b10"/>
        <function-ref name="isFree" scoped="" ref="0x7fbb48349ca0"/>
        <function-ref name="getNow" scoped="" ref="0x7fbb48349e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7fbb48364e80" loc="48:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb48364e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb483625e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48362090"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48363ad0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48362b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb48365d90" loc="46:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb48365d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48364180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb48364310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb483644a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb48364630"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb483647c0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb48364950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb483501f0" loc="60:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb483501f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb48350670"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb48350800"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb48350990"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7fbb48350b20"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7fbb48350cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb48366dd0" loc="44:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb48366dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb48365180"/>
        <function-ref name="header" scoped="" ref="0x7fbb48365310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb48355dd0" loc="55:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb48355dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7fbb49161180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb483516e0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb483536b0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb48351090"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb48353b70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48351ba0"/>
        <function-ref name="start" scoped="" ref="0x7fbb48354ca0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb483531f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7fbb4835d940" loc="50:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb4835d940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4835b090"/>
        <function-ref name="get" scoped="" ref="0x7fbb4835caf0"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb4835c5a0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4835b5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7fbb48356a40" loc="54:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48356a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb483556b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fbb48366460" loc="43:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb48366460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb483667e0"/>
        <function-ref name="ready" scoped="" ref="0x7fbb48366970"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb48366b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7fbb4835be70" loc="51:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb4835be70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb483585e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48358090"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48359ad0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48358b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7fbb4834a8d0" loc="65:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fbb4834a8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4834ac50"/>
        <function-ref name="get" scoped="" ref="0x7fbb4834ade0"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb48349020"/>
        <function-ref name="set" scoped="" ref="0x7fbb483491b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7fbb4834b110" loc="63:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fbb4834b110"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4834b490"/>
        <function-ref name="get" scoped="" ref="0x7fbb4834b620"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb4834b7b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4834b940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7fbb483561e0" loc="52:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb483561e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7fbb48356560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fbb48348110" loc="67:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fbb48348110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fbb48348490"/>
        <function-ref name="suspend" scoped="" ref="0x7fbb48348620"/>
        <function-ref name="resume" scoped="" ref="0x7fbb483487b0"/>
        <function-ref name="run" scoped="" ref="0x7fbb48348940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7fbb4833fc40" loc="52:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7fbb4833fc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fbb4833e020"/>
        <function-ref name="request" scoped="" ref="0x7fbb4833e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7fbb4831e430" loc="74:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7fbb4831e430"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7fbb483243d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7fbb4833aa40" loc="56:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7fbb4833aa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb483371b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48339c00"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb483396b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48337700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7fbb4831c6a0" loc="80:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7fbb4831c6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4831ca20"/>
        <function-ref name="get" scoped="" ref="0x7fbb4831cbb0"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb4831cd40"/>
        <function-ref name="set" scoped="" ref="0x7fbb4831b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7fbb48341600" loc="47:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7fbb48341600"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7fbb493083a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7fbb493083a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48341980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7fbb48319200" loc="83:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fbb48319200"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb48318970"/>
        <function-ref name="clear" scoped="" ref="0x7fbb483170d0"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb48318240"/>
        <function-ref name="set" scoped="" ref="0x7fbb48317800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7fbb4832b020" loc="70:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7fbb4832b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4832b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4832b530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4832b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4832b850"/>
        <function-ref name="get" scoped="" ref="0x7fbb4832b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4832bb70"/>
        <function-ref name="set" scoped="" ref="0x7fbb4832bd00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb48326020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fbb48316b70" loc="86:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fbb48316b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbb48314020"/>
        <function-ref name="wait" scoped="" ref="0x7fbb483141b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb48314340"/>
        <function-ref name="isFree" scoped="" ref="0x7fbb483144d0"/>
        <function-ref name="getNow" scoped="" ref="0x7fbb48314660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7fbb48341c40" loc="49:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fbb48341c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fbb48340020"/>
        <function-ref name="turnOn" scoped="" ref="0x7fbb483401b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7fbb48340340"/>
        <function-ref name="done" scoped="" ref="0x7fbb483404d0"/>
        <function-ref name="standby" scoped="" ref="0x7fbb48340660"/>
        <function-ref name="getChannel" scoped="" ref="0x7fbb483407f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7fbb483249d0" loc="75:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fbb483249d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48321630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7fbb4833d550" loc="55:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fbb4833d550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4833cc50"/>
        <function-ref name="get" scoped="" ref="0x7fbb4833c700"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb4833c1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4833a1f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fbb4833e470" loc="53:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fbb4833e470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4833e7f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb4833e980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4833eb10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb4833eca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb4833ee30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb4833d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0x7fbb48327dd0" loc="69:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7fbb48327dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4832c180"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4832c310"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4832c4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4832c630"/>
        <function-ref name="get" scoped="" ref="0x7fbb4832c7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4832c950"/>
        <function-ref name="set" scoped="" ref="0x7fbb4832cae0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4832cc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbb48321b50" loc="77:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fbb48321b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4831d020"/>
        <function-ref name="headerLength" scoped="" ref="0x7fbb4831d1b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fbb4831d340"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7fbb4831d4d0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7fbb4831d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fbb4833f480" loc="51:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fbb4833f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4833f800"/>
        <function-ref name="header" scoped="" ref="0x7fbb4833f990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0x7fbb48285e40" loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0x7fbb48285e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb482841e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb48284370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7fbb48336020" loc="57:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb48336020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48335740"/>
        <function-ref name="get" scoped="" ref="0x7fbb483351f0"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb48336c50"/>
        <function-ref name="set" scoped="" ref="0x7fbb48335c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7fbb48342a60" loc="46:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48342a60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7fbb493083a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7fbb493083a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48342de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7fbb4832e380" loc="65:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7fbb4832e380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb4832e700"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb4832e890"/>
        <function-ref name="request" scoped="" ref="0x7fbb4832ea20"/>
        <function-ref name="granted" scoped="" ref="0x7fbb4832ebb0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb4832ed40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0x7fbb4832f020" loc="64:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7fbb4832f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4832f4a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4832f630"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4832f7c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4832f950"/>
        <function-ref name="get" scoped="" ref="0x7fbb4832fae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4832fc70"/>
        <function-ref name="set" scoped="" ref="0x7fbb4832fe00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4832e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7fbb48333560" loc="58:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fbb48333560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb48332c90"/>
        <function-ref name="get" scoped="" ref="0x7fbb48332740"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb483321f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48330230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fbb48340aa0" loc="50:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fbb48340aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb48340e20"/>
        <function-ref name="ready" scoped="" ref="0x7fbb4833f020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb4833f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0x7fbb48322b30" loc="72:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7fbb48322b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7fbb48325020"/>
        <function-ref name="disable" scoped="" ref="0x7fbb483251b0"/>
        <function-ref name="captured" scoped="" ref="0x7fbb48325340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7fbb483254d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0x7fbb48327270" loc="67:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb48327270"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7fbb483275f0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7fbb48327780"/>
        <function-ref name="splitRead" scoped="" ref="0x7fbb48327910"/>
        <function-ref name="write" scoped="" ref="0x7fbb48327aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7fbb4831b3a0" loc="81:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fbb4831b3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4831b720"/>
        <function-ref name="get" scoped="" ref="0x7fbb4831b8b0"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb4831ba40"/>
        <function-ref name="set" scoped="" ref="0x7fbb4831bbd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7fbb4831da10" loc="79:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fbb4831da10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4831dd90"/>
        <function-ref name="get" scoped="" ref="0x7fbb4831c020"/>
        <function-ref name="setValue" scoped="" ref="0x7fbb4831c1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4831c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7fbb483308b0" loc="59:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fbb483308b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7fbb48330c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fbb48316080" loc="85:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fbb48316080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fbb48316400"/>
        <function-ref name="suspend" scoped="" ref="0x7fbb48316590"/>
        <function-ref name="resume" scoped="" ref="0x7fbb48316720"/>
        <function-ref name="run" scoped="" ref="0x7fbb483168b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7fbb4823f7f0" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7fbb4823f7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4823fb70"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4823fd00"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4823e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4823e1b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4823e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4823e4d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4823e660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4823e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0x7fbb482404e0" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7fbb482404e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48240860"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb482409f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48240b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb48240d10"/>
        <function-ref name="get" scoped="" ref="0x7fbb4823f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4823f1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4823f340"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4823f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb4823dac0" loc="49:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb4823dac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb48239390"/>
        <function-ref name="fired" scoped="" ref="0x7fbb4823a360"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb4823ace0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb4823a820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb48239850"/>
        <function-ref name="start" scoped="" ref="0x7fbb4823c970"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4823ce80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0x7fbb48242b50" loc="42:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7fbb48242b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb48241020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb482411b0"/>
        <function-ref name="request" scoped="" ref="0x7fbb48241340"/>
        <function-ref name="granted" scoped="" ref="0x7fbb482414d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb48241660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0x7fbb48245940" loc="41:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7fbb48245940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb48245cc0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb48245e50"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb48242020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb482421b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb48242340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb482424d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb48242660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb482427f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7fbb4823eb10" loc="48:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7fbb4823eb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7fbb4823d020"/>
        <function-ref name="disable" scoped="" ref="0x7fbb4823d1b0"/>
        <function-ref name="captured" scoped="" ref="0x7fbb4823d340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7fbb4823d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7fbb48241920" loc="43:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb48241920"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7fbb48241ca0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7fbb48241e30"/>
        <function-ref name="splitRead" scoped="" ref="0x7fbb48240020"/>
        <function-ref name="write" scoped="" ref="0x7fbb482401b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7fbb48238020" loc="50:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb48238020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48238c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0x7fbb4822fa20" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0x7fbb4822fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4822fda0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4822d020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4822d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4822d340"/>
        <function-ref name="get" scoped="" ref="0x7fbb4822d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4822d660"/>
        <function-ref name="set" scoped="" ref="0x7fbb4822d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4822d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0x7fbb48232020" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fbb48232020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fbb4822f4e0"/>
        <function-ref name="test" scoped="" ref="0x7fbb48230a10"/>
        <function-ref name="get" scoped="" ref="0x7fbb48232c50"/>
        <function-ref name="captured" scoped="" ref="0x7fbb48231660"/>
        <function-ref name="reset" scoped="" ref="0x7fbb48231b70"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb4822f020"/>
        <function-ref name="set" scoped="" ref="0x7fbb48231150"/>
        <function-ref name="start" scoped="" ref="0x7fbb48230090"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48230550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0x7fbb4822dcc0" loc="47:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0x7fbb4822dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb4822c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb4822c230"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb4822c3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb4822c550"/>
        <function-ref name="get" scoped="" ref="0x7fbb4822c6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb4822c870"/>
        <function-ref name="set" scoped="" ref="0x7fbb4822ca00"/>
        <function-ref name="clr" scoped="" ref="0x7fbb4822cb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7fbb48234680" loc="40:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fbb48234680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48234a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7fbb482379c0" loc="39:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7fbb482379c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7fbb48237d40"/>
        <function-ref name="disable" scoped="" ref="0x7fbb48234020"/>
        <function-ref name="captured" scoped="" ref="0x7fbb482341b0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7fbb48234340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7fbb48212e60" loc="84:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7fbb48212e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb4821a210"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb4821a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7fbb4821bc20" loc="82:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7fbb4821bc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7fbb4821d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48220630" loc="81:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48220630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb482209b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7fbb4821d320" loc="83:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb4821d320"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7fbb4821d6a0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7fbb4821d830"/>
        <function-ref name="splitRead" scoped="" ref="0x7fbb4821d9c0"/>
        <function-ref name="write" scoped="" ref="0x7fbb4821db50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbb4821abd0" loc="85:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fbb4821abd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb48219020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb482191b0"/>
        <function-ref name="request" scoped="" ref="0x7fbb48219340"/>
        <function-ref name="granted" scoped="" ref="0x7fbb482194d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb48219660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fbb4820c050" loc="95:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb4820c050"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbb4820c3d0"/>
        <function-ref name="configure" scoped="" ref="0x7fbb4820c560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x7fbb481cf190" loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x7fbb481cf190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb481cf510"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb481cf6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7fbb4820e2d0" loc="94:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7fbb4820e2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb4820e650"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb4820e7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7fbb4820f020" loc="92:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7fbb4820f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7fbb4820f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb48210900" loc="91:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb48210900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb48210c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x7fbb481f2a40" loc="98:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x7fbb481f2a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7fbb481f2dc0"/>
        <function-ref name="sleep" scoped="" ref="0x7fbb481f0340"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7fbb4820b1b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7fbb481f04d0"/>
        <function-ref name="initMaster" scoped="" ref="0x7fbb4820b4d0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7fbb4820b660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fbb4820b7f0"/>
        <function-ref name="read" scoped="" ref="0x7fbb4820b980"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7fbb4820bb10"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7fbb4820bca0"/>
        <function-ref name="setClock" scoped="" ref="0x7fbb4820be30"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbb4820a020"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7fbb4820a1b0"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7fbb4820a440"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7fbb4820a5d0"/>
        <function-ref name="write" scoped="" ref="0x7fbb4820a760"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fbb4820a8f0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7fbb4820aa80"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7fbb4820ac10"/>
        <function-ref name="getClock" scoped="" ref="0x7fbb4820ada0"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7fbb481f0020"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7fbb4820b020"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7fbb4820b340"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7fbb481f01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7fbb4820f660" loc="93:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7fbb4820f660"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7fbb4820f9e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7fbb4820fb70"/>
        <function-ref name="splitRead" scoped="" ref="0x7fbb4820fd00"/>
        <function-ref name="write" scoped="" ref="0x7fbb4820e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7fbb481f07b0" loc="99:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7fbb481f07b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fbb481f0b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x7fbb481b1c70" loc="76:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x7fbb481b1c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7fbb481ad020"/>
        <function-ref name="sleep" scoped="" ref="0x7fbb481ab4d0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7fbb481ad340"/>
        <function-ref name="dataReady" scoped="" ref="0x7fbb481ab660"/>
        <function-ref name="initMaster" scoped="" ref="0x7fbb481ad660"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7fbb481ad7f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fbb481ad980"/>
        <function-ref name="read" scoped="" ref="0x7fbb481adb10"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7fbb481adca0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7fbb481ade30"/>
        <function-ref name="setClock" scoped="" ref="0x7fbb481ac020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbb481ac1b0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7fbb481ac340"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7fbb481ac5d0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7fbb481ac760"/>
        <function-ref name="write" scoped="" ref="0x7fbb481ac8f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fbb481aca80"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7fbb481acc10"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7fbb481acda0"/>
        <function-ref name="getClock" scoped="" ref="0x7fbb481ab020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7fbb481ab1b0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7fbb481ad1b0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7fbb481ad4d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7fbb481ab340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x7fbb481a1b10" loc="81:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x7fbb481a1b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb481a0020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb481a01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb481a0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb481a04d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb481a0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb481a07f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb481a0980"/>
        <function-ref name="clr" scoped="" ref="0x7fbb481a0b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7fbb481a3650" loc="79:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7fbb481a3650"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb481a39d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb481a3b60"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb481a3cf0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb481a3e80"/>
        <function-ref name="get" scoped="" ref="0x7fbb481a2030"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb481a21c0"/>
        <function-ref name="set" scoped="" ref="0x7fbb481a2350"/>
        <function-ref name="clr" scoped="" ref="0x7fbb481a24e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x7fbb481a4390" loc="78:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x7fbb481a4390"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb481a4710"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb481a48a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb481a4a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb481a4bc0"/>
        <function-ref name="get" scoped="" ref="0x7fbb481a4d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb481a3020"/>
        <function-ref name="set" scoped="" ref="0x7fbb481a31b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbb481a3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fbb481a5990" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fbb481a5990"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb481a5d10"/>
        <function-ref name="stop" scoped="" ref="0x7fbb481a4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x7fbb481a0e50" loc="82:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x7fbb481a0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fbb4819f210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x7fbb481aab40" loc="74:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x7fbb481aab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7fbb481a7020"/>
        <function-ref name="sleep" scoped="" ref="0x7fbb481a54d0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7fbb481a7340"/>
        <function-ref name="dataReady" scoped="" ref="0x7fbb481a5660"/>
        <function-ref name="initMaster" scoped="" ref="0x7fbb481a7660"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7fbb481a77f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fbb481a7980"/>
        <function-ref name="read" scoped="" ref="0x7fbb481a7b10"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7fbb481a7ca0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7fbb481a7e30"/>
        <function-ref name="setClock" scoped="" ref="0x7fbb481a6020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbb481a61b0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7fbb481a6340"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7fbb481a65d0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7fbb481a6760"/>
        <function-ref name="write" scoped="" ref="0x7fbb481a68f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fbb481a6a80"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7fbb481a6c10"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7fbb481a6da0"/>
        <function-ref name="getClock" scoped="" ref="0x7fbb481a5020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7fbb481a51b0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7fbb481a71b0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7fbb481a74d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7fbb481a5340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x7fbb481a2800" loc="80:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x7fbb481a2800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbb481a2b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbb481a2d10"/>
        <function-ref name="toggle" scoped="" ref="0x7fbb481a1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbb481a11b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb481a1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbb481a14d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb481a1660"/>
        <function-ref name="clr" scoped="" ref="0x7fbb481a17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbb48154020" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbb48154020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbb481543c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbb48154550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbb481530d0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb481530d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbb48153470"/>
        <function-ref name="configure" scoped="" ref="0x7fbb48153600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbb48155210" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fbb48155210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb481555b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb48155740"/>
        <function-ref name="request" scoped="" ref="0x7fbb481558d0"/>
        <function-ref name="granted" scoped="" ref="0x7fbb48155a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb48155bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbb481547a0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbb481547a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbb48154b20"/>
        <function-ref name="userId" scoped="" ref="0x7fbb48154cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47191420" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47191420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb471917a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fbb47191a30" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7fbb47191a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fbb47191db0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fbb47190020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fbb471901b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb47190340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbb4718d850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbb4718d850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbb4718dbf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbb4718dd80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbb4718c910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbb4718c910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbb4718ccb0"/>
        <function-ref name="configure" scoped="" ref="0x7fbb4718ce40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fbb4718b120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fbb4718b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fbb4718b4a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fbb4718b630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fbb4718b7c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb4718b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbb4718e9d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fbb4718e9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbb4718ed70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbb4718d020"/>
        <function-ref name="request" scoped="" ref="0x7fbb4718d1b0"/>
        <function-ref name="granted" scoped="" ref="0x7fbb4718d340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbb4718d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbb4718c020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbb4718c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbb4718c3a0"/>
        <function-ref name="userId" scoped="" ref="0x7fbb4718c530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fbb4718bc20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7fbb4718bc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb4718a020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb4718a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb4814bc60" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb4814bc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb481474e0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb481484e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb48148e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb481489a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb481479a0"/>
        <function-ref name="start" scoped="" ref="0x7fbb4814aac0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb48148020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbb471654c0" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fbb471654c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7fbb49309c00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7fbb49309c00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7fbb491f89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb47162db0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb47164da0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbb47162760"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb471622a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbb471612a0"/>
        <function-ref name="start" scoped="" ref="0x7fbb471643d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb471648e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7fbb4715cc10" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7fbb4715cc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb471585d0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb4715a2a0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4715b8a0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb4715a760"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb47158a90"/>
        <function-ref name="set" scoped="" ref="0x7fbb4715bd60"/>
        <function-ref name="start" scoped="" ref="0x7fbb4715ac20"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47158110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7fbb471617f0" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7fbb471617f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb4715dcd0"/>
        <function-ref name="test" scoped="" ref="0x7fbb4715d350"/>
        <function-ref name="get" scoped="" ref="0x7fbb471604c0"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb4715c1b0"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb4715c6c0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb4715f4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb4715f020"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb4715d810"/>
        <function-ref name="set" scoped="" ref="0x7fbb47160980"/>
        <function-ref name="start" scoped="" ref="0x7fbb4715f9a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4715fe60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fbb48145880" loc="39:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fbb48145880"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48142500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fbb4813c540" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7fbb4813c540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb4813a3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb4813ad50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb4813a890"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48139260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb4813e180" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb4813e180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb4813d020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb4813d9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb4813d4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb4813de60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fbb48136020" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fbb48136020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48136c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbb48135300" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb48135300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb48134150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb48134ad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb48134610"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb48133020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7fbb4812d990" loc="36:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7fbb4812d990"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7fbb481297c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb480c8140" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TdmaMacC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb480c8140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb480c5630"/>
        <function-ref name="fired" scoped="" ref="0x7fbb480c7b70"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb480c6920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb480c64a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb480c3020"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb480c5ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb480c6020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb480c8d30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb480c5020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb480c7220"/>
        <function-ref name="stop" scoped="" ref="0x7fbb480c76f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb480c2b00" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TdmaMacC.FaultClearTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb480c2b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb480bd110"/>
        <function-ref name="fired" scoped="" ref="0x7fbb480c05b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb480bf4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb480bf020"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb480bda10"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb480bd590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb480c0a30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb480c1750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb480bfab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb480c1c20"/>
        <function-ref name="stop" scoped="" ref="0x7fbb480c0130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PCQ" ref="0x7fbb480022f0" loc="8:PrioCritQueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCQ" scoped="" ref="0x7fbb480022f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7fbb48001920"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7fbb47ffd650"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb47ffdd50"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47ffbad0"/>
        <function-ref name="sizeLO_Q2" scoped="" ref="0x7fbb47ffada0"/>
        <function-ref name="headPrio" scoped="" ref="0x7fbb47ffe3a0"/>
        <function-ref name="sizePrio" scoped="" ref="0x7fbb48001da0"/>
        <function-ref name="full" scoped="" ref="0x7fbb480014a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb480002a0"/>
        <function-ref name="clearLO" scoped="" ref="0x7fbb47ffb550"/>
        <function-ref name="sizeHI" scoped="" ref="0x7fbb47ffa020"/>
        <function-ref name="sizeLO_Q3" scoped="" ref="0x7fbb47ff9260"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb47ffeaa0"/>
        <function-ref name="sizeLO" scoped="" ref="0x7fbb47ffa4a0"/>
        <function-ref name="empty" scoped="" ref="0x7fbb48001020"/>
        <function-ref name="headHI" scoped="" ref="0x7fbb48000e60"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7fbb47ffd1d0"/>
        <function-ref name="sizeLO_Q1" scoped="" ref="0x7fbb47ffa920"/>
        <function-ref name="head" scoped="" ref="0x7fbb48000720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PrioCritQueue" ref="0x7fbb4712c770" loc="4:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PrioCritQueue" scoped="" ref="0x7fbb4712c770"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7fbb4712ac90"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7fbb471269d0"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb47125110"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47125e60"/>
        <function-ref name="sizeLO_Q2" scoped="" ref="0x7fbb471220d0"/>
        <function-ref name="headPrio" scoped="" ref="0x7fbb47128770"/>
        <function-ref name="sizePrio" scoped="" ref="0x7fbb47129170"/>
        <function-ref name="full" scoped="" ref="0x7fbb4712a810"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb47129640"/>
        <function-ref name="clearLO" scoped="" ref="0x7fbb471258e0"/>
        <function-ref name="sizeHI" scoped="" ref="0x7fbb47124310"/>
        <function-ref name="sizeLO_Q3" scoped="" ref="0x7fbb47122550"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb47128e70"/>
        <function-ref name="sizeLO" scoped="" ref="0x7fbb47124790"/>
        <function-ref name="empty" scoped="" ref="0x7fbb4712a390"/>
        <function-ref name="headHI" scoped="" ref="0x7fbb47128260"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7fbb47126550"/>
        <function-ref name="sizeLO_Q1" scoped="" ref="0x7fbb47124c10"/>
        <function-ref name="head" scoped="" ref="0x7fbb47129ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio3Queue" ref="0x7fbb471180f0" loc="9:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio3Queue" scoped="" ref="0x7fbb471180f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbb47115020"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb47115d80"/>
        <function-ref name="element" scoped="" ref="0x7fbb47114440"/>
        <function-ref name="full" scoped="" ref="0x7fbb471161e0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb47116ae0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb471156d0"/>
        <function-ref name="empty" scoped="" ref="0x7fbb47118ce0"/>
        <function-ref name="size" scoped="" ref="0x7fbb47116660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio1Queue" ref="0x7fbb47122b00" loc="7:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio1Queue" scoped="" ref="0x7fbb47122b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbb47120990"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb4711e740"/>
        <function-ref name="element" scoped="" ref="0x7fbb4711edb0"/>
        <function-ref name="full" scoped="" ref="0x7fbb47121bd0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb47120510"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb4711e090"/>
        <function-ref name="empty" scoped="" ref="0x7fbb47121750"/>
        <function-ref name="size" scoped="" ref="0x7fbb47120090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio2Queue" ref="0x7fbb4711d5e0" loc="8:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio2Queue" scoped="" ref="0x7fbb4711d5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbb4711a4a0"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb47119260"/>
        <function-ref name="element" scoped="" ref="0x7fbb471198d0"/>
        <function-ref name="full" scoped="" ref="0x7fbb4711c680"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb4711a020"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb4711ab50"/>
        <function-ref name="empty" scoped="" ref="0x7fbb4711c200"/>
        <function-ref name="size" scoped="" ref="0x7fbb4711cb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7fbb47110720" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fbb47110720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbb4710e5f0"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb4710c3a0"/>
        <function-ref name="element" scoped="" ref="0x7fbb4710ca10"/>
        <function-ref name="full" scoped="" ref="0x7fbb4710f810"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb4710e170"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb4710eca0"/>
        <function-ref name="empty" scoped="" ref="0x7fbb4710f390"/>
        <function-ref name="size" scoped="" ref="0x7fbb4710fc90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7fbb4710aa00" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fbb4710aa00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbb47107920"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb471066d0"/>
        <function-ref name="element" scoped="" ref="0x7fbb47106d40"/>
        <function-ref name="full" scoped="" ref="0x7fbb47109af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb471074a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb47106020"/>
        <function-ref name="empty" scoped="" ref="0x7fbb47109670"/>
        <function-ref name="size" scoped="" ref="0x7fbb47107020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7fbb47104d60" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fbb47104d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7fbb490c74c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7fbb490c4a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbb47101c00"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb471009a0"/>
        <function-ref name="element" scoped="" ref="0x7fbb470fe090"/>
        <function-ref name="full" scoped="" ref="0x7fbb47102e00"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb47101780"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb471002f0"/>
        <function-ref name="empty" scoped="" ref="0x7fbb47102980"/>
        <function-ref name="size" scoped="" ref="0x7fbb47101300"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbb47feeb30" loc="41:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb47feeb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb47fed020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GlobalTime" ref="0x7fbb47fec300" loc="44:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7fbb47fec300"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7fbb47feb020"/>
        <function-ref name="global2Local" scoped="" ref="0x7fbb47fea020"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7fbb47feb4e0"/>
        <function-ref name="local2Global" scoped="" ref="0x7fbb47feba30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncInfo" ref="0x7fbb47fea580" loc="47:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7fbb47fea580"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7fbb47fea900"/>
        <function-ref name="getRootID" scoped="" ref="0x7fbb47feaa90"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7fbb47feac20"/>
        <function-ref name="getOffset" scoped="" ref="0x7fbb47feadb0"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7fbb47fe8020"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7fbb47fe81b0"/>
        <function-ref name="getSkew" scoped="" ref="0x7fbb47fe8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47fed2e0" loc="42:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47fed2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47fed660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncMode" ref="0x7fbb47fe8650" loc="48:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7fbb47fe8650"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47fe89d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbb47fe8b60"/>
        <function-ref name="setMode" scoped="" ref="0x7fbb47fe8cf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncNotify" ref="0x7fbb47fe4490" loc="49:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncNotify" scoped="" ref="0x7fbb47fe4490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncNotify"/>
      </instance>
      <interface-functions>
        <function-ref name="msg_received" scoped="" ref="0x7fbb47fe4810"/>
        <function-ref name="msg_sent" scoped="" ref="0x7fbb47fe49a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fbb47fed960" loc="43:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7fbb47fed960"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47fedce0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47fede70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbb47f36d50" loc="52:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb47f36d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb47f35100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GlobalTime" ref="0x7fbb47f3baf0" loc="43:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7fbb47f3baf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7fbb47f3a790"/>
        <function-ref name="global2Local" scoped="" ref="0x7fbb47f39740"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7fbb47f3ac50"/>
        <function-ref name="local2Global" scoped="" ref="0x7fbb47f391f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7fbb47f26600" loc="60:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fbb47f26600"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb47f25250"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x7fbb47f35390" loc="53:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x7fbb47f35390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb47f35710"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb47f358a0"/>
        <function-ref name="start" scoped="" ref="0x7fbb47f35a30"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47f35bc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fbb47f340f0" loc="54:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb47f340f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47f33020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47f31930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47f314b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47f338f0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47f33e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7fbb47f2b980" loc="57:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7fbb47f2b980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7fbb47f2bd00"/>
        <function-ref name="rand32" scoped="" ref="0x7fbb47f2a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncInfo" ref="0x7fbb47f39bc0" loc="46:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7fbb47f39bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7fbb47f37020"/>
        <function-ref name="getRootID" scoped="" ref="0x7fbb47f371b0"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7fbb47f37340"/>
        <function-ref name="getOffset" scoped="" ref="0x7fbb47f374d0"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7fbb47f37660"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7fbb47f377f0"/>
        <function-ref name="getSkew" scoped="" ref="0x7fbb47f37980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47f3cc10" loc="41:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47f3cc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47f3b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7fbb47f30020" loc="55:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47f30020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47f303a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncMode" ref="0x7fbb47f37bd0" loc="47:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7fbb47f37bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47f36020"/>
        <function-ref name="getMode" scoped="" ref="0x7fbb47f361b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbb47f36340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendMsg" ref="0x7fbb47f256c0" loc="349:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendMsg" scoped="" ref="0x7fbb47f256c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47f25a40"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47f25bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="processMsg" ref="0x7fbb47f24020" loc="292:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="processMsg" scoped="" ref="0x7fbb47f24020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47f243a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47f24530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb47f2a270" loc="58:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb47f2a270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb47f2a6f0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb47f2a880"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb47f2aa10"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb47f2aba0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb47f2ad30"/>
        <function-ref name="get" scoped="" ref="0x7fbb47f29020"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb47f291b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb47f297f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47f294d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb47f29340"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb47f29660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncNotify" ref="0x7fbb47f36590" loc="48:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncNotify" scoped="" ref="0x7fbb47f36590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncNotify"/>
      </instance>
      <interface-functions>
        <function-ref name="msg_received" scoped="" ref="0x7fbb47f36910"/>
        <function-ref name="msg_sent" scoped="" ref="0x7fbb47f36aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fbb47f3b270" loc="42:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7fbb47f3b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47f3b5f0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47f3b780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbb47f30710" loc="56:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb47f30710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb47f2cc40"/>
        <function-ref name="fired" scoped="" ref="0x7fbb47f2d1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb47f2c020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb47f2dae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb47f2b590"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb47f2b110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb47f2d660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb47f2f390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb47f2c630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb47f2f860"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47f2fd30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncPacket" ref="0x7fbb47f29c80" loc="59:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacket" scoped="" ref="0x7fbb47f29c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb47f27a80"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb47f26020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb47f1fda0" loc="41:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb47f1fda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb47f1c180"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb47f1c310"/>
        <function-ref name="start" scoped="" ref="0x7fbb47f1c4a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47f1c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7fbb47f03b00" loc="56:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47f03b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb47f02a40"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb47f00020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb47f1a080" loc="45:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47f1a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47f1a400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47f1a590"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47f1a720"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47f1a8b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47f1aa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7fbb47f07920" loc="55:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47f07920"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47f06740"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47f03090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47f05bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47f05090"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47f055a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb47f1ba20" loc="44:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb47f1ba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47f1bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fbb47f18e80" loc="48:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb47f18e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fbb47f17220"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fbb47f173b0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fbb47f17540"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fbb47f176d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7fbb47f123f0" loc="51:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb47f123f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47f11200"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47f0faf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47f0f670"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47f11ad0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47f0f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb47f1ce10" loc="43:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47f1ce10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47f1b1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7fbb47f0e590" loc="52:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb47f0e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb47f0c390"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb47f0c8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fbb47f17db0" loc="50:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47f17db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb47f15370"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47f15aa0"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb47f16bf0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47f13210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbb47f184e0" loc="47:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47f184e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb47f18860"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb47f189f0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb47f18b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb47f1acf0" loc="46:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47f1acf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47f190a0"/>
        <function-ref name="source" scoped="" ref="0x7fbb47f19230"/>
        <function-ref name="address" scoped="" ref="0x7fbb47f193c0"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47f19550"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47f196e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47f19870"/>
        <function-ref name="type" scoped="" ref="0x7fbb47f19a00"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47f19b90"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47f19d20"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47f18020"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47f181b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fbb47f0b220" loc="54:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47f0b220"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb47f0a7c0"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47f08020"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb47f0a090"/>
        <function-ref name="set" scoped="" ref="0x7fbb47f08750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb47efd020" loc="41:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb47efd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb47efd3a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb47efd530"/>
        <function-ref name="start" scoped="" ref="0x7fbb47efd6c0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47efd850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7fbb47ee2020" loc="56:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47ee2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb47ee1020"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb47ee1530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb47efb2b0" loc="45:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47efb2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47efb630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47efb7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47efb950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47efbae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47efbc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7fbb47ee8d60" loc="55:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47ee8d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47ee6b60"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47ee44a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47ee4020"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47ee5450"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47ee5960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb47efcc30" loc="44:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb47efcc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47efb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fbb47ef8320" loc="48:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fbb47ef8320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fbb47ef86a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fbb47ef8830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fbb47ef89c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fbb47ef8b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7fbb47ef3920" loc="51:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb47ef3920"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47ef1740"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47eef090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47ef0bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47ef0090"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47ef05a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb47efc050" loc="43:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47efc050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47efc3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7fbb47eefb00" loc="52:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb47eefb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb47eed930"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb47eede40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fbb47ef6270" loc="50:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47ef6270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb47ef5800"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47ef4020"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb47ef50d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47ef4750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbb47ef9800" loc="47:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47ef9800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb47ef9b80"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb47ef9d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb47ef8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb47efa020" loc="46:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47efa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47efa3a0"/>
        <function-ref name="source" scoped="" ref="0x7fbb47efa530"/>
        <function-ref name="address" scoped="" ref="0x7fbb47efa6c0"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47efa850"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47efa9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47efab70"/>
        <function-ref name="type" scoped="" ref="0x7fbb47efad00"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47ef9020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47ef91b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47ef9340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47ef94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fbb47eec780" loc="54:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47eec780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb47eead00"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47ee9460"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb47eea5d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47ee9b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7fbb47d63600" loc="53:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb47d63600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb47d623f0"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb47d62900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb47d708b0" loc="47:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47d708b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47d70c30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47d70dc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d6f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d6f1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47d6f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb47d72bf0" loc="45:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb47d72bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47d71020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7fbb47d68510" loc="52:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47d68510"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47d67390"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d65d00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d65860"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47d67c80"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47d651f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7fbb47d6f940" loc="49:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb47d6f940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47d6d780"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d6b110"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d6cc30"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47d6c090"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47d6c5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb47d72490" loc="44:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47d72490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47d72830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7fbb47d6b9b0" loc="50:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb47d6b9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb47d697a0"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb47d69cb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampRadio" ref="0x7fbb47d610a0" loc="58:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47d610a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb47d60750"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47d60e80"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb47d60020"/>
        <function-ref name="set" scoped="" ref="0x7fbb47d5e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7fbb47d5bd80" loc="61:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb47d5bd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb47d599e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7fbb47d58020" loc="62:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb47d58020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47d57740"/>
        <function-ref name="get" scoped="" ref="0x7fbb47d571f0"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb47d58c50"/>
        <function-ref name="set" scoped="" ref="0x7fbb47d57c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb47d71270" loc="46:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47d71270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47d715f0"/>
        <function-ref name="source" scoped="" ref="0x7fbb47d71780"/>
        <function-ref name="address" scoped="" ref="0x7fbb47d71910"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47d71aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47d71c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47d71dc0"/>
        <function-ref name="type" scoped="" ref="0x7fbb47d70020"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47d701b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47d70340"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47d704d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47d70660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampMilli" ref="0x7fbb47d5d060" loc="59:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47d5d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb47d5c5d0"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47d5cd00"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb47d5de70"/>
        <function-ref name="set" scoped="" ref="0x7fbb47d5b460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb4702aa50" loc="56:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb4702aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4702add0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMSend" ref="0x7fbb4702bdc0" loc="55:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMSend" scoped="" ref="0x7fbb4702bdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb4702a180"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb4702a310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4702a4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb4702a630"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb4702a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7fbb4702c570" loc="50:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7fbb4702c570"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb4702b390"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb4702b8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb47039720" loc="44:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47039720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47039aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47039c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47039dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47038020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb470381b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7fbb47034a60" loc="47:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7fbb47034a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47032890"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb4702f220"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47031d50"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb470311b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb470316e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fbb4703b8b0" loc="42:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fbb4703b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4703bc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fbb47028da0" loc="59:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fbb47028da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47027310"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb470274a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47027630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb470277c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47027950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7fbb470387b0" loc="46:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7fbb470387b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb470365e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47034090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47035bc0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47035020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47035550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMPacket" ref="0x7fbb470296b0" loc="58:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMPacket" scoped="" ref="0x7fbb470296b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47029a30"/>
        <function-ref name="source" scoped="" ref="0x7fbb47029bc0"/>
        <function-ref name="address" scoped="" ref="0x7fbb47029d50"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47028020"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb470281b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47028340"/>
        <function-ref name="type" scoped="" ref="0x7fbb470284d0"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47028660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb470287f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47028980"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47028b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb4703b150" loc="41:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb4703b150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb4703b4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7fbb4702fac0" loc="49:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7fbb4702fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7fbb4702e930"/>
        <function-ref name="eventTime" scoped="" ref="0x7fbb4702ee40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampRadio" ref="0x7fbb47027e20" loc="61:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fbb47027e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb470243f0"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47024b20"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb47025ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbb470232a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7fbb4701ddf0" loc="67:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fbb4701ddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb4701a5e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb4701a090"/>
        <function-ref name="isSet" scoped="" ref="0x7fbb4701bac0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4701ab30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7fbb4701fa90" loc="64:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fbb4701fa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7fbb49163d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb4701e6f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7fbb4701ec40" loc="65:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7fbb4701ec40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb4701d8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb4703a020" loc="43:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb4703a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb4703a3a0"/>
        <function-ref name="source" scoped="" ref="0x7fbb4703a530"/>
        <function-ref name="address" scoped="" ref="0x7fbb4703a6c0"/>
        <function-ref name="destination" scoped="" ref="0x7fbb4703a850"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb4703a9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb4703ab70"/>
        <function-ref name="type" scoped="" ref="0x7fbb4703ad00"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47039020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb470391b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47039340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb470394d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSnoop" ref="0x7fbb470290a0" loc="57:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSnoop" scoped="" ref="0x7fbb470290a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47029420"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampMilli" ref="0x7fbb47023ce0" loc="62:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fbb47023ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fbb470202e0"/>
        <function-ref name="clear" scoped="" ref="0x7fbb47020a10"/>
        <function-ref name="isValid" scoped="" ref="0x7fbb47022b60"/>
        <function-ref name="set" scoped="" ref="0x7fbb4701f170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb47015cf0" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb47015cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb470140a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47014230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb470143c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47014550"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb470146e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb47014930" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47014930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47014cb0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47014e40"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47013020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb470131b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47013340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb47013590" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47013590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47013910"/>
        <function-ref name="source" scoped="" ref="0x7fbb47013aa0"/>
        <function-ref name="address" scoped="" ref="0x7fbb47013c30"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47013dc0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47012020"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb470121b0"/>
        <function-ref name="type" scoped="" ref="0x7fbb47012340"/>
        <function-ref name="setType" scoped="" ref="0x7fbb470124d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47012660"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb470127f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47012980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7fbb47012c10" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7fbb47012c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb47010020"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb470101b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb47010340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb46fbe020" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb46fbe020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb46fbe3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46fbe530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46fbe6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb46fbe850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb46fbe9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb46fbec30" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb46fbec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb46fbd020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb46fbd1b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46fbd340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46fbd4d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb46fbd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb46fbd8b0" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb46fbd8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb46fbdc30"/>
        <function-ref name="source" scoped="" ref="0x7fbb46fbddc0"/>
        <function-ref name="address" scoped="" ref="0x7fbb46fbc020"/>
        <function-ref name="destination" scoped="" ref="0x7fbb46fbc1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb46fbc340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb46fbc4d0"/>
        <function-ref name="type" scoped="" ref="0x7fbb46fbc660"/>
        <function-ref name="setType" scoped="" ref="0x7fbb46fbc7f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb46fbc980"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb46fbcb10"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb46fbcca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7fbb46fbb020" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7fbb46fbb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb46fbb3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb46fbb530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb46fbb6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb46fb2a20" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb46fb2a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb46fb2da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46fb1020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46fb11b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb46fb1340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb46fb14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fbb46fb1780" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb46fb1780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb46fb1b00"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46fb1c90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46fb1e20"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb46fb0020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb46fb01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbb46fb0400" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb46fb0400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb46fb0780"/>
        <function-ref name="source" scoped="" ref="0x7fbb46fb0910"/>
        <function-ref name="address" scoped="" ref="0x7fbb46fb0aa0"/>
        <function-ref name="destination" scoped="" ref="0x7fbb46fb0c30"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb46fb0dc0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb46fae020"/>
        <function-ref name="type" scoped="" ref="0x7fbb46fae1b0"/>
        <function-ref name="setType" scoped="" ref="0x7fbb46fae340"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb46fae4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb46fae660"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb46fae7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb47de5930" loc="43:../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb47de5930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47de5cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47de5e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47de1020"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47de11b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47de1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fbb47d96400" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb47d96400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47d967a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d96930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d96ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47d96c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47d96de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb47d974b0" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb47d974b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47d97850"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d979e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d97b70"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47d97d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47d96020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbb47d94720" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47d94720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47d94aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47d94c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d94dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d93020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47d931b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7fbb47d93480" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7fbb47d93480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47d93800"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47d93990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7fbb47d93c60" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7fbb47d93c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47d92020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47d921b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbb47d95060" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47d95060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47d953e0"/>
        <function-ref name="source" scoped="" ref="0x7fbb47d95570"/>
        <function-ref name="address" scoped="" ref="0x7fbb47d95700"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47d95890"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47d95a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47d95bb0"/>
        <function-ref name="type" scoped="" ref="0x7fbb47d95d40"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47d94020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47d941b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47d94340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47d944d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb47d3c5a0" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TimeSyncC.TimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb47d3c5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb47d38a80"/>
        <function-ref name="fired" scoped="" ref="0x7fbb47d39090"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb47d39e10"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb47d39990"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb47d374a0"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb47d37020"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb47d39510"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb47d3b200"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb47d38470"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb47d3b6d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47d3bba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47d33380" loc="46:../../tos/system/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47d33380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47d33700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fbb47d339c0" loc="47:../../tos/system/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb47d339c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb47d33d40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb47d32020"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb47d321b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb47d32340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb47d324d0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47d32660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb47d327f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb47d32e30"/>
        <function-ref name="set" scoped="" ref="0x7fbb47d32980"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb47d32b10"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb47d32ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacReceive" ref="0x7fbb47d08130" loc="28:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7fbb47d08130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47d084b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbb47d0fce0" loc="18:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb47d0fce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb47d0e0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbb47d0d900" loc="20:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47d0d900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47d0dc80"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47d0de10"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d0c020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d0c1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47d0c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FlowSend" ref="0x7fbb47d0f020" loc="14:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FlowSend" scoped="" ref="0x7fbb47d0f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47d0f3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d0f530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d0f6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47d0f850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47d0f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacControl" ref="0x7fbb47d0bd00" loc="22:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacControl" scoped="" ref="0x7fbb47d0bd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb47d0a0a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb47d0a230"/>
        <function-ref name="start" scoped="" ref="0x7fbb47d0a3c0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47d0a550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacSend" ref="0x7fbb47d093b0" loc="27:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7fbb47d093b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47d09730"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47d098c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47d09a50"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47d09be0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47d09d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb47d0e320" loc="19:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb47d0e320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb47d0e6a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb47d0e830"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb47d0e9c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb47d0eb50"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb47d0ece0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47d0ee70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb47d0d030"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb47d0d670"/>
        <function-ref name="set" scoped="" ref="0x7fbb47d0d1c0"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb47d0d350"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb47d0d4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7fbb47d0a880" loc="23:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47d0a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb47d0ac00"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb47d0ad90"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb47d09020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FrameConfiguration" ref="0x7fbb47d087c0" loc="29:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7fbb47d087c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7fbb47d08b40"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7fbb47d08cd0"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7fbb47d08e60"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7fbb47d03020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbb47d0c5f0" loc="21:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47d0c5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47d0c970"/>
        <function-ref name="source" scoped="" ref="0x7fbb47d0cb00"/>
        <function-ref name="address" scoped="" ref="0x7fbb47d0cc90"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47d0ce20"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47d0b020"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47d0b1b0"/>
        <function-ref name="type" scoped="" ref="0x7fbb47d0b340"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47d0b4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47d0b660"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47d0b7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47d0b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb478fe540" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb478fe540"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb478fe8c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb478fea50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb478febe0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb478fed70"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb478fd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb478fd270" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb478fd270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb478fd5f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb478fd780"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb478fd910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb478fdaa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb478fdc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb478fde80" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb478fde80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb478fc220"/>
        <function-ref name="source" scoped="" ref="0x7fbb478fc3b0"/>
        <function-ref name="address" scoped="" ref="0x7fbb478fc540"/>
        <function-ref name="destination" scoped="" ref="0x7fbb478fc6d0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb478fc860"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb478fc9f0"/>
        <function-ref name="type" scoped="" ref="0x7fbb478fcb80"/>
        <function-ref name="setType" scoped="" ref="0x7fbb478fcd10"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb478fb020"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb478fb1b0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb478fb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7fbb478fb5d0" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7fbb478fb5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb478fb950"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb478fbae0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb478fbc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb46f600c0" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb46f600c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb46f60440"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46f605d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46f60760"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb46f608f0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb46f60a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fbb46f60d30" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb46f60d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb46f5f0e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46f5f270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46f5f400"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb46f5f590"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb46f5f720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbb46f5f970" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb46f5f970"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb46f5fcf0"/>
        <function-ref name="source" scoped="" ref="0x7fbb46f5fe80"/>
        <function-ref name="address" scoped="" ref="0x7fbb46f5e030"/>
        <function-ref name="destination" scoped="" ref="0x7fbb46f5e1c0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb46f5e350"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb46f5e4e0"/>
        <function-ref name="type" scoped="" ref="0x7fbb46f5e670"/>
        <function-ref name="setType" scoped="" ref="0x7fbb46f5e800"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb46f5e990"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb46f5eb20"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb46f5ecb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb47cd49f0" loc="44:../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb47cd49f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47cd4d70"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47cd1020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47cd11b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47cd1340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47cd14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fbb47cce400" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb47cce400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47cce7a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47cce930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47cceac0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47ccec50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47ccede0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb47ccf4b0" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb47ccf4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47ccf850"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47ccf9e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47ccfb70"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47ccfd00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47cce020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbb47ccb720" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47ccb720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47ccbaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47ccbc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47ccbdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47cca020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47cca1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7fbb47cca480" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7fbb47cca480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47cca800"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47cca990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7fbb47ccac60" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7fbb47ccac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47cc9020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47cc91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbb47ccd060" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47ccd060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47ccd3e0"/>
        <function-ref name="source" scoped="" ref="0x7fbb47ccd570"/>
        <function-ref name="address" scoped="" ref="0x7fbb47ccd700"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47ccd890"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47ccda20"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47ccdbb0"/>
        <function-ref name="type" scoped="" ref="0x7fbb47ccdd40"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47ccb020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47ccb1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47ccb340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47ccb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb47cc5140" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb47cc5140"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb47cc54c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb47cc5650"/>
        <function-ref name="start" scoped="" ref="0x7fbb47cc57e0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47cc5970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb47cc41d0" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb47cc41d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47cc4550"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47cc46e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47cc4870"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47cc4a00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47cc4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb47cc3a00" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47cc3a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47cc3d80"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47cc2020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47cc21b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47cc2340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47cc24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb47cc33f0" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47cc33f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47cc3770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb47cc07e0" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb47cc07e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb47cc0b60"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb47cc0cf0"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb47cc0e80"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb47cbf030"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb47cbf1c0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47cbf350"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb47cbf4e0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb47cbfb20"/>
        <function-ref name="set" scoped="" ref="0x7fbb47cbf670"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb47cbf800"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb47cbf990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbb47cc1e40" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47cc1e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb47cc01e0"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb47cc0370"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb47cc0500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb47cc2780" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47cc2780"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47cc2b00"/>
        <function-ref name="source" scoped="" ref="0x7fbb47cc2c90"/>
        <function-ref name="address" scoped="" ref="0x7fbb47cc2e20"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47cc1020"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47cc11b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47cc1340"/>
        <function-ref name="type" scoped="" ref="0x7fbb47cc14d0"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47cc1660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47cc17f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47cc1980"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47cc1b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbb47c649f0" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fbb47c649f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47c64d70"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47c63020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47c631b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47c63340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47c634d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbb47c63760" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fbb47c63760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47c63ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbb47cbb7d0" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb47cbb7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47cbbb70"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47cbbd00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47c67020"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47c671b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47c67340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbb47c65400" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb47c65400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb47c65780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb47c65910"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47c65aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47c65c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb47c65dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb47c676c0" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47c676c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47c67a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbb47c64060" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbb47c64060"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbb47c643e0"/>
        <function-ref name="noAck" scoped="" ref="0x7fbb47c64570"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbb47c64700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbb47c67cb0" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb47c67cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb47c660a0"/>
        <function-ref name="source" scoped="" ref="0x7fbb47c66230"/>
        <function-ref name="address" scoped="" ref="0x7fbb47c663c0"/>
        <function-ref name="destination" scoped="" ref="0x7fbb47c66550"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb47c666e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb47c66870"/>
        <function-ref name="type" scoped="" ref="0x7fbb47c66a00"/>
        <function-ref name="setType" scoped="" ref="0x7fbb47c66b90"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb47c66d20"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb47c65020"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb47c651b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb47c5e2f0" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb47c5e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb47c5e670"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb47c5e800"/>
        <function-ref name="start" scoped="" ref="0x7fbb47c5e990"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47c5eb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb47c5de10" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb47c5de10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbb49149be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47c5c1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47c5c350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47c5c4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47c5c670"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47c5c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47c61bb0" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47c61bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47c5e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb47c5d320" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47c5d320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbb49149be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47c5d6a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb47c5a940" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb47c5a940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb47c5acc0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb47c5ae50"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb47c59020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb47c591b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb47c59340"/>
        <function-ref name="get" scoped="" ref="0x7fbb47c594d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb47c59660"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb47c59ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47c597f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb47c59980"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb47c59b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7fbb47c5a020" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fbb47c5a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbb49149be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fbb47c5a3a0"/>
        <function-ref name="offset" scoped="" ref="0x7fbb47c5a530"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fbb47c5a6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbb47c36c80" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fbb47c36c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb47c350a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb47c35230"/>
        <function-ref name="start" scoped="" ref="0x7fbb47c353c0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47c35550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7fbb47bd06e0" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x7fbb47bd06e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47bd0a60"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47bd0bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fbb47c2ab80" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7fbb47c2ab80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47c23020"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47c231b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7fbb47c07660" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x7fbb47c07660"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47c079e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47c07b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47c36630" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47c36630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47c369b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7fbb47c20870" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x7fbb47c20870"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7fbb47c20bf0"/>
        <function-ref name="flush" scoped="" ref="0x7fbb47c20d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7fbb47bd3c70" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x7fbb47bd3c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47bd2020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47bd21b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7fbb47c24410" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fbb47c24410"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fbb47c24790"/>
        <function-ref name="resetSend" scoped="" ref="0x7fbb47c24920"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fbb47c24ab0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fbb47c24c40"/>
        <function-ref name="putData" scoped="" ref="0x7fbb47c24dd0"/>
        <function-ref name="putDone" scoped="" ref="0x7fbb47c2e020"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fbb47c2e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb47c2e430" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb47c2e430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb47c2e7b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb47c2e940"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb47c2ead0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb47c2ec60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb47c2edf0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47c2a020"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb47c2a1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb47c2a7f0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47c2a340"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb47c2a4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb47c2a660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7fbb47bcca00" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fbb47bcca00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47bccd80"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47bcb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7fbb47c2fb10" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7fbb47c2fb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fbb47c33020"/>
        <function-ref name="nextByte" scoped="" ref="0x7fbb47c331b0"/>
        <function-ref name="startSend" scoped="" ref="0x7fbb47c33340"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fbb47c334d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7fbb47c32080" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fbb47c32080"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fbb47c32400"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fbb47c32590"/>
        <function-ref name="endPacket" scoped="" ref="0x7fbb47c32720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7fbb47b01020" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x7fbb47b01020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47b013a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47b01530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbb47b06de0" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb47b06de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbb49149be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47b051c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47b05350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb47b054e0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47b05670"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47b05800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7fbb47b01800" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x7fbb47b01800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb47b01b80"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb47b01d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbb47b066c0" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fbb47b066c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbb49149be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbb47b06a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7fbb47b05c20" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x7fbb47b05c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbb49149be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fbb47b04020"/>
        <function-ref name="offset" scoped="" ref="0x7fbb47b041b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fbb47b04340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb47b03920" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb47b03920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb47b03ca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb47b03e30"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb47b02020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb47b021b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb47b02340"/>
        <function-ref name="get" scoped="" ref="0x7fbb47b024d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb47b02660"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb47b02ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47b02980"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb47b027f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb47b02b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7fbb47b04e80" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7fbb47b04e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fbb47b03220"/>
        <function-ref name="nextByte" scoped="" ref="0x7fbb47b033b0"/>
        <function-ref name="startSend" scoped="" ref="0x7fbb47b03540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fbb47b036d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7fbb47b04590" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fbb47b04590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fbb47b04910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fbb47b04aa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fbb47b04c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7fbb47af1d20" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7fbb47af1d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47afa0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbb47afa270"/>
        <function-ref name="receive" scoped="" ref="0x7fbb47afa400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbb47afa590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbb47afa720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbb47afa8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47afaa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7fbb47affe00" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fbb47affe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fbb47afc1c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7fbb47afc350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fbb47afc4e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fbb47afc670"/>
        <function-ref name="putData" scoped="" ref="0x7fbb47afc800"/>
        <function-ref name="putDone" scoped="" ref="0x7fbb47afc990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fbb47afcb20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb47afacc0" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb47afacc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb47af90a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb47af9230"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb47af93c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb47af9550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb47af96e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb47af9870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb47af9a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb47aee1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbb47af9b90"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb47af9d20"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb47aee020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fbb47ad2020" loc="42:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7fbb47ad2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47ad23a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fbb47ad2530"/>
        <function-ref name="receive" scoped="" ref="0x7fbb47ad26c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fbb47ad2850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fbb47ad4960" loc="41:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7fbb47ad4960"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47ad4ce0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbb47ad4e70"/>
        <function-ref name="receive" scoped="" ref="0x7fbb47ad3030"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbb47ad31c0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbb47ad3350"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbb47ad34e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47ad3670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fbb47ad4150" loc="40:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7fbb47ad4150"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47ad44d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47ad4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fbb47ad1cb0" loc="41:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7fbb47ad1cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47aca0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fbb47aca230"/>
        <function-ref name="receive" scoped="" ref="0x7fbb47aca3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fbb47aca550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fbb47aca850" loc="42:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7fbb47aca850"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47acabd0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbb47acad60"/>
        <function-ref name="receive" scoped="" ref="0x7fbb47ac9020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbb47ac91b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbb47ac9340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbb47ac94d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47ac9660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbb47ac9c20" loc="43:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb47ac9c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb47ac8a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb47ac74e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb47ac7020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb47ac79a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fbb47ad14b0" loc="40:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7fbb47ad14b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47ad1830"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47ad19c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fbb47a7e5a0" loc="50:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7fbb47a7e5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47a7e920"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fbb47a7eab0"/>
        <function-ref name="receive" scoped="" ref="0x7fbb47a7ec40"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fbb47a7edd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x7fbb47a7b0a0" loc="53:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x7fbb47a7b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a7b420"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a7b5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47ac4770" loc="48:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47ac4770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47ac4af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fbb47a7c0c0" loc="51:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7fbb47a7c0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb47a7c440"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbb47a7c5d0"/>
        <function-ref name="receive" scoped="" ref="0x7fbb47a7c760"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbb47a7c8f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbb47a7ca80"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbb47a7cc10"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb47a7cda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbb47a79810" loc="56:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb47a79810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb47a786a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb47a77090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb47a78b60"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb47a77550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x7fbb47a7a0a0" loc="55:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x7fbb47a7a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbb47a7a420"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbb47a7a5b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7fbb47a7a740"/>
        <function-ref name="txDone" scoped="" ref="0x7fbb47a7a8d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbb47a7aa60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbb47a7abf0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbb47a7ad80"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fbb47a79020"/>
        <function-ref name="tx" scoped="" ref="0x7fbb47a791b0"/>
        <function-ref name="rx" scoped="" ref="0x7fbb47a79340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fbb47ac4d80" loc="49:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7fbb47ac4d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a7e180"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a7e310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x7fbb47a7b880" loc="54:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x7fbb47a7b880"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a7bc00"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a7bd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7fbb47a593a0" loc="49:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7fbb47a593a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbb47a59720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbb47a598b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7fbb47a59a40"/>
        <function-ref name="txDone" scoped="" ref="0x7fbb47a59bd0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbb47a59d60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbb47a58020"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbb47a581b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fbb47a58340"/>
        <function-ref name="tx" scoped="" ref="0x7fbb47a584d0"/>
        <function-ref name="rx" scoped="" ref="0x7fbb47a58660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7fbb47a56c40" loc="53:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7fbb47a56c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbb47a55020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbb47a551b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7fbb47a55340"/>
        <function-ref name="txDone" scoped="" ref="0x7fbb47a554d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbb47a55660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbb47a557f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbb47a55980"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fbb47a55b10"/>
        <function-ref name="tx" scoped="" ref="0x7fbb47a55ca0"/>
        <function-ref name="rx" scoped="" ref="0x7fbb47a55e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7fbb47a5a990" loc="48:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7fbb47a5a990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a5ad10"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a59020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7fbb47a589f0" loc="51:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7fbb47a589f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a58d70"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a56020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7fbb47a563b0" loc="52:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7fbb47a563b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a56730"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a568c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7fbb47a5a0f0" loc="47:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7fbb47a5a0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a5a470"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a5a600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x7fbb47a54bc0" loc="114:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x7fbb47a54bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47a51020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7fbb47a505f0" loc="117:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7fbb47a505f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbb47a50970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbb47a50b00"/>
        <function-ref name="rxDone" scoped="" ref="0x7fbb47a50c90"/>
        <function-ref name="txDone" scoped="" ref="0x7fbb47a50e20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbb47a4f020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbb47a4f1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbb47a4f340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fbb47a4f4d0"/>
        <function-ref name="tx" scoped="" ref="0x7fbb47a4f660"/>
        <function-ref name="rx" scoped="" ref="0x7fbb47a4f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x7fbb47a4fb50" loc="119:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x7fbb47a4fb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47a4e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7fbb47a4d5f0" loc="122:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7fbb47a4d5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbb47a4d970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbb47a4db00"/>
        <function-ref name="rxDone" scoped="" ref="0x7fbb47a4dc90"/>
        <function-ref name="txDone" scoped="" ref="0x7fbb47a4de20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbb47a4c020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbb47a4c1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbb47a4c340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fbb47a4c4d0"/>
        <function-ref name="tx" scoped="" ref="0x7fbb47a4c660"/>
        <function-ref name="rx" scoped="" ref="0x7fbb47a4c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7fbb47a51cd0" loc="116:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7fbb47a51cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a500a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a50230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7fbb47a4e3f0" loc="120:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7fbb47a4e3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a4e770"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a4e900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7fbb47a4ecd0" loc="121:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7fbb47a4ecd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a4d0a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a4d230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7fbb47a4cb20" loc="124:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fbb47a4cb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7fbb47a4b020"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7fbb47a4b1b0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7fbb47a4b340"/>
        <function-ref name="actualMicro" scoped="" ref="0x7fbb47a4b4d0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7fbb47a4b660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7fbb47a4b980" loc="125:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7fbb47a4b980"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fbb47a4bd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7fbb47a513f0" loc="115:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7fbb47a513f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbb47a51770"/>
        <function-ref name="stop" scoped="" ref="0x7fbb47a51900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb479ecdc0" loc="24:../../tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb479ecdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb479e9ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb479e8670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb479e81b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb479e8b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb479e6de0" loc="24:../../tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb479e6de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7fbb491f8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb479e3ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb479e2670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb479e21b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb479e2b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fbb479d8020" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb479d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7fbb479d83a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fbb479d8530"/>
        <function-ref name="getControlA" scoped="" ref="0x7fbb479d86c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fbb479d8850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fbb479d89e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7fbb479d8b70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fbb479d8d00"/>
        <function-ref name="getControlB" scoped="" ref="0x7fbb479d7020"/>
        <function-ref name="setControlC" scoped="" ref="0x7fbb479d71b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7fbb479d7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbb479d7850" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fbb479d7850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fbb479d4e60"/>
        <function-ref name="test" scoped="" ref="0x7fbb479d44e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb479d64c0"/>
        <function-ref name="captured" scoped="" ref="0x7fbb479d5020"/>
        <function-ref name="reset" scoped="" ref="0x7fbb479d5530"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479d49a0"/>
        <function-ref name="set" scoped="" ref="0x7fbb479d6980"/>
        <function-ref name="start" scoped="" ref="0x7fbb479d59f0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479d4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbb479d3ad0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fbb479d3ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb479cf4e0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb479d01b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb479d1790"/>
        <function-ref name="reset" scoped="" ref="0x7fbb479d0670"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479cf9a0"/>
        <function-ref name="set" scoped="" ref="0x7fbb479d1c50"/>
        <function-ref name="start" scoped="" ref="0x7fbb479d0b30"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479cf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb479e1cc0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb479e1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb479da090"/>
        <function-ref name="test" scoped="" ref="0x7fbb479db6e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb479de980"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb479da550"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb479daa60"/>
        <function-ref name="reset" scoped="" ref="0x7fbb479dc840"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb479dc380"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479dbba0"/>
        <function-ref name="set" scoped="" ref="0x7fbb479dee40"/>
        <function-ref name="start" scoped="" ref="0x7fbb479dcd00"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479db220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fbb479c52c0" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fbb479c52c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7fbb479c5640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fbb479c57d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7fbb479c5960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fbb479c5af0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fbb479c5c80"/>
        <function-ref name="setControlB" scoped="" ref="0x7fbb479c5e10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fbb479c4020"/>
        <function-ref name="getControlB" scoped="" ref="0x7fbb479c41b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7fbb479c4340"/>
        <function-ref name="setControlA" scoped="" ref="0x7fbb479c44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7fbb479bf5a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7fbb479bf5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb479bb020"/>
        <function-ref name="fired" scoped="" ref="0x7fbb479bec10"/>
        <function-ref name="get" scoped="" ref="0x7fbb479be240"/>
        <function-ref name="reset" scoped="" ref="0x7fbb479bc110"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479bb4e0"/>
        <function-ref name="set" scoped="" ref="0x7fbb479be700"/>
        <function-ref name="start" scoped="" ref="0x7fbb479bc5d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479bca90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbb479c49e0" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fbb479c49e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fbb479c0e60"/>
        <function-ref name="test" scoped="" ref="0x7fbb479c04e0"/>
        <function-ref name="get" scoped="" ref="0x7fbb479c36b0"/>
        <function-ref name="captured" scoped="" ref="0x7fbb479c10d0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb479c15e0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479c09a0"/>
        <function-ref name="set" scoped="" ref="0x7fbb479c3b70"/>
        <function-ref name="start" scoped="" ref="0x7fbb479c1aa0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479c0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7fbb479bbba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7fbb479bbba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb479b7550"/>
        <function-ref name="fired" scoped="" ref="0x7fbb479b91f0"/>
        <function-ref name="get" scoped="" ref="0x7fbb479ba7f0"/>
        <function-ref name="reset" scoped="" ref="0x7fbb479b96b0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479b7a10"/>
        <function-ref name="set" scoped="" ref="0x7fbb479bacb0"/>
        <function-ref name="start" scoped="" ref="0x7fbb479b9b70"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479b7090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7fbb479b6120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7fbb479b6120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fbb479b3a90"/>
        <function-ref name="fired" scoped="" ref="0x7fbb479b5770"/>
        <function-ref name="get" scoped="" ref="0x7fbb479b6d50"/>
        <function-ref name="reset" scoped="" ref="0x7fbb479b5c30"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479b2020"/>
        <function-ref name="set" scoped="" ref="0x7fbb479b5260"/>
        <function-ref name="start" scoped="" ref="0x7fbb479b3110"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479b35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb479ca020" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb479ca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb479c6350"/>
        <function-ref name="test" scoped="" ref="0x7fbb479c89a0"/>
        <function-ref name="get" scoped="" ref="0x7fbb479cac50"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb479c6810"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb479c6d20"/>
        <function-ref name="reset" scoped="" ref="0x7fbb479c9b20"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb479c9660"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479c8e60"/>
        <function-ref name="set" scoped="" ref="0x7fbb479c9150"/>
        <function-ref name="start" scoped="" ref="0x7fbb479c8020"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479c84e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb47938c60" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb47938c60"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7fbb49308020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7fbb49308020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb47937020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbb47937410" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb47937410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb47933810"/>
        <function-ref name="test" scoped="" ref="0x7fbb47935e60"/>
        <function-ref name="get" scoped="" ref="0x7fbb47936090"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb47933cd0"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb47932260"/>
        <function-ref name="reset" scoped="" ref="0x7fbb47935020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb47936a60"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb47933350"/>
        <function-ref name="set" scoped="" ref="0x7fbb47936550"/>
        <function-ref name="start" scoped="" ref="0x7fbb479354e0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb479359a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb479303c0" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb479303c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7fbb491f8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb4792e240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb4792ebc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb4792e700"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb4792d0d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbb4792d660" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb4792d660"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fbb47929a90"/>
        <function-ref name="test" scoped="" ref="0x7fbb47929110"/>
        <function-ref name="get" scoped="" ref="0x7fbb4792c3d0"/>
        <function-ref name="setScale" scoped="" ref="0x7fbb47928020"/>
        <function-ref name="getScale" scoped="" ref="0x7fbb47928530"/>
        <function-ref name="reset" scoped="" ref="0x7fbb4792a2a0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb4792cda0"/>
        <function-ref name="isOn" scoped="" ref="0x7fbb479295d0"/>
        <function-ref name="set" scoped="" ref="0x7fbb4792c890"/>
        <function-ref name="start" scoped="" ref="0x7fbb4792a760"/>
        <function-ref name="stop" scoped="" ref="0x7fbb4792ac20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fbb479200f0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7fbb479200f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7fbb491f8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb4791f020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb4791f9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb4791f4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb4791fe60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbb47924cd0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fbb47924cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923c5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7fbb4923c930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbb47923b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbb47922550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbb47922090"/>
        <function-ref name="overflow" scoped="" ref="0x7fbb47922a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7fbb479131e0" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x7fbb479131e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fbb47913560"/>
        <function-ref name="offset" scoped="" ref="0x7fbb479136f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fbb47913880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7fbb478f8510" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fbb478f8510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbb478f54a0"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb478f4260"/>
        <function-ref name="element" scoped="" ref="0x7fbb478f48d0"/>
        <function-ref name="full" scoped="" ref="0x7fbb478f75b0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb478f5020"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb478f5b50"/>
        <function-ref name="empty" scoped="" ref="0x7fbb478f7130"/>
        <function-ref name="size" scoped="" ref="0x7fbb478f7a30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fbb478ef330" loc="93:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fbb478ef330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbb478eb260"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbb478ea020"/>
        <function-ref name="element" scoped="" ref="0x7fbb478ea690"/>
        <function-ref name="full" scoped="" ref="0x7fbb478ee4a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbb478eeda0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbb478eb910"/>
        <function-ref name="empty" scoped="" ref="0x7fbb478ee020"/>
        <function-ref name="size" scoped="" ref="0x7fbb478ee920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fbb478ead40" loc="94:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fbb478ead40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb478e80e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb478e8270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb478e8400"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb478e8590"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb478e8720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbb478e89b0" loc="95:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb478e89b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb478e8d30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb478e7020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb478e71b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb478e7340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb478e74d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7fbb478e3d10" loc="114:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="retrySend" scoped="" ref="0x7fbb478e3d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb478e10e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb478e1270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb478f03c0" loc="89:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb478f03c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb478f0740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbb478e7750" loc="96:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fbb478e7750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbb478e7ad0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbb478e7c60"/>
        <function-ref name="led1On" scoped="" ref="0x7fbb478e7df0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbb478e6020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbb478e61b0"/>
        <function-ref name="get" scoped="" ref="0x7fbb478e6340"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbb478e64d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbb478e6b10"/>
        <function-ref name="set" scoped="" ref="0x7fbb478e6660"/>
        <function-ref name="led0On" scoped="" ref="0x7fbb478e67f0"/>
        <function-ref name="led2On" scoped="" ref="0x7fbb478e6980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7fbb478eda70" loc="90:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7fbb478eda70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fbb478eddf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7fbb478c92a0" loc="43:../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7fbb478c92a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fbb478c9620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbb478c2020" loc="94:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fbb478c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbb478c23a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7fbb478c2680" loc="95:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7fbb478c2680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fbb478c2a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbb478bbd50" loc="39:../../tos/lib/printf/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb478bbd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb478b8100"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fbb478b84a0" loc="40:../../tos/lib/printf/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7fbb478b84a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbb478b8820"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbb478b89b0"/>
        <function-ref name="start" scoped="" ref="0x7fbb478b8b40"/>
        <function-ref name="stop" scoped="" ref="0x7fbb478b8cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb478b9370" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MCCC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb478b9370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb478af870"/>
        <function-ref name="fired" scoped="" ref="0x7fbb478b2e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb478b0c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb478b0780"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb478ae1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb478afcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb478b0300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb478b2020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb478af260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb478b24f0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb478b29c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fbb47860020" loc="2:TXFlowC.nc">
      <component-ref qname="MCCC.TXFlow1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb47860020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb478603a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb47860530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb478606c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb47860850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb478609e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb46e5e640" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MCCC.TXFlow1.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb46e5e640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb46e5ac40"/>
        <function-ref name="fired" scoped="" ref="0x7fbb46e5c1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb46e5a020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb46e5cae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb46e59590"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb46e59110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb46e5c660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb46e5d390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb46e5a630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb46e5d860"/>
        <function-ref name="stop" scoped="" ref="0x7fbb46e5dd30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendTimer" ref="0x7fbb46e56310" loc="13:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendTimer" scoped="" ref="0x7fbb46e56310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb46e52870"/>
        <function-ref name="fired" scoped="" ref="0x7fbb46e55e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb46e53c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb46e53780"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb46e511e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb46e52cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb46e53300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb46e55020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb46e52260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb46e554f0"/>
        <function-ref name="stop" scoped="" ref="0x7fbb46e559c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="send" ref="0x7fbb46e4dc50" loc="27:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="send" scoped="" ref="0x7fbb46e4dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb46e4c020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb46e4c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbb46e50270" loc="15:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb46e50270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb46e505f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbb46e50840" loc="16:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb46e50840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb46e50bc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb46e50d50"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46e4f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46e4f1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb46e4f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AppSend" ref="0x7fbb46e51610" loc="14:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AppSend" scoped="" ref="0x7fbb46e51610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb46e51990"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46e51b20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46e51cb0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb46e51e40"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb46e50020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbb46e4f590" loc="17:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb46e4f590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb46e4f910"/>
        <function-ref name="source" scoped="" ref="0x7fbb46e4faa0"/>
        <function-ref name="address" scoped="" ref="0x7fbb46e4fc30"/>
        <function-ref name="destination" scoped="" ref="0x7fbb46e4fdc0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb46e4d020"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb46e4d1b0"/>
        <function-ref name="type" scoped="" ref="0x7fbb46e4d340"/>
        <function-ref name="setType" scoped="" ref="0x7fbb46e4d4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb46e4d660"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb46e4d7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb46e4d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fbb4785da30" loc="2:TXFlowC.nc">
      <component-ref qname="MCCC.TXFlow2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fbb4785da30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb4785ddb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb4785c020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb4785c1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb4785c340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb4785c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbb46e26240" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MCCC.TXFlow2.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fbb46e26240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb46e226e0"/>
        <function-ref name="fired" scoped="" ref="0x7fbb46e24c90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb46e23a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb46e235f0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb46e21020"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb46e22b60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb46e23170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb46e26e30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb46e220d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb46e24340"/>
        <function-ref name="stop" scoped="" ref="0x7fbb46e24810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendTimer" ref="0x7fbb46e1ed40" loc="13:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow2.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendTimer" scoped="" ref="0x7fbb46e1ed40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbb4923d1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbb4923d510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbb46e1a220"/>
        <function-ref name="fired" scoped="" ref="0x7fbb46e1c7d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbb46e1b590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbb46e1b110"/>
        <function-ref name="getdt" scoped="" ref="0x7fbb46e1ab20"/>
        <function-ref name="gett0" scoped="" ref="0x7fbb46e1a6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbb46e1cc50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbb46e1d980"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbb46e1bba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbb46e1de50"/>
        <function-ref name="stop" scoped="" ref="0x7fbb46e1c350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="send" ref="0x7fbb46e15610" loc="27:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow2.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="send" scoped="" ref="0x7fbb46e15610"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbb46e15990"/>
        <function-ref name="runTask" scoped="" ref="0x7fbb46e15b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbb46e18c30" loc="15:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow2.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fbb46e18c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbb46e17020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbb46e17270" loc="16:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow2.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fbb46e17270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbb46e175f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbb46e17780"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46e17910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46e17aa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbb46e17c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AppSend" ref="0x7fbb46e18020" loc="14:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow2.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AppSend" scoped="" ref="0x7fbb46e18020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbb46e183a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbb46e18530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbb46e186c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbb46e18850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbb46e189e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbb46e17e80" loc="17:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow2.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fbb46e17e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbb46e16220"/>
        <function-ref name="source" scoped="" ref="0x7fbb46e163b0"/>
        <function-ref name="address" scoped="" ref="0x7fbb46e16540"/>
        <function-ref name="destination" scoped="" ref="0x7fbb46e166d0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbb46e16860"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbb46e169f0"/>
        <function-ref name="type" scoped="" ref="0x7fbb46e16b80"/>
        <function-ref name="setType" scoped="" ref="0x7fbb46e16d10"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbb46e15020"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbb46e151b0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbb46e15340"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7fbb49131d10" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
              <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb491313b0" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7fbb49131700" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb49131a30" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7fbb4912b5c0" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fbb4912b340" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7fbb4912aab0" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fbb4912a830" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fbb4912e920" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbb4912be10" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fbb491acb50" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <function command="" provided="0" name="send" ref="0x7fbb491385e0" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49138020" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb49138350" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fbb49133bb0" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb491335b0" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb491338e0" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbb49135d20" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fbb49136900" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49136680" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbb49134e00" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49134820" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fbb49134b70" loc="100:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FrameConfiguration" loc="31:../../tos/interfaces/FrameConfiguration.nc">
      <documentation loc="23:../../tos/interfaces/FrameConfiguration.nc">
        <short>&#10; </short>
        <long>&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision$&#10; @date $Date$&#10;&#10; This interface will be implemented by the different TDMA protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="setFrameLength" ref="0x7fbb491a7ce0" loc="33:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="numSlots" ref="0x7fbb491a7a60" loc="33:../../tos/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlotLength" ref="0x7fbb491a7350" loc="32:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="slotTimeBms" ref="0x7fbb491a70d0" loc="32:../../tos/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlotLength" ref="0x7fbb491a64b0" loc="34:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getFrameLength" ref="0x7fbb491a6c00" loc="35:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Slotter" loc="30:../../tos/interfaces/Slotter.nc">
      <documentation loc="23:../../tos/interfaces/Slotter.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <function event="" provided="0" name="slot" ref="0x7fbb4908a8a0" loc="31:../../tos/interfaces/Slotter.nc">
        <interfacedef-ref qname="Slotter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="num" ref="0x7fbb4908a620" loc="31:../../tos/interfaces/Slotter.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7fbb490b7350" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GlobalTime" loc="37:../../tos/lib/ftsp/GlobalTime.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb49059590" loc="37:../../tos/lib/ftsp/GlobalTime.nc">
          <interfacedef-ref qname="GlobalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb49059590"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getLocalTime" ref="0x7fbb49055020" loc="42:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="39:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Returns the current local time of this mote.</short>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="global2Local" ref="0x7fbb49052390" loc="76:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="68:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Converts the global time given in &#60;code>time&#60;/code> into the&#10; correspoding local time and stores this again in&#10; &#60;code>time&#60;/code>.</short>
          <long>&#10; Converts the global time given in &#60;code>time&#60;/code> into the&#10; correspoding local time and stores this again in&#10; &#60;code>time&#60;/code>. This method performs the inverse of the&#10; &#60;code>local2Global&#60;/clode> transformation.&#10;&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fbb49052110" loc="76:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getGlobalTime" ref="0x7fbb49055ab0" loc="49:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="44:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Reads the current global time.</short>
          <long>&#10; Reads the current global time. This method is a combination&#10; of &#60;code>getLocalTime&#60;/code> and &#60;code>local2Global&#60;/code>.&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fbb49055830" loc="49:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="local2Global" ref="0x7fbb49053640" loc="66:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="51:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Converts the local time given in &#60;code>time&#60;/code> into the&#10; corresponding global time and stores this again in&#10; &#60;code>time&#60;/code>.</short>
          <long>&#10; Converts the local time given in &#60;code>time&#60;/code> into the&#10; corresponding global time and stores this again in&#10; &#60;code>time&#60;/code>. The following equation is used to compute the&#10; conversion:&#10;&#10;&#9;globalTime = localTime + offset + skew * (localTime - syncPoint)&#10;&#10; The skew is normalized to 0.0 (1.0 is subtracted) to increase the&#10; machine precision. The syncPoint value is periodically updated to&#10; increase the machine precision of the floating point arithmetic and&#10; also to allow time wrap.&#10;&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fbb490533c0" loc="66:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fbb490988a0" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49098620" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fbb49096950" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb490966d0" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fbb49093d30" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49093730" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb49093a60" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbb49095da0" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fbb49094dd0" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49094810" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb49094b40" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fbb4908d760" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbb4908b020" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PrioCritQueue" loc="9:PrioCritQueue.nc">
      <documentation loc="1:PrioCritQueue.nc">
        <short>&#10;  Interface to a priority queue that contains items&#10;  of multiple priority levels.</short>
        <long>&#10;  Interface to a priority queue that contains items&#10;  of multiple priority levels. The queue has a maximum size.&#10;&#10;  @author James Harbin&#10;  @date   $Date: 2017-08-31 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7fbb49089560" loc="9:PrioCritQueue.nc">
          <interfacedef-ref qname="PrioCritQueue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="size" ref="0x7fbb49081d50" loc="30:PrioCritQueue.nc">
        <documentation loc="24:PrioCritQueue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeuePrio" ref="0x7fbb490795b0" loc="82:PrioCritQueue.nc">
        <documentation loc="76:PrioCritQueue.nc">
          <short>&#10; Remove the head of the queue of particular priority.</short>
          <long>&#10; Remove the head of the queue of particular priority. If that queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7fbb49079330" loc="82:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7fbb490787f0" loc="91:PrioCritQueue.nc">
        <documentation loc="84:PrioCritQueue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7fbb49078220" loc="91:PrioCritQueue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7fbb49d19b50"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x7fbb49d19b50"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
          <variable name="prio" ref="0x7fbb49078560" loc="91:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7fbb49077d00" loc="97:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeLO_Q2" ref="0x7fbb49074a70" loc="107:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headPrio" ref="0x7fbb4907d350" loc="62:PrioCritQueue.nc">
        <documentation loc="55:PrioCritQueue.nc">
          <short>&#10; Get the head of the queue of a particular priority without&#10; removing it.</short>
          <long>&#10; Get the head of the queue of a particular priority without&#10; removing it. If that queue is empty, the return value is&#10; undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7fbb4907d0d0" loc="62:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sizePrio" ref="0x7fbb490807f0" loc="33:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7fbb49080570" loc="33:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7fbb490815d0" loc="22:PrioCritQueue.nc">
        <documentation loc="17:PrioCritQueue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7fbb4907e020" loc="40:PrioCritQueue.nc">
        <documentation loc="35:PrioCritQueue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearLO" ref="0x7fbb49077530" loc="94:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeHI" ref="0x7fbb49075460" loc="100:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeLO_Q3" ref="0x7fbb490731f0" loc="108:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fbb4907a020" loc="70:PrioCritQueue.nc">
        <documentation loc="64:PrioCritQueue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeLO" ref="0x7fbb49075b80" loc="103:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7fbb49089e10" loc="15:PrioCritQueue.nc">
        <documentation loc="10:PrioCritQueue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headHI" ref="0x7fbb4907c9c0" loc="53:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="q_status" ref="0x7fbb4907c740" loc="53:PrioCritQueue.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeueHI" ref="0x7fbb4907abe0" loc="74:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeLO_Q1" ref="0x7fbb49074350" loc="106:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="head" ref="0x7fbb4907ea60" loc="50:PrioCritQueue.nc">
        <documentation loc="42:PrioCritQueue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined. q_status is a pointer&#10; to an error_t to set as SUCCESS or FAIL depending on whether&#10; there was anything returned&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb49089560"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="q_status" ref="0x7fbb4907e7e0" loc="50:PrioCritQueue.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../tos/interfaces/Random.nc">
      <documentation loc="34:../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7fbb4908fe50" loc="52:../../tos/interfaces/Random.nc">
        <documentation loc="48:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7fbb4908f650" loc="46:../../tos/interfaces/Random.nc">
        <documentation loc="42:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7fbb49067800" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49067580" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7fbb49065a00" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49065780" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7fbb49064b90" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb49064910" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbb49060020" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fbb490615e0" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fbb49061960" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb49061c90" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fbb4905c660" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb4905c060" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb4905c390" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbb4905b790" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fbb4905f390" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb4905f110" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbb4905d8b0" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb4905d2d0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fbb4905d620" loc="110:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncInfo" loc="36:../../tos/lib/ftsp/TimeSyncInfo.nc">
      <function command="" provided="0" name="getSyncPoint" ref="0x7fbb4903e4e0" loc="55:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="50:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the local time of the last synchronization point.</short>
          <long>&#10; Returns the local time of the last synchronization point. This &#10; value is close to the current local time and updated when a new&#10; time synchronization message arrives.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRootID" ref="0x7fbb4903ed60" loc="60:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="57:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the current root to which this node is synchronized.</short>
          <long>&#10; Returns the current root to which this node is synchronized. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSeqNum" ref="0x7fbb4903d5b0" loc="65:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="62:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the latest seq number seen from the current root.</short>
          <long>&#10; Returns the latest seq number seen from the current root.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOffset" ref="0x7fbb4903f480" loc="41:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="38:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns current offset of the local time wrt global time.</short>
          <long>&#10; Returns current offset of the local time wrt global time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNumEntries" ref="0x7fbb4903dde0" loc="71:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="67:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the number of entries stored currently in the &#10; regerssion table.</short>
          <long>&#10; Returns the number of entries stored currently in the &#10; regerssion table.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeartBeats" ref="0x7fbb4903c690" loc="76:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="73:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the value of heartBeats variable.</short>
          <long>&#10; Returns the value of heartBeats variable. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSkew" ref="0x7fbb4903fc20" loc="48:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="43:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns current skew of the local time wrt global time.</short>
          <long>&#10; Returns current skew of the local time wrt global time.&#10; This value is normalized to 0.0 (1.0 is subtracted) to get maximum &#10; representation precision.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-float cname="float" size="I:4" alignment="I:1"></type-float>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncMode" loc="44:../../tos/lib/ftsp/TimeSyncMode.nc">
      <documentation loc="36:../../tos/lib/ftsp/TimeSyncMode.nc">
        <short>&#10; the time sync module can work in two modes:&#10;            - TS_TIMER_MODE (default): TS msgs sent period.</short>
        <long>&#10; the time sync module can work in two modes:&#10;            - TS_TIMER_MODE (default): TS msgs sent period. from the timer&#10;            - TS_USER_MODE: TS msgs sent only when explic. asked by user &#10;                            via TimeSyncMode.send() command, TimeSync.Timer &#10;                            is stopped in this mode&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbb49038910" loc="61:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="57:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; command to send out time synchronization message.</short>
          <long>&#10; command to send out time synchronization message.&#10; returns FAIL if TimeSync not in TS_USER_MODE&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fbb49038190" loc="55:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="52:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; Gets the current mode of the TimeSync module.</short>
          <long>&#10; Gets the current mode of the TimeSync module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7fbb49039950" loc="50:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="46:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; Sets the current mode of the TimeSync module.</short>
          <long>&#10; Sets the current mode of the TimeSync module.&#10; returns FAIL if didn't succeed&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fbb490396d0" loc="50:../../tos/lib/ftsp/TimeSyncMode.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7fbb490b3a00" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7fbb490b11f0" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7fbb490b19d0" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7fbb490b0940" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7fbb490ad120" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbb490ad930" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7fbb490b0190" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb490ac4c0" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fbb490ac240" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7fbb490b3270" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7fbb490af190" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7fbb490af920" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb4904e350" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb4904e350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fbb490471f0" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fbb4904ca60" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7fbb49049820" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fbb49049250" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fbb49049590" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7fbb4904ba60" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7fbb49046270" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7fbb49047980" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fbb4904b270" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7fbb4904d020" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fbb4904ec40" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7fbb49048820" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fbb49048250" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fbb49048590" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7fbb4904dae0" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fbb4904d860" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbb4904c350" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7fbb4909dd30" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb4909dab0" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fbb490a7920" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb490a76a0" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fbb490b6d20" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fbb490a9820" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb490a95a0" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fbb490a4360" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb490a8d30" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbb490a40d0" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fbb490a5d30" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb490a5750" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbb490a5aa0" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7fbb490a1810" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb490a1590" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7fbb4909fb90" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb4909f5e0" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7fbb4909f900" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fbb491549e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fbb490a2600" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb490a2380" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fbb4909c2f0" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbb490a0cf0" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fbb4909c060" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7fbb4909a190" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlotterControl" loc="30:../../tos/interfaces/SlotterControl.nc">
      <documentation loc="23:../../tos/interfaces/SlotterControl.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <function command="" provided="0" name="stop" ref="0x7fbb49085700" loc="37:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlot" ref="0x7fbb49085e50" loc="38:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="synchronize" ref="0x7fbb49088020" loc="31:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="toSlot" ref="0x7fbb49099c90" loc="31:../../tos/interfaces/SlotterControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSynchornized" ref="0x7fbb49088790" loc="32:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fbb49087020" loc="34:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemaining" ref="0x7fbb49085020" loc="36:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7fbb49087770" loc="35:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fbb48f33cc0" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbb48f30560" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7fbb48f22b70" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7fbb48f228f0" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7fbb48f27020" loc="31:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7fbb48f27aa0" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7fbb48f27820" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7fbb48f265e0" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7fbb48f26360" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7fbb48f22020" loc="53:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fbb48f100e0" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fbb48f10810" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fbb48f122b0" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fbb48f0f760" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbb48f129b0" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fbb48f0f020" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb48f134c0" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fbb48f13b90" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fbb492ca620" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7fbb492c9650" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7fbb492cad90" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7fbb492c1a30" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7fbb492bf2b0" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7fbb491ee7f0" loc="85:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7fbb491ed020" loc="86:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fbb491ee020" loc="79:../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7fbb491d3e20" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7fbb49268df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7fbb491d1810" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb48d24510" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb48d24510"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fbb48d24750" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fbb48d1f350" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fbb48d21350" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7fbb48d20940" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fbb48d20370" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
          </variable>
          <variable name="dt" ref="0x7fbb48d206b0" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fbb48d21b30" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fbb48d1fb40" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fbb48d232e0" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fbb48d23060" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48d24750"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbb48d23b10" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x7fbb48cd7850" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7fbb48cd4de0" loc="87:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7fbb48cd88d0" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7fbb48cd2020" loc="91:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7fbb48cd3810" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7fbb48cd3590" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7fbb48cd5c40" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbb48cd59c0" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7fbb48cd2a20" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7fbb48cd27a0" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7fbb48cd70e0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x7fbb48cd4610" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbb48cd4390" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7fbb48cd52a0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbb48cd5020" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7fbb48cd98a0" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cd98a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7fbb48cc96a0" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7fbb48cc9420" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7fbb48cca4c0" loc="76:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbb48cce270" loc="47:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cd98a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fbb48ccd670" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cd98a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7fbb48ccd3f0" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cd98a0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fbb48ccde20" loc="64:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7fbb48ccac80" loc="82:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb48ccec10" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cd98a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7fbb48cce990" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cd98a0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fbb48ccc5d0" loc="67:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbb48cccd20" loc="70:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7fbb48cc6a80" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cc6a80"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7fbb48cbf3e0" loc="74:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fbb48cc25c0" loc="58:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbb48cc3420" loc="48:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cc6a80"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fbb48cc2d30" loc="62:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7fbb48cbfba0" loc="80:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb48cc3de0" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cc6a80"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7fbb48cc3b60" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48cc6a80"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fbb48cc04e0" loc="65:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbb48cc0c30" loc="68:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7fbb48ce8ab0" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fbb48ce8ab0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7fbb48cdf350" loc="98:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7fbb48ce13e0" loc="87:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbb48ce5420" loc="61:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fbb48ce8ab0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7fbb48cdfd30" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7fbb48cdfab0" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7fbb48cde550" loc="110:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fbb48ce3d50" loc="75:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fbb48ce35c0" loc="70:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7fbb48ce1ba0" loc="93:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb48ce5dd0" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fbb48ce8ab0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7fbb48ce5b50" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fbb48ce8ab0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fbb48ce24e0" loc="78:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbb48ce2c30" loc="81:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb48bd3780" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb48bd3780"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fbb48bd39c0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48bd39c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fbb48bd0350" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48bd39c0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fbb48bcf4b0" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fbb48bd0bd0" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fbb48bcfc10" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7fbb48b3b630" loc="59:../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7fbb48b3b020" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fbb48b3b3a0" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7fbb48b34e30" loc="65:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b34810" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7fbb48b34ba0" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7fbb48b31020" loc="71:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b33d70" loc="71:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7fbb48b34020" loc="57:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7fbb48b35520" loc="52:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7fbb48b352a0" loc="52:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7fbb48b2b390" loc="65:../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b2b110" loc="65:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7fbb48b2f410" loc="46:../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b37d90" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7fbb48b2f180" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7fbb48b2c350" loc="59:../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b2c0d0" loc="59:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7fbb48b2e830" loc="53:../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b2e210" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7fbb48b2e5a0" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7fbb48b2a390" loc="71:../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b2a110" loc="71:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="37:../../tos/lib/rfxlink/util/RadioChannel.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="setChannelDone" ref="0x7fbb48b27de0" loc="50:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7fbb48b275d0" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7fbb48b27350" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7fbb48b26660" loc="55:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb48b307a0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb48b307a0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fbb48b309e0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48b309e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7fbb48b22840" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48b309e0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b225c0" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7fbb48b209d0" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b20750" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7fbb48b245f0" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b24370" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb48b1fd00" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48b309e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b1f710" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7fbb48b1fa70" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48b309e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0x7fbb48b0a8a0" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7fbb48b0a8a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0x7fbb48b06a90" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
          <long>&#10; Clears the isSet flag.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b06810" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbb48b06020" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7fbb48b0a8a0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b07c90" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7fbb48b07490" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b07210" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb48b04810" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="55:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
          <long>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7fbb48b0a8a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48b04210" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7fbb48b04580" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7fbb48b0a8a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb48af8350" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb48af8350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fbb48af8c70" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fbb49d12170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7fbb48af9ac0" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48af9840" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fbb48ad8bf0" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7fbb48ad9be0" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fbb48ad9270" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fbb48ad8420" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fbb48ad78b0" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0x7fbb48ad3d40" loc="41:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48ad3ac0" loc="41:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fbb48ad68e0" loc="37:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fbb48ad3350" loc="39:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48ad30d0" loc="39:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fbb48ad1830" loc="45:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48ad1210" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbb48ad15a0" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fbb48ad2af0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48ad24d0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbb48ad2860" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0x7fbb48acfc70" loc="49:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7fbb4915f210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48acf9f0" loc="49:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0x7fbb48ace980" loc="51:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7fbb4915f210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48ace370" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fbb48ace6f0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7fbb4915f210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fbb48acf2a0" loc="47:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48acf020" loc="47:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7fbb48acd120" loc="53:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7fbb4915f210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbb48ae2b70" loc="67:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fbb48ae2220" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fbb48ae25a0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb48ae28d0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fbb48add660" loc="122:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48add060" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb48add390" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbb48ade790" loc="110:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fbb48ae0c00" loc="83:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48ae0980" loc="83:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbb48adfde0" loc="97:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48adf800" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fbb48adfb50" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0x7fbb48ab0cc0" loc="59:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0x7fbb48aaf760" loc="72:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0x7fbb48aae120" loc="79:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0x7fbb48ab0560" loc="48:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
        <long>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example). &#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fbb48a98830" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbb48a985b0" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0x7fbb48a97070" loc="62:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbb48a99500" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbb48a99280" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb48a99e80" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbb48a99c00" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="43:../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="38:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0x7fbb48a9e500" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbb48a9e280" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0x7fbb48a9daa0" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="65:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fbb48a9d820" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0x7fbb48a9d040" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="60:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
          <long>&#10; Returns the node address for the given entry.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbb48a9ed90" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x7fbb48a9c5e0" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbb48a9c360" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0x7fbb48a9fa20" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fbb48a9f7a0" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0x7fbb48a3f740" loc="40:../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0x7fbb48a52ce0" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a52a60" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0x7fbb48a3a2a0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a3a020" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0x7fbb48a39a30" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a397b0" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fbb48a3da20" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a3d7a0" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fbb48a3e2a0" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a3e020" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fbb48a3c750" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a3c170" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbb48a3c4c0" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fbb48a3d020" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a3ea00" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbb48a3ed50" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fbb48a39020" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a3a9d0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fbb48a3ad20" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0x7fbb48a4bd60" loc="42:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
          <long>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0x7fbb48a44730" loc="49:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0x7fbb48a42a00" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a42780" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0x7fbb48a432a0" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a43020" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0x7fbb48a43db0" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
          <long>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a43b30" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0x7fbb48a17d60" loc="60:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
          <long>&#10; This event is fired when the specified timeout period expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0x7fbb48a19e10" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7fbb49161180"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0x7fbb48a19b90" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7fbb49161180"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fbb48a175f0" loc="55:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0x7fbb48a19350" loc="45:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7fbb48a165b0" loc="65:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
          <long>&#10; Returns the current time as measured by the radio stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7fbb49161180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="37:../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0x7fbb48a10a90" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="69:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
          <long>&#10; Clears all metadata and sets all default values in the headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a10810" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fbb48a14e00" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a14b80" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbb48a114d0" loc="61:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fbb48a12c70" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
          <long>&#10; Sets the length of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a12690" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7fbb48a129e0" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7fbb48a142a0" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a14020" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7fbb48a10020" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="63:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a11ce0" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbb48a603e0" loc="46:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7fbb48a63b80" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a63900" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7fbb48a5f020" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
          <long>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a60c90" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0x7fbb48a5f8c0" loc="59:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0x7fbb48a5e490" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a5e210" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0x7fbb48a4d5f0" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
          <long>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a4d370" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0x7fbb48a55660" loc="86:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
          <long>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0x7fbb48a56e40" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb48a56830" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fbb48a56bb0" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7fbb48a5a940" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
          <long>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a5a6c0" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0x7fbb48a59490" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a59210" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0x7fbb48a573e0" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb48a59d80" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fbb48a57150" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0x7fbb48a5b020" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
          <long>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7fbb48a5be30" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a5b890" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fbb48a5bba0" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7fbb48a56020" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a57cd0" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0x7fbb48a260b0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a27dd0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0x7fbb48a28680" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a28400" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0x7fbb48a34df0" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a34820" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0x7fbb48a34b60" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0x7fbb48a30020" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a32ca0" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0x7fbb48a21050" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a22a40" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbb48a22d90" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0x7fbb48a32430" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a321b0" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0x7fbb48a275e0" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a27020" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0x7fbb48a27350" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0x7fbb48a2f9d0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb48a2f3c0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fbb48a2f740" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0x7fbb48a222a0" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a22020" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0x7fbb48a33920" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a336a0" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0x7fbb48a2c3f0" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a2c170" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0x7fbb48a2e8b0" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb48a2e2a0" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fbb48a2e620" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0x7fbb48a1e820" loc="178:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fbb4915f630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7fbb48a21ad0" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a21850" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7fbb48a1e020" loc="173:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7fbb4915f210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0x7fbb48a236b0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a230d0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbb48a23420" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0x7fbb48a30b20" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a308a0" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0x7fbb48a2abf0" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
          <long>&#10; Sets the frame pending field in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a2a620" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0x7fbb48a2a960" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0x7fbb48a26e40" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a26870" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0x7fbb48a26bb0" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fbb48a1d2a0" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a1d020" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7fbb48a2b2b0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
          <long>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a2cbf0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fbb48a2b020" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0x7fbb48a34040" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a38d90" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7fbb48a1f680" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a1f400" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0x7fbb48a25910" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a25690" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0x7fbb48a2bdb0" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a2bb30" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x7fbb48a4f2b0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
          <long>&#10; Sets the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a50bd0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0x7fbb48a4f020" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0x7fbb48a4faa0" loc="58:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x7fbb48a518e0" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a51660" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x7fbb48a503d0" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a50150" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0x7fbb48a48020" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a49c90" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0x7fbb48a493d0" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
          <long>&#10; Returns the initial amount of maximum backoff for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a49150" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0x7fbb48a48870" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0x7fbb48a46390" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48a46110" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="38:../../tos/lib/rfxlink/util/BareSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbb48975730" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb489754b0" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fbb489722a0" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48972020" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbb489746b0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb489740d0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fbb48974420" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="37:../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7fbb48977d10" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
              <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48977a50" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7fbb489606a0" loc="50:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7fbb4895e600" loc="60:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7fbb48960e80" loc="55:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7fbb48963e30" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7fbb48963850" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fbb49154dc0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7fbb48963ba0" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7fbb488b78e0" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fbb488b5270" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7fbb488b1a10" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fbb488b11f0" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7fbb488b30e0" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7fbb488b3940" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7fbb488a8b50" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fbb488b0b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fbb488a88d0" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fbb488b0b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7fbb488aca80" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7fbb488a9620" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fbb488b0b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fbb488a93a0" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fbb488b0b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fbb488a8020" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7fbb488b0b00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="38:../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7fbb4873b020" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
              <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb4873dd30" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0x7fbb4873d390" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb4873d110" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="38:../../tos/lib/rfxlink/util/RadioState.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="turnOff" ref="0x7fbb486d0d10" loc="45:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7fbb486cde60" loc="57:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7fbb486cc920" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7fbb486cc6a0" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0x7fbb486cb120" loc="70:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="66:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0x7fbb486cd600" loc="51:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
          <long>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7fbb486cb9d0" loc="75:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="72:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="38:../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0x7fbb486c8730" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb486c84b0" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0x7fbb486c7bc0" loc="64:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbb486c7350" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fbb486c70d0" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7fbb486275e0" loc="53:../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7fbb486275e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7fbb486242a0" loc="64:../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7fbb486275e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7fbb48624020" loc="64:../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7fbb486275e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="37:../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0x7fbb485fda00" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="54:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb485fd780" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbb486007f0" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
          <long>&#10; Returns if the flag is set for this message. &#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb48600570" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0x7fbb485ff5e0" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
          <long>&#10; Sets the flag in this message to the specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb485ff020" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7fbb485ff350" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbb485fd020" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb485ffd70" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="38:../../tos/lib/rfxlink/util/RadioCCA.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="done" ref="0x7fbb485cbdc0" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fbb485cbb40" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fbb485cb350" loc="45:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7fbb485237f0" loc="89:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7fbb485244d0" loc="85:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7fbb48527070" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7fbb48523020" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7fbb48524c40" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7fbb48525c40" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbb485259c0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7fbb485222a0" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7fbb48522020" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7fbb48527810" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7fbb485252a0" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbb48525020" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x7fbb48518b80" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x7fbb4851aae0" loc="68:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x7fbb485192b0" loc="74:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x7fbb48519ae0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7fbb485163b0" loc="98:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x7fbb48518350" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7fbb4851b810" loc="57:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7fbb492212c0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7fbb492216e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7fbb4851a2a0" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7fbb492212c0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7fbb492216e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7fbb4851a020" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7fbb492212c0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7fbb492216e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb48320020" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb48320020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fbb48320260" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48320260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7fbb48320d90" loc="66:../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48320260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fbb48320b10" loc="66:../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb48320260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7fbb48323610" loc="54:../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7fbb483227d0" loc="66:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fbb48322020" loc="61:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fbb48323d30" loc="61:../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7fbb48326d70" loc="53:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7fbb4832a020" loc="62:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb4832dca0" loc="62:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7fbb483293c0" loc="74:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb48329140" loc="74:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7fbb4832a890" loc="68:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7fbb48329e50" loc="81:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb48329bd0" loc="81:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbb48217600" loc="76:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7fbb4821cc00" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7fbb48217020" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb48217360" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbb48216b80" loc="88:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7fbb48215e50" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7fbb48216220" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb48216560" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fbb482168d0" loc="89:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7fbb4821b8a0" loc="45:../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7fbb4821b620" loc="45:../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x7fbb48201420" loc="86:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x7fbb481f71f0" loc="126:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x7fbb481fcb70" loc="117:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x7fbb481f7c10" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x7fbb481f7990" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x7fbb48202c40" loc="83:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x7fbb481f9750" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x7fbb481f94d0" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7fbb481fd2a0" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x7fbb481fd020" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7fbb482003b0" loc="97:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x7fbb481f2720" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x7fbb481f24a0" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x7fbb481fda40" loc="114:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x7fbb481f5d50" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x7fbb481f5ad0" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7fbb481f4cf0" loc="136:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x7fbb481f8a30" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x7fbb481f87b0" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x7fbb481f3c90" loc="140:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x7fbb481fa5c0" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x7fbb481fa340" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7fbb48200d90" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb48200b10" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7fbb481fc410" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x7fbb481fc190" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x7fbb481f8020" loc="123:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x7fbb481f53b0" loc="129:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x7fbb481f4510" loc="132:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x7fbb481f34d0" loc="138:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x7fbb481fad40" loc="120:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fbb48201bb0" loc="89:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7fbb481fe7c0" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb481fe540" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7fbb480a0a10" loc="43:../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb480a0a10"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7fbb4809a270" loc="80:../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb480a0a10"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7fbb48099cb0" loc="97:../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb480a0a10"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7fbb48099a30" loc="97:../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb480a0a10"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7fbb49d19b50"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x7fbb49d19b50"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7fbb48096c70" loc="108:../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb480a0a10"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbb480969f0" loc="108:../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7fbb4809dac0" loc="57:../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7fbb4809ba70" loc="72:../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fbb4809ae50" loc="88:../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbb480a0a10"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7fbb4809d350" loc="50:../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7fbb4809b270" loc="65:../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncNotify" loc="41:../../tos/lib/ftsp/TimeSyncNotify.nc">
      <documentation loc="36:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <short>&#10; time sync module (TimeSyncM) provides notification of arriving&#10; and transmitted time-sync msgs through TimeSyncNotify interface:&#10;</short>
      </documentation>
      <function event="" provided="0" name="msg_received" ref="0x7fbb47fe7a20" loc="46:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <documentation loc="43:../../tos/lib/ftsp/TimeSyncNotify.nc">
          <short>&#10; fired when time-sync msg is received and accepted&#10;</short>
        </documentation>
        <interfacedef-ref qname="TimeSyncNotify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="msg_sent" ref="0x7fbb47fe4190" loc="52:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <documentation loc="48:../../tos/lib/ftsp/TimeSyncNotify.nc">
          <short>&#10; fired when time-sync msg is sent by TimeSyncM or the sending did not&#10; succeed&#10;</short>
        </documentation>
        <interfacedef-ref qname="TimeSyncNotify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncAMSend" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb47fdb870" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
          <interfacedef-ref qname="TimeSyncAMSend"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb47fdb870"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fbb47fdbab0" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
          <interfacedef-ref qname="TimeSyncAMSend"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb47fdbab0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="send" ref="0x7fbb47fd70e0" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="46:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; This command sends a regular message just like &#60;tt>AMSend.send&#60;/tt>, but&#10; it also performs sender-receiver time synchronization.</short>
          <long>&#10; This command sends a regular message just like &#60;tt>AMSend.send&#60;/tt>, but&#10; it also performs sender-receiver time synchronization. The &#60;tt>event_time&#60;/tt>&#10; parameter holds the time of some event as expressed in the local clock of&#10; the sender. The receiver can obtain the time of this event (expressed in its&#10; own local time) via the &#60;tt>TimeSyncPacket&#60;/tt> interface.&#10;&#10; @param addr         address to which to send the packet&#10; @param msg          the packet&#10; @param len          the length of the data in the packet payload&#10; @param event_time&#9;  the synchronization point to be transfered with the message&#10; @return             SUCCESS if the request to send succeeded and a&#10;                     sendDone will be signaled later, EBUSY if the&#10;                     abstraction cannot send now but will be able to&#10;                     later, or FAIL if the communication layer is not&#10;                     in a state that can send (e.g., off).&#10; @see sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb47fdbab0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fbb47fd83a0" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbb491521d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fbb47fd8720" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb47fd8a50" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
          <variable name="event_time" ref="0x7fbb47fd8de0" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb47fdbab0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fbb47fd3810" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="105:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb47fd3210" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb47fd3540" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbb47fd4960" loc="103:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="95:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fbb47fd5020" loc="80:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="66:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the&#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a&#10; sendFailed event, and never a sendSucceeded event.&#10;&#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb47fd7c70" loc="80:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbb47fd4020" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="82:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Signaled in response to an accepted send request.</short>
          <long>&#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb47fd59c0" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fbb47fd5d10" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncPacket" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7fbb47fc8db0" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
          <interfacedef-ref qname="TimeSyncPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbb47fc8db0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fbb47fc5020" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
          <interfacedef-ref qname="TimeSyncPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb47fc5020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="isValid" ref="0x7fbb47fc5ba0" loc="48:../../tos/interfaces/TimeSyncPacket.nc">
        <documentation loc="39:../../tos/interfaces/TimeSyncPacket.nc">
          <short>&#10; Returns TRUE if the value returned by &#60;tt>getTime&#60;/tt> can be trusted.</short>
          <long>&#10; Returns TRUE if the value returned by &#60;tt>getTime&#60;/tt> can be trusted.&#10; Under certain circumstances the received message cannot be properly&#10; time stamped, so the sender-receiver synchronization cannot be finished&#10; on the receiver side. In this case, this command returns FALSE.&#10; This command MUST BE called only on the receiver side and only for&#10; messages transmitted via the TimeSyncSend interface. It is recommended&#10; that this command be called from the receive event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb47fc5920" loc="48:../../tos/interfaces/TimeSyncPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="eventTime" ref="0x7fbb47fc4800" loc="58:../../tos/interfaces/TimeSyncPacket.nc">
        <documentation loc="50:../../tos/interfaces/TimeSyncPacket.nc">
          <short>&#10; This command should be called by the receiver of a message.</short>
          <long>&#10; This command should be called by the receiver of a message. The time&#10; of the synchronization event is returned as expressed in the local&#10; clock of the caller. This command MUST BE called only on the receiver&#10; side and only for messages transmitted via the TimeSyncSend interface.&#10; It is recommended that this command be called from the receive event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbb47fc5020"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb47fc4580" loc="58:../../tos/interfaces/TimeSyncPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7fbb47c56630" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb47c56020" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7fbb47c563a0" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7fbb47c58670" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7fbb47c57620" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbb47c57020" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbb4913b160"/>
                <typename><typedef-ref name="message_t" ref="0x7fbb4913a7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7fbb47c57390" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7fbb47c20580" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7fbb47c23dd0" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7fbb47c29770" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7fbb47c28be0" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7fbb47c26840" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb47c265c0" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7fbb47c274a0" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7fbb47c28350" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb47c280d0" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7fbb47c240e0" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7fbb47c27d50" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7fbb47c30190" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7fbb47c30ac0" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7fbb47c317b0" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7fbb47c31530" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7fbb47c2f690" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fbb47c2f410" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7fbb47c2d3e0" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7fbb47c2c030" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb47c2dd80" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7fbb47c2cb00" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fbb47c2c880" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbb47afbdd0" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbb47afb800" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb47afbb40" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7fbb47af3ac0" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fbb47af3840" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fbb47af2930" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbb47af2360" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb47af26a0" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7fbb47af4740" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7fbb47af12c0" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbb47af0920" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb47af0c60" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fbb47af1020" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7fbb47af3070" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbb47af6720" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbb47af7db0" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbb47af6130" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fbb49d13610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fbb47af6480" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbb47ad05b0" loc="50:../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fbb47ad0330" loc="50:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7fbb47ad0df0" loc="59:../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fbb47acfcf0" loc="69:../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fbb47acf700" loc="69:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7fbb47acfa60" loc="69:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7fbb47acdb50" loc="79:../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:../../tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:../../tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7fbb47aba820" loc="44:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7fbb47abb910" loc="42:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x7fbb47ab6110" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb47ab7e60" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7fbb47ab7070" loc="47:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7fbb47abe980" loc="40:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7fbb47abb190" loc="41:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7fbb47aba0e0" loc="43:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbb492c33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x7fbb47ab8020" loc="45:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbb4930a500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7fbb47ab8950" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbb47ab86d0" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7fbb47ab7790" loc="48:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbb49d14ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7fbb478ed720" loc="49:../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7fbb478ed4a0" loc="49:../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
