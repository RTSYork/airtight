<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="24:MCCC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89af5bae80"/></from>
      <to><interface-ref name="FlowSend" scoped="" ref="0x7f89afa664a0"/></to>
    </wire>
    <wire loc="25:MCCC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f89afa63190"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f89b0cf2020"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f89b0cf2020"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f89b0cefdb0"/></to>
    </wire>
    <wire loc="27:MCCC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89afa61a70"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b0902790"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89b0902790"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b08d50c0"/></to>
    </wire>
    <wire loc="28:MCCC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89afa62da0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89b0903b00"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89b0903b00"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89b08d6410"/></to>
    </wire>
    <wire loc="30:MCCC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89afa63790"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89b0cf6890"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89b0cf6890"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89b0b1b2a0"/></to>
    </wire>
    <wire loc="31:MCCC.nc">
      <from><interface-ref name="MacControl" scoped="" ref="0x7f89afa5f1f0"/></from>
      <to><interface-ref name="MacPowerControl" scoped="" ref="0x7f89b0f55020"/></to>
    </wire>
    <wire loc="36:TdmaMacC.nc">
      <from><interface-ref name="MacPowerControl" scoped="" ref="0x7f89b0f55020"/></from>
      <to><interface-ref name="MacPowerControl" scoped="" ref="0x7f89b0e6bdc0"/></to>
    </wire>
    <wire loc="32:MCCC.nc">
      <from><interface-ref name="MacSend" scoped="" ref="0x7f89afa5e7b0"/></from>
      <to><interface-ref name="MacSend" scoped="" ref="0x7f89b0ee0c80"/></to>
    </wire>
    <wire loc="40:TdmaMacC.nc">
      <from><interface-ref name="MacSend" scoped="" ref="0x7f89b0ee0c80"/></from>
      <to><interface-ref name="MacSend" scoped="" ref="0x7f89b0e6c860"/></to>
    </wire>
    <wire loc="33:MCCC.nc">
      <from><interface-ref name="MacReceive" scoped="" ref="0x7f89afa5c500"/></from>
      <to><interface-ref name="MacReceive" scoped="" ref="0x7f89b0edc680"/></to>
    </wire>
    <wire loc="41:TdmaMacC.nc">
      <from><interface-ref name="MacReceive" scoped="" ref="0x7f89b0edc680"/></from>
      <to><interface-ref name="MacReceive" scoped="" ref="0x7f89b0e6b690"/></to>
    </wire>
    <wire loc="34:MCCC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89afa5cb90"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0f59020"/></to>
    </wire>
    <wire loc="37:TdmaMacC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0f59020"/></from>
      <to><interface-ref name="Frame" scoped="" ref="0x7f89b0e6dc40"/></to>
    </wire>
    <wire loc="49:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af619020"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x7f89af7acbc0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x7f89af7a6b50"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af81a770"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af9b8e50"/></to>
    </wire>
    <wire loc="65:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af6463c0"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89aeeef420"/></to>
    </wire>
    <wire loc="120:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0107600"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0322b40"/></to>
    </wire>
    <wire loc="52:../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b03e6080"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f89af057760"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af086b60"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af14b460"/></to>
    </wire>
    <wire loc="47:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af1dbd90"/></to>
    </wire>
    <wire loc="49:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0af1700"/></to>
    </wire>
    <wire loc="36:MCCC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89afd43700"/></to>
    </wire>
    <wire loc="58:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89afd43700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89afc8f1e0"/></to>
    </wire>
    <wire loc="37:MCCC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f89afd430c0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f89b0cf2020"/></to>
    </wire>
    <wire loc="33:TdmaMacC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89b0f5b020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0e6d530"/></to>
    </wire>
    <wire loc="45:TdmaMacC.nc">
      <from><interface-ref name="Slotter" scoped="" ref="0x7f89b0e3ab40"/></from>
      <to><interface-ref name="Slotter" scoped="" ref="0x7f89b0cfcaf0"/></to>
    </wire>
    <wire loc="45:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Slotter" scoped="" ref="0x7f89b0cfcaf0"/></from>
      <to><interface-ref name="Slotter" scoped="" ref="0x7f89b0aee5b0"/></to>
    </wire>
    <wire loc="46:TdmaMacC.nc">
      <from><interface-ref name="SlotterControl" scoped="" ref="0x7f89b0e34130"/></from>
      <to><interface-ref name="SlotterControl" scoped="" ref="0x7f89b0cf9180"/></to>
    </wire>
    <wire loc="53:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="SlotterControl" scoped="" ref="0x7f89b0cf9180"/></from>
      <to><interface-ref name="SlotterControl" scoped="" ref="0x7f89b0aeec10"/></to>
    </wire>
    <wire loc="47:TdmaMacC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0e40330"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0cf81a0"/></to>
    </wire>
    <wire loc="46:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0cf81a0"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0aedc90"/></to>
    </wire>
    <wire loc="50:TdmaMacC.nc">
      <from><interface-ref name="RadioPowerControl" scoped="" ref="0x7f89b0e1e460"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89b0908020"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89b0908020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89b08db2e0"/></to>
    </wire>
    <wire loc="51:TdmaMacC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89b0e4a4e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b0902790"/></to>
    </wire>
    <wire loc="52:TdmaMacC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89b0e5a020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89b0903b00"/></to>
    </wire>
    <wire loc="53:TdmaMacC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89b0e5c9a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89b0cf6890"/></to>
    </wire>
    <wire loc="54:TdmaMacC.nc">
      <from><interface-ref name="ACK" scoped="" ref="0x7f89b0e19890"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b0900e40"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b0900e40"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b08d4800"/></to>
    </wire>
    <wire loc="55:TdmaMacC.nc">
      <from><interface-ref name="phyDataSend" scoped="" ref="0x7f89b0e15020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89b0906050"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:TdmaMacC.nc">
      <from><interface-ref name="phyDataReceive" scoped="" ref="0x7f89b0e15d50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b0905210"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:TdmaMacC.nc">
      <from><interface-ref name="phyNotificationSend" scoped="" ref="0x7f89b0e0ca10"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89b0906050"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:TdmaMacC.nc">
      <from><interface-ref name="phyNotificationReceive" scoped="" ref="0x7f89b0e16890"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b0905210"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:TdmaMacC.nc">
      <from><interface-ref name="forwardQueue" scoped="" ref="0x7f89b0e259a0"/></from>
      <to><interface-ref name="PCQ" scoped="" ref="0x7f89afd57da0"/></to>
    </wire>
    <wire loc="17:PrioCritQueueC.nc">
      <from><interface-ref name="PCQ" scoped="" ref="0x7f89afd57da0"/></from>
      <to><interface-ref name="PrioCritQueue" scoped="" ref="0x7f89aee8a770"/></to>
    </wire>
    <wire loc="66:TdmaMacC.nc">
      <from><interface-ref name="GlobalTime" scoped="" ref="0x7f89b0e06cc0"/></from>
      <to><interface-ref name="GlobalTime" scoped="" ref="0x7f89afd42770"/></to>
    </wire>
    <wire loc="56:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="GlobalTime" scoped="" ref="0x7f89afd42770"/></from>
      <to><interface-ref name="GlobalTime" scoped="" ref="0x7f89afc8e060"/></to>
    </wire>
    <wire loc="67:TdmaMacC.nc">
      <from><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f89b0df0dc0"/></from>
      <to><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f89afd408c0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f89afd408c0"/></from>
      <to><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f89afc8b120"/></to>
    </wire>
    <wire loc="69:TdmaMacC.nc">
      <from><interface-ref name="FaultClearTimer" scoped="" ref="0x7f89b0df9a40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89afe07b00"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89afe07b00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f89b017c2e0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="47:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f89b0cf4610"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f89b0af1d70"/></to>
    </wire>
    <wire loc="44:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f89b0ae0770"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f89b0cf2020"/></to>
    </wire>
    <wire loc="50:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89b0aeb020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89b09124e0"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89b09124e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89af263890"/></to>
    </wire>
    <wire loc="54:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89b0ae1180"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89b0cf6890"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f89b0b2c470"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f89b10799d0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f89b10799d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f89b0fa4e40"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0b2b020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f89afff9680"/></to>
    </wire>
    <wire loc="123:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0b2b020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0108a60"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0b2b020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0cee020"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89b0cee020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0ce5380"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0b2b720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f89b0ced020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af68fc60"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f89b0ced020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b09ea790"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f89b0ce71d0"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f89b0b4c690"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7f89b0ce4180"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0b4c020"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f89b0ce5a60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0af7920"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f89b0ce5a60"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0cecae0"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0cecae0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0cda5f0"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f89b0cdd1e0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f89b0ced020"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7f89b0cd3b20"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7f89b0cc7060"/></to>
    </wire>
    <wire loc="141:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7f89b0cc7060"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f89b0c3cda0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f89b0cd9e60"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f89b0cdd1e0"/></to>
    </wire>
    <wire loc="191:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7f89b0c92cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89b0ba2160"/></to>
    </wire>
    <wire loc="165:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7f89b0cae4e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f89b0c112b0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f89b0c112b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af428e20"/></to>
    </wire>
    <wire loc="176:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7f89b0ca1350"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f89b0bff8f0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f89b0bff8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3b63f0"/></to>
    </wire>
    <wire loc="185:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7f89b0c98cb0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f89b0bf0c10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f89b0bf0c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3423f0"/></to>
    </wire>
    <wire loc="196:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x7f89b0c8a060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89b0b886d0"/></to>
    </wire>
    <wire loc="143:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7f89b0cc5670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f89b0c392b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f89b0c392b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af55f3f0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7f89b0c9a670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f89b0bf28f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f89b0bf28f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af349e20"/></to>
    </wire>
    <wire loc="146:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7f89b0cc3cb0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f89b0c31a20"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f89b0c31a20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af501a60"/></to>
    </wire>
    <wire loc="157:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7f89b0cb7cb0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f89b0c1f020"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f89b0c1f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af48f0a0"/></to>
    </wire>
    <wire loc="168:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7f89b0caae40"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f89b0c0d760"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f89b0c0d760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af41e6d0"/></to>
    </wire>
    <wire loc="179:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7f89b0c9ecb0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f89b0bfcda0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f89b0bfcda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3ace20"/></to>
    </wire>
    <wire loc="138:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7f89b0ccc800"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f89b0c408f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f89b0c408f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af5703f0"/></to>
    </wire>
    <wire loc="149:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7f89b0cbf670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f89b0c2d020"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f89b0c2d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4f73f0"/></to>
    </wire>
    <wire loc="160:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7f89b0cb3670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f89b0c1c5d0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f89b0c1c5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4859b0"/></to>
    </wire>
    <wire loc="171:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7f89b0ca6670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f89b0c0ac10"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f89b0c0ac10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4130a0"/></to>
    </wire>
    <wire loc="188:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7f89b0c94670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f89b0bec2b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f89b0bec2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af339e20"/></to>
    </wire>
    <wire loc="194:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7f89b0c8db20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89b0b92160"/></to>
    </wire>
    <wire loc="174:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7f89b0ca4cb0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f89b0c015d0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f89b0c015d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3bde20"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f89b0c3cda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af566e20"/></to>
    </wire>
    <wire loc="152:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7f89b0cbb020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f89b0c2a5d0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f89b0c2a5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4ede20"/></to>
    </wire>
    <wire loc="192:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7f89b0c904e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89b0b9ec90"/></to>
    </wire>
    <wire loc="155:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7f89b0cb9670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f89b0c22d30"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f89b0c22d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af496c90"/></to>
    </wire>
    <wire loc="166:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7f89b0cad800"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f89b0c10440"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f89b0c10440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4240a0"/></to>
    </wire>
    <wire loc="177:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7f89b0ca0670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f89b0bfea80"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f89b0bfea80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3b36d0"/></to>
    </wire>
    <wire loc="186:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7f89b0c96020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f89b0befda0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f89b0befda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af33f6d0"/></to>
    </wire>
    <wire loc="144:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7f89b0cc4990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f89b0c38440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f89b0c38440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af55c6d0"/></to>
    </wire>
    <wire loc="147:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7f89b0cc1020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f89b0c30c10"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f89b0c30c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4fee20"/></to>
    </wire>
    <wire loc="158:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7f89b0cb5020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f89b0c1e2b0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f89b0c1e2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af48c3f0"/></to>
    </wire>
    <wire loc="169:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7f89b0ca8060"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f89b0c0c8f0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f89b0c0c8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af41b9b0"/></to>
    </wire>
    <wire loc="180:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7f89b0c9c020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f89b0bfa020"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f89b0bfa020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3a80a0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7f89b0ccbb20"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f89b0c3ea80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f89b0c3ea80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af56d6d0"/></to>
    </wire>
    <wire loc="150:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7f89b0cbe990"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f89b0c2c2b0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f89b0c2c2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4f46d0"/></to>
    </wire>
    <wire loc="161:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7f89b0cb2990"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f89b0c1b760"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f89b0c1b760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af482e20"/></to>
    </wire>
    <wire loc="189:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7f89b0c93990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f89b0beb440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f89b0beb440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3340a0"/></to>
    </wire>
    <wire loc="164:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7f89b0caf020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f89b0c12020"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f89b0c12020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af42bc90"/></to>
    </wire>
    <wire loc="175:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7f89b0ca2020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f89b0c00760"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f89b0c00760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3b90a0"/></to>
    </wire>
    <wire loc="184:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7f89b0c99990"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f89b0bf1a80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f89b0bf1a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3450a0"/></to>
    </wire>
    <wire loc="195:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7f89b0c8ce40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89b0b8ec90"/></to>
    </wire>
    <wire loc="142:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7f89b0cc6350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f89b0c3a020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f89b0c3a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af5620a0"/></to>
    </wire>
    <wire loc="153:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7f89b0cba350"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f89b0c29760"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f89b0c29760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4e90a0"/></to>
    </wire>
    <wire loc="182:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7f89b0c9b350"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f89b0bf37a0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f89b0bf37a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af34cc90"/></to>
    </wire>
    <wire loc="156:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7f89b0cb8990"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f89b0c21e60"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f89b0c21e60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af493e20"/></to>
    </wire>
    <wire loc="167:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7f89b0cacb20"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f89b0c0f5d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f89b0c0f5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4213f0"/></to>
    </wire>
    <wire loc="178:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7f89b0c9f990"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f89b0bfdc10"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f89b0bfdc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3b09b0"/></to>
    </wire>
    <wire loc="187:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7f89b0c95350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f89b0bed020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f89b0bed020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af33c9b0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7f89b0cdb530"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f89b0c416b0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f89b0c416b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af573020"/></to>
    </wire>
    <wire loc="148:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7f89b0cc0350"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f89b0c2fda0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f89b0c2fda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4fa0a0"/></to>
    </wire>
    <wire loc="159:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7f89b0cb4350"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f89b0c1d440"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f89b0c1d440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4896d0"/></to>
    </wire>
    <wire loc="170:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7f89b0ca7350"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f89b0c0ba80"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f89b0c0ba80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af417e20"/></to>
    </wire>
    <wire loc="193:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7f89b0c8f800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89b0b986d0"/></to>
    </wire>
    <wire loc="173:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7f89b0ca5990"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f89b0c033f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f89b0c033f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af3c0c90"/></to>
    </wire>
    <wire loc="162:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7f89b0cb1cb0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f89b0c198f0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f89b0c198f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af47e0a0"/></to>
    </wire>
    <wire loc="140:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7f89b0ccae40"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f89b0c3dc10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f89b0c3dc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af56a9b0"/></to>
    </wire>
    <wire loc="151:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7f89b0cbdcb0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f89b0c2b440"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f89b0c2b440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f89af4f09b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b0fa3d30"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f89b0f9d2c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f89b0fba3b0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f89b0f7f330"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f89b027bcb0"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89b0af7920"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0b1ec30"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f89b0b1aa00"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f89b0afa020"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f89b0afa020"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x7f89b0ccbb20"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f89b0b19ca0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f89b0af9380"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f89b0af9380"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x7f89b0ccc800"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f89b0b17020"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f89b0af86a0"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f89b0af86a0"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x7f89b0cdb530"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f89af25c0a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89af2697c0"/></to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89af2697c0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89af253d90"/></to>
    </wire>
    <wire loc="38:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89af260c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89b0998290"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89b0998290"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89b09530f0"/></to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f89af24e0b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b0aa37b0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89b0aa37b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b0a7d8c0"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f89af249570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f89b0a8a4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b0a96aa0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b0a78c20"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f89b0a8e970"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f89b0a76380"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f89b0a8a4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f89b0a71020"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f89b0a8a4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f89b0a6d550"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f89b0a8a4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f89b0a69ba0"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89b09dd020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b0aa37b0"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f89b0951540"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89b0990290"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89b0990290"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89b098a020"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89b0977280"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b0aa37b0"/></to>
    </wire>
    <wire loc="75:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89b08db2e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89b08b1080"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f89b09034f0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f89b08d7d60"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f89b08d7d60"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f89b08aebb0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89b08d6410"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f89b08aca10"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89b0906050"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89b08da320"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89b08da320"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89b08b01d0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f89b0905df0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f89b08d71d0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f89b08d71d0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f89b08ae020"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b08f88a0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b08d3320"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b08d3320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b0891320"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89b0905210"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b08d9510"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89b08d9510"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b08af3f0"/></to>
    </wire>
    <wire loc="85:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b08d4800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b089a800"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f89b08f0bf0"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f89b08d3e10"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f89b08d3e10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f89b0891e10"/></to>
    </wire>
    <wire loc="83:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89b08d50c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b08ad2d0"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f89b08ec960"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f89b08d2ad0"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f89b08d2ad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f89b0890ad0"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f89b08e39e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b08c08a0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b08c08a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b0883270"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b08e2af0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b08b8970"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b08b8970"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b087f3f0"/></to>
    </wire>
    <wire loc="254:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89b08b1080"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89b04ba880"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b08c5a00"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b08881c0"/></to>
    </wire>
    <wire loc="345:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b08881c0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b01263b0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f89b08aebb0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f89b06a13a0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f89b08aca10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89b06a4720"/></to>
    </wire>
    <wire loc="136:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89b08b01d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89b06a3530"/></to>
    </wire>
    <wire loc="138:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f89b08ae020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f89b06a2b00"/></to>
    </wire>
    <wire loc="91:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b08c8400"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b088dc90"/></to>
    </wire>
    <wire loc="343:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b088dc90"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b012ae80"/></to>
    </wire>
    <wire loc="255:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b0891320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b04a3270"/></to>
    </wire>
    <wire loc="137:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89b08af3f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b06a23a0"/></to>
    </wire>
    <wire loc="309:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b0883270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b016f020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b08c1270"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b0886d70"/></to>
    </wire>
    <wire loc="347:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b0886d70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b011ca40"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b08cadf0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b088f6d0"/></to>
    </wire>
    <wire loc="344:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b088f6d0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b0120e70"/></to>
    </wire>
    <wire loc="288:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b089a800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b03a3560"/></to>
    </wire>
    <wire loc="226:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f89b0891e10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f89b04c5d60"/></to>
    </wire>
    <wire loc="140:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89b08ad2d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b06a5020"/></to>
    </wire>
    <wire loc="264:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f89b0890ad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f89b042e5f0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b08bd4c0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b0886510"/></to>
    </wire>
    <wire loc="346:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b0886510"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b011c1e0"/></to>
    </wire>
    <wire loc="310:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b087f3f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b0173020"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89b04ba880"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f89b04a3d90"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b01263b0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b0100a40"/></to>
    </wire>
    <wire loc="172:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f89b08a9020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f89b05efd30"/></to>
    </wire>
    <wire loc="160:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0x7f89b08a12c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f89b0623390"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f89b0623390"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f89af1499d0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f89b06a13a0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f89af19d420"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b0173020"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89aefcb360"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89b06a3530"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89af1a06c0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f89b06a2b00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f89af19fc90"/></to>
    </wire>
    <wire loc="173:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89b08923c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89b0510dd0"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89b0510dd0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89af0dc2e0"/></to>
    </wire>
    <wire loc="174:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f89b089b890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89b061ee00"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b04a3270"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f89af060640"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b012ae80"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b0103550"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89b06a23a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89af19f530"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89b06a4720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89af1a18b0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b016f020"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89aefc82a0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b011ca40"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89afffe020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b0120e70"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b00f9560"/></to>
    </wire>
    <wire loc="170:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0x7f89b08a3a60"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f89b05f0a50"/></to>
    </wire>
    <wire loc="117:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f89b04c5d60"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f89b04c0100"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89b06a5020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89af1a2270"/></to>
    </wire>
    <wire loc="171:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0x7f89b08aa840"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f89b05ef760"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f89b042e5f0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f89af056d00"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b011c1e0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b00f68b0"/></to>
    </wire>
    <wire loc="116:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89b07e31d0"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89b0513e00"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89b0513e00"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89af0df020"/></to>
    </wire>
    <wire loc="117:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b07dc340"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b074e020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f89b07dfab0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b016f020"/></to>
    </wire>
    <wire loc="119:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0x7f89b07d6960"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89b012bd90"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f89b012bd90"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89b0104470"/></to>
    </wire>
    <wire loc="124:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89b074db60"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89b011bdd0"/></to>
    </wire>
    <wire loc="101:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89b011bdd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89b0003ac0"/></to>
    </wire>
    <wire loc="125:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f89b074ecb0"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f89b087ae50"/></to>
    </wire>
    <wire loc="131:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89b069e8c0"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f89b07fe0f0"/></to>
    </wire>
    <wire loc="132:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b069f8f0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f89b0698880"/></to>
    </wire>
    <wire loc="133:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b069e2b0"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0x7f89b05ad020"/></to>
    </wire>
    <wire loc="134:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89b06a1a30"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0x7f89b05ad630"/></to>
    </wire>
    <wire loc="149:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f89b0697c00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f89b0623390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b0697310"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0x7f89b05ae5d0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89b05ed390"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89b0513e00"/></to>
    </wire>
    <wire loc="166:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b05e92b0"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f89b05e27c0"/></to>
    </wire>
    <wire loc="167:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b05e9be0"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f89b05af120"/></to>
    </wire>
    <wire loc="168:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f89b05ea470"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89b05af730"/></to>
    </wire>
    <wire loc="182:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b05ac4a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89b04da840"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89b04da840"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89af0879b0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b05acdd0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b050ee60"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89b050ee60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89af0da440"/></to>
    </wire>
    <wire loc="184:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89b05ab410"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89b050e080"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f89b050e080"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89af0db590"/></to>
    </wire>
    <wire loc="190:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89b050d500"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89b04c4a10"/></to>
    </wire>
    <wire loc="115:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f89b04c4a10"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f89b04c28c0"/></to>
    </wire>
    <wire loc="194:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b050c440"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b04c5790"/></to>
    </wire>
    <wire loc="114:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89b04c5790"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f89b04c22b0"/></to>
    </wire>
    <wire loc="217:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89b04d7be0"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0x7f89b0816e40"/></to>
    </wire>
    <wire loc="218:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b04d9a70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89b04d0e40"/></to>
    </wire>
    <wire loc="113:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89b04d0e40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f89b04c3950"/></to>
    </wire>
    <wire loc="219:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f89b04d6720"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f89b082e390"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f89b082e390"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f89af1d93d0"/></to>
    </wire>
    <wire loc="220:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89b04d5400"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89b082d150"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b04c1720"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b03a3560"/></to>
    </wire>
    <wire loc="232:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b04c3950"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89b04a5440"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89b04a5440"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f89b04a28c0"/></to>
    </wire>
    <wire loc="233:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b04c22b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b04a5d70"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89b04a5d70"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f89b04a02b0"/></to>
    </wire>
    <wire loc="234:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89b04c28c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89b04a43d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f89b04a43d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f89b04a08c0"/></to>
    </wire>
    <wire loc="250:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f89b04a3d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89b0431a10"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89b0431a10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89af059bf0"/></to>
    </wire>
    <wire loc="251:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b04a28c0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89b042f5d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89b042f5d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89af057d70"/></to>
    </wire>
    <wire loc="252:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b04a02b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b042e020"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89b042e020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89af056730"/></to>
    </wire>
    <wire loc="253:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89b04a08c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89b016dc20"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f89b016dc20"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89aefc4020"/></to>
    </wire>
    <wire loc="260:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f89b042c8b0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f89b03d71d0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f89b03d71d0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f89af019660"/></to>
    </wire>
    <wire loc="261:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f89b042b270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89b04d9270"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f89b04d9270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89af086400"/></to>
    </wire>
    <wire loc="262:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f89b042daa0"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f89b013eb60"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f89b013eb60"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f89b0137410"/></to>
    </wire>
    <wire loc="263:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f89b042d020"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f89b087ae50"/></to>
    </wire>
    <wire loc="268:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b04d7440"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89b03d7ac0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f89b03d7ac0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89af018020"/></to>
    </wire>
    <wire loc="277:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89b03d30a0"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f89b080c6b0"/></to>
    </wire>
    <wire loc="278:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b03d6310"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f89b03ce470"/></to>
    </wire>
    <wire loc="279:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b03d6c40"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89b03ced60"/></to>
    </wire>
    <wire loc="280:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b03d4400"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b074e020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f89b03a0e60"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f89b01649b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b03a10e0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b074e020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89b03a1d30"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f89b081a9c0"/></to>
    </wire>
    <wire loc="293:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b03a2020"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f89b0383270"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f89b0383270"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f89b037db00"/></to>
    </wire>
    <wire loc="294:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b03a2950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89b0383b60"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f89b0383b60"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f89b037c450"/></to>
    </wire>
    <wire loc="299:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89b037a2b0"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f89b07fc4e0"/></to>
    </wire>
    <wire loc="300:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b037db00"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f89b013da40"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f89b013da40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f89b0136440"/></to>
    </wire>
    <wire loc="301:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b037c450"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89b013c400"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f89b013c400"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f89b0136d70"/></to>
    </wire>
    <wire loc="302:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0x7f89b037cbf0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f89b012b5c0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f89b012b5c0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f89b0105c40"/></to>
    </wire>
    <wire loc="307:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b016bc00"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b011ca40"/></to>
    </wire>
    <wire loc="308:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89b016acd0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89b0163590"/></to>
    </wire>
    <wire loc="311:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f89b0169b00"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f89b01649b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89b01434a0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f89b012bd90"/></to>
    </wire>
    <wire loc="326:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89b0134b40"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f89b07fc4e0"/></to>
    </wire>
    <wire loc="327:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89b0136440"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f89b012c460"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f89b012c460"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f89b0106aa0"/></to>
    </wire>
    <wire loc="328:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89b0136d70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89b012cdd0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f89b012cdd0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89b0105480"/></to>
    </wire>
    <wire loc="329:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0x7f89b0137410"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f89b012f600"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f89b012f600"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f89b0107c40"/></to>
    </wire>
    <wire loc="341:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89b01161f0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f89b08237c0"/></to>
    </wire>
    <wire loc="342:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f89b01152e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b016f020"/></to>
    </wire>
    <wire loc="349:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f89b0111110"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f89b01649b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f89b0111ca0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f89b01649b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f89b01108d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f89b01649b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b010f470"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b074e020"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f89b010e110"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f89b087ae50"/></to>
    </wire>
    <wire loc="46:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89b082d150"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89af1d8150"/></to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b074e020"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f89af1be300"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89af1bd260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89b074db60"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f89af1b9410"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f89b074ecb0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f89af19a8b0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f89b06be260"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89af19dab0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f89b06a1a30"/></to>
    </wire>
    <wire loc="69:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89af19c8f0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f89b069f8f0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89af19b2b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f89b069e2b0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89af19b8c0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f89b069e8c0"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f89b0622150"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f89af148850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f89b06228d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f89af147020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89af147910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89b06211f0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f89af146120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f89af14ba70"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f89af146c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f89af0daa70"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f89b06be260"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89af0d85d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f89b050d500"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89af0d7440"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f89b050c440"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f89af084e80"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f89b04d6720"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89af083ab0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89b04d5400"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89af085310"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f89b04d9a70"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89af085c40"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f89b04d7440"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0x7f89af084400"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f89b04d7be0"/></to>
    </wire>
    <wire loc="118:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f89b04c0d90"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b04c1720"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f89af054590"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f89b042d020"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f89af055670"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f89b042daa0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f89af053060"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f89b042c8b0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f89af053950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f89b042b270"/></to>
    </wire>
    <wire loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x7f89af052940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0x7f89af050160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0x7f89af052160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89af018820"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f89b03d6310"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89af015020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f89b03d30a0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89af0172b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f89b03d6c40"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f89af017a10"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b03d4400"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f89af016720"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f89b03eca20"/></to>
    </wire>
    <wire loc="56:../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f89b03eca20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f89b03e5a20"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0x7f89af015b20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f89b03ea920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f89b03e6940"/></to>
    </wire>
    <wire loc="54:../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89b03f09a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b03e6080"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89b0386ac0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f89b0380120"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f89b0382400"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f89b037cbf0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f89b0384470"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f89b037ebe0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f89b0382b60"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f89b037b440"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f89b0381a80"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f89b037a2b0"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f89b0385e80"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f89b037e5d0"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f89b0385590"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f89b0380be0"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89aefc0cd0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f89b016acd0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89aefc3a70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b016bc00"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f89aefc2c40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f89b0323080"/></to>
    </wire>
    <wire loc="26:../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f89b0323080"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f89b0318020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f89aefc4e60"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0x7f89b0169b00"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f89b0318020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f89b0190790"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f89b031fa40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b019e150"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89b0322b40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b0316790"/></to>
    </wire>
    <wire loc="35:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89b0316790"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89b021c530"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f89b0198640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b01edd60"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89b01e71d0"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7f89b03131d0"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7f89b03131d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89b021cd40"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89b018fa60"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7f89b030f850"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7f89b030f850"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89b0217180"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89b0217180"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89aef898d0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89b021c530"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89aef8ec20"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89b021cd40"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89aef8d4b0"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89aef86bc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b0298e20"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89b0298e20"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b0285060"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f89aef81e20"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b02902b0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b02902b0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b0280570"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f89aef7f0a0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f89b028f6b0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f89b028f6b0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f89b027e9d0"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f89aef7b450"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f89b028bb30"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f89b028bb30"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f89b0279460"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f89b01e3490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f89b0193a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f89b017c2e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f89b031fa40"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89b01400e0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f89b013a920"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f89b013cb60"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f89b01355a0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f89b013b400"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f89b0135d40"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f89b013a2b0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f89b0134b40"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f89b013e590"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f89b0139d70"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f89b0140b60"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f89b0139440"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89b0003ac0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89afe90c60"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89b0123940"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89b00fc020"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89afffe020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f89afe8a880"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f89b00e6b50"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f89b01161f0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f89b00e3a10"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f89b0111110"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f89b00e26a0"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0x7f89b0111ca0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f89b00e03a0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f89b01108d0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f89b00df200"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f89b01152e0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f89b00ea9d0"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89afffe020"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b00dbb70"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b010f470"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f89b00f5020"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0x7f89b000b940"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f89b000b940"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f89b0cc3cb0"/></to>
    </wire>
    <wire loc="105:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f89b00f4380"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0x7f89b0008b50"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f89b0008b50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f89aff5ebd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f89b00ed1f0"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f89b0007920"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f89b0007920"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f89aff62320"/></to>
    </wire>
    <wire loc="108:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f89b00edd50"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0x7f89b00064e0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f89b00064e0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x7f89b0cba350"/></to>
    </wire>
    <wire loc="109:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f89b00f1020"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f89b00057f0"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f89b00057f0"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x7f89b0cc5670"/></to>
    </wire>
    <wire loc="111:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f89b00e8b30"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f89b0004b10"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f89b0004b10"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f89afffc9c0"/></to>
    </wire>
    <wire loc="112:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f89b00db080"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f89b010e110"/></to>
    </wire>
    <wire loc="113:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f89b00e4430"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f89afe71990"/></to>
    </wire>
    <wire loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0x7f89b004be40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f89afe90c60"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f89aeec24c0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f89aff62320"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f89aff54660"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f89afe8a880"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f89afe7b020"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0x7f89afff4a20"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x7f89b0ca7350"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0x7f89afff3cc0"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x7f89b0caae40"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f89afff8020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f89b0a8e970"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f89aff57e60"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f89aff522d0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f89aff60c20"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f89aff54020"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89aff65630"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89aff55900"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f89aff5ebd0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f89afe9a210"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f89afe9a210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f89aeeec9d0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89afe970d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89aff51050"/></to>
    </wire>
    <wire loc="100:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x7f89aff36a40"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x7f89afef6c70"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x7f89afef6c70"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x7f89afef0b40"/></to>
    </wire>
    <wire loc="101:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f89aff357b0"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f89b0f81bc0"/></to>
    </wire>
    <wire loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x7f89aff13190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x7f89afee5e50"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f89b0f81bc0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x7f89afee9390"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f89b0cc3cb0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7f89afee8650"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x7f89b0cc1020"/></to>
    </wire>
    <wire loc="88:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x7f89afee7800"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x7f89b0cc0350"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x7f89afee6b10"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x7f89b0cbf670"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f89afe99020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f89aeeeb850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f89afe997a0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f89aeeea020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89aeeea910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89afe970d0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f89aeee9120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f89aeeefa30"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f89aeee9c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f89aeebf7f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89b0aa37b0"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f89aeebac10"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f89b0a8a4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89afe7a300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89afe83180"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f89afe80540"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89b0990290"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89afe0d140"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f89b017c2e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:PrioCritQueueC.nc">
      <from><interface-ref name="prio1Queue" scoped="" ref="0x7f89aee828c0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f89aee70310"/></to>
    </wire>
    <wire loc="19:PrioCritQueueC.nc">
      <from><interface-ref name="prio2Queue" scoped="" ref="0x7f89aee7c370"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f89aee69720"/></to>
    </wire>
    <wire loc="20:PrioCritQueueC.nc">
      <from><interface-ref name="prio3Queue" scoped="" ref="0x7f89aee78e60"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f89aee63a00"/></to>
    </wire>
    <wire loc="61:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncMode" scoped="" ref="0x7f89afd3aaf0"/></from>
      <to><interface-ref name="TimeSyncMode" scoped="" ref="0x7f89afc8a080"/></to>
    </wire>
    <wire loc="62:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f89afd388d0"/></from>
      <to><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f89afc8a970"/></to>
    </wire>
    <wire loc="57:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f89afd43d80"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f89afc8f7b0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f89afc89150"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f89afd430c0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x7f89afc89760"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89afc73e00"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89afc73e00"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89afc51020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89afc884f0"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afc5b920"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89afc84300"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89afc70e50"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncPacket" scoped="" ref="0x7f89afc7ce10"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afc57b00"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afc57b00"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afc36020"/></to>
    </wire>
    <wire loc="71:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f89afc7a790"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f89b0323080"/></to>
    </wire>
    <wire loc="74:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89afc849f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89afa8f5a0"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89afa8f5a0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f89b017c2e0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f89afc7fd10"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f89b03eca20"/></to>
    </wire>
    <wire loc="84:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89afc7d4c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89afa869c0"/></to>
    </wire>
    <wire loc="349:../../tos/lib/ftsp/TimeSyncP.nc">
      <from><interface-ref name="sendMsg" scoped="" ref="0x7f89afc78860"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/lib/ftsp/TimeSyncP.nc">
      <from><interface-ref name="processMsg" scoped="" ref="0x7f89afc770a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89afc51020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89b08db2e0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afc36020"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afab7600"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89afc6e0c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89afc4e2b0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89afc4e2b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89afac38b0"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afc5b920"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afc3bd60"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afc3bd60"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afabb510"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f89afc6fa70"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f89afc50c30"/></to>
    </wire>
    <wire loc="67:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f89afc50c30"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f89afac6bf0"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f89afc6ce80"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f89afc4b320"/></to>
    </wire>
    <wire loc="70:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f89afc4b320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b08d3320"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89afc663f0"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89afc46920"/></to>
    </wire>
    <wire loc="73:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89afc46920"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89afac2940"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89afc70e50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89afc50050"/></to>
    </wire>
    <wire loc="66:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89afc50050"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89afac6490"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89afc62590"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89afc42b00"/></to>
    </wire>
    <wire loc="74:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89afc42b00"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89afabe9b0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89afc6bdb0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89afc4a270"/></to>
    </wire>
    <wire loc="72:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89afc4a270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b08c08a0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afc6c4e0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afc4c800"/></to>
    </wire>
    <wire loc="69:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afc4c800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b08d4800"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89afc6ed30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89afc4d020"/></to>
    </wire>
    <wire loc="65:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89afc4d020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89afac4270"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89afc5f220"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89afc3f780"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89afc3f780"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b08b8970"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afab7600"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89aed92720"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89afac38b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89aed9f8b0"/></to>
    </wire>
    <wire loc="79:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afabb510"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89aed99ae0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f89afac6bf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f89aeda1bf0"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89afac2940"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89aed9d940"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89afac6490"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89aeda1490"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89afabe9b0"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89aed95ba0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89afac4270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89aeda0270"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89afab50a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b08c08a0"/></to>
    </wire>
    <wire loc="81:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89afab1060"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b08b8970"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89afaaed80"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b011ca40"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89afaac020"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89b0123940"/></to>
    </wire>
    <wire loc="84:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubAMSend" scoped="" ref="0x7f89aed90020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89aed7a060"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89aed7a060"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89aed24230"/></to>
    </wire>
    <wire loc="85:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubAMPacket" scoped="" ref="0x7f89aed8f8c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89aed788b0"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89aed788b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89aed23a70"/></to>
    </wire>
    <wire loc="86:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f89aed8c020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89aed7ac70"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89aed7ac70"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89aed24e40"/></to>
    </wire>
    <wire loc="89:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89aed90c70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89b0905210"/>
      <arguments>
        <value cst="I:61">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubSnoop" scoped="" ref="0x7f89aed8f2b0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f89b0905df0"/>
      <arguments>
        <value cst="I:61">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89aed8b020"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89afab50a0"/></to>
    </wire>
    <wire loc="93:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89aed88020"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89afab1060"/></to>
    </wire>
    <wire loc="95:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f89aed83020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f89b0323080"/></to>
    </wire>
    <wire loc="96:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89aed85d80"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89afaaed80"/></to>
    </wire>
    <wire loc="97:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89aed811e0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89afaac020"/></to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89aed24230"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89aed18b20"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89aed24e40"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89b0903b00"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89aed23a70"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b0902790"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f89aed76020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f89aed21120"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f89aed21120"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b0900e40"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89aed17910"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89afb38930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89aed15590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b0902790"/></to>
    </wire>
    <wire loc="53:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89afb38930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89afaeb4b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89afaea400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89b0906050"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89afae9060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b0902790"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89afae8720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89b0903b00"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f89afae7480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f89afae7c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f89af645330"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f89af64f510"/></to>
    </wire>
    <wire loc="67:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89af640d40"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89af655540"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89af655540"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89aecc6710"/></to>
    </wire>
    <wire loc="68:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89af63f9b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89af654270"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89af654270"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89afa19b40"/></to>
    </wire>
    <wire loc="71:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f89af6202a0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f89af643a70"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89afa19b40"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89af9bc720"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89af654e80"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89afa18910"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89afa18910"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89af9bd020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f89af6525d0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afa16020"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afa16020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89af9bb400"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89aecc5460"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89afa2bce0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89aecc40e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89afa18910"/></to>
    </wire>
    <wire loc="54:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89afa2bce0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89afa25720"/></to>
    </wire>
    <wire loc="55:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89afa24590"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89afa1b370"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f89afa1b370"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f89afa12b40"/></to>
    </wire>
    <wire loc="56:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89afa23270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89afa18910"/></to>
    </wire>
    <wire loc="57:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89afa228b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89afa19b40"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f89afa21610"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f89afa21df0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89afa1c320"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89af9b54e0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f89af9b54e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89af98cc80"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89afa19530"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89af9be9e0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f89af9b8e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f89af98c630"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89af9b1940"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89afa169a0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f89af9bbd90"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89af9b2020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f89af9baa50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89af9b34c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f89af9b1020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f89af66a1e0"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f89af9b2020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89af85dde0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f89af9b34c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f89af85d6c0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f89af85cc20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f89af9b1020"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89af984430"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89af9b1940"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89af85a920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89af9b1940"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f89af850cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f89af9b1940"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f89af85b590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f89af985080"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f89af85be80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f89af986b10"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f89af97b410"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f89af855e00"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f89af981b80"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f89af82b150"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f89af82b150"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f89af8284b0"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f89af848d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f89af82b960"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f89af82b960"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f89af821850"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f89af9266e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f89af95d660"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f89af92ac70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f89af923a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f89af857020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f89af857800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f89af829020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f89af828cb0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f89af828cb0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f89af7d45a0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f89af821850"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f89af7d30c0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f89af8284b0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f89af81ad80"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89af820c20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89af743dc0"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89af743dc0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89af67bcd0"/></to>
    </wire>
    <wire loc="53:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89af7d0810"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89af820c20"/></to>
    </wire>
    <wire loc="56:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x7f89af7d20a0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f89af7b10f0"/></to>
    </wire>
    <wire loc="60:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x7f89af7b10f0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f89af7a83f0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x7f89af7d2880"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f89af7b1990"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x7f89af7b1990"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f89af7a8cd0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x7f89af7d10a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f89af7b03a0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x7f89af7b03a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f89af7a75f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x7f89af7aec40"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x7f89af7a45f0"/></to>
    </wire>
    <wire loc="64:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x7f89af7af9f0"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x7f89af7a53f0"/></to>
    </wire>
    <wire loc="65:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x7f89af7ae3b0"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x7f89af7a5cd0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f89af7a3b20"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f89b0ce71d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f89af7a2980"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f89b0f81bc0"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f89af6770f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89af73dde0"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f89af73dde0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f89af6863c0"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89af684660"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89af737cc0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89af737cc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89af721020"/></to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f89af72f020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f89af71c2c0"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f89af72e850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f89af71b9e0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f89af729ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f89af7165a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f89af729ad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f89af712ba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f89af729ad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f89af70d120"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89af68e410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89af737cc0"/></to>
    </wire>
    <wire loc="114:../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7f89af639d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f89af619680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f89af6202a0"/></to>
    </wire>
    <wire loc="44:../../tos/lib/printf/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f89af612d50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f89b0cf2020"/></to>
    </wire>
    <wire loc="47:../../tos/lib/printf/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f89af60f4a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f89afa1c320"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89af609370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f89b017c2e0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="17:TXFlowC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f89aebb6720"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f89b0cf2020"/></to>
    </wire>
    <wire loc="18:TXFlowC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f89aebb6cf0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f89b0903b00"/></to>
    </wire>
    <wire loc="19:TXFlowC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f89aebb4930"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f89b0902790"/></to>
    </wire>
    <wire loc="20:TXFlowC.nc">
      <from><interface-ref name="SendTimer" scoped="" ref="0x7f89aebbc830"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f89aebc4cb0"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f89aebc4cb0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f89b017c2e0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:TXFlowC.nc">
      <from><interface-ref name="AppSend" scoped="" ref="0x7f89aebb7a90"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f89af5bae80"/></to>
    </wire>
    <wire loc="20:TXFlowP.nc">
      <from><interface-ref name="send" scoped="" ref="0x7f89aebb2020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TdmaMacC" loc="8:TdmaMacC.nc">
      <configuration/>
    </component>
    <component qname="TdmaMacP" loc="33:TdmaMacP.nc">
      <module/>
    </component>
    <component qname="GenericSlotterC" loc="30:../../tos/system/GenericSlotterC.nc">
      <documentation loc="23:../../tos/system/GenericSlotterC.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="80:../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:../../tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="GenericSlotterP" loc="30:../../tos/system/GenericSlotterP.nc">
      <documentation loc="23:../../tos/system/GenericSlotterP.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C" loc="26(GenericSlotterC.Alarm32khz32C):../../tos/platforms/mica/Alarm32khz32C.nc">
      <documentation loc="11:../../tos/platforms/mica/Alarm32khz32C.nc">
        <short>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register). Note that creating one of these Alarms consumes a 16-bit&#10; 32kHz Alarm (see Alarm32khz16C).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Alarm16" loc="28(GenericSlotterC.Alarm32khz32C.Alarm16):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm" loc="51(GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="22:../../tos/platforms/mica/Counter32khz32C.nc">
      <documentation loc="11:../../tos/platforms/mica/Counter32khz32C.nc">
        <short>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform32" loc="54(Counter32khz32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f89b0fec180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="counter_one_overflow_t" ref="0x7f89b0fa71f0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Transform32" loc="51(GenericSlotterC.Alarm32khz32C.Transform32):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f89b0fec180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="37:../../tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC" loc="35(RF230RadioC.NeighborhoodC):../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC.NeighborhoodP" loc="37(RF230RadioC.NeighborhoodC.NeighborhoodP):../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="37(RF230RadioC.UniqueLayerC.UniqueLayerP):../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../tos/system/RandomC.nc">
      <documentation loc="33:../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f89b030b8e0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="TdmaMacC.TimerMilliC" loc="44(TdmaMacC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.FaultClearTimer" loc="44(TdmaMacC.FaultClearTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC" loc="7(TdmaMacC.PrioCritQueueC):PrioCritQueueC.nc">
      <documentation loc="1:PrioCritQueueC.nc">
        <short>&#10;A priority queue supporting 3 levels of priority for MCC packets&#10;</short>
      </documentation>
      <instance number="0">
        <component-ref qname="PrioCritQueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:20">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.QP" loc="3(TdmaMacC.PrioCritQueueC.QP):PrioCritQueueP.nc">
      <instance number="0">
        <component-ref qname="PrioCritQueueP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f89afe004e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q1" loc="42(TdmaMacC.PrioCritQueueC.Q1):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f89afe004e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q2" loc="42(TdmaMacC.PrioCritQueueC.Q2):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f89afe004e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q3" loc="42(TdmaMacC.PrioCritQueueC.Q3):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f89afe004e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncC" loc="39:../../tos/lib/ftsp/TimeSyncC.nc">
      <configuration/>
    </component>
    <component qname="TimeSyncC.TimeSyncP" loc="37(TimeSyncC.TimeSyncP):../../tos/lib/ftsp/TimeSyncP.nc">
      <instance number="0">
        <component-ref qname="TimeSyncP"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncMessageC" loc="37:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC" loc="37:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC" loc="40(RF230TimeSyncMessageC.TimeSyncMessageLayerC):../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeSyncMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP" loc="37(RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP):../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeSyncMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC" loc="47(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:61">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC" loc="47(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP" loc="43(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncC.TimerC" loc="44(TimeSyncC.TimerC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="NoLedsC" loc="45:../../tos/system/NoLedsC.nc">
      <documentation loc="35:../../tos/system/NoLedsC.nc">
        <short>&#10; A null operation replacement for the LedsC component.</short>
        <long>&#10; A null operation replacement for the LedsC component. As many&#10; components might concurrently signal information through LEDs,&#10; using LedsC and NoLedsC allows an application builder to select&#10; which components control the LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 19, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MCCP" loc="4:MCCP.nc">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:../../tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:../../tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:../../tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):../../tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:../../tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:../../tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:../../tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:../../tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:../../tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f89b0fa8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f89b0fa8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x7f89b0fa7670"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../tos/lib/printf/PutcharP.nc">
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../tos/lib/printf/SerialStartP.nc">
      <documentation loc="33:../../tos/lib/printf/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MCCC.TimerMilliC" loc="44(MCCC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1" loc="1(MCCC.TXFlow1):TXFlowC.nc">
      <instance number="0">
        <component-ref qname="TXFlowC"/>
        <arguments>
          <value cst="I:11">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:40">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:40">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1.TimerMilliC" loc="44(MCCC.TXFlow1.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1.TXF" loc="4(MCCC.TXFlow1.TXF):TXFlowP.nc">
      <instance number="0">
        <component-ref qname="TXFlowP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f89b0c87590" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f89b0c87900" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f89b0c87c70" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f89b0c799e0" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f89b0c79d70" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f89b0c76170" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f89b0c764c0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f89b0be20d0" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f89b0be2460" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f89b0be27f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f89b0be2b40" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Alarm32khz32C" loc="26:../../tos/platforms/mica/Alarm32khz32C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/Alarm32khz32C.nc">
        <short>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register). Note that creating one of these Alarms consumes a 16-bit&#10; 32kHz Alarm (see Alarm32khz16C).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f89b09ece30" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f89b09ece30"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7f89b09e8200" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f89b09ed840" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f89b09ed840"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f89b09d4020" loc="52:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f89b09d4020"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x7f89b09d4340" loc="53:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f89b098c900" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f89b098c900"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f89b0989120" loc="43:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f89b0989120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f89b096f830" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f89b096f830"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f89b096c020" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f89b096c020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f89b096c410" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f89b096c410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f89b096cbf0" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f89b096cbf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f89b096b020" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f89b096b820" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f89b096b820"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f89b099ab30" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f89b099ab30"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f89b094a370" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f89b094a370"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f89b094a760" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f89b094a760"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f89b0948020" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f89b0948020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f89b09483f0" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f89b086a7d0" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
          <component-ref qname="NeighborhoodC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f89b0866e40" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
          <component-ref qname="NeighborhoodP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f89b0682590" loc="83:../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f89b0673060" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f89b0509820" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
          <component-ref qname="UniqueLayerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f89b04fc020" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
          <component-ref qname="UniqueLayerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f89b030b8e0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f89b030b8e0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f89b030bbf0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f89b02fe400" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f89b02fe400"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f89b02fe710" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b0314900" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b0314900"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b01e1870" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b01e1870"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f89b01e1ba0" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b0191dd0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b0191dd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PrioCritQueueC" loc="7:PrioCritQueueC.nc" abstract="">
      <documentation loc="1:PrioCritQueueC.nc">
        <short>&#10;A priority queue supporting 3 levels of priority for MCC packets&#10;</short>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f89afe004e0" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f89afe004e0"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f89afe00860" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit1" ref="0x7f89afe00bc0" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit2" ref="0x7f89afdfd020" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit3" ref="0x7f89afdfd380" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PrioCritQueueP" loc="3:PrioCritQueueP.nc" abstract="">
      <parameters>
        <typedef name="queue_t" ref="0x7f89afdf4b20" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f89afdf4b20"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f89afdf0020" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit1" ref="0x7f89afdf0380" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit2" ref="0x7f89afdf06e0" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit3" ref="0x7f89afdf0a40" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f89afd87320" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f89afd87320"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f89afd876a0" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimeSyncP" loc="37:../../tos/lib/ftsp/TimeSyncP.nc" abstract="">
      <parameters>
        <typedef name="precision_tag" ref="0x7f89afd3cb20" loc="37:../../tos/lib/ftsp/TimeSyncP.nc">
          <component-ref qname="TimeSyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89afd3cb20"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimeSyncMessageLayerC" loc="40:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeSyncMessageLayerP" loc="37:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f89afb5d910" loc="47:../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f89afb556a0" loc="47:../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f89afb4c2e0" loc="43:../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f89afb33c80" loc="45:../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f89afa34020" loc="47:../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:../../tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TXFlowC" loc="1:TXFlowC.nc" abstract="">
      <parameters>
        <constant name="flow_num" ref="0x7f89af603cc0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="dest_id" ref="0x7f89af600060" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="crit_level" ref="0x7f89af6003e0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="periodSlots" ref="0x7f89af600760" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="deadlineSlots" ref="0x7f89af600b00" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="c" ref="0x7f89af600e20" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="priority" ref="0x7f89af5ff1b0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="TXFlowP" loc="4:TXFlowP.nc" abstract="">
      <parameters>
        <constant name="flow_num" ref="0x7f89af5f7dc0" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="dest_id" ref="0x7f89af5f4160" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="crit_level" ref="0x7f89af5f44e0" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="periodSlots" ref="0x7f89af5f4860" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="deadlineSlots" ref="0x7f89af5f4c00" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="c" ref="0x7f89af5f3020" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
        <constant name="priority" ref="0x7f89af5f3390" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="1" name="MacReceive" ref="0x7f89b0edc680" loc="16:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f89b0edc680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0edca00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacPowerControl" ref="0x7f89b0f55020" loc="17:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacPowerControl" scoped="" ref="0x7f89b0f55020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b0f553a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b0f55530"/>
        <function-ref name="start" scoped="" ref="0x7f89b0f556c0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0f55850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0f5b020" loc="10:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0f5b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0f5b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacSend" ref="0x7f89b0ee0c80" loc="15:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f89b0ee0c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b0f580a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b0f58230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0f583c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0f58550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0f586e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f89b0f59020" loc="11:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0f59020"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f89b0f593a0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f89b0f59530"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f89b0f596c0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f89b0f59850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacReceive" ref="0x7f89b0e6b690" loc="42:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f89b0e6b690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0e6ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Frame" ref="0x7f89b0e6dc40" loc="37:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Frame" scoped="" ref="0x7f89b0e6dc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f89b0e6c020"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f89b0e6c1b0"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f89b0e6c340"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f89b0e6c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Slotter" ref="0x7f89b0e3ab40" loc="59:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f89b0e3ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f89b0e49020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacPowerControl" ref="0x7f89b0e6bdc0" loc="43:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacPowerControl" scoped="" ref="0x7f89b0e6bdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b0e6a180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b0e6a310"/>
        <function-ref name="start" scoped="" ref="0x7f89b0e6a4a0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0e6a630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f89b0e67720" loc="47:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89b0e67720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89b0e67aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f89b0e5a020" loc="56:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89b0e5a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0e5a3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b0e5a530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b0e5a6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0e5a850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b0e5a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GenericSlotterPowerControl" ref="0x7f89b0e3b5b0" loc="58:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GenericSlotterPowerControl" scoped="" ref="0x7f89b0e3b5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89b0e3b930"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0e3bac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="forwardQueue" ref="0x7f89b0e259a0" loc="62:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="forwardQueue" scoped="" ref="0x7f89b0e259a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f89b0e32020"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f89b0e22d90"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89b0e214d0"/>
        <function-ref name="clear" scoped="" ref="0x7f89b0e1f260"/>
        <function-ref name="headPrio" scoped="" ref="0x7f89b0e23ac0"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f89b0e324a0"/>
        <function-ref name="full" scoped="" ref="0x7f89b0e33a40"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89b0e32970"/>
        <function-ref name="clearLO" scoped="" ref="0x7f89b0e21ca0"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f89b0e1f6e0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89b0e22260"/>
        <function-ref name="empty" scoped="" ref="0x7f89b0e335c0"/>
        <function-ref name="headHI" scoped="" ref="0x7f89b0e235b0"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f89b0e22910"/>
        <function-ref name="head" scoped="" ref="0x7f89b0e32df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f89b0e3e1d0" loc="57:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f89b0e3e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f89b0e3e550"/>
        <function-ref name="rand32" scoped="" ref="0x7f89b0e3e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ACK" ref="0x7f89b0e19890" loc="63:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ACK" scoped="" ref="0x7f89b0e19890"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89b0e19c10"/>
        <function-ref name="noAck" scoped="" ref="0x7f89b0e19da0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89b0e1e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPowerControl" ref="0x7f89b0e1e460" loc="67:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPowerControl" scoped="" ref="0x7f89b0e1e460"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b0e1e7e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b0e1e970"/>
        <function-ref name="start" scoped="" ref="0x7f89b0e1eb00"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0e1ec90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyNotificationReceive" ref="0x7f89b0e16890" loc="69:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyNotificationReceive" scoped="" ref="0x7f89b0e16890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0e16c10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyDataSend" ref="0x7f89b0e15020" loc="70:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyDataSend" scoped="" ref="0x7f89b0e15020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b0e153a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b0e15530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0e156c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0e15850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0e159e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0e6d530" loc="36:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0e6d530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0e6d8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacSend" ref="0x7f89b0e6c860" loc="41:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f89b0e6c860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b0e6cbe0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b0e6cd70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0e6b020"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0e6b1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0e6b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GlobalTime" ref="0x7f89b0e06cc0" loc="75:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f89b0e06cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f89b0e0b980"/>
        <function-ref name="global2Local" scoped="" ref="0x7f89b0e05910"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f89b0e0be40"/>
        <function-ref name="local2Global" scoped="" ref="0x7f89b0e053c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncInfo" ref="0x7f89b0df0dc0" loc="77:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f89b0df0dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f89b0df4180"/>
        <function-ref name="getRootID" scoped="" ref="0x7f89b0df4310"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f89b0df44a0"/>
        <function-ref name="getOffset" scoped="" ref="0x7f89b0df4630"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f89b0df47c0"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f89b0df4950"/>
        <function-ref name="getSkew" scoped="" ref="0x7f89b0df4ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89b0e5c9a0" loc="51:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89b0e5c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89b0e5cd20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89b0e68020"/>
        <function-ref name="led1On" scoped="" ref="0x7f89b0e681b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89b0e68340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89b0e684d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0e68660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89b0e687f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89b0e68e30"/>
        <function-ref name="set" scoped="" ref="0x7f89b0e68980"/>
        <function-ref name="led0On" scoped="" ref="0x7f89b0e68b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f89b0e68ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FrameConfiguration" ref="0x7f89b0e40330" loc="61:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0e40330"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f89b0e406b0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f89b0e40840"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f89b0e409d0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f89b0e40b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FaultClearTimer" ref="0x7f89b0df9a40" loc="76:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FaultClearTimer" scoped="" ref="0x7f89b0df9a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0df7020"/>
        <function-ref name="fired" scoped="" ref="0x7f89b0e02510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89b0df8300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89b0e02e10"/>
        <function-ref name="getdt" scoped="" ref="0x7f89b0df7920"/>
        <function-ref name="gett0" scoped="" ref="0x7f89b0df74a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b0e02990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89b0e03670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89b0df8910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89b0e03b40"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0e02090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f89b0e4a4e0" loc="55:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89b0e4a4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89b0e4a860"/>
        <function-ref name="source" scoped="" ref="0x7f89b0e4a9f0"/>
        <function-ref name="address" scoped="" ref="0x7f89b0e4ab80"/>
        <function-ref name="destination" scoped="" ref="0x7f89b0e4ad10"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b0e5b020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b0e5b1b0"/>
        <function-ref name="type" scoped="" ref="0x7f89b0e5b340"/>
        <function-ref name="setType" scoped="" ref="0x7f89b0e5b4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b0e5b660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89b0e5b7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89b0e5b980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SlotterControl" ref="0x7f89b0e34130" loc="60:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f89b0e34130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0e40020"/>
        <function-ref name="getSlot" scoped="" ref="0x7f89b0e34740"/>
        <function-ref name="synchronize" scoped="" ref="0x7f89b0e348d0"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f89b0e34a60"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b0e34bf0"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f89b0e34d80"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0e345b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyNotificationSend" ref="0x7f89b0e0ca10" loc="68:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyNotificationSend" scoped="" ref="0x7f89b0e0ca10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b0e0cd90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b0e16020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0e161b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0e16340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0e164d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyDataReceive" ref="0x7f89b0e15d50" loc="71:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyDataReceive" scoped="" ref="0x7f89b0e15d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0e0d100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Slotter" ref="0x7f89b0cfcaf0" loc="32:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f89b0cfcaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f89b0cfce70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f89b0cf4610" loc="35:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f89b0cf4610"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89b0cf4990"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0cf4b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f89b0cf81a0" loc="34:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0cf81a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f89b0cf8520"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f89b0cf86b0"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f89b0cf8840"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f89b0cf89d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlotterControl" ref="0x7f89b0cf9180" loc="33:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f89b0cf9180"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0cf9e60"/>
        <function-ref name="getSlot" scoped="" ref="0x7f89b0cf9690"/>
        <function-ref name="synchronize" scoped="" ref="0x7f89b0cf9820"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f89b0cf99b0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b0cf9b40"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f89b0cf9cd0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0cf9500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f89b0cf2720" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0cf2720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0cf2aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f89b0cf2020" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89b0cf2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89b0cf23a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f89b0ced020" loc="52:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f89b0ced020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0ced3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0cee020" loc="46:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0cee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0cee3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f89b0ce71d0" loc="50:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f89b0ce71d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f89b0ce7550"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f89b0ce76e0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f89b0ce7870"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f89b0ce7a00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f89b0ce7b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f89b0ce5a60" loc="45:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7f89b0ce5a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0ce5de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0ce5380" loc="44:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0ce5380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0ce5700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7f89b0ce4180" loc="46:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7f89b0ce4180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0ce4500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f89b0cdd1e0" loc="41:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f89b0cdd1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0cdd560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f89b0cecae0" loc="40:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0cecae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0cece60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f89b0cd9e60" loc="45:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f89b0cd9e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0cd8210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7f89b0cd3b20" loc="44:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7f89b0cd3b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cd9020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cd91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cd9340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cd94d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cd9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cd97f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cd9980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cd9b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f89b0cda5f0" loc="43:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0cda5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0cda970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7f89b0c92cb0" loc="98:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7f89b0c92cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c91610"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c917a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c91930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c91ac0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c91c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c91de0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c90020"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c901b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7f89b0cae4e0" loc="72:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7f89b0cae4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cae860"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cae9f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0caeb80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0caed10"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cad020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cad1b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cad340"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cad4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7f89b0ca1350" loc="83:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7f89b0ca1350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca16d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca1860"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca19f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ca1b80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ca1d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ca0020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ca01b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ca0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7f89b0c98cb0" loc="92:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7f89b0c98cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c970a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c97230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c973c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c97550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c976e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c97870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c97a00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c97b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x7f89b0c8a060" loc="103:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x7f89b0c8a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c8a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c8a570"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c8a700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c8a890"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c8aa20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c8abb0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c8ad40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c89020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7f89b0cc5670" loc="50:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7f89b0cc5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cc59f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cc5b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cc5d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cc4020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cc41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cc4340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cc44d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cc4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7f89b0c9a670" loc="90:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7f89b0c9a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c9a9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c9ab80"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c9ad10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c99020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c991b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c99340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c994d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c99660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7f89b0cc3cb0" loc="53:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7f89b0cc3cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cc20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cc2230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cc23c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cc2550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cc26e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cc2870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cc2a00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cc2b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7f89b0cb7cb0" loc="64:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7f89b0cb7cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cb60a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cb6230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cb63c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cb6550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cb66e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb6870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb6a00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb6b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7f89b0caae40" loc="75:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7f89b0caae40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca91e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca9370"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca9500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ca9690"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ca9820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ca99b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ca9b40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ca9cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7f89b0c9ecb0" loc="86:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7f89b0c9ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c9d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c9d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c9d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c9d550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c9d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c9d870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c9da00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c9db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7f89b0ccc800" loc="45:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7f89b0ccc800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cccb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cccd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ccb020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ccb1b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ccb340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ccb4d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ccb660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ccb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7f89b0cbf670" loc="56:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7f89b0cbf670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cbf9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cbfb80"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cbfd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cbe020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cbe1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cbe340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cbe4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cbe660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7f89b0cb3670" loc="67:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7f89b0cb3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cb39f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cb3b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cb3d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cb2020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cb21b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb2340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb24d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7f89b0ca6670" loc="78:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7f89b0ca6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca69f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca6b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca6d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ca5020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ca51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ca5340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ca54d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ca5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7f89b0c94670" loc="95:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7f89b0c94670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c949f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c94b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c94d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c93020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c931b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c93340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c934d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c93660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7f89b0c8db20" loc="101:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7f89b0c8db20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c8c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c8c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c8c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c8c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c8c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c8c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c8c980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c8cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7f89b0ca4cb0" loc="81:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7f89b0ca4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca3230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca33c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ca3550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ca36e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ca3870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ca3a00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ca3b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7f89b0cc7060" loc="48:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7f89b0cc7060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cc73e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cc7570"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cc7700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cc7890"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cc7a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cc7bb0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cc7d40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cc6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7f89b0cbb020" loc="59:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7f89b0cbb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cbb3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cbb530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cbb6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cbb850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cbb9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cbbb70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cbbd00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cba020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7f89b0c904e0" loc="99:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7f89b0c904e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c90860"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c909f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c90b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c90d10"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c8f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c8f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c8f340"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c8f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7f89b0cb9670" loc="62:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7f89b0cb9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cb99f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cb9b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cb9d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cb8020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cb81b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb8340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb84d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7f89b0cad800" loc="73:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7f89b0cad800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cadb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cadd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cac020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cac1b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cac340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cac4d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cac660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cac7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7f89b0ca0670" loc="84:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7f89b0ca0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca09f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca0b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca0d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c9f020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c9f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c9f340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c9f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c9f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7f89b0c96020" loc="93:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7f89b0c96020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c963a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c96530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c966c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c96850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c969e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c96b70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c96d00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c95020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7f89b0cc4990" loc="51:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7f89b0cc4990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cc4d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cc3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cc31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cc3340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cc34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cc3660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cc37f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cc3980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7f89b0cc1020" loc="54:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7f89b0cc1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cc13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cc1530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cc16c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cc1850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cc19e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cc1b70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cc1d00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cc0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7f89b0cb5020" loc="65:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7f89b0cb5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cb53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cb5530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cb56c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cb5850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cb59e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb5b70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb5d00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7f89b0ca8060" loc="76:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7f89b0ca8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca83e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca8570"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca8700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ca8890"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ca8a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ca8bb0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ca8d40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ca7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7f89b0c9c020" loc="87:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7f89b0c9c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c9c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c9c530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c9c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c9c850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c9c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c9cb70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c9cd00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c9b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7f89b0ccbb20" loc="46:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7f89b0ccbb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cca020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cca1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cca340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cca4d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cca660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cca7f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cca980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ccab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7f89b0cbe990" loc="57:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7f89b0cbe990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cbee10"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cbd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cbd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cbd340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cbd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cbd660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cbd7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cbd980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7f89b0cb2990" loc="68:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7f89b0cb2990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cb2d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cb1020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cb11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cb1340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cb14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb1660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb17f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb1980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7f89b0c93990" loc="96:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7f89b0c93990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c93d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c92020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c921b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c92340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c924d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c92660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c927f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c92980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7f89b0caf020" loc="71:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7f89b0caf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0caf5a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0caf730"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0caf8c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cafa50"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cafbe0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cafd70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cae020"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7f89b0ca2020" loc="82:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7f89b0ca2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca23a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca2530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca26c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ca2850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ca29e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ca2b70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ca2d00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ca1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7f89b0c99990" loc="91:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7f89b0c99990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c99d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c98020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c981b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c98340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c984d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c98660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c987f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c98980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7f89b0c8ce40" loc="102:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7f89b0c8ce40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c8b1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c8b370"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c8b500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c8b690"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c8b820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c8b9b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c8bb40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c8bcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7f89b0cc6350" loc="49:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7f89b0cc6350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cc66d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cc6860"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cc69f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cc6b80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cc6d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cc5020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cc51b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cc5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7f89b0cba350" loc="60:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7f89b0cba350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cba6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cba860"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cba9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cbab80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cbad10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb9020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb91b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7f89b0c9b350" loc="89:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7f89b0c9b350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c9b6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c9b860"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c9b9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c9bb80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c9bd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c9a020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c9a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c9a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7f89b0cb8990" loc="63:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7f89b0cb8990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cb8d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cb7020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cb71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cb7340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cb74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb7660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb77f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7f89b0cacb20" loc="74:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7f89b0cacb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0caa020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0caa1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0caa340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0caa4d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0caa660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0caa7f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0caa980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0caab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7f89b0c9f990" loc="85:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7f89b0c9f990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c9fd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c9e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c9e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c9e340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c9e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c9e660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c9e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c9e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7f89b0c95350" loc="94:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7f89b0c95350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c956d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c95860"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c959f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c95b80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c95d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c94020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c941b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c94340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7f89b0cdb530" loc="44:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7f89b0cdb530"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cdb8b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cdba40"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cdbbd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cdbd60"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ccc020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ccc1b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ccc340"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ccc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7f89b0cc0350" loc="55:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7f89b0cc0350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cc06d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cc0860"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cc09f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cc0b80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cc0d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cbf020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cbf1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cbf340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7f89b0cb4350" loc="66:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7f89b0cb4350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cb46d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cb4860"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cb49f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cb4b80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cb4d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb3020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb31b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7f89b0ca7350" loc="77:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7f89b0ca7350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca76d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca7860"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca79f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ca7b80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ca7d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ca6020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ca61b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ca6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7f89b0c8f800" loc="100:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7f89b0c8f800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c8fb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c8fd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c8d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c8d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c8d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c8d4d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c8d660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c8d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7f89b0ca5990" loc="80:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7f89b0ca5990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ca5d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ca4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ca41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ca4340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ca44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ca4660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ca47f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ca4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7f89b0cb1cb0" loc="69:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7f89b0cb1cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cb00a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cb0230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cb03c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cb0550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cb06e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cb0870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cb0a00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cb0b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7f89b0ccae40" loc="47:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7f89b0ccae40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cc91e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cc9370"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cc9500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cc9690"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cc9820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cc99b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cc9b40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cc9cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7f89b0cbdcb0" loc="58:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7f89b0cbdcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0cbc0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0cbc230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0cbc3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0cbc550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0cbc6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0cbc870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0cbca00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0cbcb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f89b0c3ea80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f89b0c3ea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c3ee00"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c3d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c3d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c3d340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c3d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c3d660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c3d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c3d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f89b0c3a020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f89b0c3a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c3a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c3a530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c3a6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c3a850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c3a9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c3ab70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c3ad00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c39020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f89b0c416b0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f89b0c416b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c41a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c41bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c41d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c40020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c401b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c40340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c404d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c40660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f89b0c3dc10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f89b0c3dc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c3c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c3c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c3c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c3c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c3c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c3c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c3c980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c3cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f89b0c392b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f89b0c392b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c39630"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c397c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c39950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c39ae0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c39c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c39e00"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c38020"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c381b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f89b0c408f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f89b0c408f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c40c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c40e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c3e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c3e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c3e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c3e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c3e660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c3e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f89b0c3cda0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f89b0c3cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c3b180"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c3b310"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c3b4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c3b630"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c3b7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c3b950"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c3bae0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c3bc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f89b0c38440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f89b0c38440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c387c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c38950"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c38ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c38c70"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c38e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c37020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c371b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c37340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af573020" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af573020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af5733a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af573530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af5736c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af573850"/>
        <function-ref name="get" scoped="" ref="0x7f89af5739e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af573b70"/>
        <function-ref name="set" scoped="" ref="0x7f89af573d00"/>
        <function-ref name="clr" scoped="" ref="0x7f89af572020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af5703f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af5703f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af570770"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af570900"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af570a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af570c20"/>
        <function-ref name="get" scoped="" ref="0x7f89af570db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af56f020"/>
        <function-ref name="set" scoped="" ref="0x7f89af56f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af56f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af56d6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af56d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af56da50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af56dbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af56dd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af56c020"/>
        <function-ref name="get" scoped="" ref="0x7f89af56c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af56c340"/>
        <function-ref name="set" scoped="" ref="0x7f89af56c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af56c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af56a9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af56a9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af56ad30"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af568020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af5681b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af568340"/>
        <function-ref name="get" scoped="" ref="0x7f89af5684d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af568660"/>
        <function-ref name="set" scoped="" ref="0x7f89af5687f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af568980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af566e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af566e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af5651c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af565350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af5654e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af565670"/>
        <function-ref name="get" scoped="" ref="0x7f89af565800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af565990"/>
        <function-ref name="set" scoped="" ref="0x7f89af565b20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af565cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af5620a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af5620a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af562420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af5625b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af562740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af5628d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af562a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af562bf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af562d80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af561020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af55f3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af55f3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af55f770"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af55f900"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af55fa90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af55fc20"/>
        <function-ref name="get" scoped="" ref="0x7f89af55fdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af55e020"/>
        <function-ref name="set" scoped="" ref="0x7f89af55e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af55e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af55c6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af55c6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af55ca50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af55cbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af55cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af554020"/>
        <function-ref name="get" scoped="" ref="0x7f89af5541b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af554340"/>
        <function-ref name="set" scoped="" ref="0x7f89af5544d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af554660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f89b0c2fda0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f89b0c2fda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c2e180"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c2e310"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c2e4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c2e630"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c2e7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c2e950"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c2eae0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c2ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f89b0c2b440" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f89b0c2b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c2b7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c2b950"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c2bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c2bc70"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c2be00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c2a020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c2a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c2a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f89b0c31a20" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f89b0c31a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c31da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c30020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c301b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c30340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c304d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c30660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c307f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c30980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f89b0c2d020" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f89b0c2d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c2d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c2d530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c2d6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c2d850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c2d9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c2db70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c2dd00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c2c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f89b0c2a5d0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f89b0c2a5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c2a950"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c2aae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c2ac70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c2ae00"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c29020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c291b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c29340"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c294d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f89b0c30c10" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f89b0c30c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c2f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c2f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c2f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c2f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c2f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c2f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c2f980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c2fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f89b0c2c2b0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f89b0c2c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c2c630"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c2c7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c2c950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c2cae0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c2cc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c2ce00"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c2b020"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c2b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f89b0c29760" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f89b0c29760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c29ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c29c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c29e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c28020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c281b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c28340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c284d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c28660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af501a60" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af501a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af501de0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af500020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af5001b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af500340"/>
        <function-ref name="get" scoped="" ref="0x7f89af5004d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af500660"/>
        <function-ref name="set" scoped="" ref="0x7f89af5007f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af500980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4fee20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4fee20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4fd1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4fd350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4fd4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4fd670"/>
        <function-ref name="get" scoped="" ref="0x7f89af4fd800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af4fd990"/>
        <function-ref name="set" scoped="" ref="0x7f89af4fdb20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af4fdcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4fa0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4fa0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4fa420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4fa5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4fa740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4fa8d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af4faa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af4fabf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af4fad80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af4f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4f73f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4f73f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4f7770"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4f7900"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4f7a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4f7c20"/>
        <function-ref name="get" scoped="" ref="0x7f89af4f7db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af4f6020"/>
        <function-ref name="set" scoped="" ref="0x7f89af4f61b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af4f6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4f46d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4f46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4f4a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4f4be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4f4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4f2020"/>
        <function-ref name="get" scoped="" ref="0x7f89af4f21b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af4f2340"/>
        <function-ref name="set" scoped="" ref="0x7f89af4f24d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af4f2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4f09b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4f09b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4f0d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4ef020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4ef1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4ef340"/>
        <function-ref name="get" scoped="" ref="0x7f89af4ef4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af4ef660"/>
        <function-ref name="set" scoped="" ref="0x7f89af4ef7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af4ef980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4ede20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4ede20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4ec1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4ec350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4ec4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4ec670"/>
        <function-ref name="get" scoped="" ref="0x7f89af4ec800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af4ec990"/>
        <function-ref name="set" scoped="" ref="0x7f89af4ecb20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af4eccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4e90a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4e90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4e9420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4e95b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4e9740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4e98d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af4e9a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af4e9bf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af4e9d80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af4e8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f89b0c1f020" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f89b0c1f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c1f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c1f530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c1f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c1f850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c1f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c1fb70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c1fd00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c1e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f89b0c1c5d0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f89b0c1c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c1c950"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c1cae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c1cc70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c1ce00"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c1b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c1b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c1b340"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c1b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f89b0c22d30" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f89b0c22d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c210e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c21270"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c21400"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c21590"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c21720"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c218b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c21a40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c21bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f89b0c1e2b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f89b0c1e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c1e630"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c1e7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c1e950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c1eae0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c1ec70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c1ee00"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c1d020"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c1d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f89b0c1b760" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f89b0c1b760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c1bae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c1bc70"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c1be00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c19020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c191b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c19340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c194d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c19660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f89b0c21e60" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f89b0c21e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c20210"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c203a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c20530"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c206c0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c20850"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c209e0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c20b70"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c20d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f89b0c1d440" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f89b0c1d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c1d7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c1d950"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c1dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c1dc70"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c1de00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c1c020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c1c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c1c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f89b0c198f0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f89b0c198f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c19c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c19e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c18020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c181b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c18340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c184d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c18660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c187f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af496c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af496c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4950a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af495230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4953c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af495550"/>
        <function-ref name="get" scoped="" ref="0x7f89af4956e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af495870"/>
        <function-ref name="set" scoped="" ref="0x7f89af495a00"/>
        <function-ref name="clr" scoped="" ref="0x7f89af495b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af493e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af493e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4921c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af492350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4924e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af492670"/>
        <function-ref name="get" scoped="" ref="0x7f89af492800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af492990"/>
        <function-ref name="set" scoped="" ref="0x7f89af492b20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af492cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af48f0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af48f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af48f420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af48f5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af48f740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af48f8d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af48fa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af48fbf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af48fd80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af48e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af48c3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af48c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af48c770"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af48c900"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af48ca90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af48cc20"/>
        <function-ref name="get" scoped="" ref="0x7f89af48cdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af48b020"/>
        <function-ref name="set" scoped="" ref="0x7f89af48b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af48b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4896d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4896d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af489a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af489be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af489d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af487020"/>
        <function-ref name="get" scoped="" ref="0x7f89af4871b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af487340"/>
        <function-ref name="set" scoped="" ref="0x7f89af4874d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af487660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4859b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4859b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af485d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af484020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4841b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af484340"/>
        <function-ref name="get" scoped="" ref="0x7f89af4844d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af484660"/>
        <function-ref name="set" scoped="" ref="0x7f89af4847f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af484980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af482e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af482e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4811c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af481350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4814e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af481670"/>
        <function-ref name="get" scoped="" ref="0x7f89af481800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af481990"/>
        <function-ref name="set" scoped="" ref="0x7f89af481b20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af481cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af47e0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af47e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af47e420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af47e5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af47e740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af47e8d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af47ea60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af47ebf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af47ed80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af47d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f89b0c10440" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f89b0c10440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c107c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c10950"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c10ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c10c70"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c10e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c0f020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c0f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c0f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f89b0c0c8f0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f89b0c0c8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c0cc70"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c0ce00"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c0b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c0b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c0b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c0b4d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c0b660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c0b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f89b0c12020" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f89b0c12020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c123a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c12530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c126c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c12850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c129e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c12b70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c12d00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c11020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f89b0c0f5d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f89b0c0f5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c0f950"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c0fae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c0fc70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c0fe00"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c0d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c0d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c0d340"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c0d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f89b0c0ba80" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f89b0c0ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c0be00"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c0a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c0a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c0a340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c0a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c0a660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c0a7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c0a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f89b0c112b0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f89b0c112b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c11630"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c117c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c11950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c11ae0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c11c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c11e00"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c10020"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c101b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f89b0c0d760" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f89b0c0d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c0dae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c0dc70"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c0de00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c0c020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c0c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c0c340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c0c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c0c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f89b0c0ac10" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f89b0c0ac10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c09020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c091b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c09340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c094d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c09660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c097f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c09980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c09b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af42bc90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af42bc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af42a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af42a230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af42a3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af42a550"/>
        <function-ref name="get" scoped="" ref="0x7f89af42a6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af42a870"/>
        <function-ref name="set" scoped="" ref="0x7f89af42aa00"/>
        <function-ref name="clr" scoped="" ref="0x7f89af42ab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af428e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af428e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4271c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af427350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4274e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af427670"/>
        <function-ref name="get" scoped="" ref="0x7f89af427800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af427990"/>
        <function-ref name="set" scoped="" ref="0x7f89af427b20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af427cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4240a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4240a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af424420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4245b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af424740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4248d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af424a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af424bf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af424d80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af423020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4213f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4213f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af421770"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af421900"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af421a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af421c20"/>
        <function-ref name="get" scoped="" ref="0x7f89af421db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af420020"/>
        <function-ref name="set" scoped="" ref="0x7f89af4201b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af420340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af41e6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af41e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af41ea50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af41ebe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af41ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af41d020"/>
        <function-ref name="get" scoped="" ref="0x7f89af41d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af41d340"/>
        <function-ref name="set" scoped="" ref="0x7f89af41d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af41d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af41b9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af41b9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af41bd30"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af419020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4191b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af419340"/>
        <function-ref name="get" scoped="" ref="0x7f89af4194d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af419660"/>
        <function-ref name="set" scoped="" ref="0x7f89af4197f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af419980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af417e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af417e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af4161c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af416350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af4164e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af416670"/>
        <function-ref name="get" scoped="" ref="0x7f89af416800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af416990"/>
        <function-ref name="set" scoped="" ref="0x7f89af416b20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af416cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af4130a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af4130a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af413420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af4135b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af413740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af4138d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af413a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af413bf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af413d80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af412020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f89b0c00760" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f89b0c00760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c00ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c00c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c00e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bff020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bff1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bff340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bff4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bff660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f89b0bfdc10" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f89b0bfdc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bfc020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bfc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bfc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bfc4d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bfc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bfc7f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bfc980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bfcb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f89b0c033f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f89b0c033f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c03770"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c03900"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c03a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c03c20"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c03db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c01020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c011b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c01340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f89b0bff8f0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f89b0bff8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bffc70"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bffe00"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bfe020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bfe1b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bfe340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bfe4d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bfe660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bfe7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f89b0bfcda0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f89b0bfcda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bfb180"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bfb310"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bfb4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bfb630"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bfb7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bfb950"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bfbae0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bfbc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f89b0c015d0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f89b0c015d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0c01950"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0c01ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0c01c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0c01e00"/>
        <function-ref name="get" scoped="" ref="0x7f89b0c00020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0c001b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0c00340"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0c004d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f89b0bfea80" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f89b0bfea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bfee00"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bfd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bfd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bfd340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bfd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bfd660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bfd7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bfd980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f89b0bfa020" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f89b0bfa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bfa3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bfa530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bfa6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bfa850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bfa9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bfab70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bfad00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bf9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3c0c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3c0c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3bf0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3bf230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3bf3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3bf550"/>
        <function-ref name="get" scoped="" ref="0x7f89af3bf6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af3bf870"/>
        <function-ref name="set" scoped="" ref="0x7f89af3bfa00"/>
        <function-ref name="clr" scoped="" ref="0x7f89af3bfb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3bde20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3bde20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3bc1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3bc350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3bc4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3bc670"/>
        <function-ref name="get" scoped="" ref="0x7f89af3bc800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af3bc990"/>
        <function-ref name="set" scoped="" ref="0x7f89af3bcb20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af3bccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3b90a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3b90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3b9420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3b95b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3b9740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3b98d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af3b9a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af3b9bf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af3b9d80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af3b8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3b63f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3b63f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3b6770"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3b6900"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3b6a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3b6c20"/>
        <function-ref name="get" scoped="" ref="0x7f89af3b6db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af3b5020"/>
        <function-ref name="set" scoped="" ref="0x7f89af3b51b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af3b5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3b36d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3b36d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3b3a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3b3be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3b3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3b2020"/>
        <function-ref name="get" scoped="" ref="0x7f89af3b21b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af3b2340"/>
        <function-ref name="set" scoped="" ref="0x7f89af3b24d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af3b2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3b09b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3b09b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3b0d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3ae020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3ae1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3ae340"/>
        <function-ref name="get" scoped="" ref="0x7f89af3ae4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af3ae660"/>
        <function-ref name="set" scoped="" ref="0x7f89af3ae7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af3ae980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3ace20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3ace20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3ab1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3ab350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3ab4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3ab670"/>
        <function-ref name="get" scoped="" ref="0x7f89af3ab800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af3ab990"/>
        <function-ref name="set" scoped="" ref="0x7f89af3abb20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af3abcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3a80a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3a80a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3a8420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3a85b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3a8740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3a88d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af3a8a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af3a8bf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af3a8d80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af3a7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f89b0bf1a80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f89b0bf1a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bf1e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bf0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bf01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bf0340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bf04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bf0660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bf07f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bf0980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f89b0bed020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f89b0bed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bed3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bed530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bed6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bed850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bed9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bedb70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bedd00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bec020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f89b0bf37a0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f89b0bf37a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bf3b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bf3cb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bf3e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bf2020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bf21b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bf2340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bf24d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bf2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f89b0bf0c10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f89b0bf0c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bef020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bef1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bef340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bef4d0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bef660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bef7f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bef980"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0befb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f89b0bec2b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f89b0bec2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bec630"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bec7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bec950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0becae0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0becc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bece00"/>
        <function-ref name="set" scoped="" ref="0x7f89b0beb020"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0beb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f89b0bf28f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f89b0bf28f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bf2c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bf2e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bf1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bf11b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bf1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bf14d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bf1660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bf17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f89b0befda0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f89b0befda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bee180"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bee310"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bee4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bee630"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bee7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bee950"/>
        <function-ref name="set" scoped="" ref="0x7f89b0beeae0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0beec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f89b0beb440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f89b0beb440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0beb7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0beb950"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bebae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bebc70"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bebe00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bea020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bea1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bea340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af34cc90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af34cc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af34b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af34b230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af34b3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af34b550"/>
        <function-ref name="get" scoped="" ref="0x7f89af34b6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af34b870"/>
        <function-ref name="set" scoped="" ref="0x7f89af34ba00"/>
        <function-ref name="clr" scoped="" ref="0x7f89af34bb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af349e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af349e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3481c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af348350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3484e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af348670"/>
        <function-ref name="get" scoped="" ref="0x7f89af348800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af348990"/>
        <function-ref name="set" scoped="" ref="0x7f89af348b20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af348cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3450a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3450a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af345420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3455b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af345740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3458d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af345a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af345bf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af345d80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af344020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3423f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3423f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af342770"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af342900"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af342a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af342c20"/>
        <function-ref name="get" scoped="" ref="0x7f89af342db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af341020"/>
        <function-ref name="set" scoped="" ref="0x7f89af3411b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af341340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af33f6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af33f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af33fa50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af33fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af33fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af33e020"/>
        <function-ref name="get" scoped="" ref="0x7f89af33e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af33e340"/>
        <function-ref name="set" scoped="" ref="0x7f89af33e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af33e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af33c9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af33c9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af33cd30"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af33b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af33b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af33b340"/>
        <function-ref name="get" scoped="" ref="0x7f89af33b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af33b660"/>
        <function-ref name="set" scoped="" ref="0x7f89af33b7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89af33b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af339e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af339e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af3371c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af337350"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af3374e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af337670"/>
        <function-ref name="get" scoped="" ref="0x7f89af337800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af337990"/>
        <function-ref name="set" scoped="" ref="0x7f89af337b20"/>
        <function-ref name="clr" scoped="" ref="0x7f89af337cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89af3340a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89af3340a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89af334420"/>
        <function-ref name="isInput" scoped="" ref="0x7f89af3345b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89af334740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89af3348d0"/>
        <function-ref name="get" scoped="" ref="0x7f89af334a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89af334bf0"/>
        <function-ref name="set" scoped="" ref="0x7f89af334d80"/>
        <function-ref name="clr" scoped="" ref="0x7f89af333020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0be3a20" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0be3a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0be3da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bcc020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bcc1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bcc340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bcc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bcc660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bcc7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bcc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0bc86d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0bc86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bc8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bc8be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bc8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bc7020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bc71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bc7340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bc74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bc7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0bc2160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0bc2160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bc24e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bc2670"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bc2800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bc2990"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bc2b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bc2cb0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bc2e40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bc1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0bbdc90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0bbdc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bbc0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bbc230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bbc3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bbc550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bbc6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bbc870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bbca00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bbcb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0bb86d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0bb86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bb8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bb8be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bb8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bb7020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bb71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bb7340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bb74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bb7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0bb2160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0bb2160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bb24e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bb2670"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bb2800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bb2990"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bb2b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bb2cb0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0bb2e40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bb1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0badc90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0badc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0bac0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0bac230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0bac3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0bac550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0bac6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0bac870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0baca00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0bacb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0ba86d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0ba86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ba8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ba8be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ba8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ba7020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ba71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ba7340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ba74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ba7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0ba2160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0ba2160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0ba24e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0ba2670"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0ba2800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0ba2990"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ba2b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0ba2cb0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ba2e40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0ba1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0b9ec90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0b9ec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0b9c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0b9c230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0b9c3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0b9c550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b9c6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0b9c870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b9ca00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0b9cb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0b986d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0b986d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0b98a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0b98be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0b98d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0b97020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b971b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0b97340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b974d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0b97660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0b92160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0b92160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0b924e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0b92670"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0b92800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0b92990"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b92b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0b92cb0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b92e40"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0b91020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0b8ec90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0b8ec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0b8c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0b8c230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0b8c3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0b8c550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b8c6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0b8c870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b8ca00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0b8cb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f89b0b886d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f89b0b886d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0b88a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0b88be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0b88d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0b87020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b871b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0b87340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b874d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0b87660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0b4c020" loc="61:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0b4c020"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f89b10b83a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f89b10b83a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0b4c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f89b0b4c690" loc="62:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f89b0b4c690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f89b0b4ca10"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f89b0b4cba0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f89b0b4cd30"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f89b0b4b020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f89b0b4b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f89b0b2b720" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0b2b720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0b2baa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f89b0cefdb0" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89b0cefdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89b0b2c180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f89b0b2b020" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0b2b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0b2b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f89b0b2c470" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f89b0b2c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0b2c7f0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f89b0b2c980"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f89b0b2cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f89b106fbd0" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f89b106fbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89b10ef020"/>
        <function-ref name="runTask" scoped="" ref="0x7f89b10ef1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f89b10799d0" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f89b10799d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b1079d50"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f89b1a7d020"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f89b1a7d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f89b0fa3d30" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f89b0fa3d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89b0fa20e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89b0fa2270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f89b0f9d2c0" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f89b0f9d2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f89b0f9d640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f89b0f9d7d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f89b0f9d960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f89b0fa4e40" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f89b0fa4e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0fa31e0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f89b0fa3370"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f89b0fa3500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f89b0f7f330" loc="86:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f89b0f7f330"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f89b0f7f6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f89b0fba3b0" loc="82:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f89b0fba3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f89b0fba730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f89b0fba8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f89b0fbaa50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f89b0f81bc0" loc="83:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f89b0f81bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f89b0f83020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f89b0cf6890" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89b0cf6890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89b0cf6c10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89b0cf6da0"/>
        <function-ref name="led1On" scoped="" ref="0x7f89b0b1f020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89b0b1f1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89b0b1f340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b1f4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89b0b1f660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89b0b1fca0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b1f7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f89b0b1f980"/>
        <function-ref name="led2On" scoped="" ref="0x7f89b0b1fb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f89b0b1aa00" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f89b0b1aa00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0b1ad80"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0b19020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0b191b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0b19340"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b194d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0b19660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b197f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0b19980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0b1ec30" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0b1ec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0b1b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f89b0b19ca0" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f89b0b19ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0b180a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0b18230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0b183c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0b18550"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b186e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0b18870"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b18a00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0b18b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f89b0b1b2a0" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89b0b1b2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89b0b1b620"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89b0b1b7b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f89b0b1b940"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89b0b1bad0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89b0b1bc60"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b1bdf0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89b0b1a020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89b0b1a660"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b1a1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f89b0b1a340"/>
        <function-ref name="led2On" scoped="" ref="0x7f89b0b1a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f89b0b17020" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f89b0b17020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0b173a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0b17530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0b176c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0b17850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0b179e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0b17b70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0b17d00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0b16020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f89b0afa020" loc="44:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f89b0afa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0afa3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0afa530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0afa6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0afa850"/>
        <function-ref name="get" scoped="" ref="0x7f89b0afa9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0afab70"/>
        <function-ref name="set" scoped="" ref="0x7f89b0afad00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0af9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f89b0af9380" loc="45:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f89b0af9380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0af9700"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0af9890"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0af9a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0af9bb0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0af9d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0af8020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0af81b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0af8340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f89b0af7920" loc="47:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0af7920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0af7ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f89b0af86a0" loc="46:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f89b0af86a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0af8a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0af8bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0af8d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0af7020"/>
        <function-ref name="get" scoped="" ref="0x7f89b0af71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b0af7340"/>
        <function-ref name="set" scoped="" ref="0x7f89b0af74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f89b0af7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Slotter" ref="0x7f89b0aee5b0" loc="34:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f89b0aee5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f89b0aee930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f89b0ae0770" loc="42:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89b0ae0770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89b0ae0af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f89b0aeb020" loc="39:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89b0aeb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f89b0fec180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0ae2870"/>
        <function-ref name="fired" scoped="" ref="0x7f89b0ae3840"/>
        <function-ref name="startAt" scoped="" ref="0x7f89b0ae2220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b0ae3d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b0ae2d30"/>
        <function-ref name="start" scoped="" ref="0x7f89b0aebe30"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0ae3380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0af1700" loc="32:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0af1700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0af1a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89b0ae1180" loc="40:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89b0ae1180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89b0ae1500"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89b0ae1690"/>
        <function-ref name="led1On" scoped="" ref="0x7f89b0ae1820"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89b0ae19b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89b0ae1b40"/>
        <function-ref name="get" scoped="" ref="0x7f89b0ae1cd0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89b0ae1e60"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89b0ae04d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0ae0020"/>
        <function-ref name="led0On" scoped="" ref="0x7f89b0ae01b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f89b0ae0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f89b0af1d70" loc="33:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f89b0af1d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89b0aee180"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0aee310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f89b0aedc90" loc="36:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89b0aedc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f89b0aec0a0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f89b0aec230"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f89b0aec3c0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f89b0aec550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlotterControl" ref="0x7f89b0aeec10" loc="35:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f89b0aeec10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0aed980"/>
        <function-ref name="getSlot" scoped="" ref="0x7f89b0aed1b0"/>
        <function-ref name="synchronize" scoped="" ref="0x7f89b0aed340"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f89b0aed4d0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b0aed660"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f89b0aed7f0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0aed020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89b09124e0" loc="28:../../tos/platforms/mica/Alarm32khz32C.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89b09124e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f89b0fec180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0910db0"/>
        <function-ref name="fired" scoped="" ref="0x7f89b0911da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89b0910760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b09102a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b090f2a0"/>
        <function-ref name="start" scoped="" ref="0x7f89b09113d0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b09118e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89af2697c0" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89af2697c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89af265020"/>
        <function-ref name="fired" scoped="" ref="0x7f89af267020"/>
        <function-ref name="startAt" scoped="" ref="0x7f89af2679a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89af2674e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89af2654e0"/>
        <function-ref name="start" scoped="" ref="0x7f89af268620"/>
        <function-ref name="stop" scoped="" ref="0x7f89af268b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f89b0a96aa0" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b0a96aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f89b0a96e20"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f89b0a9f020"/>
        <function-ref name="getControlA" scoped="" ref="0x7f89b0a9f1b0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f89b0a9f340"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f89b0a9f4d0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f89b0a9f660"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f89b0a9f7f0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f89b0a9f980"/>
        <function-ref name="setControlC" scoped="" ref="0x7f89b0a9fb10"/>
        <function-ref name="setControlA" scoped="" ref="0x7f89b0a9fca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f89b0a8e970" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f89b0a8e970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f89b0a8ce60"/>
        <function-ref name="test" scoped="" ref="0x7f89b0a8c4e0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0a955e0"/>
        <function-ref name="captured" scoped="" ref="0x7f89b0a8d020"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0a8d530"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0a8c9a0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0a95aa0"/>
        <function-ref name="start" scoped="" ref="0x7f89b0a8d9f0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0a8c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f89b0a8a4d0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f89b0a8a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89b0a82e60"/>
        <function-ref name="fired" scoped="" ref="0x7f89b0a89b20"/>
        <function-ref name="get" scoped="" ref="0x7f89b0a89150"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0a82020"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0a81350"/>
        <function-ref name="set" scoped="" ref="0x7f89b0a89610"/>
        <function-ref name="start" scoped="" ref="0x7f89b0a824e0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0a829a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89b0aa37b0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89b0aa37b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89b0aa1b30"/>
        <function-ref name="test" scoped="" ref="0x7f89b0aa11b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0aab440"/>
        <function-ref name="setScale" scoped="" ref="0x7f89b0aa0020"/>
        <function-ref name="getScale" scoped="" ref="0x7f89b0aa0530"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0aa2340"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b0aabe10"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0aa1670"/>
        <function-ref name="set" scoped="" ref="0x7f89b0aab900"/>
        <function-ref name="start" scoped="" ref="0x7f89b0aa2800"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0aa2cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f89b0a78c20" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b0a78c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f89b0a77020"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f89b0a771b0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f89b0a77340"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f89b0a774d0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f89b0a77660"/>
        <function-ref name="setControlB" scoped="" ref="0x7f89b0a777f0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f89b0a77980"/>
        <function-ref name="getControlB" scoped="" ref="0x7f89b0a77b10"/>
        <function-ref name="setControlC" scoped="" ref="0x7f89b0a77ca0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f89b0a77e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f89b0a71020" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f89b0a71020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89b0a6f9a0"/>
        <function-ref name="fired" scoped="" ref="0x7f89b0a70660"/>
        <function-ref name="get" scoped="" ref="0x7f89b0a71c50"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0a70b20"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0a6fe60"/>
        <function-ref name="set" scoped="" ref="0x7f89b0a70150"/>
        <function-ref name="start" scoped="" ref="0x7f89b0a6f020"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0a6f4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f89b0a76380" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f89b0a76380"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f89b0a72810"/>
        <function-ref name="test" scoped="" ref="0x7f89b0a74e60"/>
        <function-ref name="get" scoped="" ref="0x7f89b0a75020"/>
        <function-ref name="captured" scoped="" ref="0x7f89b0a759f0"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0a74020"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0a72350"/>
        <function-ref name="set" scoped="" ref="0x7f89b0a754e0"/>
        <function-ref name="start" scoped="" ref="0x7f89b0a744e0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0a749a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f89b0a6d550" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f89b0a6d550"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89b0a69020"/>
        <function-ref name="fired" scoped="" ref="0x7f89b0a6cb80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0a6c1b0"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0a6b090"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0a694e0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0a6c670"/>
        <function-ref name="start" scoped="" ref="0x7f89b0a6b550"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0a6ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f89b0a69ba0" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f89b0a69ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89b0a66550"/>
        <function-ref name="fired" scoped="" ref="0x7f89b0a671f0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0a687f0"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0a676b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0a66a10"/>
        <function-ref name="set" scoped="" ref="0x7f89b0a68cb0"/>
        <function-ref name="start" scoped="" ref="0x7f89b0a67b70"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0a66090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89b0a7d8c0" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89b0a7d8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89b0a7acd0"/>
        <function-ref name="test" scoped="" ref="0x7f89b0a7a350"/>
        <function-ref name="get" scoped="" ref="0x7f89b0a7c520"/>
        <function-ref name="setScale" scoped="" ref="0x7f89b0a781b0"/>
        <function-ref name="getScale" scoped="" ref="0x7f89b0a786c0"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0a7b4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b0a7b020"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0a7a810"/>
        <function-ref name="set" scoped="" ref="0x7f89b0a7c9e0"/>
        <function-ref name="start" scoped="" ref="0x7f89b0a7b9a0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0a7be60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b09ea790" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b09ea790"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f89b10b8020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f89b10b8020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b09eab10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f89b09dd020" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89b09dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89b09d9350"/>
        <function-ref name="test" scoped="" ref="0x7f89b09db9a0"/>
        <function-ref name="get" scoped="" ref="0x7f89b09ddc50"/>
        <function-ref name="setScale" scoped="" ref="0x7f89b09d9810"/>
        <function-ref name="getScale" scoped="" ref="0x7f89b09d9d20"/>
        <function-ref name="reset" scoped="" ref="0x7f89b09dcb20"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b09dc660"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b09dbe60"/>
        <function-ref name="set" scoped="" ref="0x7f89b09dc150"/>
        <function-ref name="start" scoped="" ref="0x7f89b09db020"/>
        <function-ref name="stop" scoped="" ref="0x7f89b09db4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89af253d90" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89af253d90"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f89b10b9c00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f89b10b9c00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89af24f670"/>
        <function-ref name="fired" scoped="" ref="0x7f89af2515d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89af24f020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89af251a90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89af24fb30"/>
        <function-ref name="start" scoped="" ref="0x7f89af252bc0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af251110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7f89af249570" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f89af249570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89af245020"/>
        <function-ref name="fired" scoped="" ref="0x7f89af248bc0"/>
        <function-ref name="get" scoped="" ref="0x7f89af2481f0"/>
        <function-ref name="reset" scoped="" ref="0x7f89af2470d0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af2454e0"/>
        <function-ref name="set" scoped="" ref="0x7f89af2486b0"/>
        <function-ref name="start" scoped="" ref="0x7f89af247590"/>
        <function-ref name="stop" scoped="" ref="0x7f89af247a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7f89af24e0b0" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f89af24e0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89af24a4e0"/>
        <function-ref name="test" scoped="" ref="0x7f89af24ca50"/>
        <function-ref name="get" scoped="" ref="0x7f89af24ece0"/>
        <function-ref name="setScale" scoped="" ref="0x7f89af24a9a0"/>
        <function-ref name="getScale" scoped="" ref="0x7f89af249020"/>
        <function-ref name="reset" scoped="" ref="0x7f89af24dbf0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af24d730"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af24a020"/>
        <function-ref name="set" scoped="" ref="0x7f89af24d220"/>
        <function-ref name="start" scoped="" ref="0x7f89af24c0d0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af24c590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89b0998290" loc="24:../../tos/platforms/mica/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89b0998290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f89b0fec180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b09940d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89b0994a50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89b0994590"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b0993020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89b0990290" loc="24:../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89b0990290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b098f0d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89b098fa50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89b098f590"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b098e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89b098a020" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89b098a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b098ae30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89b0978800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89b0978340"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b0978cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f89b0977280" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89b0977280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89b0973810"/>
        <function-ref name="test" scoped="" ref="0x7f89b0974e60"/>
        <function-ref name="get" scoped="" ref="0x7f89b0976020"/>
        <function-ref name="setScale" scoped="" ref="0x7f89b0973cd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f89b0972260"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0974020"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b09769f0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0973350"/>
        <function-ref name="set" scoped="" ref="0x7f89b09764e0"/>
        <function-ref name="start" scoped="" ref="0x7f89b09744e0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b09749a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f89b0951540" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f89b0951540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b094f3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89b094fd50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89b094f890"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b094e260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89b09530f0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89b09530f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f89b0fec180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b0952020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89b09529a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89b09524e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b0952e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89af263890" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89af263890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f89b0fec180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89af2600d0"/>
        <function-ref name="fired" scoped="" ref="0x7f89af2610d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89af261a50"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89af261590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89af260590"/>
        <function-ref name="start" scoped="" ref="0x7f89af2626e0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af262bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f89af25c0a0" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x7f89af25c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89af25ab30"/>
        <function-ref name="fired" scoped="" ref="0x7f89af25b9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89af25a4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89af25a020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89af258020"/>
        <function-ref name="start" scoped="" ref="0x7f89af25b020"/>
        <function-ref name="stop" scoped="" ref="0x7f89af25b530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f89af260c00" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89af260c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f89b0fec180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89af25ea80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89af25d4e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89af25d020"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af25d9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89b0908020" loc="41:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89b0908020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b09083a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b0908530"/>
        <function-ref name="start" scoped="" ref="0x7f89b09086c0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0908850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f89b09034f0" loc="46:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f89b09034f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f89b0903870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89b0903b00" loc="48:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89b0903b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0903e80"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b0902030"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b09021c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0902350"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b09024e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89b0906050" loc="43:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89b0906050"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b09063d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b0906560"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b09066f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0906880"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0906a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89b0905df0" loc="45:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89b0905df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b09041c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f89b08f88a0" loc="52:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b08f88a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f89b08f8c20"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f89b08f8db0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f89b08fd020"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f89b08fd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89b0905210" loc="44:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89b0905210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0905590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f89b0900e40" loc="51:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b0900e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89b08fe1e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f89b08fe370"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89b08fe500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f89b08f0bf0" loc="53:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f89b08f0bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f89b08fc020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f89b08fc1b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f89b08fc340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f89b08fc4d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f89b08fc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89b0902790" loc="49:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89b0902790"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89b0902b10"/>
        <function-ref name="source" scoped="" ref="0x7f89b0902ca0"/>
        <function-ref name="address" scoped="" ref="0x7f89b0902e30"/>
        <function-ref name="destination" scoped="" ref="0x7f89b0900020"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b09001b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b0900340"/>
        <function-ref name="type" scoped="" ref="0x7f89b09004d0"/>
        <function-ref name="setType" scoped="" ref="0x7f89b0900660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b09007f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89b0900980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89b0900b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f89b08ec960" loc="54:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f89b08ec960"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f89b08ecce0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b08ece70"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b08f6030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0x7f89b08e39e0" loc="56:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f89b08e39e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b08eb020"/>
        <function-ref name="clear" scoped="" ref="0x7f89b08eb750"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b08ee890"/>
        <function-ref name="set" scoped="" ref="0x7f89b08ebe80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f89b08e2af0" loc="57:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b08e2af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b08e0210"/>
        <function-ref name="clear" scoped="" ref="0x7f89b08e0940"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b08e1a80"/>
        <function-ref name="set" scoped="" ref="0x7f89b08de090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89b08db2e0" loc="45:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89b08db2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b08db660"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b08db7f0"/>
        <function-ref name="start" scoped="" ref="0x7f89b08db980"/>
        <function-ref name="stop" scoped="" ref="0x7f89b08dbb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f89b08c5a00" loc="62:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b08c5a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b08c31b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b08c4c00"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b08c46b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b08c3700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f89b08d7d60" loc="50:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f89b08d7d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f89b08d6180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89b08d6410" loc="52:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89b08d6410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b08d6790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b08d6920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b08d6ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b08d6c40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b08d6dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89b08da320" loc="47:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89b08da320"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b08da6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b08da830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b08da9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b08dab50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b08dace0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89b08d71d0" loc="49:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89b08d71d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b08d7550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f89b08c8400" loc="61:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b08c8400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b08c7c10"/>
        <function-ref name="get" scoped="" ref="0x7f89b08c76c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b08c7170"/>
        <function-ref name="set" scoped="" ref="0x7f89b08c51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f89b08d3320" loc="56:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b08d3320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f89b08d36a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f89b08d3830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f89b08d39c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f89b08d3b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89b08d9510" loc="48:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89b08d9510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b08d9890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f89b08c08a0" loc="66:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b08c08a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b08bbe10"/>
        <function-ref name="clear" scoped="" ref="0x7f89b08ba5a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b08bb6e0"/>
        <function-ref name="set" scoped="" ref="0x7f89b08bacd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f89b08c1270" loc="65:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b08c1270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b08c0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f89b08cadf0" loc="60:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b08cadf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b08ce5e0"/>
        <function-ref name="get" scoped="" ref="0x7f89b08ce090"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b08d0ac0"/>
        <function-ref name="set" scoped="" ref="0x7f89b08ceb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f89b08d4800" loc="55:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b08d4800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89b08d4b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f89b08d4d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89b08d3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f89b08d3e10" loc="57:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f89b08d3e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f89b08d21c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f89b08d2350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f89b08d24e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f89b08d2670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f89b08d2800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89b08d50c0" loc="53:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89b08d50c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89b08d5440"/>
        <function-ref name="source" scoped="" ref="0x7f89b08d55d0"/>
        <function-ref name="address" scoped="" ref="0x7f89b08d5760"/>
        <function-ref name="destination" scoped="" ref="0x7f89b08d58f0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b08d5a80"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b08d5c10"/>
        <function-ref name="type" scoped="" ref="0x7f89b08d5da0"/>
        <function-ref name="setType" scoped="" ref="0x7f89b08d4020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b08d41b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89b08d4340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89b08d44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f89b08d2ad0" loc="58:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f89b08d2ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f89b08d2e50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b08d1020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b08d11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f89b08bd4c0" loc="63:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b08bd4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f89b08bd840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f89b08b8970" loc="67:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b08b8970"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b08b6020"/>
        <function-ref name="clear" scoped="" ref="0x7f89b08b6750"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b08b77c0"/>
        <function-ref name="set" scoped="" ref="0x7f89b08b6e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89b08b1080" loc="41:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89b08b1080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b08b1400"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b08b1590"/>
        <function-ref name="start" scoped="" ref="0x7f89b08b1720"/>
        <function-ref name="stop" scoped="" ref="0x7f89b08b18b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f89b08881c0" loc="85:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b08881c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0887910"/>
        <function-ref name="get" scoped="" ref="0x7f89b08873c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b0888df0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0887e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0x7f89b08a9020" loc="65:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f89b08a9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f89b08a93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0x7f89b08a12c0" loc="67:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0x7f89b08a12c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89b08a1640"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89b08a17d0"/>
        <function-ref name="request" scoped="" ref="0x7f89b08a1960"/>
        <function-ref name="granted" scoped="" ref="0x7f89b08a1af0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89b08a1c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f89b08aebb0" loc="57:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f89b08aebb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f89b08ad020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f89b087f3f0" loc="90:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b087f3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b087e970"/>
        <function-ref name="clear" scoped="" ref="0x7f89b087d0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b087e240"/>
        <function-ref name="set" scoped="" ref="0x7f89b087d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89b08b01d0" loc="54:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89b08b01d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b08b0550"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b08b06e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b08b0870"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b08b0a00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b08b0b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89b08ae020" loc="56:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89b08ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b08ae3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f89b08923c0" loc="69:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89b08923c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f89b0892740"/>
        <function-ref name="address" scoped="" ref="0x7f89b08928d0"/>
        <function-ref name="destination" scoped="" ref="0x7f89b0892a60"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b0892bf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b0892d80"/>
        <function-ref name="pan" scoped="" ref="0x7f89b089b020"/>
        <function-ref name="setPan" scoped="" ref="0x7f89b089b1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b089b340"/>
        <function-ref name="localPan" scoped="" ref="0x7f89b089b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0x7f89b089b890" loc="70:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f89b089b890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b089bd10"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b089a020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b089a1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b089a340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b089a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f89b0891320" loc="74:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b0891320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f89b08916a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f89b0891830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f89b08919c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f89b0891b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f89b088dc90" loc="84:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b088dc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b088a3c0"/>
        <function-ref name="get" scoped="" ref="0x7f89b088be30"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b088b8e0"/>
        <function-ref name="set" scoped="" ref="0x7f89b088a910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89b08af3f0" loc="55:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89b08af3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b08af770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0x7f89b08aca10" loc="59:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f89b08aca10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b08acd90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b08ab020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b08ab1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b08ab340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b08ab4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f89b0883270" loc="89:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b0883270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b0882800"/>
        <function-ref name="clear" scoped="" ref="0x7f89b0881020"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b08820d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0881750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f89b0886d70" loc="88:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b0886d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b08849c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f89b088f6d0" loc="83:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b088f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b088ee70"/>
        <function-ref name="get" scoped="" ref="0x7f89b088e920"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b088e3d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b088d3f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f89b089a800" loc="73:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b089a800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89b089ab80"/>
        <function-ref name="noAck" scoped="" ref="0x7f89b089ad10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89b0891020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f89b08a3a60" loc="63:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f89b08a3a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b08a3de0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b08aa020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b08aa1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b08aa340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b08aa4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f89b0891e10" loc="75:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f89b0891e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f89b08901c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f89b0890350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f89b08904e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f89b0890670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f89b0890800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89b08ad2d0" loc="58:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89b08ad2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89b08ad650"/>
        <function-ref name="source" scoped="" ref="0x7f89b08ad7e0"/>
        <function-ref name="address" scoped="" ref="0x7f89b08ad970"/>
        <function-ref name="destination" scoped="" ref="0x7f89b08adb00"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b08adc90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b08ade20"/>
        <function-ref name="type" scoped="" ref="0x7f89b08ac020"/>
        <function-ref name="setType" scoped="" ref="0x7f89b08ac1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b08ac340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89b08ac4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89b08ac660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f89b08aa840" loc="64:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f89b08aa840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b08aabc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f89b0890ad0" loc="81:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f89b0890ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f89b0890e50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b088f020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b088f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f89b0886510" loc="86:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b0886510"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f89b0886890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0x7f89b087ae50" loc="44:../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f89b087ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f89b0879210"/>
        <function-ref name="suspend" scoped="" ref="0x7f89b08793a0"/>
        <function-ref name="resume" scoped="" ref="0x7f89b0879530"/>
        <function-ref name="run" scoped="" ref="0x7f89b08796c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f89b082d150" loc="38:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89b082d150"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b082d4f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7f89b082d680"/>
        <function-ref name="get" scoped="" ref="0x7f89b082d810"/>
        <function-ref name="set" scoped="" ref="0x7f89b082d9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f89b082e390" loc="37:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f89b082e390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f89b082e710"/>
        <function-ref name="insertNode" scoped="" ref="0x7f89b082e8a0"/>
        <function-ref name="getNode" scoped="" ref="0x7f89b082ea30"/>
        <function-ref name="evicted" scoped="" ref="0x7f89b082ebc0"/>
        <function-ref name="getIndex" scoped="" ref="0x7f89b082ed50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f89af1d8150" loc="43:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89af1d8150"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af1d84f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7f89af1d8680"/>
        <function-ref name="get" scoped="" ref="0x7f89af1d8810"/>
        <function-ref name="set" scoped="" ref="0x7f89af1d89a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f89af1d93d0" loc="42:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f89af1d93d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f89af1d9750"/>
        <function-ref name="insertNode" scoped="" ref="0x7f89af1d98e0"/>
        <function-ref name="getNode" scoped="" ref="0x7f89af1d9a70"/>
        <function-ref name="evicted" scoped="" ref="0x7f89af1d9c00"/>
        <function-ref name="getIndex" scoped="" ref="0x7f89af1d9d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af1dbd90" loc="41:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af1dbd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af1d9180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0x7f89b07fc4e0" loc="51:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0x7f89b07fc4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f89b07fc860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0x7f89b0813020" loc="47:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0x7f89b0813020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0x7f89b08133a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0x7f89b07fe0f0" loc="50:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f89b07fe0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89b07fe470"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f89b07fe600"/>
        <function-ref name="source" scoped="" ref="0x7f89b07fe790"/>
        <function-ref name="destination" scoped="" ref="0x7f89b07fe920"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b07feab0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b07fec40"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89b07fedd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0x7f89b0807cf0" loc="49:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0x7f89b0807cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0x7f89b08100a0"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0x7f89b0810230"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0x7f89b08103c0"/>
        <function-ref name="getTransmitTime" scoped="" ref="0x7f89b0810550"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0x7f89b08106e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f89b07dc340" loc="61:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b07dc340"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f89b07dc6c0"/>
        <function-ref name="wait" scoped="" ref="0x7f89b07dc850"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b07dc9e0"/>
        <function-ref name="isFree" scoped="" ref="0x7f89b07dcb70"/>
        <function-ref name="getNow" scoped="" ref="0x7f89b07dcd00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0x7f89b07d6960" loc="62:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0x7f89b07d6960"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b07d6ce0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b07d6e70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b07df030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b07df1c0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b07df350"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b07df4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f89b07dfab0" loc="64:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f89b07dfab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b07d4170"/>
        <function-ref name="clear" scoped="" ref="0x7f89b07d48a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b07dba00"/>
        <function-ref name="set" scoped="" ref="0x7f89b07d3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0x7f89b08237c0" loc="43:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f89b08237c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0823b40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b0823cd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b0823e60"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f89b0828020"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f89b08281b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0x7f89b0812990" loc="46:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0x7f89b0812990"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0x7f89b0812d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0x7f89b081a9c0" loc="44:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f89b081a9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f89b081ad40"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f89b0827020"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f89b08271b0"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f89b0827340"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f89b08274d0"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f89b0827660"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f89b08277f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f89b0827980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f89b07e31d0" loc="60:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89b07e31d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f89b07e3550"/>
        <function-ref name="getDSN" scoped="" ref="0x7f89b07e36e0"/>
        <function-ref name="setFCF" scoped="" ref="0x7f89b07e3870"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f89b07e3a00"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f89b07e3b90"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f89b07e3d20"/>
        <function-ref name="setDSN" scoped="" ref="0x7f89b0806020"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f89b08061b0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f89b0806340"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f89b08064d0"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f89b0806660"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f89b08067f0"/>
        <function-ref name="localAddr" scoped="" ref="0x7f89b0806980"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f89b0806c10"/>
        <function-ref name="localPan" scoped="" ref="0x7f89b0806da0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f89b07fd020"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f89b07fd1b0"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f89b07fd340"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f89b07fd4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b07fd660"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f89b07fd7f0"/>
        <function-ref name="getFCF" scoped="" ref="0x7f89b07fd980"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f89b07fdb10"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f89b07fdca0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f89b07fde30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0x7f89b0816e40" loc="45:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f89b0816e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f89b08221e0"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f89b0822370"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f89b0822500"/>
        <function-ref name="getSender" scoped="" ref="0x7f89b0822690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0x7f89b080c6b0" loc="48:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f89b080c6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f89b080ca30"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f89b080cbc0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f89b080cd50"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f89b0811020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f89b074e020" loc="41:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b074e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f89b074e3c0"/>
        <function-ref name="wait" scoped="" ref="0x7f89b074e550"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b074e6e0"/>
        <function-ref name="isFree" scoped="" ref="0x7f89b074e870"/>
        <function-ref name="getNow" scoped="" ref="0x7f89b074ea00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f89b074db60" loc="47:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89b074db60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f89b10b83a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f89b10b83a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f89b0f11180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b074a4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f89b074b4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89b074be60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b074b9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b074a9a0"/>
        <function-ref name="start" scoped="" ref="0x7f89b074c9b0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b074b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f89b074ecb0" loc="46:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f89b074ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f89b074d0a0"/>
        <function-ref name="suspend" scoped="" ref="0x7f89b074d230"/>
        <function-ref name="resume" scoped="" ref="0x7f89b074d3c0"/>
        <function-ref name="run" scoped="" ref="0x7f89b074d550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f89af1be300" loc="54:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f89af1be300"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f89af1be6a0"/>
        <function-ref name="wait" scoped="" ref="0x7f89af1be830"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af1be9c0"/>
        <function-ref name="isFree" scoped="" ref="0x7f89af1beb50"/>
        <function-ref name="getNow" scoped="" ref="0x7f89af1bece0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f89af1bd260" loc="59:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89af1bd260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f89b0f11180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89af1bab30"/>
        <function-ref name="fired" scoped="" ref="0x7f89af1bca60"/>
        <function-ref name="startAt" scoped="" ref="0x7f89af1ba4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89af1ba020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89af1b9020"/>
        <function-ref name="start" scoped="" ref="0x7f89af1bc090"/>
        <function-ref name="stop" scoped="" ref="0x7f89af1bc5a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f89af1b9410" loc="60:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f89af1b9410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f89af1b9790"/>
        <function-ref name="suspend" scoped="" ref="0x7f89af1b9920"/>
        <function-ref name="resume" scoped="" ref="0x7f89af1b9ab0"/>
        <function-ref name="run" scoped="" ref="0x7f89af1b9c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b069f8f0" loc="50:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b069f8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b069fc70"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b069fe00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b069e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b069e2b0" loc="51:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b069e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b069e630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f89b06a13a0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f89b06a13a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f89b06a1740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89b06a4720" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89b06a4720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b06a4aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b06a4c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b06a4dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b06a3020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b06a31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89b06a3530" loc="41:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89b06a3530"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b06a38d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b06a3a60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b06a3bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b06a3d80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b06a2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89b06a2b00" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89b06a2b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b06a1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b06a1a30" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b06a1a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b06a1db0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b069f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b069f1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b069f340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b069f4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b069f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89b069e8c0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89b069e8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89b069ec40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f89b069edd0"/>
        <function-ref name="source" scoped="" ref="0x7f89b069d020"/>
        <function-ref name="destination" scoped="" ref="0x7f89b069d1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b069d340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b069d4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89b069d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89b06a23a0" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89b06a23a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b06a2740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89b06a5020" loc="39:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89b06a5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89b06a53a0"/>
        <function-ref name="source" scoped="" ref="0x7f89b06a5530"/>
        <function-ref name="address" scoped="" ref="0x7f89b06a56c0"/>
        <function-ref name="destination" scoped="" ref="0x7f89b06a5850"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b06a59e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b06a5b70"/>
        <function-ref name="type" scoped="" ref="0x7f89b06a5d00"/>
        <function-ref name="setType" scoped="" ref="0x7f89b06a4020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b06a41b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89b06a4340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89b06a44d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89af19c8f0" loc="54:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89af19c8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af19cc70"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af19ce00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af19b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89af19b2b0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89af19b2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af19b630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f89af19d420" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f89af19d420"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f89af19d7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89af1a18b0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89af1a18b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af1a1c30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89af1a1dc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af1a0020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af1a01b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89af1a0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89af1a3360" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89af1a3360"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af1a36e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89af1a3870"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af1a3a00"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89af1a3b90"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89af1a3d20"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89af1a2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89af1a06c0" loc="45:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89af1a06c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af1a0a60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af1a0bf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af1a0d80"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af19f020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af19f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89af19fc90" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89af19fc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af19d0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89af19dab0" loc="53:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89af19dab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af19de30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89af19c020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af19c1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89af19c340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89af19c4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89af19c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89af19f530" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89af19f530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af19f8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89af19b8c0" loc="56:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89af19b8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89af19bc40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f89af19bdd0"/>
        <function-ref name="source" scoped="" ref="0x7f89af19a020"/>
        <function-ref name="destination" scoped="" ref="0x7f89af19a1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89af19a340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89af19a4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89af19a660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f89af19a8b0" loc="57:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f89af19a8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f89af19ac30"/>
        <function-ref name="changed" scoped="" ref="0x7f89af19adc0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f89af199020"/>
        <function-ref name="setAddress" scoped="" ref="0x7f89af1991b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89af1a2270" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89af1a2270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89af1a25f0"/>
        <function-ref name="source" scoped="" ref="0x7f89af1a2780"/>
        <function-ref name="address" scoped="" ref="0x7f89af1a2910"/>
        <function-ref name="destination" scoped="" ref="0x7f89af1a2aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89af1a2c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89af1a2dc0"/>
        <function-ref name="type" scoped="" ref="0x7f89af1a1020"/>
        <function-ref name="setType" scoped="" ref="0x7f89af1a11b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89af1a1340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89af1a14d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89af1a1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f89b06be260" loc="54:../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f89b06be260"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f89b06be5e0"/>
        <function-ref name="changed" scoped="" ref="0x7f89b06be770"/>
        <function-ref name="amGroup" scoped="" ref="0x7f89b06be900"/>
        <function-ref name="setAddress" scoped="" ref="0x7f89b06bea90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b0697310" loc="44:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b0697310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b0697690"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0697820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b06979b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f89b0697c00" loc="45:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f89b0697c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89b0687020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89b06871b0"/>
        <function-ref name="request" scoped="" ref="0x7f89b0687340"/>
        <function-ref name="granted" scoped="" ref="0x7f89b06874d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89b0687660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f89b0698880" loc="39:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f89b0698880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b0698c00"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0698d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0697020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f89b0622150" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f89b0622150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f89b06224f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f89b0622680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f89b06211f0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89b06211f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f89b0621590"/>
        <function-ref name="configure" scoped="" ref="0x7f89b0621720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f89b0623390" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f89b0623390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89b0623730"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89b06238c0"/>
        <function-ref name="request" scoped="" ref="0x7f89b0623a50"/>
        <function-ref name="granted" scoped="" ref="0x7f89b0623be0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89b0623d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f89b06228d0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f89b06228d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f89b0622c50"/>
        <function-ref name="userId" scoped="" ref="0x7f89b0622de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af14b460" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af14b460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af14b7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f89af14ba70" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f89af14ba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f89af14bdf0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f89af14a020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f89af14a1b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89af14a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f89af148850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f89af148850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f89af148bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f89af148d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f89af147910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89af147910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f89af147cb0"/>
        <function-ref name="configure" scoped="" ref="0x7f89af147e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f89af146120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f89af146120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f89af1464a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f89af146630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f89af1467c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89af146950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f89af1499d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f89af1499d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89af149d70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89af148020"/>
        <function-ref name="request" scoped="" ref="0x7f89af1481b0"/>
        <function-ref name="granted" scoped="" ref="0x7f89af148340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89af1484d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f89af147020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f89af147020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f89af1473a0"/>
        <function-ref name="userId" scoped="" ref="0x7f89af147530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f89af146c20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f89af146c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af144020"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af1441b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b05e92b0" loc="49:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b05e92b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b05e9630"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b05e97c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b05e9950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b05e9be0" loc="50:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b05e9be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b05e8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f89b05efd30" loc="42:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f89b05efd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f89b05ed0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89b061ee00" loc="39:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89b061ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b05f01c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b05f0350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b05f04e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b05f0670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b05f0800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7f89b05ea470" loc="48:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b05ea470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b05ea7f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b05ea980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b05eab10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b05eaca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b05eae30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b05e9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f89b05ed390" loc="47:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89b05ed390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f89b05ed710"/>
        <function-ref name="getDSN" scoped="" ref="0x7f89b05ed8a0"/>
        <function-ref name="setFCF" scoped="" ref="0x7f89b05eda30"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f89b05edbc0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f89b05edd50"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f89b05ec020"/>
        <function-ref name="setDSN" scoped="" ref="0x7f89b05ec1b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f89b05ec340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f89b05ec4d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f89b05ec660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f89b05ec7f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f89b05ec980"/>
        <function-ref name="localAddr" scoped="" ref="0x7f89b05ecb10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f89b05ecda0"/>
        <function-ref name="localPan" scoped="" ref="0x7f89b05eb020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f89b05eb1b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f89b05eb340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f89b05eb4d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f89b05eb660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b05eb7f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f89b05eb980"/>
        <function-ref name="getFCF" scoped="" ref="0x7f89b05ebb10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f89b05ebca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f89b05ebe30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f89b05ea020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f89b05f0a50" loc="40:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f89b05f0a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b05f0dd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89b05ef020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b05ef1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b05ef340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b05ef4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f89b05ef760" loc="41:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f89b05ef760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b05efae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b05ac4a0" loc="69:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b05ac4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b05ac820"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b05ac9b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b05acb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b05acdd0" loc="70:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b05acdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b05ab180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f89b05af730" loc="57:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89b05af730"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b05afab0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b05afc40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b05afdd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b05ae020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b05ae1b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b05ae340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0x7f89b05ad020" loc="62:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0x7f89b05ad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b05ad3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b05ab410" loc="71:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b05ab410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b05ab790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b05ab920"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b05abab0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b05abc40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b05abdd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b05aa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0x7f89b05ae5d0" loc="61:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0x7f89b05ae5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b05ae950"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b05aeae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b05aec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f89b05e27c0" loc="55:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f89b05e27c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b05e2b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b05e2cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b05e2e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f89b05af120" loc="56:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f89b05af120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b05af4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0x7f89b05ad630" loc="63:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0x7f89b05ad630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b05ad9b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b05adb40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b05adcd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b05ade60"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b05ac020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b05ac1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b050c440" loc="48:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b050c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b050c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f89b0510dd0" loc="40:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89b0510dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f89b050f180"/>
        <function-ref name="address" scoped="" ref="0x7f89b050f310"/>
        <function-ref name="destination" scoped="" ref="0x7f89b050f4a0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89b050f630"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89b050f7c0"/>
        <function-ref name="pan" scoped="" ref="0x7f89b050f950"/>
        <function-ref name="setPan" scoped="" ref="0x7f89b050fae0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b050fc70"/>
        <function-ref name="localPan" scoped="" ref="0x7f89b050fe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b050e080" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b050e080"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b050e400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b050e590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b050e720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b050e8b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b050ea40"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b050ebd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f89b0513e00" loc="39:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89b0513e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f89b05121c0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f89b0512350"/>
        <function-ref name="setFCF" scoped="" ref="0x7f89b05124e0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f89b0512670"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f89b0512800"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f89b0512990"/>
        <function-ref name="setDSN" scoped="" ref="0x7f89b0512b20"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f89b0512cb0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f89b0512e40"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f89b0511020"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f89b05111b0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f89b0511340"/>
        <function-ref name="localAddr" scoped="" ref="0x7f89b05114d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f89b0511760"/>
        <function-ref name="localPan" scoped="" ref="0x7f89b05118f0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f89b0511a80"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f89b0511c10"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f89b0511da0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f89b0510020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89b05101b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f89b0510340"/>
        <function-ref name="getFCF" scoped="" ref="0x7f89b05104d0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f89b0510660"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f89b05107f0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f89b0510980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b050d500" loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b050d500"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b050d880"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b050da10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b050dba0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b050dd30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b050c020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b050c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89b050ee60" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89b050ee60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b050d210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89af0d7440" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89af0d7440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af0d77c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f89af0dc2e0" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f89af0dc2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f89af0dc660"/>
        <function-ref name="address" scoped="" ref="0x7f89af0dc7f0"/>
        <function-ref name="destination" scoped="" ref="0x7f89af0dc980"/>
        <function-ref name="setSource" scoped="" ref="0x7f89af0dcb10"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89af0dcca0"/>
        <function-ref name="pan" scoped="" ref="0x7f89af0dce30"/>
        <function-ref name="setPan" scoped="" ref="0x7f89af0db020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89af0db1b0"/>
        <function-ref name="localPan" scoped="" ref="0x7f89af0db340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89af0db590" loc="43:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89af0db590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af0db910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89af0dbaa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af0dbc30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89af0dbdc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89af0da020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89af0da1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f89af0df020" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f89af0df020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f89af0df3a0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f89af0df530"/>
        <function-ref name="setFCF" scoped="" ref="0x7f89af0df6c0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f89af0df850"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f89af0df9e0"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f89af0dfb70"/>
        <function-ref name="setDSN" scoped="" ref="0x7f89af0dfd00"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f89af0de020"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f89af0de1b0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f89af0de340"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f89af0de4d0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f89af0de660"/>
        <function-ref name="localAddr" scoped="" ref="0x7f89af0de7f0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f89af0dea80"/>
        <function-ref name="localPan" scoped="" ref="0x7f89af0dec10"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f89af0deda0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f89af0dd020"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f89af0dd1b0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f89af0dd340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89af0dd4d0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f89af0dd660"/>
        <function-ref name="getFCF" scoped="" ref="0x7f89af0dd7f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f89af0dd980"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f89af0ddb10"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f89af0ddca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f89af0daa70" loc="49:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f89af0daa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f89af0dadf0"/>
        <function-ref name="changed" scoped="" ref="0x7f89af0d8020"/>
        <function-ref name="amGroup" scoped="" ref="0x7f89af0d81b0"/>
        <function-ref name="setAddress" scoped="" ref="0x7f89af0d8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89af0da440" loc="44:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89af0da440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af0da7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89af0d85d0" loc="50:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89af0d85d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af0d8950"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89af0d8ae0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af0d8c70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89af0d8e00"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89af0d7020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89af0d71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b04d9a70" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b04d9a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b04d9df0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b04d7020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b04d71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b04d7440" loc="46:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b04d7440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b04d77c0"/>
        <function-ref name="header" scoped="" ref="0x7f89b04d7950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f89b04d5400" loc="51:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89b04d5400"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b04d5780"/>
        <function-ref name="clearAll" scoped="" ref="0x7f89b04d5910"/>
        <function-ref name="get" scoped="" ref="0x7f89b04d5aa0"/>
        <function-ref name="set" scoped="" ref="0x7f89b04d5c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89b04da840" loc="40:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89b04da840"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b04dabc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b04dad50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b04d9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89b04d7be0" loc="48:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89b04d7be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f89b04d6020"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f89b04d61b0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f89b04d6340"/>
        <function-ref name="getSender" scoped="" ref="0x7f89b04d64d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89b04d9270" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89b04d9270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b04d95f0"/>
        <function-ref name="header" scoped="" ref="0x7f89b04d9780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f89b04d6720" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f89b04d6720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f89b04d6aa0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f89b04d6c30"/>
        <function-ref name="getNode" scoped="" ref="0x7f89b04d6dc0"/>
        <function-ref name="evicted" scoped="" ref="0x7f89b04d5020"/>
        <function-ref name="getIndex" scoped="" ref="0x7f89b04d51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89af085310" loc="49:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89af085310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af085690"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af085820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af0859b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89af085c40" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89af085c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af084020"/>
        <function-ref name="header" scoped="" ref="0x7f89af0841b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f89af083ab0" loc="54:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f89af083ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af083e30"/>
        <function-ref name="clearAll" scoped="" ref="0x7f89af082020"/>
        <function-ref name="get" scoped="" ref="0x7f89af0821b0"/>
        <function-ref name="set" scoped="" ref="0x7f89af082340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89af0879b0" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89af0879b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af087d30"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af086020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af0861b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f89af084e80" loc="53:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f89af084e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f89af083220"/>
        <function-ref name="insertNode" scoped="" ref="0x7f89af0833b0"/>
        <function-ref name="getNode" scoped="" ref="0x7f89af083540"/>
        <function-ref name="evicted" scoped="" ref="0x7f89af0836d0"/>
        <function-ref name="getIndex" scoped="" ref="0x7f89af083860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89af086400" loc="42:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89af086400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af086780"/>
        <function-ref name="header" scoped="" ref="0x7f89af086910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af086b60" loc="44:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af086b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af085020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0x7f89af084400" loc="52:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f89af084400"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f89af084780"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f89af084910"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f89af084aa0"/>
        <function-ref name="getSender" scoped="" ref="0x7f89af084c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b04c3950" loc="85:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b04c3950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b04c3cd0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b04c3e60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b04c2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b04c22b0" loc="86:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b04c22b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b04c2630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0x7f89b04c0d90" loc="93:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f89b04c0d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89b04bf180"/>
        <function-ref name="noAck" scoped="" ref="0x7f89b04bf310"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89b04bf4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89b04d0e40" loc="77:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89b04d0e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b04c51e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b04c5370"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b04c5500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b04c4a10" loc="80:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b04c4a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b04c4d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b04c3020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b04c31b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b04c3340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b04c34d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b04c3660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b04c28c0" loc="87:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b04c28c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b04c2c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b04c2dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b04c1020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b04c11b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b04c1340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b04c14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0x7f89b04c0100" loc="92:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f89b04c0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f89b04c0480"/>
        <function-ref name="setRetries" scoped="" ref="0x7f89b04c0610"/>
        <function-ref name="getRetries" scoped="" ref="0x7f89b04c07a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f89b04c0930"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f89b04c0ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89b04c5790" loc="78:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89b04c5790"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b04c5b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f89b04c1720" loc="88:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b04c1720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89b04c1aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f89b04c1c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89b04c1dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f89b04c5d60" loc="79:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f89b04c5d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f89b04c4180"/>
        <function-ref name="setRetries" scoped="" ref="0x7f89b04c4310"/>
        <function-ref name="getRetries" scoped="" ref="0x7f89b04c44a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f89b04c4630"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f89b04c47c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89b04ba880" loc="39:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89b04ba880"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b04bac00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b04bad90"/>
        <function-ref name="start" scoped="" ref="0x7f89b04a5020"/>
        <function-ref name="stop" scoped="" ref="0x7f89b04a51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b04a28c0" loc="49:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b04a28c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b04a2c40"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b04a2dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b04a0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b04a02b0" loc="50:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b04a02b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b04a0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89b04a5440" loc="40:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89b04a5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b04a57c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b04a5950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b04a5ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b04a43d0" loc="42:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b04a43d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b04a4750"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b04a48e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b04a4a70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b04a4c00"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b04a4d90"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b04a3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f89b04a3270" loc="44:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f89b04a3270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f89b04a35f0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f89b04a3780"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f89b04a3910"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f89b04a3aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f89b04a3d90" loc="48:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f89b04a3d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b04a2180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b04a2310"/>
        <function-ref name="start" scoped="" ref="0x7f89b04a24a0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b04a2630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89b04a5d70" loc="41:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89b04a5d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b04a4180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b04a08c0" loc="51:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b04a08c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b04a0c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b04a0dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b049f020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b049f1b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b049f340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b049f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f89af060640" loc="37:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f89af060640"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f89af0609c0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f89af060b50"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f89af060ce0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f89af060e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89b0431a10" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89b0431a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b0431d90"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b042f020"/>
        <function-ref name="start" scoped="" ref="0x7f89b042f1b0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b042f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f89b042daa0" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f89b042daa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f89b042de20"/>
        <function-ref name="turnOn" scoped="" ref="0x7f89b042c020"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b042c1b0"/>
        <function-ref name="done" scoped="" ref="0x7f89b042c340"/>
        <function-ref name="standby" scoped="" ref="0x7f89b042c4d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b042c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89b042f5d0" loc="40:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89b042f5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b042f950"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b042fae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b042fc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f89b042b270" loc="49:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89b042b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b042b5f0"/>
        <function-ref name="header" scoped="" ref="0x7f89b042b780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89b042e020" loc="41:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89b042e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b042e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f89b042c8b0" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89b042c8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b042cc30"/>
        <function-ref name="ready" scoped="" ref="0x7f89b042cdc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b042b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f89b042e5f0" loc="42:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f89b042e5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f89b042e970"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b042eb00"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b042ec90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f89b042d020" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f89b042d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f89b042d3a0"/>
        <function-ref name="suspend" scoped="" ref="0x7f89b042d530"/>
        <function-ref name="resume" scoped="" ref="0x7f89b042d6c0"/>
        <function-ref name="run" scoped="" ref="0x7f89b042d850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89af059bf0" loc="43:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89af059bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89af057020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89af0571b0"/>
        <function-ref name="start" scoped="" ref="0x7f89af057340"/>
        <function-ref name="stop" scoped="" ref="0x7f89af0574d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f89af057760" loc="44:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f89af057760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af057ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f89af055670" loc="52:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f89af055670"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f89af0559f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f89af055b80"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89af055d10"/>
        <function-ref name="done" scoped="" ref="0x7f89af054020"/>
        <function-ref name="standby" scoped="" ref="0x7f89af0541b0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89af054340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89af057d70" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89af057d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af056180"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af056310"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af0564a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x7f89af052940" loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x7f89af052940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af052cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af052e50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f89af053950" loc="55:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89af053950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af053cd0"/>
        <function-ref name="header" scoped="" ref="0x7f89af053e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0x7f89af050160" loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0x7f89af050160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af0504e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af050670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89af056730" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89af056730"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af056ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0x7f89af052160" loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0x7f89af052160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af0524e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af052670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f89af053060" loc="54:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89af053060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af0533e0"/>
        <function-ref name="ready" scoped="" ref="0x7f89af053570"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af053700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f89af056d00" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f89af056d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f89af0550a0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89af055230"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89af0553c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f89af054590" loc="53:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f89af054590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f89af054910"/>
        <function-ref name="suspend" scoped="" ref="0x7f89af054aa0"/>
        <function-ref name="resume" scoped="" ref="0x7f89af054c30"/>
        <function-ref name="run" scoped="" ref="0x7f89af054dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b03d6310" loc="44:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b03d6310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b03d6690"/>
        <function-ref name="ready" scoped="" ref="0x7f89b03d6820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b03d69b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b03d6c40" loc="45:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b03d6c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b03d4020"/>
        <function-ref name="header" scoped="" ref="0x7f89b03d41b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f89b03d4400" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b03d4400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f89b03d4780"/>
        <function-ref name="wait" scoped="" ref="0x7f89b03d4910"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b03d4aa0"/>
        <function-ref name="isFree" scoped="" ref="0x7f89b03d4c30"/>
        <function-ref name="getNow" scoped="" ref="0x7f89b03d4dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89b03d30a0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89b03d30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f89b03d3420"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f89b03d35b0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f89b03d3740"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f89b03d38d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89b03d7ac0" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89b03d7ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b03d7e40"/>
        <function-ref name="header" scoped="" ref="0x7f89b03d6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f89b03d71d0" loc="39:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89b03d71d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b03d7550"/>
        <function-ref name="ready" scoped="" ref="0x7f89b03d76e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b03d7870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89af018820" loc="47:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89af018820"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af018ba0"/>
        <function-ref name="ready" scoped="" ref="0x7f89af018d30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af017020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89af0172b0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89af0172b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af017630"/>
        <function-ref name="header" scoped="" ref="0x7f89af0177c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f89af017a10" loc="49:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f89af017a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f89af017d90"/>
        <function-ref name="wait" scoped="" ref="0x7f89af016020"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af0161b0"/>
        <function-ref name="isFree" scoped="" ref="0x7f89af016340"/>
        <function-ref name="getNow" scoped="" ref="0x7f89af0164d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f89af016720" loc="50:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f89af016720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f89af016aa0"/>
        <function-ref name="rand32" scoped="" ref="0x7f89af016c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89af015020" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89af015020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f89af0153a0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f89af015530"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f89af0156c0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f89af015850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89af018020" loc="43:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89af018020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af0183a0"/>
        <function-ref name="header" scoped="" ref="0x7f89af018530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f89af019660" loc="42:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89af019660"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af0199e0"/>
        <function-ref name="ready" scoped="" ref="0x7f89af019b70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af019d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0x7f89af015b20" loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0x7f89af015b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af013020"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af0131b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f89b03eca20" loc="46:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f89b03eca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f89b03ecda0"/>
        <function-ref name="rand32" scoped="" ref="0x7f89b03e9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f89b03ea920" loc="45:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f89b03ea920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b03ec560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b03f09a0" loc="44:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b03f09a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b03f0d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f89b03e5a20" loc="48:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f89b03e5a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f89b03e5da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f89b03e4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f89b03e6940" loc="47:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f89b03e6940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b03e5560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b03e6080" loc="46:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b03e6080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b03e6400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b03a2020" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b03a2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b03a23a0"/>
        <function-ref name="ready" scoped="" ref="0x7f89b03a2530"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b03a26c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b03a2950" loc="50:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b03a2950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b03a2cd0"/>
        <function-ref name="header" scoped="" ref="0x7f89b03a2e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f89b03a10e0" loc="51:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b03a10e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f89b03a1460"/>
        <function-ref name="wait" scoped="" ref="0x7f89b03a15f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b03a1780"/>
        <function-ref name="isFree" scoped="" ref="0x7f89b03a1910"/>
        <function-ref name="getNow" scoped="" ref="0x7f89b03a1aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0x7f89b03a0e60" loc="54:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f89b03a0e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b039f210"/>
        <function-ref name="get" scoped="" ref="0x7f89b039f3a0"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b039f530"/>
        <function-ref name="set" scoped="" ref="0x7f89b039f6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89b03a1d30" loc="53:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89b03a1d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f89b03a00e0"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f89b03a0270"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f89b03a0400"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f89b03a0590"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f89b03a0720"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f89b03a08b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f89b03a0a40"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f89b03a0bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89b03ced60" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89b03ced60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b03a3180"/>
        <function-ref name="header" scoped="" ref="0x7f89b03a3310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f89b03ce470" loc="42:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89b03ce470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b03ce7f0"/>
        <function-ref name="ready" scoped="" ref="0x7f89b03ce980"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b03ceb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f89b03a3560" loc="44:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89b03a3560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89b03a38e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f89b03a3a70"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89b03a3c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89b0386ac0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89b0386ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b0386e40"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b0385020"/>
        <function-ref name="start" scoped="" ref="0x7f89b03851b0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0385340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f89b0382400" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f89b0382400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f89b0382780"/>
        <function-ref name="request" scoped="" ref="0x7f89b0382910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b037db00" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b037db00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b037de80"/>
        <function-ref name="ready" scoped="" ref="0x7f89b037c030"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b037c1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b037c450" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b037c450"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b037c7d0"/>
        <function-ref name="header" scoped="" ref="0x7f89b037c960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f89b0384470" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f89b0384470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f89b03847f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f89b0384980"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b0384b10"/>
        <function-ref name="done" scoped="" ref="0x7f89b0384ca0"/>
        <function-ref name="standby" scoped="" ref="0x7f89b0384e30"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b0383020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b0382b60" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b0382b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0381020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b03811b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0381340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b03814d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b0381660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b03817f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f89b037ebe0" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f89b037ebe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f89b037d0a0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f89b037d230"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b037d3c0"/>
        <function-ref name="done" scoped="" ref="0x7f89b037d550"/>
        <function-ref name="standby" scoped="" ref="0x7f89b037d6e0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b037d870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f89b0381a80" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f89b0381a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f89b0381e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89b0383b60" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89b0383b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0382020"/>
        <function-ref name="header" scoped="" ref="0x7f89b03821b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f89b037e5d0" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f89b037e5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b037e950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f89b0380120" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f89b0380120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b03804a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b0380630"/>
        <function-ref name="start" scoped="" ref="0x7f89b03807c0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0380950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b037b440" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b037b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b037b7c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b037b950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b037bae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b037bc70"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b037be00"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b037a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f89b0385e80" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f89b0385e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0384220"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89b037a2b0" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89b037a2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f89b037a630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f89b0380be0" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f89b0380be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b037e020"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b037e1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b037e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f89b0383270" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89b0383270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b03835f0"/>
        <function-ref name="ready" scoped="" ref="0x7f89b0383780"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0383910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f89b037cbf0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f89b037cbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f89b037b020"/>
        <function-ref name="request" scoped="" ref="0x7f89b037b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f89b0385590" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f89b0385590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b0385910"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0385aa0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0385c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f89b0169b00" loc="50:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f89b0169b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0169e80"/>
        <function-ref name="get" scoped="" ref="0x7f89b0168030"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b01681c0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0168350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b016dc20" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b016dc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b016b020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b016b1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b016b340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b016b4d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b016b660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b016b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b016acd0" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b016acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b01690a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b0169230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b01693c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b0169550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b01696e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b0169870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f89b016f020" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89b016f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b016e5a0"/>
        <function-ref name="clear" scoped="" ref="0x7f89b016ecd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b016fe30"/>
        <function-ref name="set" scoped="" ref="0x7f89b016d460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f89b016bc00" loc="48:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b016bc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b016a8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f89b0173020" loc="41:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89b0173020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b01725a0"/>
        <function-ref name="clear" scoped="" ref="0x7f89b0172cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b0173e30"/>
        <function-ref name="set" scoped="" ref="0x7f89b0170460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f89aefc4e60" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f89aefc4e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aefc3210"/>
        <function-ref name="get" scoped="" ref="0x7f89aefc33a0"/>
        <function-ref name="setValue" scoped="" ref="0x7f89aefc3530"/>
        <function-ref name="set" scoped="" ref="0x7f89aefc36c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89aefc4020" loc="44:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89aefc4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aefc43a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89aefc4530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aefc46c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89aefc4850"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89aefc49e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89aefc4b70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89aefc0cd0" loc="54:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89aefc0cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aefbf0a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89aefbf230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aefbf3c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89aefbf550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89aefbf6e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89aefbf870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f89aefc82a0" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89aefc82a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89aefc7800"/>
        <function-ref name="clear" scoped="" ref="0x7f89aefc5020"/>
        <function-ref name="isValid" scoped="" ref="0x7f89aefc70d0"/>
        <function-ref name="set" scoped="" ref="0x7f89aefc5750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f89aefc3a70" loc="51:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89aefc3a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89aefc26f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f89aefc2c40" loc="52:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f89aefc2c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89aefc08a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f89aefcb360" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89aefcb360"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89aefca8e0"/>
        <function-ref name="clear" scoped="" ref="0x7f89aefc9090"/>
        <function-ref name="isValid" scoped="" ref="0x7f89aefca1b0"/>
        <function-ref name="set" scoped="" ref="0x7f89aefc97c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f89b0323080" loc="20:../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f89b0323080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b0323cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f89b031fa40" loc="46:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f89b031fa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b031a020"/>
        <function-ref name="fired" scoped="" ref="0x7f89b031d510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89b031b300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89b031de10"/>
        <function-ref name="getdt" scoped="" ref="0x7f89b031a920"/>
        <function-ref name="gett0" scoped="" ref="0x7f89b031a4a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b031d990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89b031e670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89b031b910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89b031eb40"/>
        <function-ref name="stop" scoped="" ref="0x7f89b031d090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f89b0318020" loc="47:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f89b0318020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b0318c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0322b40" loc="45:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0322b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b031f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7f89b030f850" loc="29:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7f89b030f850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b030e6a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89b030d090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89b030eb60"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b030d550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b0316790" loc="27:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b0316790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0316b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7f89b03131d0" loc="28:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7f89b03131d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0311b30"/>
        <function-ref name="fired" scoped="" ref="0x7f89b03129f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89b03114e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b0311020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b030f020"/>
        <function-ref name="start" scoped="" ref="0x7f89b0312020"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0312530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89b021cd40" loc="61:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89b021cd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0219670"/>
        <function-ref name="fired" scoped="" ref="0x7f89b021a590"/>
        <function-ref name="startAt" scoped="" ref="0x7f89b0219020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b021aa50"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b0219b30"/>
        <function-ref name="start" scoped="" ref="0x7f89b021bba0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b021a0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89b021c530" loc="60:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89b021c530"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f89b10b8020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f89b10b8020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b021c8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89b0217180" loc="62:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89b0217180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b0216020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89b02169a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89b02164e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b0216e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x7f89aef81e20" loc="66:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f89aef81e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f89aef801c0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f89aef80350"/>
        <function-ref name="getControlA" scoped="" ref="0x7f89aef804e0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f89aef80670"/>
        <function-ref name="setControlB" scoped="" ref="0x7f89aef80800"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f89aef80990"/>
        <function-ref name="getControlB" scoped="" ref="0x7f89aef80b20"/>
        <function-ref name="setControlA" scoped="" ref="0x7f89aef80cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89aef8d4b0" loc="61:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89aef8d4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89aef8adb0"/>
        <function-ref name="fired" scoped="" ref="0x7f89aef8bda0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89aef8a760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89aef8a2a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89aef892a0"/>
        <function-ref name="start" scoped="" ref="0x7f89aef8b3d0"/>
        <function-ref name="stop" scoped="" ref="0x7f89aef8b8e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89aef8ec20" loc="60:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89aef8ec20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89aef8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89aef898d0" loc="62:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89aef898d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89aef88780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89aef86150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89aef88c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f89aef86610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x7f89aef7b450" loc="68:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f89aef7b450"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f89aef7b7d0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f89aef7b960"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f89aef7baf0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f89aef7bc80"/>
        <function-ref name="countBusy" scoped="" ref="0x7f89aef7be10"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f89aef7a020"/>
        <function-ref name="getAssr" scoped="" ref="0x7f89aef7a1b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f89aef7a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x7f89aef7f0a0" loc="67:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f89aef7f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89aef7da10"/>
        <function-ref name="fired" scoped="" ref="0x7f89aef7e6c0"/>
        <function-ref name="get" scoped="" ref="0x7f89aef7fcd0"/>
        <function-ref name="reset" scoped="" ref="0x7f89aef7eb80"/>
        <function-ref name="isOn" scoped="" ref="0x7f89aef7b020"/>
        <function-ref name="set" scoped="" ref="0x7f89aef7e1b0"/>
        <function-ref name="start" scoped="" ref="0x7f89aef7d090"/>
        <function-ref name="stop" scoped="" ref="0x7f89aef7d550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f89aef86bc0" loc="65:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89aef86bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89aef81020"/>
        <function-ref name="test" scoped="" ref="0x7f89aef83590"/>
        <function-ref name="get" scoped="" ref="0x7f89aef85820"/>
        <function-ref name="setScale" scoped="" ref="0x7f89aef814e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f89aef819f0"/>
        <function-ref name="reset" scoped="" ref="0x7f89aef84720"/>
        <function-ref name="overflow" scoped="" ref="0x7f89aef84260"/>
        <function-ref name="isOn" scoped="" ref="0x7f89aef83a50"/>
        <function-ref name="set" scoped="" ref="0x7f89aef85ce0"/>
        <function-ref name="start" scoped="" ref="0x7f89aef84be0"/>
        <function-ref name="stop" scoped="" ref="0x7f89aef830d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f89b02902b0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b02902b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f89b0290630"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f89b02907c0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f89b0290950"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f89b0290ae0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f89b0290c70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f89b0290e00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f89b028f020"/>
        <function-ref name="setControlA" scoped="" ref="0x7f89b028f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f89b028bb30" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f89b028bb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f89b028a020"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f89b028a1b0"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f89b028a340"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f89b028a4d0"/>
        <function-ref name="countBusy" scoped="" ref="0x7f89b028a660"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f89b028a7f0"/>
        <function-ref name="getAssr" scoped="" ref="0x7f89b028a980"/>
        <function-ref name="setAssr" scoped="" ref="0x7f89b028ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f89b028f6b0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f89b028f6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89b028b110"/>
        <function-ref name="fired" scoped="" ref="0x7f89b028eda0"/>
        <function-ref name="get" scoped="" ref="0x7f89b028e3d0"/>
        <function-ref name="reset" scoped="" ref="0x7f89b028c2a0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b028b5d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b028e890"/>
        <function-ref name="start" scoped="" ref="0x7f89b028c760"/>
        <function-ref name="stop" scoped="" ref="0x7f89b028cc20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89b0298e20" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89b0298e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89b0291350"/>
        <function-ref name="test" scoped="" ref="0x7f89b02929a0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0295ac0"/>
        <function-ref name="setScale" scoped="" ref="0x7f89b0291810"/>
        <function-ref name="getScale" scoped="" ref="0x7f89b0291d20"/>
        <function-ref name="reset" scoped="" ref="0x7f89b02949f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b0294530"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0292e60"/>
        <function-ref name="set" scoped="" ref="0x7f89b0294020"/>
        <function-ref name="start" scoped="" ref="0x7f89b0292020"/>
        <function-ref name="stop" scoped="" ref="0x7f89b02924e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f89b0280570" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f89b0280570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f89b02808f0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f89b0280a80"/>
        <function-ref name="getControlA" scoped="" ref="0x7f89b0280c10"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f89b0280da0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f89b027e020"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f89b027e1b0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f89b027e340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f89b027e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f89b027bcb0" loc="85:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f89b027bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f89b02790a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f89b0279460" loc="86:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f89b0279460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f89b02797e0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f89b0279970"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f89b0279b00"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f89b0279c90"/>
        <function-ref name="countBusy" scoped="" ref="0x7f89b0279e20"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f89b0278020"/>
        <function-ref name="getAssr" scoped="" ref="0x7f89b02781b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f89b0278340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f89b027e9d0" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f89b027e9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89b027b350"/>
        <function-ref name="fired" scoped="" ref="0x7f89b027c020"/>
        <function-ref name="get" scoped="" ref="0x7f89b027d630"/>
        <function-ref name="reset" scoped="" ref="0x7f89b027c4e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b027b810"/>
        <function-ref name="set" scoped="" ref="0x7f89b027daf0"/>
        <function-ref name="start" scoped="" ref="0x7f89b027c9a0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b027ce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89b0285060" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89b0285060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89b02814e0"/>
        <function-ref name="test" scoped="" ref="0x7f89b0282a10"/>
        <function-ref name="get" scoped="" ref="0x7f89b0285c90"/>
        <function-ref name="setScale" scoped="" ref="0x7f89b02819a0"/>
        <function-ref name="getScale" scoped="" ref="0x7f89b0280020"/>
        <function-ref name="reset" scoped="" ref="0x7f89b0283b80"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b02836c0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89b0281020"/>
        <function-ref name="set" scoped="" ref="0x7f89b02831b0"/>
        <function-ref name="start" scoped="" ref="0x7f89b0282090"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0282550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f89b01e3490" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7f89b01e3490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89b01e3810"/>
        <function-ref name="runTask" scoped="" ref="0x7f89b01e39a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f89b01e71d0" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89b01e71d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b01e5b30"/>
        <function-ref name="fired" scoped="" ref="0x7f89b01e69f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89b01e54e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b01e5020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b01e3020"/>
        <function-ref name="start" scoped="" ref="0x7f89b01e6020"/>
        <function-ref name="stop" scoped="" ref="0x7f89b01e6530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89b01edd60" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89b01edd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b01e8220"/>
        <function-ref name="fired" scoped="" ref="0x7f89b01eb7d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89b01ea590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89b01ea110"/>
        <function-ref name="getdt" scoped="" ref="0x7f89b01e8b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f89b01e86a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b01ebc50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89b01ec980"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89b01eaba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89b01ece50"/>
        <function-ref name="stop" scoped="" ref="0x7f89b01eb350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f89b0193a00" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7f89b0193a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89b0193d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f89b0192020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f89b0198640" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7f89b0198640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0194c40"/>
        <function-ref name="fired" scoped="" ref="0x7f89b01961e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89b0194020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89b0196ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f89b0193590"/>
        <function-ref name="gett0" scoped="" ref="0x7f89b0193110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b0196660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89b0197390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89b0194630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89b0197860"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0197d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89b019e150" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89b019e150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b019a700"/>
        <function-ref name="fired" scoped="" ref="0x7f89b019dc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89b019ba50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89b019b5b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f89b0198090"/>
        <function-ref name="gett0" scoped="" ref="0x7f89b019aba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b019b110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89b019ed60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89b019a0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89b019d2a0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b019d790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f89b0190790" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f89b0190790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b018f3f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f89b018fa60" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89b018fa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b0185890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89b0183260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89b0185d50"/>
        <function-ref name="overflow" scoped="" ref="0x7f89b0183720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f89b017c2e0" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f89b017c2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b0178870"/>
        <function-ref name="fired" scoped="" ref="0x7f89b017be40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89b017ac00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89b017a780"/>
        <function-ref name="getdt" scoped="" ref="0x7f89b01771e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f89b0178cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b017a300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89b017b020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89b0178260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89b017b4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b017b9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b0163590" loc="43:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b0163590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0163910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b0163aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0163c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b0163dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b0143020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b01431b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b01434a0" loc="48:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b01434a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0143820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b01439b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0143b40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b0143cd0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b0143e60"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b0142020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x7f89b01649b0" loc="42:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x7f89b01649b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0164d50"/>
        <function-ref name="get" scoped="" ref="0x7f89b0163020"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b01631b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0163340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89b01400e0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89b01400e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b0140460"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b01405f0"/>
        <function-ref name="start" scoped="" ref="0x7f89b0140780"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0140910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f89b013cb60" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f89b013cb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f89b013b020"/>
        <function-ref name="request" scoped="" ref="0x7f89b013b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89b0136440" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89b0136440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b01367c0"/>
        <function-ref name="ready" scoped="" ref="0x7f89b0136950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0136ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89b0136d70" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89b0136d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0135180"/>
        <function-ref name="header" scoped="" ref="0x7f89b0135310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f89b013eb60" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f89b013eb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f89b013d020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f89b013d1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b013d340"/>
        <function-ref name="done" scoped="" ref="0x7f89b013d4d0"/>
        <function-ref name="standby" scoped="" ref="0x7f89b013d660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b013d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b013b400" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b013b400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b013b780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b013b910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b013baa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b013bc30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b013bdc0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b013a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f89b0137410" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f89b0137410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f89b0137890"/>
        <function-ref name="turnOn" scoped="" ref="0x7f89b0137a20"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b0137bb0"/>
        <function-ref name="done" scoped="" ref="0x7f89b0137d40"/>
        <function-ref name="standby" scoped="" ref="0x7f89b0136020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b01361b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f89b013a2b0" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f89b013a2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f89b013a630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89b013c400" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89b013c400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b013c780"/>
        <function-ref name="header" scoped="" ref="0x7f89b013c910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f89b0139d70" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f89b0139d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0137180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f89b013a920" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f89b013a920"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89b013aca0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89b013ae30"/>
        <function-ref name="start" scoped="" ref="0x7f89b0139020"/>
        <function-ref name="stop" scoped="" ref="0x7f89b01391b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89b0135d40" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89b0135d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b01340e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b0134270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0134400"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b0134590"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b0134720"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b01348b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f89b013e590" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f89b013e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b013e910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89b0134b40" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89b0134b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f89b0133020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f89b0139440" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f89b0139440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b01397c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b0139950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b0139ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f89b013da40" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89b013da40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b013ddc0"/>
        <function-ref name="ready" scoped="" ref="0x7f89b013c020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b013c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f89b01355a0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f89b01355a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f89b0135920"/>
        <function-ref name="request" scoped="" ref="0x7f89b0135ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f89b0140b60" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f89b0140b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b013e020"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b013e1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b013e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f89b012b5c0" loc="45:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f89b012b5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f89b012b940"/>
        <function-ref name="request" scoped="" ref="0x7f89b012bad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f89b01263b0" loc="49:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b01263b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0125ac0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0125570"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b0125020"/>
        <function-ref name="set" scoped="" ref="0x7f89b0123090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f89b0111ca0" loc="64:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f89b0111ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b01100a0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0110230"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b01103c0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0110550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f89b01152e0" loc="61:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f89b01152e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b0114840"/>
        <function-ref name="clear" scoped="" ref="0x7f89b0112020"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b0114110"/>
        <function-ref name="set" scoped="" ref="0x7f89b0112750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f89b012f600" loc="42:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f89b012f600"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f89b012f980"/>
        <function-ref name="turnOn" scoped="" ref="0x7f89b012fb10"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b012fca0"/>
        <function-ref name="done" scoped="" ref="0x7f89b012fe30"/>
        <function-ref name="standby" scoped="" ref="0x7f89b012c020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b012c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f89b010f470" loc="66:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b010f470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f89b010f7f0"/>
        <function-ref name="wait" scoped="" ref="0x7f89b010f980"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b010fb10"/>
        <function-ref name="isFree" scoped="" ref="0x7f89b010fca0"/>
        <function-ref name="getNow" scoped="" ref="0x7f89b010fe30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f89b012ae80" loc="48:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b012ae80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b01275e0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0127090"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b0129ad0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0127b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b012bd90" loc="46:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b012bd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b012a180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b012a310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b012a4a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b012a630"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b012a7c0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b012a950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89b01161f0" loc="60:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89b01161f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0116670"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b0116800"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b0116990"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f89b0116b20"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f89b0116cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89b012cdd0" loc="44:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89b012cdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b012b180"/>
        <function-ref name="header" scoped="" ref="0x7f89b012b310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89b011bdd0" loc="55:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89b011bdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f89b0f11180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89b01176e0"/>
        <function-ref name="fired" scoped="" ref="0x7f89b01186b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89b0117090"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b0118b70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89b0117ba0"/>
        <function-ref name="start" scoped="" ref="0x7f89b011aca0"/>
        <function-ref name="stop" scoped="" ref="0x7f89b01181f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f89b0123940" loc="50:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89b0123940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0120090"/>
        <function-ref name="get" scoped="" ref="0x7f89b0122af0"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b01225a0"/>
        <function-ref name="set" scoped="" ref="0x7f89b01205e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f89b011ca40" loc="54:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89b011ca40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b011b6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f89b012c460" loc="43:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89b012c460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b012c7e0"/>
        <function-ref name="ready" scoped="" ref="0x7f89b012c970"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b012cb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f89b0120e70" loc="51:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b0120e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b011e5e0"/>
        <function-ref name="get" scoped="" ref="0x7f89b011e090"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b011fad0"/>
        <function-ref name="set" scoped="" ref="0x7f89b011eb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f89b01108d0" loc="65:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f89b01108d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0110c50"/>
        <function-ref name="get" scoped="" ref="0x7f89b0110de0"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b010f020"/>
        <function-ref name="set" scoped="" ref="0x7f89b010f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f89b0111110" loc="63:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f89b0111110"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0111490"/>
        <function-ref name="get" scoped="" ref="0x7f89b0111620"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b01117b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0111940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f89b011c1e0" loc="52:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b011c1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f89b011c560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f89b010e110" loc="67:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f89b010e110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f89b010e490"/>
        <function-ref name="suspend" scoped="" ref="0x7f89b010e620"/>
        <function-ref name="resume" scoped="" ref="0x7f89b010e7b0"/>
        <function-ref name="run" scoped="" ref="0x7f89b010e940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f89b0105c40" loc="52:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f89b0105c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f89b0104020"/>
        <function-ref name="request" scoped="" ref="0x7f89b01041b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f89b00e4430" loc="74:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f89b00e4430"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f89b00ea3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f89b0100a40" loc="56:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f89b0100a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b00fd1b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b00ffc00"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b00ff6b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b00fd700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f89b00e26a0" loc="80:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f89b00e26a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b00e2a20"/>
        <function-ref name="get" scoped="" ref="0x7f89b00e2bb0"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b00e2d40"/>
        <function-ref name="set" scoped="" ref="0x7f89b00e0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f89b0107600" loc="47:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f89b0107600"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f89b10b83a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f89b10b83a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0107980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f89b00df200" loc="83:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f89b00df200"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89b00de970"/>
        <function-ref name="clear" scoped="" ref="0x7f89b00dd0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89b00de240"/>
        <function-ref name="set" scoped="" ref="0x7f89b00dd800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f89b00f1020" loc="70:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f89b00f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b00f13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b00f1530"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b00f16c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b00f1850"/>
        <function-ref name="get" scoped="" ref="0x7f89b00f19e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b00f1b70"/>
        <function-ref name="set" scoped="" ref="0x7f89b00f1d00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b00ec020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f89b00dbb70" loc="86:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f89b00dbb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f89b00da020"/>
        <function-ref name="wait" scoped="" ref="0x7f89b00da1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89b00da340"/>
        <function-ref name="isFree" scoped="" ref="0x7f89b00da4d0"/>
        <function-ref name="getNow" scoped="" ref="0x7f89b00da660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f89b0107c40" loc="49:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f89b0107c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f89b0106020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f89b01061b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f89b0106340"/>
        <function-ref name="done" scoped="" ref="0x7f89b01064d0"/>
        <function-ref name="standby" scoped="" ref="0x7f89b0106660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f89b01067f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7f89b00ea9d0" loc="75:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f89b00ea9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89b00e6630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f89b0103550" loc="55:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f89b0103550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b0101c50"/>
        <function-ref name="get" scoped="" ref="0x7f89b0101700"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b01011b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b01001f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f89b0104470" loc="53:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f89b0104470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b01047f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89b0104980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b0104b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89b0104ca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b0104e30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b0103020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0x7f89b00edd50" loc="69:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f89b00edd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b00f2100"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b00f2290"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b00f2420"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b00f25b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b00f2740"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b00f28d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b00f2a60"/>
        <function-ref name="clr" scoped="" ref="0x7f89b00f2bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f89b00e6b50" loc="77:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f89b00e6b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89b00e3020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f89b00e31b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f89b00e3340"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f89b00e34d0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f89b00e3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f89b0105480" loc="51:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f89b0105480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89b0105800"/>
        <function-ref name="header" scoped="" ref="0x7f89b0105990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0x7f89b004be40" loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0x7f89b004be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89b004a1e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89b004a370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f89b00fc020" loc="57:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89b00fc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b00fa740"/>
        <function-ref name="get" scoped="" ref="0x7f89b00fa1f0"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b00fcc50"/>
        <function-ref name="set" scoped="" ref="0x7f89b00fac90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f89b0108a60" loc="46:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f89b0108a60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f89b10b83a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f89b10b83a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89b0108de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f89b00f4380" loc="65:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f89b00f4380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89b00f4700"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89b00f4890"/>
        <function-ref name="request" scoped="" ref="0x7f89b00f4a20"/>
        <function-ref name="granted" scoped="" ref="0x7f89b00f4bb0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89b00f4d40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0x7f89b00f5020" loc="64:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f89b00f5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b00f54a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b00f5630"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b00f57c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b00f5950"/>
        <function-ref name="get" scoped="" ref="0x7f89b00f5ae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b00f5c70"/>
        <function-ref name="set" scoped="" ref="0x7f89b00f5e00"/>
        <function-ref name="clr" scoped="" ref="0x7f89b00f4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f89b00f9560" loc="58:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f89b00f9560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b00f8c90"/>
        <function-ref name="get" scoped="" ref="0x7f89b00f8740"/>
        <function-ref name="isSet" scoped="" ref="0x7f89b00f81f0"/>
        <function-ref name="set" scoped="" ref="0x7f89b00f6230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f89b0106aa0" loc="50:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f89b0106aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89b0106e20"/>
        <function-ref name="ready" scoped="" ref="0x7f89b0105020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89b01051b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0x7f89b00e8b30" loc="72:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f89b00e8b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f89b00eb020"/>
        <function-ref name="disable" scoped="" ref="0x7f89b00eb1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f89b00eb340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f89b00eb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0x7f89b00ed1f0" loc="67:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f89b00ed1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f89b00ed570"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f89b00ed700"/>
        <function-ref name="splitRead" scoped="" ref="0x7f89b00ed890"/>
        <function-ref name="write" scoped="" ref="0x7f89b00eda20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f89b00e03a0" loc="81:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f89b00e03a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b00e0720"/>
        <function-ref name="get" scoped="" ref="0x7f89b00e08b0"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b00e0a40"/>
        <function-ref name="set" scoped="" ref="0x7f89b00e0bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f89b00e3a10" loc="79:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f89b00e3a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89b00e3d90"/>
        <function-ref name="get" scoped="" ref="0x7f89b00e2020"/>
        <function-ref name="setValue" scoped="" ref="0x7f89b00e21b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b00e2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f89b00f68b0" loc="59:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f89b00f68b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f89b00f6c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f89b00db080" loc="85:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f89b00db080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f89b00db400"/>
        <function-ref name="suspend" scoped="" ref="0x7f89b00db590"/>
        <function-ref name="resume" scoped="" ref="0x7f89b00db720"/>
        <function-ref name="run" scoped="" ref="0x7f89b00db8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f89b00057f0" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f89b00057f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0005b70"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b0005d00"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0004020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b00041b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0004340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b00044d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0004660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b00047f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0x7f89b00064e0" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f89b00064e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b0006860"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b00069f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0006b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b0006d10"/>
        <function-ref name="get" scoped="" ref="0x7f89b0005020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b00051b0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0005340"/>
        <function-ref name="clr" scoped="" ref="0x7f89b00054d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89b0003ac0" loc="49:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89b0003ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89affff390"/>
        <function-ref name="fired" scoped="" ref="0x7f89b0000360"/>
        <function-ref name="startAt" scoped="" ref="0x7f89b0000ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89b0000820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89affff850"/>
        <function-ref name="start" scoped="" ref="0x7f89b0002970"/>
        <function-ref name="stop" scoped="" ref="0x7f89b0002e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0x7f89b0008b50" loc="42:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f89b0008b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89b0007020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89b00071b0"/>
        <function-ref name="request" scoped="" ref="0x7f89b0007340"/>
        <function-ref name="granted" scoped="" ref="0x7f89b00074d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89b0007660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0x7f89b000b940" loc="41:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f89b000b940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89b000bcc0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89b000be50"/>
        <function-ref name="toggle" scoped="" ref="0x7f89b0008020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89b00081b0"/>
        <function-ref name="get" scoped="" ref="0x7f89b0008340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89b00084d0"/>
        <function-ref name="set" scoped="" ref="0x7f89b0008660"/>
        <function-ref name="clr" scoped="" ref="0x7f89b00087f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f89b0004b10" loc="48:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f89b0004b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f89b0003020"/>
        <function-ref name="disable" scoped="" ref="0x7f89b00031b0"/>
        <function-ref name="captured" scoped="" ref="0x7f89b0003340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f89b00034d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f89b0007920" loc="43:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f89b0007920"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f89b0007ca0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f89b0007e30"/>
        <function-ref name="splitRead" scoped="" ref="0x7f89b0006020"/>
        <function-ref name="write" scoped="" ref="0x7f89b00061b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f89afffe020" loc="50:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89afffe020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89afffec50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0x7f89afff4a20" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0x7f89afff4a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89afff4da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89afff3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f89afff31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89afff3340"/>
        <function-ref name="get" scoped="" ref="0x7f89afff34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89afff3660"/>
        <function-ref name="set" scoped="" ref="0x7f89afff37f0"/>
        <function-ref name="clr" scoped="" ref="0x7f89afff3980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0x7f89afff8020" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f89afff8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f89afff44e0"/>
        <function-ref name="test" scoped="" ref="0x7f89afff6a10"/>
        <function-ref name="get" scoped="" ref="0x7f89afff8c50"/>
        <function-ref name="captured" scoped="" ref="0x7f89afff7660"/>
        <function-ref name="reset" scoped="" ref="0x7f89afff7b70"/>
        <function-ref name="isOn" scoped="" ref="0x7f89afff4020"/>
        <function-ref name="set" scoped="" ref="0x7f89afff7150"/>
        <function-ref name="start" scoped="" ref="0x7f89afff6090"/>
        <function-ref name="stop" scoped="" ref="0x7f89afff6550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0x7f89afff3cc0" loc="47:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0x7f89afff3cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89afff20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89afff2230"/>
        <function-ref name="toggle" scoped="" ref="0x7f89afff23c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89afff2550"/>
        <function-ref name="get" scoped="" ref="0x7f89afff26e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89afff2870"/>
        <function-ref name="set" scoped="" ref="0x7f89afff2a00"/>
        <function-ref name="clr" scoped="" ref="0x7f89afff2b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f89afff9680" loc="40:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f89afff9680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89afff9a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f89afffc9c0" loc="39:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f89afffc9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f89afffcd40"/>
        <function-ref name="disable" scoped="" ref="0x7f89afff9020"/>
        <function-ref name="captured" scoped="" ref="0x7f89afff91b0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f89afff9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f89aff57e60" loc="84:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f89aff57e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aff5e210"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aff5e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f89aff60c20" loc="82:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f89aff60c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f89aff62020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89aff65630" loc="81:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89aff65630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89aff659b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f89aff62320" loc="83:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f89aff62320"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f89aff626a0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f89aff62830"/>
        <function-ref name="splitRead" scoped="" ref="0x7f89aff629c0"/>
        <function-ref name="write" scoped="" ref="0x7f89aff62b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f89aff5ebd0" loc="85:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f89aff5ebd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89aff5d020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89aff5d1b0"/>
        <function-ref name="request" scoped="" ref="0x7f89aff5d340"/>
        <function-ref name="granted" scoped="" ref="0x7f89aff5d4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89aff5d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f89aff51050" loc="95:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89aff51050"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f89aff513d0"/>
        <function-ref name="configure" scoped="" ref="0x7f89aff51560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x7f89aff13190" loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x7f89aff13190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89aff13510"/>
        <function-ref name="runTask" scoped="" ref="0x7f89aff136a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f89aff522d0" loc="94:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f89aff522d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aff52650"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aff527e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f89aff54020" loc="92:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f89aff54020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f89aff543a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89aff55900" loc="91:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89aff55900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89aff55c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x7f89aff36a40" loc="98:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x7f89aff36a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f89aff36dc0"/>
        <function-ref name="sleep" scoped="" ref="0x7f89aff35340"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f89aff501b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f89aff354d0"/>
        <function-ref name="initMaster" scoped="" ref="0x7f89aff504d0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f89aff50660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f89aff507f0"/>
        <function-ref name="read" scoped="" ref="0x7f89aff50980"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f89aff50b10"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f89aff50ca0"/>
        <function-ref name="setClock" scoped="" ref="0x7f89aff50e30"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f89aff4f020"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f89aff4f1b0"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f89aff4f440"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f89aff4f5d0"/>
        <function-ref name="write" scoped="" ref="0x7f89aff4f760"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f89aff4f8f0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f89aff4fa80"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f89aff4fc10"/>
        <function-ref name="getClock" scoped="" ref="0x7f89aff4fda0"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f89aff35020"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f89aff50020"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f89aff50340"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f89aff351b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f89aff54660" loc="93:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f89aff54660"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f89aff549e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f89aff54b70"/>
        <function-ref name="splitRead" scoped="" ref="0x7f89aff54d00"/>
        <function-ref name="write" scoped="" ref="0x7f89aff52020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f89aff357b0" loc="99:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f89aff357b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f89aff35b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x7f89afef6c70" loc="76:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x7f89afef6c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f89afef3020"/>
        <function-ref name="sleep" scoped="" ref="0x7f89afef14d0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f89afef3340"/>
        <function-ref name="dataReady" scoped="" ref="0x7f89afef1660"/>
        <function-ref name="initMaster" scoped="" ref="0x7f89afef3660"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f89afef37f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f89afef3980"/>
        <function-ref name="read" scoped="" ref="0x7f89afef3b10"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f89afef3ca0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f89afef3e30"/>
        <function-ref name="setClock" scoped="" ref="0x7f89afef2020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f89afef21b0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f89afef2340"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f89afef25d0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f89afef2760"/>
        <function-ref name="write" scoped="" ref="0x7f89afef28f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f89afef2a80"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f89afef2c10"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f89afef2da0"/>
        <function-ref name="getClock" scoped="" ref="0x7f89afef1020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f89afef11b0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f89afef31b0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f89afef34d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f89afef1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x7f89afee6b10" loc="81:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x7f89afee6b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89afee5020"/>
        <function-ref name="isInput" scoped="" ref="0x7f89afee51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89afee5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89afee54d0"/>
        <function-ref name="get" scoped="" ref="0x7f89afee5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89afee57f0"/>
        <function-ref name="set" scoped="" ref="0x7f89afee5980"/>
        <function-ref name="clr" scoped="" ref="0x7f89afee5b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7f89afee8650" loc="79:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7f89afee8650"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89afee89d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f89afee8b60"/>
        <function-ref name="toggle" scoped="" ref="0x7f89afee8cf0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89afee8e80"/>
        <function-ref name="get" scoped="" ref="0x7f89afee7030"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89afee71c0"/>
        <function-ref name="set" scoped="" ref="0x7f89afee7350"/>
        <function-ref name="clr" scoped="" ref="0x7f89afee74e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x7f89afee9390" loc="78:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x7f89afee9390"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89afee9710"/>
        <function-ref name="isInput" scoped="" ref="0x7f89afee98a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f89afee9a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89afee9bc0"/>
        <function-ref name="get" scoped="" ref="0x7f89afee9d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89afee8020"/>
        <function-ref name="set" scoped="" ref="0x7f89afee81b0"/>
        <function-ref name="clr" scoped="" ref="0x7f89afee8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f89afeea990" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f89afeea990"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89afeead10"/>
        <function-ref name="stop" scoped="" ref="0x7f89afee9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x7f89afee5e50" loc="82:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x7f89afee5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f89afee4210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x7f89afef0b40" loc="74:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x7f89afef0b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f89afeec020"/>
        <function-ref name="sleep" scoped="" ref="0x7f89afeea4d0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f89afeec340"/>
        <function-ref name="dataReady" scoped="" ref="0x7f89afeea660"/>
        <function-ref name="initMaster" scoped="" ref="0x7f89afeec660"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f89afeec7f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f89afeec980"/>
        <function-ref name="read" scoped="" ref="0x7f89afeecb10"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f89afeecca0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f89afeece30"/>
        <function-ref name="setClock" scoped="" ref="0x7f89afeeb020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f89afeeb1b0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f89afeeb340"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f89afeeb5d0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f89afeeb760"/>
        <function-ref name="write" scoped="" ref="0x7f89afeeb8f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f89afeeba80"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f89afeebc10"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f89afeebda0"/>
        <function-ref name="getClock" scoped="" ref="0x7f89afeea020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f89afeea1b0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f89afeec1b0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f89afeec4d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f89afeea340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x7f89afee7800" loc="80:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x7f89afee7800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f89afee7b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f89afee7d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f89afee6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f89afee61b0"/>
        <function-ref name="get" scoped="" ref="0x7f89afee6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f89afee64d0"/>
        <function-ref name="set" scoped="" ref="0x7f89afee6660"/>
        <function-ref name="clr" scoped="" ref="0x7f89afee67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f89afe99020" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f89afe99020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f89afe993c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f89afe99550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f89afe970d0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89afe970d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f89afe97470"/>
        <function-ref name="configure" scoped="" ref="0x7f89afe97600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f89afe9a210" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f89afe9a210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89afe9a5b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89afe9a740"/>
        <function-ref name="request" scoped="" ref="0x7f89afe9a8d0"/>
        <function-ref name="granted" scoped="" ref="0x7f89afe9aa60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89afe9abf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f89afe997a0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f89afe997a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f89afe99b20"/>
        <function-ref name="userId" scoped="" ref="0x7f89afe99cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89aeeef420" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89aeeef420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89aeeef7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f89aeeefa30" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f89aeeefa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f89aeeefdb0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f89aeeed020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f89aeeed1b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aeeed340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f89aeeeb850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f89aeeeb850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f89aeeebbf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f89aeeebd80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f89aeeea910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f89aeeea910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f89aeeeacb0"/>
        <function-ref name="configure" scoped="" ref="0x7f89aeeeae40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f89aeee9120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f89aeee9120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f89aeee94a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f89aeee9630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f89aeee97c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aeee9950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f89aeeec9d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f89aeeec9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f89aeeecd70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f89aeeeb020"/>
        <function-ref name="request" scoped="" ref="0x7f89aeeeb1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f89aeeeb340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f89aeeeb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f89aeeea020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f89aeeea020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f89aeeea3a0"/>
        <function-ref name="userId" scoped="" ref="0x7f89aeeea530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f89aeee9c20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f89aeee9c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89aeee8020"/>
        <function-ref name="runTask" scoped="" ref="0x7f89aeee81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89afe90c60" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89afe90c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89afe8c4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f89afe8d4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89afe8de60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89afe8d9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89afe8c9a0"/>
        <function-ref name="start" scoped="" ref="0x7f89afe8eac0"/>
        <function-ref name="stop" scoped="" ref="0x7f89afe8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f89aeec24c0" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f89aeec24c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f89b10b9c00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f89b10b9c00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f89b0fa89a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89aeec0db0"/>
        <function-ref name="fired" scoped="" ref="0x7f89aeec1da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f89aeec0760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89aeec02a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f89aeebf2a0"/>
        <function-ref name="start" scoped="" ref="0x7f89aeec13d0"/>
        <function-ref name="stop" scoped="" ref="0x7f89aeec18e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7f89aeebac10" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f89aeebac10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89aeeb65d0"/>
        <function-ref name="fired" scoped="" ref="0x7f89aeeb72a0"/>
        <function-ref name="get" scoped="" ref="0x7f89aeeb98a0"/>
        <function-ref name="reset" scoped="" ref="0x7f89aeeb7760"/>
        <function-ref name="isOn" scoped="" ref="0x7f89aeeb6a90"/>
        <function-ref name="set" scoped="" ref="0x7f89aeeb9d60"/>
        <function-ref name="start" scoped="" ref="0x7f89aeeb7c20"/>
        <function-ref name="stop" scoped="" ref="0x7f89aeeb6110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7f89aeebf7f0" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f89aeebf7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89aeebbcd0"/>
        <function-ref name="test" scoped="" ref="0x7f89aeebb350"/>
        <function-ref name="get" scoped="" ref="0x7f89aeebe4c0"/>
        <function-ref name="setScale" scoped="" ref="0x7f89aeeba1b0"/>
        <function-ref name="getScale" scoped="" ref="0x7f89aeeba6c0"/>
        <function-ref name="reset" scoped="" ref="0x7f89aeebc4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89aeebc020"/>
        <function-ref name="isOn" scoped="" ref="0x7f89aeebb810"/>
        <function-ref name="set" scoped="" ref="0x7f89aeebe980"/>
        <function-ref name="start" scoped="" ref="0x7f89aeebc9a0"/>
        <function-ref name="stop" scoped="" ref="0x7f89aeebce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f89afe8a880" loc="39:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f89afe8a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89afe87500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f89afe80540" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f89afe80540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89afe7f3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89afe7fd50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89afe7f890"/>
        <function-ref name="overflow" scoped="" ref="0x7f89afe7e260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89afe83180" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89afe83180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89afe82020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89afe829a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89afe824e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89afe82e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f89afe7b020" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f89afe7b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89afe7bc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f89afe7a300" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89afe7a300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89afe79150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89afe79ad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89afe79610"/>
        <function-ref name="overflow" scoped="" ref="0x7f89afe78020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f89afe71990" loc="36:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f89afe71990"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f89afe6e7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89afe0d140" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TdmaMacC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89afe0d140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89afe0a630"/>
        <function-ref name="fired" scoped="" ref="0x7f89afe0cb70"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89afe0b920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89afe0b4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f89afe08020"/>
        <function-ref name="gett0" scoped="" ref="0x7f89afe0aab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89afe0b020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89afe0dd30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89afe0a020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89afe0c220"/>
        <function-ref name="stop" scoped="" ref="0x7f89afe0c6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89afe07b00" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TdmaMacC.FaultClearTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89afe07b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89afe02110"/>
        <function-ref name="fired" scoped="" ref="0x7f89afe055b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89afe044a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89afe04020"/>
        <function-ref name="getdt" scoped="" ref="0x7f89afe02a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f89afe02590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89afe05a30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89afe06750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89afe04ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89afe06c20"/>
        <function-ref name="stop" scoped="" ref="0x7f89afe05130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PCQ" ref="0x7f89afd57da0" loc="8:PrioCritQueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCQ" scoped="" ref="0x7f89afd57da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f89afd55300"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f89afd50020"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89afd50720"/>
        <function-ref name="clear" scoped="" ref="0x7f89afd4f5a0"/>
        <function-ref name="headPrio" scoped="" ref="0x7f89afd53d60"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f89afd55780"/>
        <function-ref name="full" scoped="" ref="0x7f89afd56e50"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89afd55c50"/>
        <function-ref name="clearLO" scoped="" ref="0x7f89afd4f020"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f89afd4fa20"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89afd52490"/>
        <function-ref name="empty" scoped="" ref="0x7f89afd569d0"/>
        <function-ref name="headHI" scoped="" ref="0x7f89afd53850"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f89afd52b40"/>
        <function-ref name="head" scoped="" ref="0x7f89afd53110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PrioCritQueue" ref="0x7f89aee8a770" loc="4:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PrioCritQueue" scoped="" ref="0x7f89aee8a770"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f89aee88c90"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f89aee849d0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89aee83110"/>
        <function-ref name="clear" scoped="" ref="0x7f89aee83e60"/>
        <function-ref name="headPrio" scoped="" ref="0x7f89aee86770"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f89aee87170"/>
        <function-ref name="full" scoped="" ref="0x7f89aee88810"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89aee87640"/>
        <function-ref name="clearLO" scoped="" ref="0x7f89aee838e0"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f89aee82310"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aee86e70"/>
        <function-ref name="empty" scoped="" ref="0x7f89aee88390"/>
        <function-ref name="headHI" scoped="" ref="0x7f89aee86260"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f89aee84550"/>
        <function-ref name="head" scoped="" ref="0x7f89aee87ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio3Queue" ref="0x7f89aee78e60" loc="9:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio3Queue" scoped="" ref="0x7f89aee78e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f89aee76da0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89aee74b40"/>
        <function-ref name="element" scoped="" ref="0x7f89aee73220"/>
        <function-ref name="full" scoped="" ref="0x7f89aee76020"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89aee76920"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aee74490"/>
        <function-ref name="empty" scoped="" ref="0x7f89aee77a80"/>
        <function-ref name="size" scoped="" ref="0x7f89aee764a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio1Queue" ref="0x7f89aee828c0" loc="7:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio1Queue" scoped="" ref="0x7f89aee828c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f89aee7f720"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89aee7e4d0"/>
        <function-ref name="element" scoped="" ref="0x7f89aee7eb40"/>
        <function-ref name="full" scoped="" ref="0x7f89aee80960"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89aee7f2a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aee7fdd0"/>
        <function-ref name="empty" scoped="" ref="0x7f89aee804e0"/>
        <function-ref name="size" scoped="" ref="0x7f89aee80de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio2Queue" ref="0x7f89aee7c370" loc="8:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio2Queue" scoped="" ref="0x7f89aee7c370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f89aee7a260"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89aee78020"/>
        <function-ref name="element" scoped="" ref="0x7f89aee78690"/>
        <function-ref name="full" scoped="" ref="0x7f89aee7b4a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89aee7bda0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aee7a910"/>
        <function-ref name="empty" scoped="" ref="0x7f89aee7b020"/>
        <function-ref name="size" scoped="" ref="0x7f89aee7b920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f89aee70310" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f89aee70310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f89aee6d260"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89aee6c020"/>
        <function-ref name="element" scoped="" ref="0x7f89aee6c690"/>
        <function-ref name="full" scoped="" ref="0x7f89aee6e4a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89aee6eda0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aee6d910"/>
        <function-ref name="empty" scoped="" ref="0x7f89aee6e020"/>
        <function-ref name="size" scoped="" ref="0x7f89aee6e920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f89aee69720" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f89aee69720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f89aee675f0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89aee653a0"/>
        <function-ref name="element" scoped="" ref="0x7f89aee65a10"/>
        <function-ref name="full" scoped="" ref="0x7f89aee68810"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89aee67170"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aee67ca0"/>
        <function-ref name="empty" scoped="" ref="0x7f89aee68390"/>
        <function-ref name="size" scoped="" ref="0x7f89aee68c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f89aee63a00" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f89aee63a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f89b0e774c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f89b0e74960"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f89aee61920"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89aee5f6d0"/>
        <function-ref name="element" scoped="" ref="0x7f89aee5fd40"/>
        <function-ref name="full" scoped="" ref="0x7f89aee62af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89aee614a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89aee5f020"/>
        <function-ref name="empty" scoped="" ref="0x7f89aee62670"/>
        <function-ref name="size" scoped="" ref="0x7f89aee61020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f89afd430c0" loc="41:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89afd430c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89afd43440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GlobalTime" ref="0x7f89afd42770" loc="44:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f89afd42770"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f89afd413d0"/>
        <function-ref name="global2Local" scoped="" ref="0x7f89afd40360"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f89afd41890"/>
        <function-ref name="local2Global" scoped="" ref="0x7f89afd41de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncInfo" ref="0x7f89afd408c0" loc="47:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f89afd408c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f89afd40c40"/>
        <function-ref name="getRootID" scoped="" ref="0x7f89afd40dd0"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f89afd3f020"/>
        <function-ref name="getOffset" scoped="" ref="0x7f89afd3f1b0"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f89afd3f340"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f89afd3f4d0"/>
        <function-ref name="getSkew" scoped="" ref="0x7f89afd3f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89afd43700" loc="42:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89afd43700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89afd43a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncMode" ref="0x7f89afd3aaf0" loc="48:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7f89afd3aaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afd3ae70"/>
        <function-ref name="getMode" scoped="" ref="0x7f89afd3d030"/>
        <function-ref name="setMode" scoped="" ref="0x7f89afd3d1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncNotify" ref="0x7f89afd388d0" loc="49:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f89afd388d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncNotify"/>
      </instance>
      <interface-functions>
        <function-ref name="msg_received" scoped="" ref="0x7f89afd38c50"/>
        <function-ref name="msg_sent" scoped="" ref="0x7f89afd38de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f89afd43d80" loc="43:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f89afd43d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89afd42180"/>
        <function-ref name="stop" scoped="" ref="0x7f89afd42310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f89afc89150" loc="52:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89afc89150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89afc894d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GlobalTime" ref="0x7f89afc8e060" loc="43:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f89afc8e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f89afc8ec90"/>
        <function-ref name="global2Local" scoped="" ref="0x7f89afc8dc50"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f89afc8d1b0"/>
        <function-ref name="local2Global" scoped="" ref="0x7f89afc8d700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7f89afc7a790" loc="60:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f89afc7a790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89afc783f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x7f89afc89760" loc="53:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x7f89afc89760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89afc89ae0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89afc89c70"/>
        <function-ref name="start" scoped="" ref="0x7f89afc89e00"/>
        <function-ref name="stop" scoped="" ref="0x7f89afc88020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f89afc884f0" loc="54:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89afc884f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afc86390"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afc85c80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afc85800"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afc86c60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afc851b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f89afc7fd10" loc="57:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f89afc7fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f89afc7d0e0"/>
        <function-ref name="rand32" scoped="" ref="0x7f89afc7d270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncInfo" ref="0x7f89afc8b120" loc="46:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f89afc8b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f89afc8b4a0"/>
        <function-ref name="getRootID" scoped="" ref="0x7f89afc8b630"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f89afc8b7c0"/>
        <function-ref name="getOffset" scoped="" ref="0x7f89afc8b950"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f89afc8bae0"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f89afc8bc70"/>
        <function-ref name="getSkew" scoped="" ref="0x7f89afc8be00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89afc8f1e0" loc="41:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89afc8f1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89afc8f560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f89afc84300" loc="55:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89afc84300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afc84680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncMode" ref="0x7f89afc8a080" loc="47:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7f89afc8a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afc8a400"/>
        <function-ref name="getMode" scoped="" ref="0x7f89afc8a590"/>
        <function-ref name="setMode" scoped="" ref="0x7f89afc8a720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendMsg" ref="0x7f89afc78860" loc="349:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendMsg" scoped="" ref="0x7f89afc78860"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89afc78be0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89afc78d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="processMsg" ref="0x7f89afc770a0" loc="292:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="processMsg" scoped="" ref="0x7f89afc770a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89afc77420"/>
        <function-ref name="runTask" scoped="" ref="0x7f89afc775b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89afc7d4c0" loc="58:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89afc7d4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89afc7d940"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89afc7dad0"/>
        <function-ref name="led1On" scoped="" ref="0x7f89afc7dc60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89afc7ddf0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89afc7c020"/>
        <function-ref name="get" scoped="" ref="0x7f89afc7c1b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89afc7c340"/>
        <function-ref name="led2On" scoped="" ref="0x7f89afc7c980"/>
        <function-ref name="set" scoped="" ref="0x7f89afc7c660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89afc7c4d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f89afc7c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncNotify" ref="0x7f89afc8a970" loc="48:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f89afc8a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncNotify"/>
      </instance>
      <interface-functions>
        <function-ref name="msg_received" scoped="" ref="0x7f89afc8acf0"/>
        <function-ref name="msg_sent" scoped="" ref="0x7f89afc8ae80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f89afc8f7b0" loc="42:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f89afc8f7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89afc8fb30"/>
        <function-ref name="stop" scoped="" ref="0x7f89afc8fcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f89afc849f0" loc="56:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89afc849f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89afc7f020"/>
        <function-ref name="fired" scoped="" ref="0x7f89afc81510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89afc80300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89afc81e10"/>
        <function-ref name="getdt" scoped="" ref="0x7f89afc7f920"/>
        <function-ref name="gett0" scoped="" ref="0x7f89afc7f4a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89afc81990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89afc82670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89afc80910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89afc82b40"/>
        <function-ref name="stop" scoped="" ref="0x7f89afc81090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncPacket" ref="0x7f89afc7ce10" loc="59:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacket" scoped="" ref="0x7f89afc7ce10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89afc7bc60"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89afc7a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89afc73e00" loc="41:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89afc73e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89afc701c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89afc70350"/>
        <function-ref name="start" scoped="" ref="0x7f89afc704e0"/>
        <function-ref name="stop" scoped="" ref="0x7f89afc70670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f89afc57b00" loc="56:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afc57b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89afc55a40"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89afc54020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89afc6e0c0" loc="45:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89afc6e0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89afc6e440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89afc6e5d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afc6e760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afc6e8f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89afc6ea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f89afc5b920" loc="55:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afc5b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afc5a740"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afc57090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afc58bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afc58090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afc585a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89afc6fa70" loc="44:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89afc6fa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afc6fdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f89afc6ce80" loc="48:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f89afc6ce80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f89afc6b220"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f89afc6b3b0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f89afc6b540"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f89afc6b6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f89afc663f0" loc="51:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89afc663f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afc64200"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afc63af0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afc63670"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afc64ad0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afc63020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89afc70e50" loc="43:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89afc70e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afc6f210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f89afc62590" loc="52:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89afc62590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89afc60390"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89afc608a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f89afc6bdb0" loc="50:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89afc6bdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89afc68370"/>
        <function-ref name="clear" scoped="" ref="0x7f89afc68aa0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89afc6abf0"/>
        <function-ref name="set" scoped="" ref="0x7f89afc67210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f89afc6c4e0" loc="47:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afc6c4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89afc6c860"/>
        <function-ref name="noAck" scoped="" ref="0x7f89afc6c9f0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89afc6cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89afc6ed30" loc="46:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89afc6ed30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89afc6d0e0"/>
        <function-ref name="source" scoped="" ref="0x7f89afc6d270"/>
        <function-ref name="address" scoped="" ref="0x7f89afc6d400"/>
        <function-ref name="destination" scoped="" ref="0x7f89afc6d590"/>
        <function-ref name="setSource" scoped="" ref="0x7f89afc6d720"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89afc6d8b0"/>
        <function-ref name="type" scoped="" ref="0x7f89afc6da40"/>
        <function-ref name="setType" scoped="" ref="0x7f89afc6dbd0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89afc6dd60"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89afc6c020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89afc6c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f89afc5f220" loc="54:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89afc5f220"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89afc5d7c0"/>
        <function-ref name="clear" scoped="" ref="0x7f89afc5c020"/>
        <function-ref name="isValid" scoped="" ref="0x7f89afc5d090"/>
        <function-ref name="set" scoped="" ref="0x7f89afc5c750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89afc51020" loc="41:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89afc51020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89afc513a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89afc51530"/>
        <function-ref name="start" scoped="" ref="0x7f89afc516c0"/>
        <function-ref name="stop" scoped="" ref="0x7f89afc51850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f89afc36020" loc="56:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afc36020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89afc35020"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89afc35530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89afc4e2b0" loc="45:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89afc4e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89afc4e630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89afc4e7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afc4e950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afc4eae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89afc4ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f89afc3bd60" loc="55:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afc3bd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afc3ab60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afc374a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afc37020"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afc39450"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afc39960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89afc50c30" loc="44:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89afc50c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afc4e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f89afc4b320" loc="48:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f89afc4b320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f89afc4b6a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f89afc4b830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f89afc4b9c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f89afc4bb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f89afc46920" loc="51:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89afc46920"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afc45740"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afc42090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afc44bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afc44090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afc445a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89afc50050" loc="43:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89afc50050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afc503d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f89afc42b00" loc="52:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89afc42b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89afc41930"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89afc41e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f89afc4a270" loc="50:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89afc4a270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89afc49800"/>
        <function-ref name="clear" scoped="" ref="0x7f89afc48020"/>
        <function-ref name="isValid" scoped="" ref="0x7f89afc490d0"/>
        <function-ref name="set" scoped="" ref="0x7f89afc48750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f89afc4c800" loc="47:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afc4c800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89afc4cb80"/>
        <function-ref name="noAck" scoped="" ref="0x7f89afc4cd10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89afc4b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89afc4d020" loc="46:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89afc4d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89afc4d3a0"/>
        <function-ref name="source" scoped="" ref="0x7f89afc4d530"/>
        <function-ref name="address" scoped="" ref="0x7f89afc4d6c0"/>
        <function-ref name="destination" scoped="" ref="0x7f89afc4d850"/>
        <function-ref name="setSource" scoped="" ref="0x7f89afc4d9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89afc4db70"/>
        <function-ref name="type" scoped="" ref="0x7f89afc4dd00"/>
        <function-ref name="setType" scoped="" ref="0x7f89afc4c020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89afc4c1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89afc4c340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89afc4c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f89afc3f780" loc="54:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89afc3f780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89afc3ed00"/>
        <function-ref name="clear" scoped="" ref="0x7f89afc3d460"/>
        <function-ref name="isValid" scoped="" ref="0x7f89afc3e5d0"/>
        <function-ref name="set" scoped="" ref="0x7f89afc3db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f89afab7600" loc="53:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89afab7600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89afab63f0"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89afab6900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89afac38b0" loc="47:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89afac38b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89afac3c30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89afac3dc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afac2020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afac21b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89afac2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89afac6bf0" loc="45:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89afac6bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afac4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f89afabb510" loc="52:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89afabb510"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afaba390"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afab9d00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afab9860"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afabac80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afab91f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f89afac2940" loc="49:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89afac2940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afac1780"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afabe110"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afac0c30"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afac0090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afac05c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89afac6490" loc="44:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89afac6490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afac6830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f89afabe9b0" loc="50:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89afabe9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89afabd7a0"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89afabdcb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampRadio" ref="0x7f89afab50a0" loc="58:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89afab50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89afab3750"/>
        <function-ref name="clear" scoped="" ref="0x7f89afab3e80"/>
        <function-ref name="isValid" scoped="" ref="0x7f89afab3020"/>
        <function-ref name="set" scoped="" ref="0x7f89afab25d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f89afaaed80" loc="61:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89afaaed80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89afaad9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f89afaac020" loc="62:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89afaac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89afaab740"/>
        <function-ref name="get" scoped="" ref="0x7f89afaab1f0"/>
        <function-ref name="isSet" scoped="" ref="0x7f89afaacc50"/>
        <function-ref name="set" scoped="" ref="0x7f89afaabc90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89afac4270" loc="46:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89afac4270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89afac45f0"/>
        <function-ref name="source" scoped="" ref="0x7f89afac4780"/>
        <function-ref name="address" scoped="" ref="0x7f89afac4910"/>
        <function-ref name="destination" scoped="" ref="0x7f89afac4aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89afac4c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89afac4dc0"/>
        <function-ref name="type" scoped="" ref="0x7f89afac3020"/>
        <function-ref name="setType" scoped="" ref="0x7f89afac31b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89afac3340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89afac34d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89afac3660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampMilli" ref="0x7f89afab1060" loc="59:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89afab1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89afab05d0"/>
        <function-ref name="clear" scoped="" ref="0x7f89afab0d00"/>
        <function-ref name="isValid" scoped="" ref="0x7f89afab1e70"/>
        <function-ref name="set" scoped="" ref="0x7f89afaae460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89aed90c70" loc="56:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89aed90c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89aed8f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMSend" ref="0x7f89aed90020" loc="55:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMSend" scoped="" ref="0x7f89aed90020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aed903a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed90530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed906c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aed90850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aed909e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f89aed92720" loc="50:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f89aed92720"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89aed91570"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89aed91a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89aed9f8b0" loc="44:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89aed9f8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aed9fc30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89aed9fdc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed9d020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed9d1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89aed9d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f89aed99ae0" loc="47:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f89aed99ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aed98930"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed95300"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed97e00"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aed97260"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aed97790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f89aeda1bf0" loc="42:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f89aeda1bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89aeda0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f89aed8c020" loc="59:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f89aed8c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aed8c4a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89aed8c630"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed8c7c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed8c950"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89aed8cae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f89aed9d940" loc="46:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f89aed9d940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aed9c780"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed99110"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed9bc30"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aed9b090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aed9b5c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMPacket" ref="0x7f89aed8f8c0" loc="58:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMPacket" scoped="" ref="0x7f89aed8f8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89aed8fc40"/>
        <function-ref name="source" scoped="" ref="0x7f89aed8fdd0"/>
        <function-ref name="address" scoped="" ref="0x7f89aed8d020"/>
        <function-ref name="destination" scoped="" ref="0x7f89aed8d1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89aed8d340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89aed8d4d0"/>
        <function-ref name="type" scoped="" ref="0x7f89aed8d660"/>
        <function-ref name="setType" scoped="" ref="0x7f89aed8d7f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89aed8d980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89aed8db10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89aed8dca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89aeda1490" loc="41:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89aeda1490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89aeda1830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f89aed95ba0" loc="49:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f89aed95ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f89aed94990"/>
        <function-ref name="eventTime" scoped="" ref="0x7f89aed92020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampRadio" ref="0x7f89aed8b020" loc="61:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f89aed8b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89aed8a5a0"/>
        <function-ref name="clear" scoped="" ref="0x7f89aed8acd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89aed8be30"/>
        <function-ref name="set" scoped="" ref="0x7f89aed89460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f89aed811e0" loc="67:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f89aed811e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aed80910"/>
        <function-ref name="get" scoped="" ref="0x7f89aed803c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f89aed81e10"/>
        <function-ref name="set" scoped="" ref="0x7f89aed80e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f89aed85d80" loc="64:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f89aed85d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f89b0f13d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89aed849e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f89aed83020" loc="65:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f89aed83020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89aed83c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89aeda0270" loc="43:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89aeda0270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89aeda05f0"/>
        <function-ref name="source" scoped="" ref="0x7f89aeda0780"/>
        <function-ref name="address" scoped="" ref="0x7f89aeda0910"/>
        <function-ref name="destination" scoped="" ref="0x7f89aeda0aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89aeda0c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89aeda0dc0"/>
        <function-ref name="type" scoped="" ref="0x7f89aed9f020"/>
        <function-ref name="setType" scoped="" ref="0x7f89aed9f1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89aed9f340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89aed9f4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89aed9f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSnoop" ref="0x7f89aed8f2b0" loc="57:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSnoop" scoped="" ref="0x7f89aed8f2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89aed8f630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampMilli" ref="0x7f89aed88020" loc="62:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f89aed88020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f89aed865a0"/>
        <function-ref name="clear" scoped="" ref="0x7f89aed86cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f89aed88e30"/>
        <function-ref name="set" scoped="" ref="0x7f89aed85460"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89aed7a060" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89aed7a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aed7a3e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed7a570"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed7a700"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aed7a890"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aed7aa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89aed7ac70" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89aed7ac70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aed78020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89aed781b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed78340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed784d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89aed78660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89aed788b0" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89aed788b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89aed78c30"/>
        <function-ref name="source" scoped="" ref="0x7f89aed78dc0"/>
        <function-ref name="address" scoped="" ref="0x7f89aed77020"/>
        <function-ref name="destination" scoped="" ref="0x7f89aed771b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89aed77340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89aed774d0"/>
        <function-ref name="type" scoped="" ref="0x7f89aed77660"/>
        <function-ref name="setType" scoped="" ref="0x7f89aed777f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89aed77980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89aed77b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89aed77ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f89aed76020" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f89aed76020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89aed763a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f89aed76530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89aed766c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89aed24230" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89aed24230"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aed245b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed24740"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed248d0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aed24a60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aed24bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89aed24e40" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89aed24e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aed231e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89aed23370"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed23500"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed23690"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89aed23820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89aed23a70" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89aed23a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89aed23df0"/>
        <function-ref name="source" scoped="" ref="0x7f89aed22020"/>
        <function-ref name="address" scoped="" ref="0x7f89aed221b0"/>
        <function-ref name="destination" scoped="" ref="0x7f89aed22340"/>
        <function-ref name="setSource" scoped="" ref="0x7f89aed224d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89aed22660"/>
        <function-ref name="type" scoped="" ref="0x7f89aed227f0"/>
        <function-ref name="setType" scoped="" ref="0x7f89aed22980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89aed22b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89aed22ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89aed22e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f89aed21120" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f89aed21120"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89aed214a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f89aed21630"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89aed217c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89aed18b20" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89aed18b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aed17020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed171b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed17340"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aed174d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aed17660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f89aed17910" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89aed17910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aed17c90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aed17e20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aed15020"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aed151b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aed15340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f89aed15590" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89aed15590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89aed15910"/>
        <function-ref name="source" scoped="" ref="0x7f89aed15aa0"/>
        <function-ref name="address" scoped="" ref="0x7f89aed15c30"/>
        <function-ref name="destination" scoped="" ref="0x7f89aed15dc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89aed14020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89aed141b0"/>
        <function-ref name="type" scoped="" ref="0x7f89aed14340"/>
        <function-ref name="setType" scoped="" ref="0x7f89aed144d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89aed14660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89aed147f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89aed14980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89afb38930" loc="43:../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89afb38930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afb38cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afb38e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afb34020"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afb341b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afb34340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f89afaea400" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89afaea400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afaea7a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afaea930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afaeaac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afaeac50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afaeade0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89afaeb4b0" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89afaeb4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afaeb850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afaeb9e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afaebb70"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afaebd00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afaea020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f89afae8720" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89afae8720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89afae8aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89afae8c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afae8dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afae7020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89afae71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f89afae7480" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7f89afae7480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89afae7800"/>
        <function-ref name="runTask" scoped="" ref="0x7f89afae7990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f89afae7c60" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7f89afae7c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89afae5020"/>
        <function-ref name="runTask" scoped="" ref="0x7f89afae51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f89afae9060" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89afae9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89afae93e0"/>
        <function-ref name="source" scoped="" ref="0x7f89afae9570"/>
        <function-ref name="address" scoped="" ref="0x7f89afae9700"/>
        <function-ref name="destination" scoped="" ref="0x7f89afae9890"/>
        <function-ref name="setSource" scoped="" ref="0x7f89afae9a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89afae9bb0"/>
        <function-ref name="type" scoped="" ref="0x7f89afae9d40"/>
        <function-ref name="setType" scoped="" ref="0x7f89afae8020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89afae81b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89afae8340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89afae84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89afa8f5a0" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TimeSyncC.TimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89afa8f5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89afa8ca80"/>
        <function-ref name="fired" scoped="" ref="0x7f89afa8d090"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89afa8de10"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89afa8d990"/>
        <function-ref name="getdt" scoped="" ref="0x7f89afa8b4a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f89afa8b020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89afa8d510"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89afa8e200"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89afa8c470"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89afa8e6d0"/>
        <function-ref name="stop" scoped="" ref="0x7f89afa8eba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89afa86380" loc="46:../../tos/system/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89afa86380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89afa86700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f89afa869c0" loc="47:../../tos/system/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89afa869c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89afa86d40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89afa85020"/>
        <function-ref name="led1On" scoped="" ref="0x7f89afa851b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89afa85340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89afa854d0"/>
        <function-ref name="get" scoped="" ref="0x7f89afa85660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89afa857f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89afa85e30"/>
        <function-ref name="set" scoped="" ref="0x7f89afa85980"/>
        <function-ref name="led0On" scoped="" ref="0x7f89afa85b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f89afa85ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacReceive" ref="0x7f89afa5c500" loc="21:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f89afa5c500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afa5c880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f89afa63190" loc="11:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89afa63190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89afa63510"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f89afa62da0" loc="13:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89afa62da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89afa61180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89afa61310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa614a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa61630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89afa617c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FlowSend" ref="0x7f89afa664a0" loc="7:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FlowSend" scoped="" ref="0x7f89afa664a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afa66820"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa669b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa66b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afa66cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afa66e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacControl" ref="0x7f89afa5f1f0" loc="15:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacControl" scoped="" ref="0x7f89afa5f1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89afa5f570"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89afa5f700"/>
        <function-ref name="start" scoped="" ref="0x7f89afa5f890"/>
        <function-ref name="stop" scoped="" ref="0x7f89afa5fa20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacSend" ref="0x7f89afa5e7b0" loc="20:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f89afa5e7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afa5eb30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa5ecc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa5ee50"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afa5c020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afa5c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89afa63790" loc="12:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89afa63790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89afa63b10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89afa63ca0"/>
        <function-ref name="led1On" scoped="" ref="0x7f89afa63e30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89afa62020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89afa621b0"/>
        <function-ref name="get" scoped="" ref="0x7f89afa62340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89afa624d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89afa62b10"/>
        <function-ref name="set" scoped="" ref="0x7f89afa62660"/>
        <function-ref name="led0On" scoped="" ref="0x7f89afa627f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f89afa62980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f89afa5fd50" loc="16:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afa5fd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89afa5e100"/>
        <function-ref name="noAck" scoped="" ref="0x7f89afa5e290"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89afa5e420"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FrameConfiguration" ref="0x7f89afa5cb90" loc="22:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f89afa5cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f89afa5b020"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f89afa5b1b0"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f89afa5b340"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f89afa5b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f89afa61a70" loc="14:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89afa61a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89afa61df0"/>
        <function-ref name="source" scoped="" ref="0x7f89afa60020"/>
        <function-ref name="address" scoped="" ref="0x7f89afa601b0"/>
        <function-ref name="destination" scoped="" ref="0x7f89afa60340"/>
        <function-ref name="setSource" scoped="" ref="0x7f89afa604d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89afa60660"/>
        <function-ref name="type" scoped="" ref="0x7f89afa607f0"/>
        <function-ref name="setType" scoped="" ref="0x7f89afa60980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89afa60b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89afa60ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89afa60e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89af655540" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89af655540"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af6558c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af655a50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af655be0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af655d70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af654020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89af654270" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89af654270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af6545f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89af654780"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af654910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af654aa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89af654c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89af654e80" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89af654e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89af653220"/>
        <function-ref name="source" scoped="" ref="0x7f89af6533b0"/>
        <function-ref name="address" scoped="" ref="0x7f89af653540"/>
        <function-ref name="destination" scoped="" ref="0x7f89af6536d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89af653860"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89af6539f0"/>
        <function-ref name="type" scoped="" ref="0x7f89af653b80"/>
        <function-ref name="setType" scoped="" ref="0x7f89af653d10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89af652020"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89af6521b0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89af652340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f89af6525d0" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f89af6525d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89af652950"/>
        <function-ref name="noAck" scoped="" ref="0x7f89af652ae0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89af652c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89aecc6710" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89aecc6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aecc6a90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aecc6c20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aecc6db0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aecc5020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aecc51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f89aecc5460" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89aecc5460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aecc57e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aecc5970"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aecc5b00"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aecc5c90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aecc5e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f89aecc40e0" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89aecc40e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89aecc4460"/>
        <function-ref name="source" scoped="" ref="0x7f89aecc45f0"/>
        <function-ref name="address" scoped="" ref="0x7f89aecc4780"/>
        <function-ref name="destination" scoped="" ref="0x7f89aecc4910"/>
        <function-ref name="setSource" scoped="" ref="0x7f89aecc4aa0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89aecc4c30"/>
        <function-ref name="type" scoped="" ref="0x7f89aecc4dc0"/>
        <function-ref name="setType" scoped="" ref="0x7f89aecc3020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89aecc31b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89aecc3340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89aecc34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89afa2bce0" loc="44:../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89afa2bce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afa280a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa28230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa283c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afa28550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afa286e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f89afa24590" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89afa24590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afa24930"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa24ac0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa24c50"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afa24de0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afa23020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89afa25720" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89afa25720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afa25ac0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa25c50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa25de0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afa24020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afa241b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f89afa228b0" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89afa228b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89afa22c30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89afa22dc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa21020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa211b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89afa21340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f89afa21610" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7f89afa21610"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89afa21990"/>
        <function-ref name="runTask" scoped="" ref="0x7f89afa21b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f89afa21df0" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7f89afa21df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89afa201c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89afa20350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f89afa23270" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89afa23270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89afa235f0"/>
        <function-ref name="source" scoped="" ref="0x7f89afa23780"/>
        <function-ref name="address" scoped="" ref="0x7f89afa23910"/>
        <function-ref name="destination" scoped="" ref="0x7f89afa23aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89afa23c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89afa23dc0"/>
        <function-ref name="type" scoped="" ref="0x7f89afa22020"/>
        <function-ref name="setType" scoped="" ref="0x7f89afa221b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89afa22340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89afa224d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89afa22660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89afa1c320" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89afa1c320"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89afa1c6a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89afa1c830"/>
        <function-ref name="start" scoped="" ref="0x7f89afa1c9c0"/>
        <function-ref name="stop" scoped="" ref="0x7f89afa1cb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89afa1b370" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89afa1b370"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89afa1b6f0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa1b880"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa1ba10"/>
        <function-ref name="cancel" scoped="" ref="0x7f89afa1bba0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89afa1bd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89afa19b40" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89afa19b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89afa18020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89afa181b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89afa18340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89afa184d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89afa18660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89afa19530" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89afa19530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89afa198b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89afa169a0" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89afa169a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89afa16d20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89afa15020"/>
        <function-ref name="led1On" scoped="" ref="0x7f89afa151b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89afa15340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89afa154d0"/>
        <function-ref name="get" scoped="" ref="0x7f89afa15660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89afa157f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89afa15e30"/>
        <function-ref name="set" scoped="" ref="0x7f89afa15980"/>
        <function-ref name="led0On" scoped="" ref="0x7f89afa15b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f89afa15ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f89afa16020" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89afa16020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89afa163a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f89afa16530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89afa166c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89afa18910" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89afa18910"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89afa18c90"/>
        <function-ref name="source" scoped="" ref="0x7f89afa18e20"/>
        <function-ref name="address" scoped="" ref="0x7f89afa17020"/>
        <function-ref name="destination" scoped="" ref="0x7f89afa171b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89afa17340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89afa174d0"/>
        <function-ref name="type" scoped="" ref="0x7f89afa17660"/>
        <function-ref name="setType" scoped="" ref="0x7f89afa177f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89afa17980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89afa17b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89afa17ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f89af9bbd90" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f89af9bbd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af9ba180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af9ba310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af9ba4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af9ba630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af9ba7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f89af9baa50" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f89af9baa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af9badd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f89afa12b40" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89afa12b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af9be020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af9be1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af9be340"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af9be4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af9be660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f89af9bc720" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89af9bc720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af9bcaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89af9bcc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af9bcdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af9bb020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89af9bb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89af9be9e0" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89af9be9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af9bed80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f89af9bb400" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f89af9bb400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f89af9bb780"/>
        <function-ref name="noAck" scoped="" ref="0x7f89af9bb910"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f89af9bbaa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f89af9bd020" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89af9bd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89af9bd3a0"/>
        <function-ref name="source" scoped="" ref="0x7f89af9bd530"/>
        <function-ref name="address" scoped="" ref="0x7f89af9bd6c0"/>
        <function-ref name="destination" scoped="" ref="0x7f89af9bd850"/>
        <function-ref name="setSource" scoped="" ref="0x7f89af9bd9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89af9bdb70"/>
        <function-ref name="type" scoped="" ref="0x7f89af9bdd00"/>
        <function-ref name="setType" scoped="" ref="0x7f89af9bc020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89af9bc1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89af9bc340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89af9bc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89af9b54e0" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89af9b54e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89af9b5860"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89af9b59f0"/>
        <function-ref name="start" scoped="" ref="0x7f89af9b5b80"/>
        <function-ref name="stop" scoped="" ref="0x7f89af9b5d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89af9b2020" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89af9b2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f89b0ef9be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af9b23a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af9b2530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af9b26c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af9b2850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af9b29e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af9b8e50" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af9b8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af9b5210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89af9b34c0" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89af9b34c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f89b0ef9be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af9b3840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89af9b1940" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89af9b1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89af9b1cc0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89af9b1e50"/>
        <function-ref name="led1On" scoped="" ref="0x7f89af9b0020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89af9b01b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89af9b0340"/>
        <function-ref name="get" scoped="" ref="0x7f89af9b04d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89af9b0660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89af9b0ca0"/>
        <function-ref name="set" scoped="" ref="0x7f89af9b07f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f89af9b0980"/>
        <function-ref name="led2On" scoped="" ref="0x7f89af9b0b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f89af9b1020" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f89af9b1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f89b0ef9be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f89af9b13a0"/>
        <function-ref name="offset" scoped="" ref="0x7f89af9b1530"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f89af9b16c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f89af98cc80" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f89af98cc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89af98b0a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89af98b230"/>
        <function-ref name="start" scoped="" ref="0x7f89af98b3c0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af98b550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f89af9266e0" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x7f89af9266e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af926a60"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af926bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f89af981b80" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f89af981b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af97a020"/>
        <function-ref name="stop" scoped="" ref="0x7f89af97a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f89af95d660" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x7f89af95d660"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af95d9e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af95db70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af98c630" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af98c630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af98c9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f89af977870" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x7f89af977870"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f89af977bf0"/>
        <function-ref name="flush" scoped="" ref="0x7f89af977d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f89af92ac70" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x7f89af92ac70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af929020"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af9291b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f89af97b410" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f89af97b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f89af97b790"/>
        <function-ref name="resetSend" scoped="" ref="0x7f89af97b920"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f89af97bab0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f89af97bc40"/>
        <function-ref name="putData" scoped="" ref="0x7f89af97bdd0"/>
        <function-ref name="putDone" scoped="" ref="0x7f89af984020"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f89af9841b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89af984430" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89af984430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89af9847b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89af984940"/>
        <function-ref name="led1On" scoped="" ref="0x7f89af984ad0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89af984c60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89af984df0"/>
        <function-ref name="get" scoped="" ref="0x7f89af981020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89af9811b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89af9817f0"/>
        <function-ref name="set" scoped="" ref="0x7f89af981340"/>
        <function-ref name="led0On" scoped="" ref="0x7f89af9814d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f89af981660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f89af923a00" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f89af923a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af923d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af921020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f89af986b10" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f89af986b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f89af98a020"/>
        <function-ref name="nextByte" scoped="" ref="0x7f89af98a1b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f89af98a340"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f89af98a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f89af985080" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f89af985080"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f89af985400"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f89af985590"/>
        <function-ref name="endPacket" scoped="" ref="0x7f89af985720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f89af857020" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x7f89af857020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af8573a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af857530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f89af85dde0" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89af85dde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f89b0ef9be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af85c1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af85c350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af85c4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af85c670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af85c800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f89af857800" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x7f89af857800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af857b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af857d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f89af85d6c0" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f89af85d6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f89b0ef9be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f89af85da60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f89af85cc20" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x7f89af85cc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f89b0ef9be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f89af85b020"/>
        <function-ref name="offset" scoped="" ref="0x7f89af85b1b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f89af85b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89af85a920" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89af85a920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89af85aca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89af85ae30"/>
        <function-ref name="led1On" scoped="" ref="0x7f89af858020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89af8581b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89af858340"/>
        <function-ref name="get" scoped="" ref="0x7f89af8584d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89af858660"/>
        <function-ref name="led2On" scoped="" ref="0x7f89af858ca0"/>
        <function-ref name="set" scoped="" ref="0x7f89af858980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89af8587f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f89af858b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f89af85be80" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f89af85be80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f89af85a220"/>
        <function-ref name="nextByte" scoped="" ref="0x7f89af85a3b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f89af85a540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f89af85a6d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f89af85b590" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f89af85b590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f89af85b910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f89af85baa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f89af85bc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f89af848d20" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f89af848d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af8500e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f89af850270"/>
        <function-ref name="receive" scoped="" ref="0x7f89af850400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f89af850590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f89af850720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f89af8508b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af850a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f89af855e00" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f89af855e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f89af8521c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f89af852350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f89af8524e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f89af852670"/>
        <function-ref name="putData" scoped="" ref="0x7f89af852800"/>
        <function-ref name="putDone" scoped="" ref="0x7f89af852990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f89af852b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89af850cc0" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89af850cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89af84f0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89af84f230"/>
        <function-ref name="led1On" scoped="" ref="0x7f89af84f3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89af84f550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89af84f6e0"/>
        <function-ref name="get" scoped="" ref="0x7f89af84f870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89af84fa00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89af8451b0"/>
        <function-ref name="set" scoped="" ref="0x7f89af84fb90"/>
        <function-ref name="led0On" scoped="" ref="0x7f89af84fd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f89af845020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f89af829020" loc="42:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f89af829020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af8293a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f89af829530"/>
        <function-ref name="receive" scoped="" ref="0x7f89af8296c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f89af829850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f89af82b960" loc="41:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f89af82b960"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af82bce0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f89af82be70"/>
        <function-ref name="receive" scoped="" ref="0x7f89af82a030"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f89af82a1c0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f89af82a350"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f89af82a4e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af82a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f89af82b150" loc="40:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f89af82b150"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af82b4d0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af82b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f89af828cb0" loc="41:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f89af828cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af8210a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f89af821230"/>
        <function-ref name="receive" scoped="" ref="0x7f89af8213c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f89af821550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f89af821850" loc="42:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f89af821850"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af821bd0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f89af821d60"/>
        <function-ref name="receive" scoped="" ref="0x7f89af820020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f89af8201b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f89af820340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f89af8204d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af820660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f89af820c20" loc="43:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89af820c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89af81fa80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89af81d4e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89af81d020"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af81d9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f89af8284b0" loc="40:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f89af8284b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af828830"/>
        <function-ref name="stop" scoped="" ref="0x7f89af8289c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f89af7d45a0" loc="50:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f89af7d45a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af7d4920"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f89af7d4ab0"/>
        <function-ref name="receive" scoped="" ref="0x7f89af7d4c40"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f89af7d4dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x7f89af7d20a0" loc="53:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x7f89af7d20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7d2420"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7d25b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af81a770" loc="48:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af81a770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af81aaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f89af7d30c0" loc="51:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f89af7d30c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af7d3440"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f89af7d35d0"/>
        <function-ref name="receive" scoped="" ref="0x7f89af7d3760"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f89af7d38f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f89af7d3a80"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f89af7d3c10"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af7d3da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f89af7d0810" loc="56:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89af7d0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89af7cf6a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89af7ce090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89af7cfb60"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af7ce550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x7f89af7d10a0" loc="55:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x7f89af7d10a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f89af7d1420"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f89af7d15b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f89af7d1740"/>
        <function-ref name="txDone" scoped="" ref="0x7f89af7d18d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f89af7d1a60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f89af7d1bf0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f89af7d1d80"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f89af7d0020"/>
        <function-ref name="tx" scoped="" ref="0x7f89af7d01b0"/>
        <function-ref name="rx" scoped="" ref="0x7f89af7d0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f89af81ad80" loc="49:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f89af81ad80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7d4180"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7d4310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x7f89af7d2880" loc="54:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x7f89af7d2880"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7d2c00"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7d2d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f89af7b03a0" loc="49:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f89af7b03a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f89af7b0720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f89af7b08b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f89af7b0a40"/>
        <function-ref name="txDone" scoped="" ref="0x7f89af7b0bd0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f89af7b0d60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f89af7af020"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f89af7af1b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f89af7af340"/>
        <function-ref name="tx" scoped="" ref="0x7f89af7af4d0"/>
        <function-ref name="rx" scoped="" ref="0x7f89af7af660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f89af7aec40" loc="53:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f89af7aec40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f89af7ad020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f89af7ad1b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f89af7ad340"/>
        <function-ref name="txDone" scoped="" ref="0x7f89af7ad4d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f89af7ad660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f89af7ad7f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f89af7ad980"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f89af7adb10"/>
        <function-ref name="tx" scoped="" ref="0x7f89af7adca0"/>
        <function-ref name="rx" scoped="" ref="0x7f89af7ade30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f89af7b1990" loc="48:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f89af7b1990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7b1d10"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7b0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f89af7af9f0" loc="51:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f89af7af9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7afd70"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7ae020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f89af7ae3b0" loc="52:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f89af7ae3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7ae730"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7ae8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f89af7b10f0" loc="47:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f89af7b10f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7b1470"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7b1600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x7f89af7acbc0" loc="114:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x7f89af7acbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af7a8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f89af7a75f0" loc="117:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f89af7a75f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f89af7a7970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f89af7a7b00"/>
        <function-ref name="rxDone" scoped="" ref="0x7f89af7a7c90"/>
        <function-ref name="txDone" scoped="" ref="0x7f89af7a7e20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f89af7a6020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f89af7a61b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f89af7a6340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f89af7a64d0"/>
        <function-ref name="tx" scoped="" ref="0x7f89af7a6660"/>
        <function-ref name="rx" scoped="" ref="0x7f89af7a67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x7f89af7a6b50" loc="119:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x7f89af7a6b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af7a5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f89af7a45f0" loc="122:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f89af7a45f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f89af7a4970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f89af7a4b00"/>
        <function-ref name="rxDone" scoped="" ref="0x7f89af7a4c90"/>
        <function-ref name="txDone" scoped="" ref="0x7f89af7a4e20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f89af7a3020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f89af7a31b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f89af7a3340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f89af7a34d0"/>
        <function-ref name="tx" scoped="" ref="0x7f89af7a3660"/>
        <function-ref name="rx" scoped="" ref="0x7f89af7a37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f89af7a8cd0" loc="116:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f89af7a8cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7a70a0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7a7230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f89af7a53f0" loc="120:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f89af7a53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7a5770"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7a5900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f89af7a5cd0" loc="121:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f89af7a5cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7a40a0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7a4230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7f89af7a3b20" loc="124:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f89af7a3b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f89af7a2020"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f89af7a21b0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f89af7a2340"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f89af7a24d0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f89af7a2660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f89af7a2980" loc="125:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f89af7a2980"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f89af7a2d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f89af7a83f0" loc="115:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f89af7a83f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f89af7a8770"/>
        <function-ref name="stop" scoped="" ref="0x7f89af7a8900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89af743dc0" loc="24:../../tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89af743dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89af73fca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89af73e670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89af73e1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af73eb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89af73dde0" loc="24:../../tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89af73dde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f89b0fa8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89af73aca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89af739670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89af7391b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af739b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f89af72f020" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f89af72f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f89af72f3a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f89af72f530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f89af72f6c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f89af72f850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f89af72f9e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f89af72fb70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f89af72fd00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f89af72e020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f89af72e1b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f89af72e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f89af72e850" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f89af72e850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f89af72ae60"/>
        <function-ref name="test" scoped="" ref="0x7f89af72a4e0"/>
        <function-ref name="get" scoped="" ref="0x7f89af72d4c0"/>
        <function-ref name="captured" scoped="" ref="0x7f89af72c020"/>
        <function-ref name="reset" scoped="" ref="0x7f89af72c530"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af72a9a0"/>
        <function-ref name="set" scoped="" ref="0x7f89af72d980"/>
        <function-ref name="start" scoped="" ref="0x7f89af72c9f0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af72a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f89af729ad0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f89af729ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89af7254e0"/>
        <function-ref name="fired" scoped="" ref="0x7f89af7271b0"/>
        <function-ref name="get" scoped="" ref="0x7f89af728790"/>
        <function-ref name="reset" scoped="" ref="0x7f89af727670"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af7259a0"/>
        <function-ref name="set" scoped="" ref="0x7f89af728c50"/>
        <function-ref name="start" scoped="" ref="0x7f89af727b30"/>
        <function-ref name="stop" scoped="" ref="0x7f89af725020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89af737cc0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89af737cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89af730090"/>
        <function-ref name="test" scoped="" ref="0x7f89af7326e0"/>
        <function-ref name="get" scoped="" ref="0x7f89af734980"/>
        <function-ref name="setScale" scoped="" ref="0x7f89af730550"/>
        <function-ref name="getScale" scoped="" ref="0x7f89af730a60"/>
        <function-ref name="reset" scoped="" ref="0x7f89af733840"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af733380"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af732ba0"/>
        <function-ref name="set" scoped="" ref="0x7f89af734e40"/>
        <function-ref name="start" scoped="" ref="0x7f89af733d00"/>
        <function-ref name="stop" scoped="" ref="0x7f89af732220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f89af71c2c0" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f89af71c2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f89af71c640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f89af71c7d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f89af71c960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f89af71caf0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f89af71cc80"/>
        <function-ref name="setControlB" scoped="" ref="0x7f89af71ce10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f89af71b020"/>
        <function-ref name="getControlB" scoped="" ref="0x7f89af71b1b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7f89af71b340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f89af71b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f89af7165a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f89af7165a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89af712020"/>
        <function-ref name="fired" scoped="" ref="0x7f89af714c10"/>
        <function-ref name="get" scoped="" ref="0x7f89af714240"/>
        <function-ref name="reset" scoped="" ref="0x7f89af713110"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af7124e0"/>
        <function-ref name="set" scoped="" ref="0x7f89af714700"/>
        <function-ref name="start" scoped="" ref="0x7f89af7135d0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af713a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f89af71b9e0" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f89af71b9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f89af717e60"/>
        <function-ref name="test" scoped="" ref="0x7f89af7174e0"/>
        <function-ref name="get" scoped="" ref="0x7f89af7196b0"/>
        <function-ref name="captured" scoped="" ref="0x7f89af7180d0"/>
        <function-ref name="reset" scoped="" ref="0x7f89af7185e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af7179a0"/>
        <function-ref name="set" scoped="" ref="0x7f89af719b70"/>
        <function-ref name="start" scoped="" ref="0x7f89af718aa0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af717020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f89af712ba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f89af712ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89af70e550"/>
        <function-ref name="fired" scoped="" ref="0x7f89af70f1f0"/>
        <function-ref name="get" scoped="" ref="0x7f89af7107f0"/>
        <function-ref name="reset" scoped="" ref="0x7f89af70f6b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af70ea10"/>
        <function-ref name="set" scoped="" ref="0x7f89af710cb0"/>
        <function-ref name="start" scoped="" ref="0x7f89af70fb70"/>
        <function-ref name="stop" scoped="" ref="0x7f89af70e090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f89af70d120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f89af70d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f89af70aa90"/>
        <function-ref name="fired" scoped="" ref="0x7f89af70b770"/>
        <function-ref name="get" scoped="" ref="0x7f89af70dd50"/>
        <function-ref name="reset" scoped="" ref="0x7f89af70bc30"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af709020"/>
        <function-ref name="set" scoped="" ref="0x7f89af70b260"/>
        <function-ref name="start" scoped="" ref="0x7f89af70a110"/>
        <function-ref name="stop" scoped="" ref="0x7f89af70a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89af721020" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89af721020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89af71d350"/>
        <function-ref name="test" scoped="" ref="0x7f89af71e9a0"/>
        <function-ref name="get" scoped="" ref="0x7f89af721c50"/>
        <function-ref name="setScale" scoped="" ref="0x7f89af71d810"/>
        <function-ref name="getScale" scoped="" ref="0x7f89af71dd20"/>
        <function-ref name="reset" scoped="" ref="0x7f89af71fb20"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af71f660"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af71ee60"/>
        <function-ref name="set" scoped="" ref="0x7f89af71f150"/>
        <function-ref name="start" scoped="" ref="0x7f89af71e020"/>
        <function-ref name="stop" scoped="" ref="0x7f89af71e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af68fc60" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af68fc60"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f89b10b8020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f89b10b8020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af68e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f89af68e410" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89af68e410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89af68a810"/>
        <function-ref name="test" scoped="" ref="0x7f89af68be60"/>
        <function-ref name="get" scoped="" ref="0x7f89af68d090"/>
        <function-ref name="setScale" scoped="" ref="0x7f89af68acd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f89af689260"/>
        <function-ref name="reset" scoped="" ref="0x7f89af68b020"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af68da60"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af68a350"/>
        <function-ref name="set" scoped="" ref="0x7f89af68d550"/>
        <function-ref name="start" scoped="" ref="0x7f89af68b4e0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af68b9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89af6863c0" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89af6863c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f89b0fa8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89af685240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89af685bc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89af685700"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af6840d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f89af684660" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89af684660"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f89af680a90"/>
        <function-ref name="test" scoped="" ref="0x7f89af680110"/>
        <function-ref name="get" scoped="" ref="0x7f89af6823d0"/>
        <function-ref name="setScale" scoped="" ref="0x7f89af67e020"/>
        <function-ref name="getScale" scoped="" ref="0x7f89af67e530"/>
        <function-ref name="reset" scoped="" ref="0x7f89af6812a0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af682da0"/>
        <function-ref name="isOn" scoped="" ref="0x7f89af6805d0"/>
        <function-ref name="set" scoped="" ref="0x7f89af682890"/>
        <function-ref name="start" scoped="" ref="0x7f89af681760"/>
        <function-ref name="stop" scoped="" ref="0x7f89af681c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f89af6770f0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f89af6770f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f89b0fa8d40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89af676020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89af6769a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89af6764e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af676e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f89af67bcd0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f89af67bcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fec5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f89b0fec930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f89af679b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f89af678550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f89af678090"/>
        <function-ref name="overflow" scoped="" ref="0x7f89af678a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f89af66a1e0" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x7f89af66a1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f89af66a560"/>
        <function-ref name="offset" scoped="" ref="0x7f89af66a6f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f89af66a880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f89af64f510" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f89af64f510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f89af64c4a0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89af64b260"/>
        <function-ref name="element" scoped="" ref="0x7f89af64b8d0"/>
        <function-ref name="full" scoped="" ref="0x7f89af64d5b0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89af64c020"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89af64cb50"/>
        <function-ref name="empty" scoped="" ref="0x7f89af64d130"/>
        <function-ref name="size" scoped="" ref="0x7f89af64da30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f89af645330" loc="93:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f89af645330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f89af642260"/>
        <function-ref name="enqueue" scoped="" ref="0x7f89af640020"/>
        <function-ref name="element" scoped="" ref="0x7f89af640690"/>
        <function-ref name="full" scoped="" ref="0x7f89af6444a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f89af644da0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f89af642910"/>
        <function-ref name="empty" scoped="" ref="0x7f89af644020"/>
        <function-ref name="size" scoped="" ref="0x7f89af644920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f89af640d40" loc="94:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f89af640d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af63f0e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af63f270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af63f400"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af63f590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af63f720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f89af63f9b0" loc="95:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89af63f9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89af63fd30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89af63e020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af63e1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af63e340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89af63e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7f89af639d10" loc="114:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="retrySend" scoped="" ref="0x7f89af639d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89af6380e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89af638270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af6463c0" loc="89:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af6463c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af646740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f89af63e750" loc="96:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f89af63e750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f89af63ead0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f89af63ec60"/>
        <function-ref name="led1On" scoped="" ref="0x7f89af63edf0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f89af63d020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f89af63d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f89af63d340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f89af63d4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f89af63db10"/>
        <function-ref name="set" scoped="" ref="0x7f89af63d660"/>
        <function-ref name="led0On" scoped="" ref="0x7f89af63d7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f89af63d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7f89af643a70" loc="90:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f89af643a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f89af643df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f89af6202a0" loc="43:../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f89af6202a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f89af620620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f89af619020" loc="94:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f89af619020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f89af6193a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f89af619680" loc="95:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f89af619680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f89af619a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f89af612d50" loc="39:../../tos/lib/printf/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89af612d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89af60f100"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f89af60f4a0" loc="40:../../tos/lib/printf/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f89af60f4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f89af60f820"/>
        <function-ref name="stopDone" scoped="" ref="0x7f89af60f9b0"/>
        <function-ref name="start" scoped="" ref="0x7f89af60fb40"/>
        <function-ref name="stop" scoped="" ref="0x7f89af60fcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89af609370" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MCCC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89af609370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89af606870"/>
        <function-ref name="fired" scoped="" ref="0x7f89af608e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89af607c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89af607780"/>
        <function-ref name="getdt" scoped="" ref="0x7f89af6041e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f89af606cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89af607300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89af608020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89af606260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89af6084f0"/>
        <function-ref name="stop" scoped="" ref="0x7f89af6089c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f89af5bae80" loc="2:TXFlowC.nc">
      <component-ref qname="MCCC.TXFlow1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f89af5bae80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89af5b9220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89af5b93b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89af5b9540"/>
        <function-ref name="cancel" scoped="" ref="0x7f89af5b96d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89af5b9860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f89aebc4cb0" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MCCC.TXFlow1.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f89aebc4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89aebbf220"/>
        <function-ref name="fired" scoped="" ref="0x7f89aebc27c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89aebc0590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89aebc0110"/>
        <function-ref name="getdt" scoped="" ref="0x7f89aebbfb20"/>
        <function-ref name="gett0" scoped="" ref="0x7f89aebbf6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89aebc2c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89aebc3940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89aebc0ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89aebc3e10"/>
        <function-ref name="stop" scoped="" ref="0x7f89aebc2340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendTimer" ref="0x7f89aebbc830" loc="6:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendTimer" scoped="" ref="0x7f89aebbc830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f89b0fed1a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f89b0fed510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f89aebb8cf0"/>
        <function-ref name="fired" scoped="" ref="0x7f89aebb9300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f89aebb80d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f89aebb9c00"/>
        <function-ref name="getdt" scoped="" ref="0x7f89aebb7660"/>
        <function-ref name="gett0" scoped="" ref="0x7f89aebb71e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f89aebb9780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f89aebbb480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f89aebb86e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f89aebbb950"/>
        <function-ref name="stop" scoped="" ref="0x7f89aebbbe20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="send" ref="0x7f89aebb2020" loc="20:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="send" scoped="" ref="0x7f89aebb2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f89aebb23a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f89aebb2530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f89aebb6720" loc="8:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f89aebb6720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f89aebb6aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f89aebb6cf0" loc="9:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f89aebb6cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f89aebb40a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f89aebb4230"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aebb43c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aebb4550"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f89aebb46e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AppSend" ref="0x7f89aebb7a90" loc="7:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AppSend" scoped="" ref="0x7f89aebb7a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f89aebb7e10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f89aebb6020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f89aebb61b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f89aebb6340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f89aebb64d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f89aebb4930" loc="10:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f89aebb4930"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f89aebb4cb0"/>
        <function-ref name="source" scoped="" ref="0x7f89aebb4e40"/>
        <function-ref name="address" scoped="" ref="0x7f89aebb3020"/>
        <function-ref name="destination" scoped="" ref="0x7f89aebb31b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f89aebb3340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f89aebb34d0"/>
        <function-ref name="type" scoped="" ref="0x7f89aebb3660"/>
        <function-ref name="setType" scoped="" ref="0x7f89aebb37f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f89aebb3980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f89aebb3b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f89aebb3ca0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f89b0ee1d10" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
              <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0ee13b0" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f89b0ee1700" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b0ee1a30" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f89b0edb5c0" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f89b0edb340" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f89b0edaab0" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f89b0eda830" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f89b0ede920" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f89b0edbe10" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f89b0f5cb50" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <function command="" provided="0" name="send" ref="0x7f89b0ee85e0" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0ee8020" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b0ee8350" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f89b0ee3bb0" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0ee35b0" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b0ee38e0" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f89b0ee5d20" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f89b0ee6900" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0ee6680" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f89b0ee4e00" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0ee4820" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f89b0ee4b70" loc="100:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FrameConfiguration" loc="31:../../tos/interfaces/FrameConfiguration.nc">
      <documentation loc="23:../../tos/interfaces/FrameConfiguration.nc">
        <short>&#10; </short>
        <long>&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision$&#10; @date $Date$&#10;&#10; This interface will be implemented by the different TDMA protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="setFrameLength" ref="0x7f89b0f57ce0" loc="33:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="numSlots" ref="0x7f89b0f57a60" loc="33:../../tos/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlotLength" ref="0x7f89b0f57350" loc="32:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="slotTimeBms" ref="0x7f89b0f570d0" loc="32:../../tos/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlotLength" ref="0x7f89b0f564b0" loc="34:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getFrameLength" ref="0x7f89b0f56c00" loc="35:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Slotter" loc="30:../../tos/interfaces/Slotter.nc">
      <documentation loc="23:../../tos/interfaces/Slotter.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <function event="" provided="0" name="slot" ref="0x7f89b0e3a8a0" loc="31:../../tos/interfaces/Slotter.nc">
        <interfacedef-ref qname="Slotter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="num" ref="0x7f89b0e3a620" loc="31:../../tos/interfaces/Slotter.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f89b0e67350" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f89b0e488a0" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e48620" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f89b0e46950" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e466d0" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f89b0e43d30" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e43730" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b0e43a60" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f89b0e45da0" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f89b0e44dd0" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e44810" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b0e44b40" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f89b0e3d760" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f89b0e3b020" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PrioCritQueue" loc="9:PrioCritQueue.nc">
      <documentation loc="1:PrioCritQueue.nc">
        <short>&#10;  Interface to a priority queue that contains items&#10;  of multiple priority levels.</short>
        <long>&#10;  Interface to a priority queue that contains items&#10;  of multiple priority levels. The queue has a maximum size.&#10;&#10;  @author James Harbin&#10;  @date   $Date: 2017-08-31 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f89b0e39560" loc="9:PrioCritQueue.nc">
          <interfacedef-ref qname="PrioCritQueue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="size" ref="0x7f89b0e31d50" loc="31:PrioCritQueue.nc">
        <documentation loc="25:PrioCritQueue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeuePrio" ref="0x7f89b0e295b0" loc="83:PrioCritQueue.nc">
        <documentation loc="77:PrioCritQueue.nc">
          <short>&#10; Remove the head of the queue of particular priority.</short>
          <long>&#10; Remove the head of the queue of particular priority. If that queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f89b0e29330" loc="83:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f89b0e287f0" loc="92:PrioCritQueue.nc">
        <documentation loc="85:PrioCritQueue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f89b0e28220" loc="92:PrioCritQueue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f89b1a77b50"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x7f89b1a77b50"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
          <variable name="prio" ref="0x7f89b0e28560" loc="92:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f89b0e27d00" loc="98:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headPrio" ref="0x7f89b0e2d350" loc="63:PrioCritQueue.nc">
        <documentation loc="56:PrioCritQueue.nc">
          <short>&#10; Get the head of the queue of a particular priority without&#10; removing it.</short>
          <long>&#10; Get the head of the queue of a particular priority without&#10; removing it. If that queue is empty, the return value is&#10; undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f89b0e2d0d0" loc="63:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sizePrio" ref="0x7f89b0e307f0" loc="34:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f89b0e30570" loc="34:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f89b0e315d0" loc="23:PrioCritQueue.nc">
        <documentation loc="18:PrioCritQueue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f89b0e2e020" loc="41:PrioCritQueue.nc">
        <documentation loc="36:PrioCritQueue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearLO" ref="0x7f89b0e27530" loc="95:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeHI" ref="0x7f89b0e25460" loc="101:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f89b0e2a020" loc="71:PrioCritQueue.nc">
        <documentation loc="65:PrioCritQueue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f89b0e39e10" loc="16:PrioCritQueue.nc">
        <documentation loc="11:PrioCritQueue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headHI" ref="0x7f89b0e2c9c0" loc="54:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="q_status" ref="0x7f89b0e2c740" loc="54:PrioCritQueue.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeueHI" ref="0x7f89b0e2abe0" loc="75:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="head" ref="0x7f89b0e2ea60" loc="51:PrioCritQueue.nc">
        <documentation loc="43:PrioCritQueue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined. q_status is a pointer&#10; to an error_t to set as SUCCESS or FAIL depending on whether&#10; there was anything returned&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89b0e39560"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="q_status" ref="0x7f89b0e2e7e0" loc="51:PrioCritQueue.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../tos/interfaces/Random.nc">
      <documentation loc="34:../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f89b0e3fe50" loc="52:../../tos/interfaces/Random.nc">
        <documentation loc="48:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f89b0e3f650" loc="46:../../tos/interfaces/Random.nc">
        <documentation loc="42:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f89b0e1c9b0" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e1c730" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f89b0e1ab90" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e1a910" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f89b0e18d10" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e18a90" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f89b0e142c0" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f89b0e1d8c0" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f89b0e1dc40" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b0e14020" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f89b0e0e970" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e0e370" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b0e0e6a0" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f89b0e0fa60" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f89b0e13630" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e133b0" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f89b0e11b80" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0e115a0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f89b0e118f0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GlobalTime" loc="37:../../tos/lib/ftsp/GlobalTime.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b0e0d910" loc="37:../../tos/lib/ftsp/GlobalTime.nc">
          <interfacedef-ref qname="GlobalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b0e0d910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getLocalTime" ref="0x7f89b0e092b0" loc="42:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="39:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Returns the current local time of this mote.</short>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="global2Local" ref="0x7f89b0e06640" loc="76:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="68:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Converts the global time given in &#60;code>time&#60;/code> into the&#10; correspoding local time and stores this again in&#10; &#60;code>time&#60;/code>.</short>
          <long>&#10; Converts the global time given in &#60;code>time&#60;/code> into the&#10; correspoding local time and stores this again in&#10; &#60;code>time&#60;/code>. This method performs the inverse of the&#10; &#60;code>local2Global&#60;/clode> transformation.&#10;&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f89b0e063c0" loc="76:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getGlobalTime" ref="0x7f89b0e09d40" loc="49:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="44:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Reads the current global time.</short>
          <long>&#10; Reads the current global time. This method is a combination&#10; of &#60;code>getLocalTime&#60;/code> and &#60;code>local2Global&#60;/code>.&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f89b0e09ac0" loc="49:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="local2Global" ref="0x7f89b0e078e0" loc="66:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="51:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Converts the local time given in &#60;code>time&#60;/code> into the&#10; corresponding global time and stores this again in&#10; &#60;code>time&#60;/code>.</short>
          <long>&#10; Converts the local time given in &#60;code>time&#60;/code> into the&#10; corresponding global time and stores this again in&#10; &#60;code>time&#60;/code>. The following equation is used to compute the&#10; conversion:&#10;&#10;&#9;globalTime = localTime + offset + skew * (localTime - syncPoint)&#10;&#10; The skew is normalized to 0.0 (1.0 is subtracted) to increase the&#10; machine precision. The syncPoint value is periodically updated to&#10; increase the machine precision of the floating point arithmetic and&#10; also to allow time wrap.&#10;&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f89b0e07660" loc="66:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncInfo" loc="36:../../tos/lib/ftsp/TimeSyncInfo.nc">
      <function command="" provided="0" name="getSyncPoint" ref="0x7f89b0df28b0" loc="55:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="50:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the local time of the last synchronization point.</short>
          <long>&#10; Returns the local time of the last synchronization point. This &#10; value is close to the current local time and updated when a new&#10; time synchronization message arrives.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRootID" ref="0x7f89b0df1190" loc="60:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="57:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the current root to which this node is synchronized.</short>
          <long>&#10; Returns the current root to which this node is synchronized. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSeqNum" ref="0x7f89b0df19a0" loc="65:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="62:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the latest seq number seen from the current root.</short>
          <long>&#10; Returns the latest seq number seen from the current root.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOffset" ref="0x7f89b0df5730" loc="41:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="38:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns current offset of the local time wrt global time.</short>
          <long>&#10; Returns current offset of the local time wrt global time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNumEntries" ref="0x7f89b0df0270" loc="71:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="67:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the number of entries stored currently in the &#10; regerssion table.</short>
          <long>&#10; Returns the number of entries stored currently in the &#10; regerssion table.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeartBeats" ref="0x7f89b0df0ac0" loc="76:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="73:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the value of heartBeats variable.</short>
          <long>&#10; Returns the value of heartBeats variable. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSkew" ref="0x7f89b0df2020" loc="48:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="43:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns current skew of the local time wrt global time.</short>
          <long>&#10; Returns current skew of the local time wrt global time.&#10; This value is normalized to 0.0 (1.0 is subtracted) to get maximum &#10; representation precision.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-float cname="float" size="I:4" alignment="I:1"></type-float>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f89b0e63a00" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f89b0e611f0" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f89b0e619d0" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f89b0e60940" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f89b0e5d120" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f89b0e5d930" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f89b0e60190" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b0e5c4c0" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f89b0e5c240" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f89b0e63270" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f89b0e5f190" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f89b0e5f920" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b0e045c0" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b0e045c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f89b0dfb420" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f89b0e00d60" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f89b0dfdb10" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f89b0dfd540" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f89b0dfd880" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f89b0dfed60" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f89b0df9460" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f89b0dfbbb0" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f89b0dfe570" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f89b0e012a0" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f89b0e01020" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f89b0dfcaa0" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f89b0dfc4d0" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f89b0dfc810" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f89b0e01d60" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f89b0e01ae0" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f89b0e00650" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f89b0e4dd30" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e4dab0" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f89b0e57920" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e576a0" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f89b0e66d20" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f89b0e59820" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e595a0" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f89b0e54360" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e58d30" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f89b0e540d0" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f89b0e55d30" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e55750" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f89b0e55aa0" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f89b0e51810" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e51590" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f89b0e4fb90" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e4f5e0" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f89b0e4f900" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f89b0f049e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f89b0e52600" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e52380" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f89b0e4c2f0" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f89b0e50cf0" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f89b0e4c060" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f89b0e4a190" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlotterControl" loc="30:../../tos/interfaces/SlotterControl.nc">
      <documentation loc="23:../../tos/interfaces/SlotterControl.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <function command="" provided="0" name="stop" ref="0x7f89b0e35700" loc="37:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlot" ref="0x7f89b0e35e50" loc="38:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="synchronize" ref="0x7f89b0e38020" loc="31:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="toSlot" ref="0x7f89b0e49c90" loc="31:../../tos/interfaces/SlotterControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSynchornized" ref="0x7f89b0e38790" loc="32:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f89b0e37020" loc="34:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemaining" ref="0x7f89b0e35020" loc="36:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f89b0e37770" loc="35:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f89b0cf5940" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f89b0cf41f0" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7f89b0ce8dc0" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7f89b0ce8b40" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7f89b0ceb390" loc="31:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7f89b0cebe10" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f89b0cebb90" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7f89b0ce9940" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f89b0ce96c0" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7f89b0ce8270" loc="53:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f89b0cd41f0" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f89b0cd4920" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f89b0cd6390" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f89b0cd37b0" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f89b0cd6a90" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f89b0cd3070" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b0cd75b0" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f89b0cd7c80" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f89b107a620" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f89b1079650" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f89b107ad90" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f89b1071a30" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f89b106f2b0" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f89b0f9e7f0" loc="85:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f89b0f9d020" loc="86:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f89b0f9e020" loc="79:../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f89b0f83e20" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f89b1018df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f89b0f81810" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b0ae9100" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b0ae9100"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f89b0ae9340" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f89b0ae4070" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f89b0ae6070" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f89b0ae56a0" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f89b0ae50d0" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f89b0ae5410" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f89b0ae6850" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f89b0ae4860" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f89b0ae7020" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f89b0ae9c20" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0ae9340"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f89b0ae7850" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x7f89b0a9b4d0" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f89b0a99a70" loc="87:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f89b0a9d5a0" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f89b0a98ca0" loc="91:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f89b0a984d0" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f89b0a98250" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f89b0a9a840" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f89b0a9a5c0" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f89b0a96740" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f89b0a964c0" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f89b0a9dd40" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x7f89b0a992a0" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f89b0a99020" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f89b0a9be70" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f89b0a9bbf0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f89b0a9e550" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a9e550"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7f89b0a8e420" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7f89b0a8e1a0" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f89b0a8f270" loc="76:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f89b0a93020" loc="47:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a9e550"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f89b0a92440" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a9e550"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f89b0a921c0" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a9e550"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f89b0a92bf0" loc="64:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f89b0a8fa30" loc="82:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b0a939c0" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a9e550"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f89b0a93740" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a9e550"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f89b0a91390" loc="67:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f89b0a91ae0" loc="70:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f89b0a8b8f0" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a8b8f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7f89b0a84270" loc="74:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f89b0a86420" loc="58:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f89b0a88270" loc="48:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a8b8f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f89b0a86b90" loc="62:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f89b0a84a30" loc="80:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b0a88c30" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a8b8f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f89b0a889b0" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b0a8b8f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f89b0a85350" loc="65:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f89b0a85aa0" loc="68:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f89b0aac7c0" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f89b0aac7c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7f89b0aa4070" loc="98:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f89b0aa60e0" loc="87:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f89b0aa9120" loc="61:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f89b0aac7c0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7f89b0aa4a50" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7f89b0aa47d0" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7f89b0aa3270" loc="110:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f89b0aa8a40" loc="75:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f89b0aa82b0" loc="70:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f89b0aa68a0" loc="93:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b0aa9ad0" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f89b0aac7c0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f89b0aa9850" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f89b0aac7c0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f89b0aa71f0" loc="78:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f89b0aa7940" loc="81:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b0999780" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b0999780"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f89b09999c0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b09999c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f89b0996350" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b09999c0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f89b09954b0" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f89b0996bd0" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f89b0995c10" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f89b0901630" loc="59:../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f89b0901020" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f89b09013a0" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f89b08fae30" loc="65:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08fa810" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f89b08faba0" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f89b08f8020" loc="71:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08f9d70" loc="71:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f89b08fa020" loc="57:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f89b08fb520" loc="52:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f89b08fb2a0" loc="52:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f89b08f1390" loc="65:../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08f1110" loc="65:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f89b08f5410" loc="46:../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08fdd90" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f89b08f5180" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f89b08f2350" loc="59:../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08f20d0" loc="59:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f89b08f4830" loc="53:../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08f4210" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f89b08f45a0" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f89b08f0390" loc="71:../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08f0110" loc="71:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="37:../../tos/lib/rfxlink/util/RadioChannel.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="setChannelDone" ref="0x7f89b08edde0" loc="50:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f89b08ed5d0" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f89b08ed350" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f89b08ec660" loc="55:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b08f67a0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b08f67a0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f89b08f69e0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b08f69e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f89b08e8840" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b08f69e0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08e85c0" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f89b08e69d0" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08e6750" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f89b08ea5f0" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08ea370" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b08e5d00" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b08f69e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08e5710" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f89b08e5a70" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b08f69e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0x7f89b08d18a0" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f89b08d18a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0x7f89b08cba90" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08cb810" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f89b08cb020" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f89b08d18a0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08cdc90" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f89b08cd490" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08cd210" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b08ca810" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="55:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
          <long>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f89b08d18a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08ca210" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f89b08ca580" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f89b08d18a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b08be350" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b08be350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f89b08bec70" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f89b1a70170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f89b08bfac0" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08bf840" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f89b089ebf0" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f89b089fbe0" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f89b089f270" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f89b089e420" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f89b089d8b0" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0x7f89b0899d40" loc="41:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0899ac0" loc="41:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f89b089c8e0" loc="37:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f89b0899350" loc="39:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08990d0" loc="39:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f89b0896830" loc="45:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0896210" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f89b08965a0" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f89b0898af0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08984d0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f89b0898860" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0x7f89b0895c70" loc="49:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f89b0f0f210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08959f0" loc="49:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0x7f89b0894980" loc="51:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f89b0f0f210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0894370" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f89b08946f0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f89b0f0f210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f89b08952a0" loc="47:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0895020" loc="47:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f89b0892120" loc="53:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f89b0f0f210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f89b08a8b70" loc="67:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f89b08a8220" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f89b08a85a0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b08a88d0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f89b08a3660" loc="122:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08a3060" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89b08a3390" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f89b08a4790" loc="110:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f89b08a6c00" loc="83:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08a6980" loc="83:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f89b08a5de0" loc="97:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08a5800" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f89b08a5b50" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0x7f89b0876cc0" loc="59:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0x7f89b0875760" loc="72:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0x7f89b0874120" loc="79:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0x7f89b0876560" loc="48:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
        <long>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example). &#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f89b085e830" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f89b085e5b0" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0x7f89b085d070" loc="62:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f89b085f500" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f89b085f280" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b085fe80" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f89b085fc00" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="43:../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="38:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0x7f89b0864500" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f89b0864280" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0x7f89b0863aa0" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="65:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f89b0863820" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0x7f89b0863040" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="60:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
          <long>&#10; Returns the node address for the given entry.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f89b0864d90" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x7f89b08625e0" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f89b0862360" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0x7f89b0865a20" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f89b08657a0" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0x7f89b07fc1f0" loc="40:../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0x7f89b0819ce0" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0819a60" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0x7f89b0801550" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08012d0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0x7f89b0800cc0" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0800a40" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f89b0804dd0" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0804b50" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f89b0805650" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08053d0" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f89b0802b20" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0802540" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f89b0802890" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f89b08043d0" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0805db0" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f89b0804140" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f89b08002b0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0801c80" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f89b0800020" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0x7f89b0811d60" loc="42:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
          <long>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0x7f89b080a730" loc="49:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0x7f89b0807a00" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0807780" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0x7f89b08092a0" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0809020" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0x7f89b0809db0" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
          <long>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0809b30" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0x7f89b07dd790" loc="60:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
          <long>&#10; This event is fired when the specified timeout period expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0x7f89b07de770" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f89b0f11180"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0x7f89b07de4f0" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f89b0f11180"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f89b07dd020" loc="55:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0x7f89b07e2c90" loc="45:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f89b07dc020" loc="65:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
          <long>&#10; Returns the current time as measured by the radio stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f89b0f11180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="37:../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0x7f89b07d6550" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="69:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
          <long>&#10; Clears all metadata and sets all default values in the headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07d62d0" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f89b07da820" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07da5a0" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f89b07d7020" loc="61:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f89b07d86b0" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
          <long>&#10; Sets the length of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07d80d0" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f89b07d8420" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f89b07e0c80" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07e0a00" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f89b07d7ab0" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="63:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07d7830" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f89b08263e0" loc="46:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f89b0829b80" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0829900" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f89b0825020" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
          <long>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0826c90" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0x7f89b08258c0" loc="59:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0x7f89b0823490" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0823210" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0x7f89b08125f0" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
          <long>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0812370" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0x7f89b081a660" loc="86:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
          <long>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0x7f89b081ce40" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89b081c830" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f89b081cbb0" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f89b0820940" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
          <long>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b08206c0" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0x7f89b081f490" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b081f210" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0x7f89b081d3e0" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89b081fd80" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f89b081d150" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0x7f89b0821020" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
          <long>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f89b0821e30" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0821890" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f89b0821ba0" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f89b081c020" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b081dcd0" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0x7f89b07eda90" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07ed810" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0x7f89b07ee0b0" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f0dd0" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0x7f89b07fa8a0" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07fa2d0" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0x7f89b07fa610" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0x7f89b07f7990" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f7710" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0x7f89b07e8950" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07e8370" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f89b07e86c0" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0x7f89b07f9e80" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f9c00" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0x7f89b07ed020" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07ee910" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0x7f89b07eec40" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0x7f89b07f53e0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89b07f6d70" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f89b07f5150" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0x7f89b07e9ba0" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07e9920" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0x7f89b07f9390" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f9110" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0x7f89b07f4df0" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f4b70" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0x7f89b07f42f0" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89b07f5c90" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f89b07f4060" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0x7f89b07e4120" loc="178:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f89b0f0f630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f89b07e63f0" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07e6170" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f89b07e58f0" loc="173:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f89b0f0f210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0x7f89b07e9120" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07eaaf0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f89b07eae40" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0x7f89b07f6510" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f6290" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0x7f89b07f05f0" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
          <long>&#10; Sets the frame pending field in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f0020" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0x7f89b07f0360" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0x7f89b07ec860" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07ec290" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0x7f89b07ec5d0" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f89b07e4b50" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07e48d0" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f89b07f2bb0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
          <long>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f2610" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f89b07f2920" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0x7f89b07fbaa0" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07fb820" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f89b07e5020" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07e6ce0" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0x7f89b07ea350" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07ea0d0" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0x7f89b07f1760" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b07f14e0" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x7f89b08162b0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
          <long>&#10; Sets the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0817bd0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0x7f89b0816020" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0x7f89b0816aa0" loc="58:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x7f89b08188e0" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0818660" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x7f89b08173d0" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0817150" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0x7f89b080d020" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b080fc90" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0x7f89b080f3d0" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
          <long>&#10; Returns the initial amount of maximum backoff for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b080f150" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0x7f89b080d870" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0x7f89b080c390" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b080c110" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="38:../../tos/lib/rfxlink/util/BareSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f89b073b2a0" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b073b020" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f89b0739dd0" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0739b50" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f89b07392b0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b073bbc0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f89b0739020" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="37:../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f89b07378d0" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
              <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0737610" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f89b07256a0" loc="50:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f89b0724600" loc="60:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f89b0725e80" loc="55:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f89b0729df0" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f89b0729810" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f89b0f04dc0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f89b0729b60" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f89b067d8e0" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f89b067c270" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f89b0677a10" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f89b06771f0" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f89b067a0e0" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f89b067a940" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f89b066eb50" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f89b0678b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f89b066e8d0" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f89b0678b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f89b0672a80" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f89b066f620" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f89b0678b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f89b066f3a0" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f89b0678b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f89b066e020" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f89b0678b00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="38:../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f89b0501020" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
              <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0502d30" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0x7f89b0502390" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b0502110" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="38:../../tos/lib/rfxlink/util/RadioState.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="turnOff" ref="0x7f89b0496d10" loc="45:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7f89b0493e60" loc="57:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f89b0492920" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f89b04926a0" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0x7f89b0490120" loc="70:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="66:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0x7f89b0493600" loc="51:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
          <long>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f89b04909d0" loc="75:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="72:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="38:../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0x7f89b048e730" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b048e4b0" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0x7f89b048dbc0" loc="64:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f89b048d350" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f89b048d0d0" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f89b03ed5e0" loc="53:../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f89b03ed5e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f89b03ea2a0" loc="64:../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f89b03ed5e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f89b03ea020" loc="64:../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f89b03ed5e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="37:../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0x7f89b03c3a00" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="54:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b03c3780" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f89b03c67f0" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
          <long>&#10; Returns if the flag is set for this message. &#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b03c6570" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0x7f89b03c45e0" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
          <long>&#10; Sets the flag in this message to the specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b03c4020" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f89b03c4350" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f89b03c3020" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89b03c4d70" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="38:../../tos/lib/rfxlink/util/RadioCCA.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="done" ref="0x7f89b0391dc0" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f89b0391b40" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f89b0391350" loc="45:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f89b02e97f0" loc="89:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f89b02ea4d0" loc="85:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f89b02ec070" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f89b02e9020" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f89b02eac40" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f89b02ebc40" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f89b02eb9c0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f89b02e72a0" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f89b02e7020" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f89b02ec810" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f89b02eb2a0" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f89b02eb020" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x7f89b02deb80" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x7f89b02e0ae0" loc="68:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x7f89b02df2b0" loc="74:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x7f89b02dfae0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7f89b02dc3b0" loc="98:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x7f89b02de350" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7f89b02e1810" loc="57:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f89b0fd12c0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f89b0fd16e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7f89b02e02a0" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f89b0fd12c0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f89b0fd16e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7f89b02e0020" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f89b0fd12c0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f89b0fd16e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89b00e5020" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89b00e5020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f89b00e5260" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b00e5260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f89b00e5d90" loc="66:../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b00e5260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f89b00e5b10" loc="66:../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89b00e5260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f89b00e9610" loc="54:../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f89b00e87d0" loc="66:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f89b00e8020" loc="61:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f89b00e9d30" loc="61:../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f89b00ecd70" loc="53:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f89b00f0020" loc="62:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89b00f3ca0" loc="62:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f89b00ee3c0" loc="74:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89b00ee140" loc="74:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f89b00f0890" loc="68:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f89b00eede0" loc="81:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89b00eeb60" loc="81:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f89aff5c600" loc="76:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f89aff61c00" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f89aff5c020" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89aff5c360" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f89aff5bb80" loc="88:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f89aff5ae50" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f89aff5b220" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89aff5b560" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f89aff5b8d0" loc="89:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f89aff608a0" loc="45:../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f89aff60620" loc="45:../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x7f89aff46420" loc="86:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x7f89aff3c1f0" loc="126:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x7f89aff41b70" loc="117:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x7f89aff3cc10" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x7f89aff3c990" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x7f89aff47c40" loc="83:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x7f89aff3e750" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x7f89aff3e4d0" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7f89aff422a0" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x7f89aff42020" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f89aff443b0" loc="97:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x7f89aff36720" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x7f89aff364a0" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x7f89aff42a40" loc="114:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x7f89aff3ad50" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x7f89aff3aad0" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f89aff39cf0" loc="136:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x7f89aff3da30" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x7f89aff3d7b0" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x7f89aff38c90" loc="140:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x7f89aff3f5c0" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x7f89aff3f340" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f89aff44d90" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89aff44b10" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f89aff41410" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x7f89aff41190" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x7f89aff3d020" loc="123:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x7f89aff3a3b0" loc="129:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x7f89aff39510" loc="132:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x7f89aff384d0" loc="138:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x7f89aff3fd40" loc="120:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f89aff46bb0" loc="89:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f89aff437c0" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89aff43540" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f89afde77a0" loc="43:../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89afde77a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7f89afde2020" loc="80:../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89afde77a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f89afddfa50" loc="97:../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89afde77a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f89afddf7d0" loc="97:../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89afde77a0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f89b1a77b50"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x7f89b1a77b50"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7f89afddea10" loc="108:../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89afde77a0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f89afdde790" loc="108:../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f89afde47e0" loc="57:../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f89afde3820" loc="72:../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f89afde2c00" loc="88:../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f89afde77a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f89afde4070" loc="50:../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7f89afde3020" loc="65:../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncMode" loc="44:../../tos/lib/ftsp/TimeSyncMode.nc">
      <documentation loc="36:../../tos/lib/ftsp/TimeSyncMode.nc">
        <short>&#10; the time sync module can work in two modes:&#10;            - TS_TIMER_MODE (default): TS msgs sent period.</short>
        <long>&#10; the time sync module can work in two modes:&#10;            - TS_TIMER_MODE (default): TS msgs sent period. from the timer&#10;            - TS_USER_MODE: TS msgs sent only when explic. asked by user &#10;                            via TimeSyncMode.send() command, TimeSync.Timer &#10;                            is stopped in this mode&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f89afd3a7a0" loc="61:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="57:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; command to send out time synchronization message.</short>
          <long>&#10; command to send out time synchronization message.&#10; returns FAIL if TimeSync not in TS_USER_MODE&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f89afd3a020" loc="55:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="52:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; Gets the current mode of the TimeSync module.</short>
          <long>&#10; Gets the current mode of the TimeSync module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f89afd3b6d0" loc="50:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="46:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; Sets the current mode of the TimeSync module.</short>
          <long>&#10; Sets the current mode of the TimeSync module.&#10; returns FAIL if didn't succeed&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f89afd3b450" loc="50:../../tos/lib/ftsp/TimeSyncMode.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncNotify" loc="41:../../tos/lib/ftsp/TimeSyncNotify.nc">
      <documentation loc="36:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <short>&#10; time sync module (TimeSyncM) provides notification of arriving&#10; and transmitted time-sync msgs through TimeSyncNotify interface:&#10;</short>
      </documentation>
      <function event="" provided="0" name="msg_received" ref="0x7f89afd3de80" loc="46:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <documentation loc="43:../../tos/lib/ftsp/TimeSyncNotify.nc">
          <short>&#10; fired when time-sync msg is received and accepted&#10;</short>
        </documentation>
        <interfacedef-ref qname="TimeSyncNotify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="msg_sent" ref="0x7f89afd385d0" loc="52:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <documentation loc="48:../../tos/lib/ftsp/TimeSyncNotify.nc">
          <short>&#10; fired when time-sync msg is sent by TimeSyncM or the sending did not&#10; succeed&#10;</short>
        </documentation>
        <interfacedef-ref qname="TimeSyncNotify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncAMSend" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f89afd2fb90" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
          <interfacedef-ref qname="TimeSyncAMSend"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89afd2fb90"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f89afd2fdd0" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
          <interfacedef-ref qname="TimeSyncAMSend"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89afd2fdd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="send" ref="0x7f89afd2a430" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="46:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; This command sends a regular message just like &#60;tt>AMSend.send&#60;/tt>, but&#10; it also performs sender-receiver time synchronization.</short>
          <long>&#10; This command sends a regular message just like &#60;tt>AMSend.send&#60;/tt>, but&#10; it also performs sender-receiver time synchronization. The &#60;tt>event_time&#60;/tt>&#10; parameter holds the time of some event as expressed in the local clock of&#10; the sender. The receiver can obtain the time of this event (expressed in its&#10; own local time) via the &#60;tt>TimeSyncPacket&#60;/tt> interface.&#10;&#10; @param addr         address to which to send the packet&#10; @param msg          the packet&#10; @param len          the length of the data in the packet payload&#10; @param event_time&#9;  the synchronization point to be transfered with the message&#10; @return             SUCCESS if the request to send succeeded and a&#10;                     sendDone will be signaled later, EBUSY if the&#10;                     abstraction cannot send now but will be able to&#10;                     later, or FAIL if the communication layer is not&#10;                     in a state that can send (e.g., off).&#10; @see sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89afd2fdd0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f89afd2b6d0" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f89b0f021d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f89afd2ba50" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89afd2bd80" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
          <variable name="event_time" ref="0x7f89afd2a180" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89afd2fdd0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f89afd26ab0" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="105:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89afd264b0" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89afd267e0" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f89afd28bf0" loc="103:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="95:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f89afd292a0" loc="80:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="66:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the&#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a&#10; sendFailed event, and never a sendSucceeded event.&#10;&#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89afd29020" loc="80:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f89afd282b0" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="82:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Signaled in response to an accepted send request.</short>
          <long>&#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89afd29c40" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f89afd28020" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncPacket" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f89afd19100" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
          <interfacedef-ref qname="TimeSyncPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f89afd19100"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f89afd19340" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
          <interfacedef-ref qname="TimeSyncPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89afd19340"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="isValid" ref="0x7f89afd18020" loc="48:../../tos/interfaces/TimeSyncPacket.nc">
        <documentation loc="39:../../tos/interfaces/TimeSyncPacket.nc">
          <short>&#10; Returns TRUE if the value returned by &#60;tt>getTime&#60;/tt> can be trusted.</short>
          <long>&#10; Returns TRUE if the value returned by &#60;tt>getTime&#60;/tt> can be trusted.&#10; Under certain circumstances the received message cannot be properly&#10; time stamped, so the sender-receiver synchronization cannot be finished&#10; on the receiver side. In this case, this command returns FALSE.&#10; This command MUST BE called only on the receiver side and only for&#10; messages transmitted via the TimeSyncSend interface. It is recommended&#10; that this command be called from the receive event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89afd19c40" loc="48:../../tos/interfaces/TimeSyncPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="eventTime" ref="0x7f89afd18c50" loc="58:../../tos/interfaces/TimeSyncPacket.nc">
        <documentation loc="50:../../tos/interfaces/TimeSyncPacket.nc">
          <short>&#10; This command should be called by the receiver of a message.</short>
          <long>&#10; This command should be called by the receiver of a message. The time&#10; of the synchronization event is returned as expressed in the local&#10; clock of the caller. This command MUST BE called only on the receiver&#10; side and only for messages transmitted via the TimeSyncSend interface.&#10; It is recommended that this command be called from the receive event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f89afd19340"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89afd189d0" loc="58:../../tos/interfaces/TimeSyncPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f89af9ad670" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89af9ad060" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f89af9ad3e0" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f89af9af820" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f89af9ae6d0" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f89af9ae0d0" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f89b0eeb160"/>
                <typename><typedef-ref name="message_t" ref="0x7f89b0eea7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f89af9ae440" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f89af977580" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f89af97add0" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f89af980770" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f89af97fbe0" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f89af97c840" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89af97c5c0" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f89af97e4a0" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f89af97f350" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89af97f0d0" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f89af97b0e0" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f89af97ed50" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f89af987190" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f89af987ac0" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f89af9887b0" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f89af988530" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f89af986690" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f89af986410" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f89af9833e0" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f89af982030" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89af983d80" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f89af982b00" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f89af982880" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f89af851dd0" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f89af851800" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89af851b40" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f89af84bac0" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f89af84b840" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f89af849930" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f89af849360" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89af8496a0" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f89af84a740" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f89af8482c0" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f89af847920" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89af847c60" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f89af848020" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f89af84b070" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f89af84d720" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f89af84edb0" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f89af84d130" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f89b1a71610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f89af84d480" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f89af8275b0" loc="50:../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f89af827330" loc="50:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f89af827df0" loc="59:../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f89af826cf0" loc="69:../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f89af826700" loc="69:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f89af826a60" loc="69:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f89af823b50" loc="79:../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:../../tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:../../tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f89af810820" loc="44:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f89af812910" loc="42:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x7f89af80d110" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89af80ee60" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f89af80e070" loc="47:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f89af815980" loc="40:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f89af812190" loc="41:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f89af8100e0" loc="43:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f89b10733a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x7f89af80f020" loc="45:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f89b10ba500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f89af80f950" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f89af80f6d0" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f89af80e790" loc="48:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f89b1a72ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7f89af643720" loc="49:../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7f89af6434a0" loc="49:../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
