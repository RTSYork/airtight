#include "SlotTiming.h"

// A periodic packet data source
generic module TXFlowP(uint8_t flow_num, uint8_t dest_id, uint8_t crit_level, uint8_t periodSlots, uint8_t deadlineSlots, uint8_t c, uint8_t priority) {
  uses {
    interface Timer<TMilli> as SendTimer;
    interface Send as AppSend;
    interface Boot;
    interface Packet;
    interface AMPacket;
  }
}

implementation {
  uint8_t packetsSent;
  message_t packet;
  bool busy = FALSE;

  // Prototype for sending
  task void send();
  
  // FIX: change this to encode the number of frames to be
  // generated by this message
  // This should really be a seperate data type from mccpacket - e.g.
  // mccapp packet?
  void setup_mcc_app_packet(mccpacket * mccpkt) {
    printf("APP: Setting up MCC packet fields\n");
    mccpkt->crit_level = crit_level;
    mccpkt->flow_id = flow_num;
    mccpkt->priority = priority;
    mccpkt->c = c;
    mccpkt->src = TOS_NODE_ID;
    mccpkt->dst = dest_id;
    mccpkt->hop_src = TOS_NODE_ID;
    mccpkt->hop_dst = 0;
    mccpkt->burst_num = 0;
    mccpkt->seq_num = packetsSent;
    printf("MCC packet src = %u, prio = %u, destination = %u\n", mccpkt->src, mccpkt->priority, mccpkt->dst);
  }

  uint32_t ms_timer() {
    return ((uint32_t)periodSlots) * SLOT_LENGTH_MILLIS;
  }

  event void Boot.booted() {
    printf("TXFlowP: booting flow %u...\n", flow_num);
    printfflush();
    packetsSent = 0;
    call SendTimer.startOneShot(FLOW_INIT_TIMER);
    return;
  }

  event void SendTimer.fired() {
    printf("TXFlowP: Timer fired - busy is %d\n", busy);
    call SendTimer.startOneShot(ms_timer());
    post send();
    return;
  }

  task void send() {
    // FIX: change this to use a seperate abstraction for messages,
    // not the low level MCC packet data structure
    mccpacket * mccpkt;
    mccpkt = (mccpacket*)call Packet.getPayload(&packet, sizeof(mccpacket));
    setup_mcc_app_packet(mccpkt);
    printf("TXFlowP.send flow %u: seq_num = %u\n", flow_num, mccpkt->seq_num);
    if(call AppSend.send(&packet, sizeof(mccpacket)) == SUCCESS) {
      busy = TRUE;
      printf("TXFlowP: Pkt passed to APP\n");
    } else {
      printf("TXFlowP: Packet failed\n");
    }
  }

  event void AppSend.sendDone(message_t * msg, error_t error) {
    mccpacket * mccpkt;
    if (&packet == msg) {
      // Increment the sequence number by c
      mccpkt = (mccpacket*)call Packet.getPayload(&packet, sizeof(mccpacket));
      packetsSent += mccpkt->c;
      busy = FALSE;
      // busy is always staying at true? is it
      // OK to just clear it in the timer event
    }
    printf("TXFlowP: Packets sent:%d\n", packetsSent);
  }
}