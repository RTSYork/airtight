<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="28:InterferenceAppC.nc">
      <from><interface-ref name="UartReceive" scoped="" ref="0x7fdb52fd4bc0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb51f58530"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb51f58530"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb51efd9e0"/></to>
    </wire>
    <wire loc="29:InterferenceAppC.nc">
      <from><interface-ref name="UartPacket" scoped="" ref="0x7fdb52fc96c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb51f58b40"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb51f58b40"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb51efb720"/></to>
    </wire>
    <wire loc="30:InterferenceAppC.nc">
      <from><interface-ref name="UartAMPacket" scoped="" ref="0x7fdb52fba8c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb51f57910"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb51f57910"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb51efc020"/></to>
    </wire>
    <wire loc="32:InterferenceAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fdb5305c020"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fdb52f90a30"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fdb52f90a30"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fdb52f89db0"/></to>
    </wire>
    <wire loc="33:InterferenceAppC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x7fdb53056990"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb52f8fcb0"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb52f8fcb0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb52d83140"/></to>
    </wire>
    <wire loc="34:InterferenceAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb52ff48f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb51f62020"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb51f62020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb514628a0"/></to>
    </wire>
    <wire loc="35:InterferenceAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb53055020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb521ac870"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb521ac870"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fdb5260a2e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="36:InterferenceAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb52fdb0d0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb521de490"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb521de490"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb521dadb0"/></to>
    </wire>
    <wire loc="44:InterferenceC.nc">
      <from><interface-ref name="sendInterference" scoped="" ref="0x7fdb52fb8020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x7fdb51ce2bc0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x7fdb51cdcb50"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51d55770"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51ef7e50"/></to>
    </wire>
    <wire loc="103:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb514b3850"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51538850"/></to>
    </wire>
    <wire loc="120:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52595600"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb527c2530"/></to>
    </wire>
    <wire loc="52:../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb528876a0"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb516a0760"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb516cfb60"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51794460"/></to>
    </wire>
    <wire loc="47:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51826220"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fdb52dc5470"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fdb5318a510"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fdb5318a510"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fdb530bd8a0"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52dc4020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52487680"/></to>
    </wire>
    <wire loc="123:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52dc4020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52596a60"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52dc4020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb52f88020"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb52f88020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb52f7e380"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52dc4720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fdb52f85020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51bc5c60"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fdb52f85020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb5216b830"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fdb52f85020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb522ddb50"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb52f801d0"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb52dea690"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7fdb52f7c180"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb52dea020"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fdb52f7ea60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb521b3600"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fdb52f7ea60"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52f84ae0"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52f84ae0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52f757e0"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fdb52f781e0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7fdb52f85020"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7fdb52f6ed20"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7fdb52f62060"/></to>
    </wire>
    <wire loc="141:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7fdb52f62060"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fdb52ed7da0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7fdb52f6d020"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7fdb52f781e0"/></to>
    </wire>
    <wire loc="191:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7fdb52f2ccb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52e3d160"/></to>
    </wire>
    <wire loc="165:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7fdb52f484e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fdb52eab2b0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fdb52eab2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a0ee20"/></to>
    </wire>
    <wire loc="176:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7fdb52f3c350"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fdb52e9a8f0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fdb52e9a8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5199c3f0"/></to>
    </wire>
    <wire loc="185:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7fdb52f33cb0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fdb52e8bc10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fdb52e8bc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519313f0"/></to>
    </wire>
    <wire loc="196:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x7fdb52f25060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52e236d0"/></to>
    </wire>
    <wire loc="143:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7fdb52f60670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fdb52ed42b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fdb52ed42b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51b439b0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7fdb52f35670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fdb52e8d8f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fdb52e8d8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51938e20"/></to>
    </wire>
    <wire loc="146:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7fdb52f5ecb0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fdb52ecca20"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fdb52ecca20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51ae7a60"/></to>
    </wire>
    <wire loc="157:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7fdb52f52cb0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fdb52eba020"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fdb52eba020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a750a0"/></to>
    </wire>
    <wire loc="168:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7fdb52f45e40"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fdb52ea8760"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fdb52ea8760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a046d0"/></to>
    </wire>
    <wire loc="179:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7fdb52f39cb0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fdb52e97da0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fdb52e97da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51993e20"/></to>
    </wire>
    <wire loc="138:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7fdb52f66800"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fdb52eda8f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fdb52eda8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51b549b0"/></to>
    </wire>
    <wire loc="149:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7fdb52f5a670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fdb52ec8020"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fdb52ec8020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51add3f0"/></to>
    </wire>
    <wire loc="160:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7fdb52f4d670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fdb52eb65d0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fdb52eb65d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a6c9b0"/></to>
    </wire>
    <wire loc="171:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7fdb52f41670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fdb52ea5c10"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fdb52ea5c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519fa0a0"/></to>
    </wire>
    <wire loc="188:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7fdb52f2e670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fdb52e862b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fdb52e862b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51928e20"/></to>
    </wire>
    <wire loc="194:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7fdb52f28b20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52e2d160"/></to>
    </wire>
    <wire loc="174:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7fdb52f3fcb0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fdb52e9c5d0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fdb52e9c5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519a3e20"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fdb52ed7da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51b4a3f0"/></to>
    </wire>
    <wire loc="152:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7fdb52f56020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fdb52ec55d0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fdb52ec55d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51ad4e20"/></to>
    </wire>
    <wire loc="192:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7fdb52f2a4e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52e38c90"/></to>
    </wire>
    <wire loc="155:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7fdb52f54670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fdb52ebdd30"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fdb52ebdd30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a7cc90"/></to>
    </wire>
    <wire loc="166:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7fdb52f47800"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fdb52eaa440"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fdb52eaa440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a0a0a0"/></to>
    </wire>
    <wire loc="177:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7fdb52f3b670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fdb52e99a80"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fdb52e99a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519996d0"/></to>
    </wire>
    <wire loc="186:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7fdb52f30020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fdb52e8ada0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fdb52e8ada0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5192e6d0"/></to>
    </wire>
    <wire loc="144:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7fdb52f5f990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fdb52ed3440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fdb52ed3440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51b40e20"/></to>
    </wire>
    <wire loc="147:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7fdb52f5c020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fdb52ecbc10"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fdb52ecbc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51ae4e20"/></to>
    </wire>
    <wire loc="158:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7fdb52f50020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fdb52eb92b0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fdb52eb92b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a723f0"/></to>
    </wire>
    <wire loc="169:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7fdb52f43060"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fdb52ea78f0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fdb52ea78f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a019b0"/></to>
    </wire>
    <wire loc="180:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7fdb52f37020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fdb52e95020"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fdb52e95020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5198f0a0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7fdb52f65b20"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fdb52ed9a80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fdb52ed9a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51b51e20"/></to>
    </wire>
    <wire loc="150:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7fdb52f59990"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fdb52ec72b0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fdb52ec72b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51ada6d0"/></to>
    </wire>
    <wire loc="161:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7fdb52f4c990"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fdb52eb5760"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fdb52eb5760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a69e20"/></to>
    </wire>
    <wire loc="189:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7fdb52f2d990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fdb52e85440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fdb52e85440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519240a0"/></to>
    </wire>
    <wire loc="164:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7fdb52f49020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fdb52ead020"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fdb52ead020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a11c90"/></to>
    </wire>
    <wire loc="175:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7fdb52f3d020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fdb52e9b760"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fdb52e9b760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5199f0a0"/></to>
    </wire>
    <wire loc="184:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7fdb52f34990"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fdb52e8ca80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fdb52e8ca80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519340a0"/></to>
    </wire>
    <wire loc="195:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7fdb52f27e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52e28c90"/></to>
    </wire>
    <wire loc="142:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7fdb52f61350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fdb52ed5020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fdb52ed5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51b476d0"/></to>
    </wire>
    <wire loc="153:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7fdb52f55350"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fdb52ec3760"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fdb52ec3760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51acf0a0"/></to>
    </wire>
    <wire loc="182:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7fdb52f36350"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fdb52e8e7a0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fdb52e8e7a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5193bc90"/></to>
    </wire>
    <wire loc="156:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7fdb52f53990"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7fdb52ebce60"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fdb52ebce60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a79e20"/></to>
    </wire>
    <wire loc="167:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7fdb52f46b20"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fdb52ea95d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fdb52ea95d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a073f0"/></to>
    </wire>
    <wire loc="178:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7fdb52f3a990"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fdb52e98c10"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fdb52e98c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519969b0"/></to>
    </wire>
    <wire loc="187:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7fdb52f2f350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fdb52e88020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fdb52e88020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5192b9b0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7fdb52f77610"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fdb52edb6b0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fdb52edb6b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51b576d0"/></to>
    </wire>
    <wire loc="148:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7fdb52f5b350"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7fdb52ecada0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7fdb52ecada0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51ae00a0"/></to>
    </wire>
    <wire loc="159:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7fdb52f4f350"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7fdb52eb7440"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7fdb52eb7440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a6f6d0"/></to>
    </wire>
    <wire loc="170:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7fdb52f42350"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7fdb52ea6a80"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7fdb52ea6a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519fee20"/></to>
    </wire>
    <wire loc="193:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7fdb52f29800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52e336d0"/></to>
    </wire>
    <wire loc="173:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7fdb52f40990"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7fdb52e9d3f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fdb52e9d3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb519a6c90"/></to>
    </wire>
    <wire loc="162:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7fdb52f4bcb0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7fdb52eb48f0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7fdb52eb48f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51a640a0"/></to>
    </wire>
    <wire loc="140:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7fdb52f64e40"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7fdb52ed8c10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7fdb52ed8c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51b4d0a0"/></to>
    </wire>
    <wire loc="151:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7fdb52f58cb0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7fdb52ec6440"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7fdb52ec6440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb51ad79b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb530bc850"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7fdb530b7c90"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7fdb530d3140"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7fdb530989e0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7fdb52709a70"/></to>
    </wire>
    <wire loc="75:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb52d83140"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb52d5a080"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52db12e0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52d7fbb0"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52d7fbb0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52d57bb0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb52db18f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb52d7e2b0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb52d7e2b0"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7fdb52d55a10"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb52db6d20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb52d821d0"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb52d821d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb52d591d0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fdb52db3c00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fdb52d7f020"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fdb52d7f020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fdb52d57020"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52d9f5b0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52d7b320"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52d7b320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52d3a320"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb52db3020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb52d803f0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb52d803f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb52d583f0"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52da69f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52d7c800"/></to>
    </wire>
    <wire loc="85:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52d7c800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52d43800"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7fdb52d99880"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7fdb52d7be10"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7fdb52d7be10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7fdb52d3ae10"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb52dae5f0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb52d7d020"/></to>
    </wire>
    <wire loc="83:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb52d7d020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb52d562d0"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7fdb52d94690"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7fdb52d7aad0"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7fdb52d7aad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7fdb52d39ad0"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7fdb52d8b7c0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb52d658a0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb52d658a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb52d2c270"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52d8a880"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52d61970"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52d61970"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52d283f0"/></to>
    </wire>
    <wire loc="254:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb52d5a080"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb5295c880"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb52d6ea00"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb52d311c0"/></to>
    </wire>
    <wire loc="345:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb52d311c0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb525b43b0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52d57bb0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52b423a0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7fdb52d55a10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb52b46720"/></to>
    </wire>
    <wire loc="136:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb52d591d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb52b45530"/></to>
    </wire>
    <wire loc="138:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fdb52d57020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fdb52b44b00"/></to>
    </wire>
    <wire loc="91:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb52d71400"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb52d36c90"/></to>
    </wire>
    <wire loc="343:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb52d36c90"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb525b8e80"/></to>
    </wire>
    <wire loc="255:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52d3a320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52945270"/></to>
    </wire>
    <wire loc="137:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb52d583f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb52b443a0"/></to>
    </wire>
    <wire loc="309:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb52d2c270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb525fd020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb52d6a270"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb52d2fd70"/></to>
    </wire>
    <wire loc="347:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb52d2fd70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb525aaa40"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb52d73df0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb52d386d0"/></to>
    </wire>
    <wire loc="344:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb52d386d0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb525afe70"/></to>
    </wire>
    <wire loc="288:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52d43800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52844b60"/></to>
    </wire>
    <wire loc="226:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7fdb52d3ae10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7fdb52968d60"/></to>
    </wire>
    <wire loc="140:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb52d562d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb52b47020"/></to>
    </wire>
    <wire loc="264:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7fdb52d39ad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7fdb528cf5f0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb52d664c0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb52d2f510"/></to>
    </wire>
    <wire loc="346:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb52d2f510"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb525aa1e0"/></to>
    </wire>
    <wire loc="310:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52d283f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52601020"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb5295c880"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7fdb52945d90"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb525b43b0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb5258ea40"/></to>
    </wire>
    <wire loc="172:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0x7fdb52d51020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52a91d30"/></to>
    </wire>
    <wire loc="160:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0x7fdb52d4a2c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb52ac6390"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb52ac6390"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb517929d0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52b423a0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7fdb517e7420"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52601020"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb51615360"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb52b45530"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb517e96c0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7fdb52b44b00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7fdb517e8c90"/></to>
    </wire>
    <wire loc="173:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb52d3b3c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb529b3dd0"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb529b3dd0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb517252e0"/></to>
    </wire>
    <wire loc="174:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7fdb52d44890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb52ac1e00"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52945270"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb516a9640"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb525b8e80"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb52591550"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb52b443a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb517e8530"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb52b46720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb517ea8b0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb525fd020"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb516112a0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb525aaa40"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb5248c020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb525afe70"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb52587560"/></to>
    </wire>
    <wire loc="170:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0x7fdb52d4ca60"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7fdb52a92a50"/></to>
    </wire>
    <wire loc="117:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7fdb52968d60"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7fdb52963100"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb52b47020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb517eb270"/></to>
    </wire>
    <wire loc="171:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0x7fdb52d52840"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7fdb52a91760"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7fdb528cf5f0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7fdb5169fd00"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb525aa1e0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb525848b0"/></to>
    </wire>
    <wire loc="116:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb52c8b470"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb529b6e00"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb529b6e00"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb51728020"/></to>
    </wire>
    <wire loc="117:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52c85400"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52bf1020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fdb52c88ab0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb525fd020"/></to>
    </wire>
    <wire loc="119:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0x7fdb52c7f960"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525b9d90"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525b9d90"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52592470"/></to>
    </wire>
    <wire loc="124:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb52bf0b60"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb525a9dd0"/></to>
    </wire>
    <wire loc="101:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb525a9dd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb52491ac0"/></to>
    </wire>
    <wire loc="125:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fdb52bf1cb0"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fdb52d23630"/></to>
    </wire>
    <wire loc="131:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb52b408c0"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7fdb52ca8890"/></to>
    </wire>
    <wire loc="132:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb52b418f0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7fdb52b3a880"/></to>
    </wire>
    <wire loc="133:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb52b402b0"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0x7fdb52a50020"/></to>
    </wire>
    <wire loc="134:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb52b42a30"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0x7fdb52a50630"/></to>
    </wire>
    <wire loc="149:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb52b39c00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb52ac6390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb52b39310"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0x7fdb52a515d0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb52a90390"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb529b6e00"/></to>
    </wire>
    <wire loc="166:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb52a8c2b0"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7fdb52a857c0"/></to>
    </wire>
    <wire loc="167:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb52a8cbe0"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7fdb52a52120"/></to>
    </wire>
    <wire loc="168:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52a8d470"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb52a52730"/></to>
    </wire>
    <wire loc="182:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb52a4f4a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb5297c840"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fdb5297c840"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb516d09b0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb52a4fdd0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb529b1e60"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb529b1e60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb51723440"/></to>
    </wire>
    <wire loc="184:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb52a4d410"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb529b1080"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fdb529b1080"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb51724590"/></to>
    </wire>
    <wire loc="190:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb529b0500"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52967a10"/></to>
    </wire>
    <wire loc="115:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52967a10"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fdb529658c0"/></to>
    </wire>
    <wire loc="194:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb529ae440"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb52968790"/></to>
    </wire>
    <wire loc="114:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb52968790"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fdb529652b0"/></to>
    </wire>
    <wire loc="217:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb5297abe0"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0x7fdb52cbc480"/></to>
    </wire>
    <wire loc="218:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb5297ba70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb52973e40"/></to>
    </wire>
    <wire loc="113:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fdb52973e40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fdb52966950"/></to>
    </wire>
    <wire loc="219:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7fdb52979720"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7fdb52d11cb0"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7fdb52d11cb0"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7fdb518267f0"/></to>
    </wire>
    <wire loc="220:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb52978400"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb52cd6aa0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52964720"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52844b60"/></to>
    </wire>
    <wire loc="232:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb52966950"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb52948440"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fdb52948440"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fdb529448c0"/></to>
    </wire>
    <wire loc="233:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb529652b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb52948d70"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb52948d70"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fdb529432b0"/></to>
    </wire>
    <wire loc="234:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb529658c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb529473d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fdb529473d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fdb529438c0"/></to>
    </wire>
    <wire loc="250:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7fdb52945d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb528d1a10"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb528d1a10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb516a2bf0"/></to>
    </wire>
    <wire loc="251:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb529448c0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb528d05d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fdb528d05d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb516a0d70"/></to>
    </wire>
    <wire loc="252:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb529432b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb528cf020"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb528cf020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb5169f730"/></to>
    </wire>
    <wire loc="253:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb529438c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525fbc20"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525fbc20"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb5160d020"/></to>
    </wire>
    <wire loc="260:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fdb528cd8b0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fdb52877740"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fdb52877740"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fdb51662660"/></to>
    </wire>
    <wire loc="261:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fdb528cc270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb5297b270"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fdb5297b270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb516cf400"/></to>
    </wire>
    <wire loc="262:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fdb528ceaa0"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7fdb525cdb60"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fdb525cdb60"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7fdb525c6410"/></to>
    </wire>
    <wire loc="263:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fdb528ce020"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fdb52d23630"/></to>
    </wire>
    <wire loc="268:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb5297a440"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52876060"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52876060"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb51661020"/></to>
    </wire>
    <wire loc="277:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb52874760"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7fdb52cb5c80"/></to>
    </wire>
    <wire loc="278:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb52876860"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fdb5286fac0"/></to>
    </wire>
    <wire loc="279:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb528752b0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52844400"/></to>
    </wire>
    <wire loc="280:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52875a10"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52bf1020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0x7fdb5283f5d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fdb525f29b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52842780"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52bf1020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb52840440"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7fdb52cc1190"/></to>
    </wire>
    <wire loc="293:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb52843630"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fdb52823720"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fdb52823720"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fdb5281d020"/></to>
    </wire>
    <wire loc="294:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb52842020"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52822060"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52822060"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fdb5281d950"/></to>
    </wire>
    <wire loc="299:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb5281a760"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7fdb52ca5560"/></to>
    </wire>
    <wire loc="300:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb5281d020"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fdb525cba40"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fdb525cba40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fdb525c5440"/></to>
    </wire>
    <wire loc="301:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb5281d950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb525ca400"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fdb525ca400"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fdb525c5d70"/></to>
    </wire>
    <wire loc="302:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0x7fdb5281c120"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7fdb525b95c0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7fdb525b95c0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7fdb52593c40"/></to>
    </wire>
    <wire loc="307:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb525fac00"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb525aaa40"/></to>
    </wire>
    <wire loc="308:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb525f9cd0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525f1590"/></to>
    </wire>
    <wire loc="311:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7fdb525f7b00"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fdb525f29b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb525d14a0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525b9d90"/></to>
    </wire>
    <wire loc="326:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb525c2b40"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7fdb52ca5560"/></to>
    </wire>
    <wire loc="327:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb525c5440"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fdb525ba460"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fdb525ba460"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fdb52594aa0"/></to>
    </wire>
    <wire loc="328:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb525c5d70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb525badd0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fdb525badd0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52593480"/></to>
    </wire>
    <wire loc="329:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0x7fdb525c6410"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7fdb525bd600"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fdb525bd600"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7fdb52595c40"/></to>
    </wire>
    <wire loc="341:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb525a41f0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0x7fdb52cd1020"/></to>
    </wire>
    <wire loc="342:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fdb525a32e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb525fd020"/></to>
    </wire>
    <wire loc="349:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fdb5259f110"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fdb525f29b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7fdb5259fca0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fdb525f29b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fdb5259e8d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7fdb525f29b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb5259d470"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52bf1020"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fdb5259c110"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fdb52d23630"/></to>
    </wire>
    <wire loc="46:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb52cd6aa0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb518246c0"/></to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52bf1020"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb51807480"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb51806380"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb52bf0b60"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fdb518024c0"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fdb52bf1cb0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fdb517e38b0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fdb52b60260"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb517e7ab0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fdb52b42a30"/></to>
    </wire>
    <wire loc="69:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb517e58f0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fdb52b418f0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb517e42b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fdb52b402b0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb517e48c0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fdb52b408c0"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb52ac5150"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51791850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb52ac58d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51790020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51790910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb52ac41f0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fdb5178f120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fdb51794a70"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fdb5178fc20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fdb51723a70"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fdb52b60260"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb517215d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fdb529b0500"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb51720440"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fdb529ae440"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7fdb516cde80"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7fdb52979720"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb516ccab0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb52978400"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb516ce310"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fdb5297ba70"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb516cec40"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fdb5297a440"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0x7fdb516cd400"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fdb5297abe0"/></to>
    </wire>
    <wire loc="118:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7fdb52963d90"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52964720"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fdb5169d590"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fdb528ce020"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fdb5169e670"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7fdb528ceaa0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7fdb5169c060"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7fdb528cd8b0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7fdb5169c950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7fdb528cc270"/></to>
    </wire>
    <wire loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x7fdb5169b940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0x7fdb51699160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0x7fdb5169b160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb51661820"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7fdb52876860"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb5165e020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fdb52874760"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb516602b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7fdb528752b0"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb51660a10"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52875a10"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7fdb5165f720"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7fdb5288b160"/></to>
    </wire>
    <wire loc="56:../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7fdb5288b160"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7fdb52884100"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0x7fdb5165eb20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7fdb5288c060"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7fdb52886020"/></to>
    </wire>
    <wire loc="54:../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb5288d230"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb528876a0"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb52827d60"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7fdb528204b0"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7fdb528227c0"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7fdb5281c120"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7fdb52825840"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7fdb5281e020"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52821020"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fdb5281c8c0"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7fdb52821e00"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fdb5281a760"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7fdb52825270"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7fdb5281f950"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7fdb52826880"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7fdb5281f020"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7fdb5160acd0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fdb525f9cd0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb5160ca70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb525fac00"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7fdb5160bc40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fdb527c6a50"/></to>
    </wire>
    <wire loc="26:../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fdb527c6a50"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fdb527ba7d0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7fdb5160de60"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0x7fdb525f7b00"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fdb527ba7d0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fdb5261e790"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fdb527bf320"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb5262c150"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb527c2530"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb527b4020"/></to>
    </wire>
    <wire loc="35:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb527b4020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb526ab080"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fdb52627640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb5267ccf0"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb526751d0"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7fdb527b4a10"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7fdb527b4a10"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb526ab890"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb5261da60"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7fdb527af020"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7fdb527af020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb526a7bc0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb526a7bc0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb515e38d0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb526ab080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb515e8c20"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb526ab890"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb515e74b0"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb515e0bc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb52725c60"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb52725c60"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb52713020"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb515dce20"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb5271d020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb5271d020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb5270e2b0"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fdb515d90a0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb5271c520"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fdb5271c520"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb5270d6b0"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7fdb515d5450"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7fdb52718a40"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7fdb52718a40"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7fdb52708230"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7fdb52672490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7fdb52621a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fdb5260a2e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fdb527bf320"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb525ce0e0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7fdb525c8920"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7fdb525cab60"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7fdb525c35a0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525c9400"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7fdb525c3d40"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7fdb525c82b0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fdb525c2b40"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7fdb525cd590"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7fdb525c7d70"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7fdb525ceb60"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7fdb525c7440"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb52491ac0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb522940b0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fdb525b1940"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fdb5258a020"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb5248c020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fdb5228c020"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fdb52575b50"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fdb525a41f0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fdb52571a10"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fdb5259f110"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7fdb525706a0"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0x7fdb5259fca0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fdb5256f3a0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fdb5259e8d0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fdb5256e200"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fdb525a32e0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fdb525789d0"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb5248c020"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb5256ab70"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb5259d470"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7fdb52583020"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0x7fdb52499940"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7fdb52499940"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7fdb52f5ecb0"/></to>
    </wire>
    <wire loc="105:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7fdb52582380"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0x7fdb52496b50"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7fdb52496b50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb52467a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb5257b270"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb52495920"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb52495920"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb52466e40"/></to>
    </wire>
    <wire loc="108:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7fdb5257bdd0"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0x7fdb524944e0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7fdb524944e0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x7fdb52f55350"/></to>
    </wire>
    <wire loc="109:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7fdb5257f020"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7fdb524937f0"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7fdb524937f0"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x7fdb52f60670"/></to>
    </wire>
    <wire loc="111:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7fdb52576b30"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7fdb52492b10"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7fdb52492b10"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7fdb5248b9c0"/></to>
    </wire>
    <wire loc="112:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7fdb5256a080"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7fdb5259c110"/></to>
    </wire>
    <wire loc="113:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7fdb52572430"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7fdb52239650"/></to>
    </wire>
    <wire loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0x7fdb524d9e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb522940b0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb51507e10"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb52466e40"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb5245a480"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fdb5228c020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fdb52244680"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0x7fdb5247a3d0"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x7fdb52f42350"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0x7fdb52479680"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x7fdb52f45e40"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7fdb5247d7f0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb5238c850"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7fdb5238c850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb523729e0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7fdb5245ec80"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7fdb52459020"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7fdb524667c0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7fdb5245be00"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb5246a1f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb5245b7e0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb52467a60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb523a0900"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb523a0900"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb51535d80"/></to>
    </wire>
    <wire loc="99:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb5239e730"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb52459d70"/></to>
    </wire>
    <wire loc="100:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x7fdb5243d800"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x7fdb523fd700"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x7fdb523fd700"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x7fdb523f5670"/></to>
    </wire>
    <wire loc="101:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5243c620"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5309aa50"/></to>
    </wire>
    <wire loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x7fdb5241bde0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x7fdb523ea060"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5309aa50"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x7fdb523f16c0"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7fdb52f5ecb0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7fdb523f0970"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x7fdb52f5c020"/></to>
    </wire>
    <wire loc="88:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x7fdb523edb20"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x7fdb52f5b350"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x7fdb523ece30"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x7fdb52f5a670"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb5239f6c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51534b40"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb5239fe40"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51533400"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51533cf0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb5239e730"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fdb51532500"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fdb51538e60"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fdb51531060"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb5238d020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb523732c0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb52396bf0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb52378020"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fdb52380ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7fdb5236d5a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fdb52380ad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7fdb52369ba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fdb52380ad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7fdb52364120"/></to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7fdb51503140"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb52396bf0"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7fdb514fe570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb52380ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb522d1410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb52396bf0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb52243a40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb52266830"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fdb52249c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb5228be10"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb5228be10"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb52283a00"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb52270cb0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb52396bf0"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb521b3600"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb521da7b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fdb521d6550"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7fdb521b8c80"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fdb521b8c80"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x7fdb52f65b20"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fdb521d57f0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7fdb521b5020"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fdb521b5020"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x7fdb52f66800"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fdb521d4b10"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7fdb521b4380"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fdb521b4380"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x7fdb52f77610"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/micaz/DemoSensorC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fdb5219ee00"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fdb514cbe80"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/mica/VoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fdb514cbe80"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fdb514c6020"/></to>
    </wire>
    <wire loc="36:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fdb514c6020"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fdb521872c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/mica/VoltageC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb514c56b0"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb51ffa160"/></to>
    </wire>
    <wire loc="37:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb52180280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb514c56b0"/></to>
    </wire>
    <wire loc="38:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb5217e1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb5217ddd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="39:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb52179210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb514c4020"/></to>
    </wire>
    <wire loc="31:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fdb521872c0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fdb52022150"/></to>
    </wire>
    <wire loc="32:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7fdb521844f0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7fdb5204d2c0"/></to>
    </wire>
    <wire loc="33:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb52007300"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb5217e1d0"/></to>
    </wire>
    <wire loc="34:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb5204ab90"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb52180280"/></to>
    </wire>
    <wire loc="36:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x7fdb5200aaf0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fdb5204f550"/></to>
    </wire>
    <wire loc="37:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x7fdb5204cb80"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x7fdb52173290"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x7fdb52173290"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x7fdb5216a820"/></to>
    </wire>
    <wire loc="38:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7fdb520498d0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7fdb52239650"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x7fdb5216d420"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x7fdb52169320"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb5217ddd0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb520767f0"/></to>
    </wire>
    <wire loc="105:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb520767f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb514b0060"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb520733e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb52179210"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x7fdb52159710"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x7fdb52126080"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x7fdb52126080"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x7fdb521214a0"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb52167be0"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb52f801d0"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb52070200"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb5216a020"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb52059020"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb52075e40"/></to>
    </wire>
    <wire loc="107:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb52075e40"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb514ae560"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5211f980"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5309aa50"/></to>
    </wire>
    <wire loc="106:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb520756c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb514b0dc0"/></to>
    </wire>
    <wire loc="108:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb52074a70"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb514ad270"/></to>
    </wire>
    <wire loc="109:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb514adb60"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb520733e0"/></to>
    </wire>
    <wire loc="111:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fdb514ac440"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x7fdb514b3e60"/></to>
    </wire>
    <wire loc="75:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fdb514aa7a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51477470"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb52070200"/></to>
    </wire>
    <wire loc="82:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7fdb51477bd0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7fdb52070960"/></to>
    </wire>
    <wire loc="84:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51476270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb52059020"/></to>
    </wire>
    <wire loc="85:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51476e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb52059c30"/></to>
    </wire>
    <wire loc="104:../../tos/chips/atm1281/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x7fdb52037660"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb514628a0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb51454b20"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb51f62c30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb51461590"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb51461590"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb52db18f0"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb51f618b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb5145f270"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb5145f270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb52dae5f0"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7fdb51f5f020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7fdb5145e8f0"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7fdb5145e8f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52da69f0"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fdb51453910"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb51fc5c10"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb51452590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb52dae5f0"/></to>
    </wire>
    <wire loc="53:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fdb51fc5c10"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb51f78580"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb51f77400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb52db6d20"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb51f76060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb52dae5f0"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb51f75720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb52db18f0"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7fdb51f74480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7fdb51f74c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb51f5b320"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb51ef44e0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb51ef44e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb51ec9c80"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb51f5a370"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb51f51b40"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb51f55020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb51efa400"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb51ef7e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51ec9630"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb51ef0940"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb51f559a0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb51efad90"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb51ef1020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb51ef9a50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb51ef24c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fdb51ef0020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7fdb51b9f1e0"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fdb51ef1020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb51d98830"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb51ef24c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb51d98110"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7fdb51d97760"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fdb51ef0020"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb51ec1430"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb51ef0940"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb51d94590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb51ef0940"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb51d8ccc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb51ef0940"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fdb51d950e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fdb51ec2080"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7fdb51d959d0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7fdb51ec3b10"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7fdb51eb8410"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7fdb51d90b60"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fdb51eb4530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fdb51d66150"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fdb51d66150"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fdb51d634b0"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fdb51d82d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fdb51d66960"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fdb51d66960"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fdb51d5c850"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7fdb51e62e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7fdb51e99d50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7fdb51e64400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fdb51e5d0c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7fdb51d93c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7fdb51d92480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fdb51d64020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fdb51d63cb0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fdb51d63cb0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fdb51d0f5a0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fdb51d5c850"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fdb51d0e0c0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fdb51d634b0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fdb51d55d80"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb51d5bc20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51c78dc0"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb51c78dc0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51bb1cd0"/></to>
    </wire>
    <wire loc="53:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb51d0b810"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51d5bc20"/></to>
    </wire>
    <wire loc="56:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x7fdb51d0d0a0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7fdb51ce70f0"/></to>
    </wire>
    <wire loc="60:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x7fdb51ce70f0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7fdb51cde3f0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x7fdb51d0d880"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7fdb51ce7990"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x7fdb51ce7990"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7fdb51cdecd0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x7fdb51d0c0a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7fdb51ce63a0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x7fdb51ce63a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7fdb51cdd5f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x7fdb51ce4c40"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x7fdb51cd95f0"/></to>
    </wire>
    <wire loc="64:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x7fdb51ce59f0"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x7fdb51cdb3f0"/></to>
    </wire>
    <wire loc="65:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x7fdb51ce43b0"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x7fdb51cdbcd0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb51cd8b20"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb52f801d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7fdb51cd7980"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5309aa50"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fdb51bad0f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51c73de0"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb51c73de0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51bbc3c0"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51bb9660"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51c6dcc0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51c6dcc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51c56020"/></to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb51c65020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb51c512c0"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7fdb51c64850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51c509e0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fdb51c5fad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7fdb51c4b5a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fdb51c5fad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7fdb51c47ba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7fdb51c5fad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7fdb51c42120"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51bc4410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51c6dcc0"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="InterferenceC" loc="23:InterferenceC.nc" safe="">
      <module/>
    </component>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="80:../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="37:../../tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC" loc="35(RF230RadioC.NeighborhoodC):../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC.NeighborhoodP" loc="37(RF230RadioC.NeighborhoodC.NeighborhoodP):../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="37(RF230RadioC.UniqueLayerC.UniqueLayerP):../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../tos/system/RandomC.nc">
      <documentation loc="33:../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7fdb527a5070"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TOne" ref="0x7fdb530c1410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TOne" ref="0x7fdb530c1410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:../../tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="InterferenceAppC.TimerMilliC" loc="44(InterferenceAppC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InterferenceAppC.Sensor" loc="41(InterferenceAppC.Sensor):../../tos/platforms/micaz/DemoSensorC.nc">
      <documentation loc="32:../../tos/platforms/micaz/DemoSensorC.nc">
        <short>&#10; The micaZ doesn't have any built-in sensors - the DemoSensor returns&#10; a constant value of 0xbeef, or just reads the ground value for the&#10; stream sensor.</short>
        <long>&#10; The micaZ doesn't have any built-in sensors - the DemoSensor returns&#10; a constant value of 0xbeef, or just reads the ground value for the&#10; stream sensor.&#10;&#10; @author Philip Levis&#10; @authod David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DemoSensorC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InterferenceAppC.Sensor.DemoChannel" loc="39(InterferenceAppC.Sensor.DemoChannel):../../tos/platforms/mica/VoltageC.nc">
      <documentation loc="31:../../tos/platforms/mica/VoltageC.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InterferenceAppC.Sensor.DemoChannel.AdcReadClientC" loc="21(InterferenceAppC.Sensor.DemoChannel.AdcReadClientC):../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:../../tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="17:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <documentation loc="10:../../tos/chips/atm1281/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:../../tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="51:../../tos/chips/atm1281/adc/Atm128AdcP.nc" safe="">
      <documentation loc="40:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega1281 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega1281 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="47:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="38:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega1281 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega1281 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):../../tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:../../tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):../../tos/system/RoundRobinResourceQueueC.nc">
      <documentation loc="33:../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:../../tos/chips/atm1281/adc/AdcP.nc" safe="">
      <documentation loc="39:../../tos/chips/atm1281/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):../../tos/system/ArbitratedReadC.nc">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="VoltageP" loc="38:../../tos/platforms/mica/VoltageP.nc">
      <documentation loc="31:../../tos/platforms/mica/VoltageP.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InterferenceAppC.AMSenderC" loc="47(InterferenceAppC.AMSenderC):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:11">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="InterferenceAppC.AMSenderC.SenderC" loc="47(InterferenceAppC.AMSenderC.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="InterferenceAppC.AMSenderC.SenderC.AMQueueEntryP" loc="43(InterferenceAppC.AMSenderC.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:../../tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:../../tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:../../tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):../../tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:../../tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:../../tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:../../tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:../../tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:../../tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TThree" ref="0x7fdb530c17b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TThree" ref="0x7fdb530c17b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x7fdb530c00d0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7fdb52f21590" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7fdb52f21900" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7fdb52f21c70" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7fdb52f149e0" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7fdb52f14d70" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7fdb52f11170" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7fdb52f114c0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7fdb52e7d0d0" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7fdb52e7d460" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7fdb52e7d7f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7fdb52e7db40" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7fdb52d10020" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
          <component-ref qname="NeighborhoodC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7fdb52d05800" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
          <component-ref qname="NeighborhoodP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fdb52b24590" loc="83:../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7fdb52b16060" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7fdb529ab820" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
          <component-ref qname="UniqueLayerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7fdb5299e020" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
          <component-ref qname="UniqueLayerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7fdb527a5070" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7fdb527a5070"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7fdb527a5380" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7fdb5279cd20" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7fdb5279cd20"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7fdb52799060" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb526a0430" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb526a0430"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb5266f870" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb5266f870"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fdb5266fba0" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb5261fdd0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb5261fdd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7fdb522dc290" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fdb522dc290"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7fdb522dc600" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fdb522cad50" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fdb522cad50"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7fdb522c7540" loc="52:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fdb522c7540"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x7fdb522c7860" loc="53:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fdb52282410" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fdb52282410"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7fdb52282bd0" loc="43:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fdb52282bd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fdb52265020" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fdb52265020"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fdb522657f0" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fdb522657f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fdb52265be0" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fdb52265be0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fdb52264400" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fdb52264400"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fdb522647d0" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7fdb52262020" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7fdb52262020"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="DemoSensorC" loc="41:../../tos/platforms/micaz/DemoSensorC.nc" abstract="">
      <documentation loc="32:../../tos/platforms/micaz/DemoSensorC.nc">
        <short>&#10; The micaZ doesn't have any built-in sensors - the DemoSensor returns&#10; a constant value of 0xbeef, or just reads the ground value for the&#10; stream sensor.</short>
        <long>&#10; The micaZ doesn't have any built-in sensors - the DemoSensor returns&#10; a constant value of 0xbeef, or just reads the ground value for the&#10; stream sensor.&#10;&#10; @author Philip Levis&#10; @authod David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="VoltageC" loc="39:../../tos/platforms/mica/VoltageC.nc" abstract="">
      <documentation loc="31:../../tos/platforms/mica/VoltageC.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="21:../../tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:../../tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:../../tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:../../tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fdb520ebb40" loc="89:../../tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x7fdb520df6f0" loc="42:../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7fdb520c15e0" loc="52:../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:../../tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x7fdb520211f0" loc="23:../../tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x7fdb520211f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7fdb51ff2570" loc="47:../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7fdb51fe8360" loc="47:../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7fdb51fe00d0" loc="43:../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7fdb51fbd020" loc="45:../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:../../tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x7fdb5305c020" loc="26:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fdb5305c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fdb5305c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fdb52ff48f0" loc="28:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb52ff48f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52ff4c70"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52ff4e00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb5305a020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5305a1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb5305a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x7fdb53056990" loc="27:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x7fdb53056990"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb53056d10"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb5305b020"/>
        <function-ref name="start" scoped="" ref="0x7fdb5305b1b0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5305b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartReceive" ref="0x7fdb52fd4bc0" loc="32:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartReceive" scoped="" ref="0x7fdb52fd4bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52fd9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb52fdb0d0" loc="30:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb52fdb0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb52fdb450"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb52fdb5e0"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb52fdb770"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb52fdb900"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb52fdba90"/>
        <function-ref name="get" scoped="" ref="0x7fdb52fdbc20"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb52fdbdb0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb52fe64d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52fe6020"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb52fe61b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb52fe6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartPacket" ref="0x7fdb52fc96c0" loc="33:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartPacket" scoped="" ref="0x7fdb52fc96c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52fc9a40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52fc9bd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52fc9d60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52fd8020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52fd81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendInterference" ref="0x7fdb52fb8020" loc="44:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendInterference" scoped="" ref="0x7fdb52fb8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb52fb83a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb52fb8530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartSend" ref="0x7fdb52fe6d40" loc="31:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartSend" scoped="" ref="0x7fdb52fe6d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52fe50e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52fe5270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52fe5400"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52fe5590"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52fe5720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartAMPacket" ref="0x7fdb52fba8c0" loc="34:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartAMPacket" scoped="" ref="0x7fdb52fba8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52fbac40"/>
        <function-ref name="source" scoped="" ref="0x7fdb52fbadd0"/>
        <function-ref name="address" scoped="" ref="0x7fdb52fd2020"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52fd21b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52fd2340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52fd24d0"/>
        <function-ref name="type" scoped="" ref="0x7fdb52fd2660"/>
        <function-ref name="setType" scoped="" ref="0x7fdb52fd27f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52fd2980"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb52fd2b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb52fd2ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb53055020" loc="29:InterferenceC.nc">
      <component-ref qname="InterferenceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb53055020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb52fe8630"/>
        <function-ref name="fired" scoped="" ref="0x7fdb52ff5a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb52fea920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb52fea4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb52fe7020"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb52fe8ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb52fea020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb53055c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb52fe8020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb52ff5110"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52ff55e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fdb52f8c020" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52f8c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f8c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fdb52f90a30" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fdb52f90a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fdb52f90db0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7fdb52f85020" loc="52:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7fdb52f85020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f853a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb52f88020" loc="46:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb52f88020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f883a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7fdb52f801d0" loc="50:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb52f801d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7fdb52f80550"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7fdb52f806e0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7fdb52f80870"/>
        <function-ref name="actualMicro" scoped="" ref="0x7fdb52f80a00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7fdb52f80b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7fdb52f7ea60" loc="45:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7fdb52f7ea60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f7ede0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb52f7e380" loc="44:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb52f7e380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f7e700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7fdb52f7c180" loc="46:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7fdb52f7c180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f7c500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7fdb52f781e0" loc="41:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7fdb52f781e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f78560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7fdb52f84ae0" loc="40:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52f84ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f84e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7fdb52f6d020" loc="45:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7fdb52f6d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f6d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7fdb52f6ed20" loc="44:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7fdb52f6ed20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f730e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f73270"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f73400"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f73590"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f73720"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f738b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f73a40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f73bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7fdb52f757e0" loc="43:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52f757e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52f75b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7fdb52f2ccb0" loc="98:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7fdb52f2ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f2b610"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f2b7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f2b930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f2bac0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f2bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f2bde0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f2a020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f2a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7fdb52f484e0" loc="72:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7fdb52f484e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f48860"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f489f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f48b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f48d10"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f47020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f471b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f47340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f474d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7fdb52f3c350" loc="83:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7fdb52f3c350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f3c6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f3c860"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f3c9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f3cb80"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f3cd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f3b020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f3b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f3b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7fdb52f33cb0" loc="92:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7fdb52f33cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f310a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f31230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f313c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f31550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f316e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f31870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f31a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f31b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x7fdb52f25060" loc="103:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x7fdb52f25060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f253e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f25570"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f25700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f25890"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f25a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f25bb0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f25d40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f24020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7fdb52f60670" loc="50:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7fdb52f60670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f609f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f60b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f60d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f5f020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f5f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f5f340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f5f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f5f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7fdb52f35670" loc="90:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7fdb52f35670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f359f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f35b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f35d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f34020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f341b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f34340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f344d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f34660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7fdb52f5ecb0" loc="53:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7fdb52f5ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f5d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f5d230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f5d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f5d550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f5d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f5d870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f5da00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f5db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7fdb52f52cb0" loc="64:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7fdb52f52cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f510a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f51230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f513c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f51550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f516e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f51870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f51a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f51b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7fdb52f45e40" loc="75:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7fdb52f45e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f441e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f44370"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f44500"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f44690"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f44820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f449b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f44b40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f44cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7fdb52f39cb0" loc="86:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7fdb52f39cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f380a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f38230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f383c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f38550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f386e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f38870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f38a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f38b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7fdb52f66800" loc="45:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7fdb52f66800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f66b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f66d10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f65020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f651b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f65340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f654d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f65660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f657f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7fdb52f5a670" loc="56:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7fdb52f5a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f5a9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f5ab80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f5ad10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f59020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f591b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f59340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f594d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f59660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7fdb52f4d670" loc="67:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7fdb52f4d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f4d9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f4db80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f4dd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f4c020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f4c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f4c340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f4c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f4c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7fdb52f41670" loc="78:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7fdb52f41670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f419f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f41b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f41d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f40020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f401b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f40340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f404d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f40660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7fdb52f2e670" loc="95:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7fdb52f2e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f2e9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f2eb80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f2ed10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f2d020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f2d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f2d340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f2d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f2d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7fdb52f28b20" loc="101:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7fdb52f28b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f27020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f271b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f27340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f274d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f27660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f277f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f27980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f27b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7fdb52f3fcb0" loc="81:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7fdb52f3fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f3e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f3e230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f3e3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f3e550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f3e6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f3e870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f3ea00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f3eb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7fdb52f62060" loc="48:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7fdb52f62060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f623e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f62570"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f62700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f62890"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f62a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f62bb0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f62d40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f61020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7fdb52f56020" loc="59:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7fdb52f56020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f563a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f56530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f566c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f56850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f569e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f56b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f56d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f55020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7fdb52f2a4e0" loc="99:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7fdb52f2a4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f2a860"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f2a9f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f2ab80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f2ad10"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f29020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f291b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f29340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f294d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7fdb52f54670" loc="62:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7fdb52f54670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f549f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f54b80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f54d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f53020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f531b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f53340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f534d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f53660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7fdb52f47800" loc="73:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7fdb52f47800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f47b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f47d10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f46020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f461b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f46340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f464d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f46660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f467f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7fdb52f3b670" loc="84:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7fdb52f3b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f3b9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f3bb80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f3bd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f3a020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f3a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f3a340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f3a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f3a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7fdb52f30020" loc="93:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7fdb52f30020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f303a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f30530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f306c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f30850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f309e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f30b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f30d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f2f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7fdb52f5f990" loc="51:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7fdb52f5f990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f5fd10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f5e020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f5e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f5e340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f5e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f5e660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f5e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f5e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7fdb52f5c020" loc="54:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7fdb52f5c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f5c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f5c530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f5c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f5c850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f5c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f5cb70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f5cd00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f5b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7fdb52f50020" loc="65:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7fdb52f50020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f503a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f50530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f506c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f50850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f509e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f50b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f50d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f4f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7fdb52f43060" loc="76:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7fdb52f43060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f433e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f43570"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f43700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f43890"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f43a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f43bb0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f43d40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f42020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7fdb52f37020" loc="87:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7fdb52f37020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f373a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f37530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f376c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f37850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f379e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f37b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f37d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f36020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7fdb52f65b20" loc="46:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7fdb52f65b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f64020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f641b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f64340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f644d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f64660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f647f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f64980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f64b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7fdb52f59990" loc="57:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7fdb52f59990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f59e10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f58020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f581b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f58340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f584d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f58660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f587f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f58980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7fdb52f4c990" loc="68:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7fdb52f4c990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f4cd10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f4b020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f4b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f4b340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f4b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f4b660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f4b7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f4b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7fdb52f2d990" loc="96:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7fdb52f2d990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f2dd10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f2c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f2c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f2c340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f2c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f2c660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f2c7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f2c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7fdb52f49020" loc="71:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7fdb52f49020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f495a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f49730"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f498c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f49a50"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f49be0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f49d70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f48020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f481b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7fdb52f3d020" loc="82:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7fdb52f3d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f3d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f3d530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f3d6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f3d850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f3d9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f3db70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f3dd00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f3c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7fdb52f34990" loc="91:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7fdb52f34990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f34d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f33020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f331b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f33340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f334d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f33660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f337f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f33980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7fdb52f27e40" loc="102:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7fdb52f27e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f261e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f26370"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f26500"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f26690"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f26820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f269b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f26b40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f26cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7fdb52f61350" loc="49:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7fdb52f61350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f616d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f61860"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f619f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f61b80"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f61d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f60020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f601b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f60340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7fdb52f55350" loc="60:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7fdb52f55350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f556d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f55860"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f559f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f55b80"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f55d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f54020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f541b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f54340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7fdb52f36350" loc="89:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7fdb52f36350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f366d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f36860"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f369f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f36b80"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f36d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f35020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f351b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f35340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7fdb52f53990" loc="63:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7fdb52f53990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f53d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f52020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f521b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f52340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f524d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f52660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f527f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f52980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7fdb52f46b20" loc="74:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7fdb52f46b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f45020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f451b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f45340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f454d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f45660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f457f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f45980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f45b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7fdb52f3a990" loc="85:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7fdb52f3a990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f3ad10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f39020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f391b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f39340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f394d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f39660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f397f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f39980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7fdb52f2f350" loc="94:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7fdb52f2f350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f2f6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f2f860"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f2f9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f2fb80"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f2fd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f2e020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f2e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f2e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7fdb52f77610" loc="44:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7fdb52f77610"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f77990"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f77b20"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f77cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f77e40"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f66020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f661b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f66340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f664d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7fdb52f5b350" loc="55:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7fdb52f5b350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f5b6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f5b860"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f5b9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f5bb80"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f5bd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f5a020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f5a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f5a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7fdb52f4f350" loc="66:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7fdb52f4f350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f4f6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f4f860"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f4f9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f4fb80"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f4fd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f4d020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f4d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f4d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7fdb52f42350" loc="77:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7fdb52f42350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f426d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f42860"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f429f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f42b80"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f42d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f41020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f411b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f41340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7fdb52f29800" loc="100:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7fdb52f29800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f29b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f29d10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f28020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f281b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f28340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f284d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f28660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f287f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7fdb52f40990" loc="80:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7fdb52f40990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f40d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f3f020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f3f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f3f340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f3f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f3f660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f3f7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f3f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7fdb52f4bcb0" loc="69:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7fdb52f4bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f4a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f4a230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f4a3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f4a550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f4a6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f4a870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f4aa00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f4ab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7fdb52f64e40" loc="47:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7fdb52f64e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f631e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f63370"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f63500"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f63690"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f63820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f639b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f63b40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f63cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7fdb52f58cb0" loc="58:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7fdb52f58cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52f570a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52f57230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52f573c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52f57550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52f576e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52f57870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52f57a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52f57b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fdb52ed9a80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fdb52ed9a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ed9e00"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ed8020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ed81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ed8340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ed84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ed8660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ed87f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ed8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fdb52ed5020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fdb52ed5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ed53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ed5530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ed56c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ed5850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ed59e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ed5b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ed5d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ed4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fdb52edb6b0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fdb52edb6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52edba30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52edbbc0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52edbd50"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eda020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eda1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eda340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eda4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eda660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fdb52ed8c10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fdb52ed8c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ed7020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ed71b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ed7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ed74d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ed7660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ed77f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ed7980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ed7b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fdb52ed42b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fdb52ed42b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ed4630"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ed47c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ed4950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ed4ae0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ed4c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ed4e00"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ed3020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ed31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fdb52eda8f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fdb52eda8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52edac70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52edae00"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ed9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ed91b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ed9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ed94d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ed9660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ed97f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fdb52ed7da0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fdb52ed7da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ed6180"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ed6310"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ed64a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ed6630"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ed67c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ed6950"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ed6ae0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ed6c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fdb52ed3440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fdb52ed3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ed37c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ed3950"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ed3ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ed3c70"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ed3e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ed2020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ed21b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ed2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51b576d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51b576d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51b57a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51b57be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51b57d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51b56020"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b561b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51b56340"/>
        <function-ref name="set" scoped="" ref="0x7fdb51b564d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51b56660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51b549b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51b549b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51b54d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51b53020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51b531b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51b53340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b534d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51b53660"/>
        <function-ref name="set" scoped="" ref="0x7fdb51b537f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51b53980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51b51e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51b51e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51b501c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51b50350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51b504e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51b50670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b50800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51b50990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51b50b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51b50cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51b4d0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51b4d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51b4d420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51b4d5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51b4d740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51b4d8d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b4da60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51b4dbf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51b4dd80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51b4c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51b4a3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51b4a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51b4a770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51b4a900"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51b4aa90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51b4ac20"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b4adb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51b49020"/>
        <function-ref name="set" scoped="" ref="0x7fdb51b491b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51b49340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51b476d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51b476d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51b47a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51b47be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51b47d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51b45020"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b451b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51b45340"/>
        <function-ref name="set" scoped="" ref="0x7fdb51b454d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51b45660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51b439b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51b439b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51b43d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51b42020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51b421b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51b42340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b424d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51b42660"/>
        <function-ref name="set" scoped="" ref="0x7fdb51b427f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51b42980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51b40e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51b40e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51b3f1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51b3f350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51b3f4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51b3f670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b3f800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51b3f990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51b3fb20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51b3fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fdb52ecada0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fdb52ecada0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ec9180"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ec9310"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ec94a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ec9630"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ec97c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ec9950"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ec9ae0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ec9c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fdb52ec6440" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fdb52ec6440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ec67c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ec6950"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ec6ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ec6c70"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ec6e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ec5020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ec51b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ec5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fdb52ecca20" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fdb52ecca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eccda0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ecb020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ecb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ecb340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ecb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ecb660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ecb7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ecb980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fdb52ec8020" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fdb52ec8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ec83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ec8530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ec86c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ec8850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ec89e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ec8b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ec8d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ec7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fdb52ec55d0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fdb52ec55d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ec5950"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ec5ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ec5c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ec5e00"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ec3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ec31b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ec3340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ec34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fdb52ecbc10" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fdb52ecbc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eca020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eca1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eca340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eca4d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eca660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eca7f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eca980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ecab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fdb52ec72b0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fdb52ec72b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ec7630"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ec77c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ec7950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ec7ae0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ec7c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ec7e00"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ec6020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ec61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fdb52ec3760" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fdb52ec3760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ec3ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ec3c70"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ec3e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ec2020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ec21b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ec2340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ec24d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ec2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51ae7a60" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51ae7a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51ae7de0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51ae6020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51ae61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51ae6340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51ae64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51ae6660"/>
        <function-ref name="set" scoped="" ref="0x7fdb51ae67f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51ae6980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51ae4e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51ae4e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51ae31c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51ae3350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51ae34e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51ae3670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51ae3800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51ae3990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51ae3b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51ae3cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51ae00a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51ae00a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51ae0420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51ae05b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51ae0740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51ae08d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51ae0a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51ae0bf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51ae0d80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51adf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51add3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51add3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51add770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51add900"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51adda90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51addc20"/>
        <function-ref name="get" scoped="" ref="0x7fdb51adddb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51adc020"/>
        <function-ref name="set" scoped="" ref="0x7fdb51adc1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51adc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51ada6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51ada6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51adaa50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51adabe0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51adad70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51ad9020"/>
        <function-ref name="get" scoped="" ref="0x7fdb51ad91b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51ad9340"/>
        <function-ref name="set" scoped="" ref="0x7fdb51ad94d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51ad9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51ad79b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51ad79b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51ad7d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51ad6020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51ad61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51ad6340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51ad64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51ad6660"/>
        <function-ref name="set" scoped="" ref="0x7fdb51ad67f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51ad6980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51ad4e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51ad4e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51ad21c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51ad2350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51ad24e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51ad2670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51ad2800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51ad2990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51ad2b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51ad2cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51acf0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51acf0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51acf420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51acf5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51acf740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51acf8d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51acfa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51acfbf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51acfd80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51ace020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fdb52eba020" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fdb52eba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eba3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eba530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eba6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eba850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eba9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ebab70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ebad00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eb9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fdb52eb65d0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fdb52eb65d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eb6950"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eb6ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eb6c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eb6e00"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eb5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eb51b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eb5340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eb54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fdb52ebdd30" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fdb52ebdd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ebc0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ebc270"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ebc400"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ebc590"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ebc720"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ebc8b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ebca40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ebcbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fdb52eb92b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fdb52eb92b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eb9630"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eb97c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eb9950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eb9ae0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eb9c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eb9e00"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eb7020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eb71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fdb52eb5760" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fdb52eb5760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eb5ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eb5c70"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eb5e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eb4020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eb41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eb4340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eb44d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eb4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fdb52ebce60" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fdb52ebce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ebb210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ebb3a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ebb530"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ebb6c0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ebb850"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ebb9e0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ebbb70"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ebbd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fdb52eb7440" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fdb52eb7440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eb77c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eb7950"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eb7ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eb7c70"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eb7e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eb6020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eb61b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eb6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fdb52eb48f0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fdb52eb48f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eb4c70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eb4e00"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eb3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eb31b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eb3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eb34d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eb3660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eb37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a7cc90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a7cc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a7b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a7b230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a7b3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a7b550"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a7b6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a7b870"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a7ba00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a7bb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a79e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a79e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a781c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a78350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a784e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a78670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a78800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a78990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a78b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a78cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a750a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a750a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a75420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a755b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a75740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a758d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a75a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a75bf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a75d80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a74020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a723f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a723f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a72770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a72900"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a72a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a72c20"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a72db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a71020"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a711b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a71340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a6f6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a6f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a6fa50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a6fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a6fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a6e020"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a6e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a6e340"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a6e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a6e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a6c9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a6c9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a6cd30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a6b020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a6b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a6b340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a6b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a6b660"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a6b7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a6b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a69e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a69e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a671c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a67350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a674e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a67670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a67800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a67990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a67b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a67cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a640a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a640a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a64420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a645b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a64740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a648d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a64a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a64bf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a64d80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a63020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fdb52eaa440" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fdb52eaa440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eaa7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eaa950"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eaaae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eaac70"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eaae00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ea9020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ea91b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ea9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fdb52ea78f0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fdb52ea78f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ea7c70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ea7e00"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ea6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ea61b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ea6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ea64d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ea6660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ea67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fdb52ead020" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fdb52ead020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ead3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ead530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ead6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ead850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ead9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eadb70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eadd00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eab020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fdb52ea95d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fdb52ea95d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ea9950"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ea9ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ea9c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ea9e00"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ea8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ea81b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ea8340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ea84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fdb52ea6a80" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fdb52ea6a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ea6e00"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ea5020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ea51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ea5340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ea54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ea5660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ea57f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ea5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fdb52eab2b0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fdb52eab2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52eab630"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52eab7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52eab950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52eabae0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52eabc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52eabe00"/>
        <function-ref name="set" scoped="" ref="0x7fdb52eaa020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52eaa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fdb52ea8760" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fdb52ea8760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ea8ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ea8c70"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ea8e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ea7020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ea71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ea7340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ea74d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ea7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fdb52ea5c10" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fdb52ea5c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52ea4020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52ea41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52ea4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52ea44d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52ea4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52ea47f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52ea4980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52ea4b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a11c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a11c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a100a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a10230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a103c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a10550"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a106e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a10870"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a10a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a10b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a0ee20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a0ee20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a0d1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a0d350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a0d4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a0d670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a0d800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a0d990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a0db20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a0dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a0a0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a0a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a0a420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a0a5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a0a740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a0a8d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a0aa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a0abf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a0ad80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a09020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a073f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a073f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a07770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a07900"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a07a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a07c20"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a07db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a06020"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a061b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a06340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a046d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a046d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a04a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a04be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a04d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a03020"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a031b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a03340"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a034d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a03660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51a019b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51a019b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51a01d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51a00020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51a001b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51a00340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51a004d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51a00660"/>
        <function-ref name="set" scoped="" ref="0x7fdb51a007f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51a00980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519fee20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519fee20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb519fd1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb519fd350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb519fd4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb519fd670"/>
        <function-ref name="get" scoped="" ref="0x7fdb519fd800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb519fd990"/>
        <function-ref name="set" scoped="" ref="0x7fdb519fdb20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb519fdcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519fa0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519fa0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb519fa420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb519fa5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb519fa740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb519fa8d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb519faa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb519fabf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb519fad80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb519f8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fdb52e9b760" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fdb52e9b760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e9bae0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e9bc70"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e9be00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e9a020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e9a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e9a340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e9a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e9a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fdb52e98c10" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fdb52e98c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e97020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e971b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e97340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e974d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e97660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e977f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e97980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e97b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fdb52e9d3f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fdb52e9d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e9d770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e9d900"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e9da90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e9dc20"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e9ddb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e9c020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e9c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e9c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fdb52e9a8f0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fdb52e9a8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e9ac70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e9ae00"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e99020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e991b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e99340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e994d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e99660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e997f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fdb52e97da0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fdb52e97da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e96180"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e96310"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e964a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e96630"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e967c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e96950"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e96ae0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e96c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fdb52e9c5d0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fdb52e9c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e9c950"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e9cae0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e9cc70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e9ce00"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e9b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e9b1b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e9b340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e9b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fdb52e99a80" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fdb52e99a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e99e00"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e98020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e981b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e98340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e984d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e98660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e987f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e98980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fdb52e95020" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fdb52e95020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e953a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e95530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e956c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e95850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e959e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e95b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e95d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e94020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519a6c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519a6c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb519a50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb519a5230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb519a53c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb519a5550"/>
        <function-ref name="get" scoped="" ref="0x7fdb519a56e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb519a5870"/>
        <function-ref name="set" scoped="" ref="0x7fdb519a5a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb519a5b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519a3e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519a3e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb519a21c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb519a2350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb519a24e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb519a2670"/>
        <function-ref name="get" scoped="" ref="0x7fdb519a2800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb519a2990"/>
        <function-ref name="set" scoped="" ref="0x7fdb519a2b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb519a2cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5199f0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb5199f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5199f420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5199f5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5199f740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5199f8d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5199fa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5199fbf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5199fd80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5199e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5199c3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb5199c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5199c770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5199c900"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5199ca90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5199cc20"/>
        <function-ref name="get" scoped="" ref="0x7fdb5199cdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5199b020"/>
        <function-ref name="set" scoped="" ref="0x7fdb5199b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5199b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519996d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519996d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51999a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51999be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51999d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51998020"/>
        <function-ref name="get" scoped="" ref="0x7fdb519981b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51998340"/>
        <function-ref name="set" scoped="" ref="0x7fdb519984d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51998660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519969b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519969b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51996d30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51995020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb519951b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51995340"/>
        <function-ref name="get" scoped="" ref="0x7fdb519954d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51995660"/>
        <function-ref name="set" scoped="" ref="0x7fdb519957f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51995980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51993e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51993e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb519921c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51992350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb519924e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51992670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51992800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51992990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51992b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51992cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5198f0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb5198f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5198f420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5198f5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5198f740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5198f8d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5198fa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5198fbf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5198fd80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5198d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7fdb52e8ca80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7fdb52e8ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e8ce00"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e8b020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e8b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e8b340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e8b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e8b660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e8b7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e8b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7fdb52e88020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7fdb52e88020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e883a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e88530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e886c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e88850"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e889e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e88b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e88d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e86020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7fdb52e8e7a0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7fdb52e8e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e8eb20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e8ecb0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e8ee40"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e8d020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e8d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e8d340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e8d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e8d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7fdb52e8bc10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7fdb52e8bc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e8a020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e8a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e8a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e8a4d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e8a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e8a7f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e8a980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e8ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7fdb52e862b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7fdb52e862b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e86630"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e867c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e86950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e86ae0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e86c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e86e00"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e85020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e851b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7fdb52e8d8f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7fdb52e8d8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e8dc70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e8de00"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e8c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e8c1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e8c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e8c4d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e8c660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e8c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7fdb52e8ada0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7fdb52e8ada0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e89180"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e89310"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e894a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e89630"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e897c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e89950"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e89ae0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e89c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7fdb52e85440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7fdb52e85440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e857c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e85950"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e85ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e85c70"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e85e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e84020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e841b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e84340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5193bc90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb5193bc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5193a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5193a230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5193a3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5193a550"/>
        <function-ref name="get" scoped="" ref="0x7fdb5193a6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5193a870"/>
        <function-ref name="set" scoped="" ref="0x7fdb5193aa00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5193ab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51938e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51938e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb519371c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51937350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb519374e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51937670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51937800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51937990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51937b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51937cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519340a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519340a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51934420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb519345b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51934740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb519348d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51934a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51934bf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51934d80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51933020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519313f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519313f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51931770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51931900"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51931a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51931c20"/>
        <function-ref name="get" scoped="" ref="0x7fdb51931db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51930020"/>
        <function-ref name="set" scoped="" ref="0x7fdb519301b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51930340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5192e6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb5192e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5192ea50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5192ebe0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5192ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5192d020"/>
        <function-ref name="get" scoped="" ref="0x7fdb5192d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5192d340"/>
        <function-ref name="set" scoped="" ref="0x7fdb5192d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5192d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5192b9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb5192b9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5192bd30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5192a020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5192a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5192a340"/>
        <function-ref name="get" scoped="" ref="0x7fdb5192a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5192a660"/>
        <function-ref name="set" scoped="" ref="0x7fdb5192a7f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5192a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb51928e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb51928e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb519271c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51927350"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb519274e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51927670"/>
        <function-ref name="get" scoped="" ref="0x7fdb51927800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51927990"/>
        <function-ref name="set" scoped="" ref="0x7fdb51927b20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51927cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb519240a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb519240a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51924420"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb519245b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51924740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb519248d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51924a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51924bf0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51924d80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51923020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e7ea20" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e7ea20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e7eda0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e67020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e671b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e67340"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e674d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e67660"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e677f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e67980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e626d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e626d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e62a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e62be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e62d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e61020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e611b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e61340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e614d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e61660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e5d160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e5d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e5d4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e5d670"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e5d800"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e5d990"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e5db20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e5dcb0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e5de40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e5c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e58c90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e58c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e570a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e57230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e573c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e57550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e576e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e57870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e57a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e57b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e526d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e526d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e52a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e52be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e52d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e51020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e511b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e51340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e514d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e51660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e4d160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e4d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e4d4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e4d670"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e4d800"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e4d990"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e4db20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e4dcb0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e4de40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e4c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e48c90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e48c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e470a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e47230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e473c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e47550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e476e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e47870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e47a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e47b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e436d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e436d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e43a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e43be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e43d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e41020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e411b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e41340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e414d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e41660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e3d160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e3d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e3d4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e3d670"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e3d800"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e3d990"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e3db20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e3dcb0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e3de40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e3c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e38c90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e38c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e370a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e37230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e373c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e37550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e376e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e37870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e37a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e37b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e336d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e336d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e33a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e33be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e33d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e31020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e311b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e31340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e314d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e31660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e2d160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e2d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e2d4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e2d670"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e2d800"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e2d990"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e2db20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e2dcb0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e2de40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e2c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e28c90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e28c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e270a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e27230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e273c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e27550"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e276e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e27870"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e27a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e27b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52e236d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7fdb52e236d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52e23a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52e23be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52e23d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52e22020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52e221b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52e22340"/>
        <function-ref name="set" scoped="" ref="0x7fdb52e224d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52e22660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb52dea020" loc="61:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb52dea020"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7fdb531b23a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7fdb531b23a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52dea3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7fdb52dea690" loc="62:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb52dea690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7fdb52deaa10"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7fdb52deaba0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7fdb52dead30"/>
        <function-ref name="actualMicro" scoped="" ref="0x7fdb52de3020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7fdb52de31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fdb52dc4720" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52dc4720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52dc4aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fdb52f89db0" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7fdb52f89db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fdb52dc5180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7fdb52dc4020" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52dc4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52dc43a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7fdb52dc5470" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7fdb52dc5470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52dc57f0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fdb52dc5980"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fdb52dc5b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fdb53181940" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7fdb53181940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb53181cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb53181e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fdb5318a510" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7fdb5318a510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5318a890"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fdb5318aa20"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fdb5318abb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fdb530bc850" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7fdb530bc850"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb530bcbd0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb530bcd60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7fdb530b7c90" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7fdb530b7c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fdb530b90a0"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fdb530b9230"/>
        <function-ref name="sleep" scoped="" ref="0x7fdb530b93c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fdb530bd8a0" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7fdb530bd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb530bdc20"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fdb530bddb0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fdb530bc020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7fdb530989e0" loc="86:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fdb530989e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fdb53098d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7fdb530d3140" loc="82:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7fdb530d3140"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fdb530d34c0"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fdb530d3650"/>
        <function-ref name="sleep" scoped="" ref="0x7fdb530d37e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7fdb5309aa50" loc="83:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5309aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fdb5309add0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb52f8fcb0" loc="41:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb52f8fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb52db60a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb52db6230"/>
        <function-ref name="start" scoped="" ref="0x7fdb52db63c0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52db6550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fdb52db12e0" loc="46:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52db12e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fdb52db1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb52db18f0" loc="48:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb52db18f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52db1c70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52db1e00"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52dae020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52dae1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52dae340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb52db6d20" loc="43:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb52db6d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52db40e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52db4270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52db4400"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52db4590"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52db4720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fdb52db3c00" loc="45:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fdb52db3c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52db2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fdb52d9f5b0" loc="52:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52d9f5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fdb52d9f930"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fdb52d9fac0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fdb52d9fc50"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fdb52d9fde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb52db3020" loc="44:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb52db3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52db33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fdb52da69f0" loc="51:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52da69f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb52da6d70"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb52dac020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb52dac1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7fdb52d99880" loc="53:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7fdb52d99880"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fdb52d99c00"/>
        <function-ref name="setRetries" scoped="" ref="0x7fdb52d99d90"/>
        <function-ref name="getRetries" scoped="" ref="0x7fdb52da5020"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fdb52da51b0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fdb52da5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb52dae5f0" loc="49:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb52dae5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52dae970"/>
        <function-ref name="source" scoped="" ref="0x7fdb52daeb00"/>
        <function-ref name="address" scoped="" ref="0x7fdb52daec90"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52daee20"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52dad020"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52dad1b0"/>
        <function-ref name="type" scoped="" ref="0x7fdb52dad340"/>
        <function-ref name="setType" scoped="" ref="0x7fdb52dad4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52dad660"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb52dad7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb52dad980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fdb52d94690" loc="54:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fdb52d94690"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fdb52d94a10"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb52d94ba0"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb52d94d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0x7fdb52d8b7c0" loc="56:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7fdb52d8b7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb52d97d50"/>
        <function-ref name="clear" scoped="" ref="0x7fdb52d8c4c0"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb52d97620"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d8cbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fdb52d8a880" loc="57:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52d8a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb52d87020"/>
        <function-ref name="clear" scoped="" ref="0x7fdb52d87750"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb52d897c0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d87e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb52d83140" loc="45:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb52d83140"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb52d834c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb52d83650"/>
        <function-ref name="start" scoped="" ref="0x7fdb52d837e0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52d83970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7fdb52d6ea00" loc="62:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb52d6ea00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d6c1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52d6dc00"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb52d6d6b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d6c700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fdb52d7fbb0" loc="50:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52d7fbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fdb52d7e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb52d7e2b0" loc="52:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb52d7e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d7e630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52d7e7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52d7e950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52d7eae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52d7ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb52d821d0" loc="47:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb52d821d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52d82550"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52d826e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52d82870"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52d82a00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52d82b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fdb52d7f020" loc="49:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fdb52d7f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52d7f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7fdb52d71400" loc="61:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb52d71400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d70c10"/>
        <function-ref name="get" scoped="" ref="0x7fdb52d706c0"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb52d70170"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d6e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fdb52d7b320" loc="56:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52d7b320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fdb52d7b6a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fdb52d7b830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fdb52d7b9c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fdb52d7bb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb52d803f0" loc="48:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb52d803f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52d80770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fdb52d658a0" loc="66:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb52d658a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb52d64e10"/>
        <function-ref name="clear" scoped="" ref="0x7fdb52d635a0"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb52d646e0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d63cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7fdb52d6a270" loc="65:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb52d6a270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb52d65020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7fdb52d73df0" loc="60:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb52d73df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d775e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52d77090"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb52d78ac0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d77b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fdb52d7c800" loc="55:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52d7c800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb52d7cb80"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb52d7cd10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb52d7b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7fdb52d7be10" loc="57:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7fdb52d7be10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fdb52d7a1c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7fdb52d7a350"/>
        <function-ref name="getRetries" scoped="" ref="0x7fdb52d7a4e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fdb52d7a670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fdb52d7a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb52d7d020" loc="53:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb52d7d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52d7d3a0"/>
        <function-ref name="source" scoped="" ref="0x7fdb52d7d530"/>
        <function-ref name="address" scoped="" ref="0x7fdb52d7d6c0"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52d7d850"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52d7d9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52d7db70"/>
        <function-ref name="type" scoped="" ref="0x7fdb52d7dd00"/>
        <function-ref name="setType" scoped="" ref="0x7fdb52d7c020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52d7c1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb52d7c340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb52d7c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fdb52d7aad0" loc="58:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fdb52d7aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fdb52d7ae50"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb52d79020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb52d791b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7fdb52d664c0" loc="63:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb52d664c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7fdb52d66840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fdb52d61970" loc="67:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52d61970"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb52d5f020"/>
        <function-ref name="clear" scoped="" ref="0x7fdb52d5f750"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb52d607c0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d5fe80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb52d5a080" loc="41:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb52d5a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb52d5a400"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb52d5a590"/>
        <function-ref name="start" scoped="" ref="0x7fdb52d5a720"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52d5a8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7fdb52d311c0" loc="85:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb52d311c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d30910"/>
        <function-ref name="get" scoped="" ref="0x7fdb52d303c0"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb52d31df0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d30e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0x7fdb52d51020" loc="65:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0x7fdb52d51020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fdb52d513a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0x7fdb52d4a2c0" loc="67:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0x7fdb52d4a2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb52d4a640"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb52d4a7d0"/>
        <function-ref name="request" scoped="" ref="0x7fdb52d4a960"/>
        <function-ref name="granted" scoped="" ref="0x7fdb52d4aaf0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52d4ac80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fdb52d57bb0" loc="57:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52d57bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fdb52d56020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fdb52d283f0" loc="90:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52d283f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb52d27970"/>
        <function-ref name="clear" scoped="" ref="0x7fdb52d250d0"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb52d27240"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d25800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb52d591d0" loc="54:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb52d591d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52d59550"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52d596e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52d59870"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52d59a00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52d59b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fdb52d57020" loc="56:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fdb52d57020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52d573a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7fdb52d3b3c0" loc="69:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb52d3b3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7fdb52d3b740"/>
        <function-ref name="address" scoped="" ref="0x7fdb52d3b8d0"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52d3ba60"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52d3bbf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52d3bd80"/>
        <function-ref name="pan" scoped="" ref="0x7fdb52d44020"/>
        <function-ref name="setPan" scoped="" ref="0x7fdb52d441b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52d44340"/>
        <function-ref name="localPan" scoped="" ref="0x7fdb52d444d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0x7fdb52d44890" loc="70:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7fdb52d44890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d44d10"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52d43020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52d431b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52d43340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52d434d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fdb52d3a320" loc="74:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52d3a320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fdb52d3a6a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fdb52d3a830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fdb52d3a9c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fdb52d3ab50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7fdb52d36c90" loc="84:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb52d36c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d333c0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52d34e30"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb52d348e0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d33910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb52d583f0" loc="55:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb52d583f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52d58770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0x7fdb52d55a10" loc="59:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7fdb52d55a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d55d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52d54020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52d541b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52d54340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52d544d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fdb52d2c270" loc="89:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb52d2c270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb52d2b800"/>
        <function-ref name="clear" scoped="" ref="0x7fdb52d29020"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb52d2b0d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d29750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7fdb52d2fd70" loc="88:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb52d2fd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb52d2d9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7fdb52d386d0" loc="83:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb52d386d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52d37e70"/>
        <function-ref name="get" scoped="" ref="0x7fdb52d37920"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb52d373d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52d363f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fdb52d43800" loc="73:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52d43800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb52d43b80"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb52d43d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb52d3a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7fdb52d4ca60" loc="63:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7fdb52d4ca60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52d4cde0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52d52020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52d521b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52d52340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52d524d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7fdb52d3ae10" loc="75:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7fdb52d3ae10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fdb52d391c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7fdb52d39350"/>
        <function-ref name="getRetries" scoped="" ref="0x7fdb52d394e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fdb52d39670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fdb52d39800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb52d562d0" loc="58:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb52d562d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52d56650"/>
        <function-ref name="source" scoped="" ref="0x7fdb52d567e0"/>
        <function-ref name="address" scoped="" ref="0x7fdb52d56970"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52d56b00"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52d56c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52d56e20"/>
        <function-ref name="type" scoped="" ref="0x7fdb52d55020"/>
        <function-ref name="setType" scoped="" ref="0x7fdb52d551b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52d55340"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb52d554d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb52d55660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7fdb52d52840" loc="64:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7fdb52d52840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52d52bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fdb52d39ad0" loc="81:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fdb52d39ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fdb52d39e50"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb52d38020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb52d381b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7fdb52d2f510" loc="86:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb52d2f510"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7fdb52d2f890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0x7fdb52d23630" loc="44:../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fdb52d23630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fdb52d239b0"/>
        <function-ref name="suspend" scoped="" ref="0x7fdb52d23b40"/>
        <function-ref name="resume" scoped="" ref="0x7fdb52d23cd0"/>
        <function-ref name="run" scoped="" ref="0x7fdb52d23e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7fdb52cd6aa0" loc="38:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb52cd6aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52cd6e40"/>
        <function-ref name="clearAll" scoped="" ref="0x7fdb52cd5020"/>
        <function-ref name="get" scoped="" ref="0x7fdb52cd51b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52cd5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7fdb52d11cb0" loc="37:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7fdb52d11cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7fdb52cd60a0"/>
        <function-ref name="insertNode" scoped="" ref="0x7fdb52cd6230"/>
        <function-ref name="getNode" scoped="" ref="0x7fdb52cd63c0"/>
        <function-ref name="evicted" scoped="" ref="0x7fdb52cd6550"/>
        <function-ref name="getIndex" scoped="" ref="0x7fdb52cd66e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7fdb518246c0" loc="43:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb518246c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51824a60"/>
        <function-ref name="clearAll" scoped="" ref="0x7fdb51824bf0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51824d80"/>
        <function-ref name="set" scoped="" ref="0x7fdb51823020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7fdb518267f0" loc="42:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7fdb518267f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7fdb51826b70"/>
        <function-ref name="insertNode" scoped="" ref="0x7fdb51826d00"/>
        <function-ref name="getNode" scoped="" ref="0x7fdb51824020"/>
        <function-ref name="evicted" scoped="" ref="0x7fdb518241b0"/>
        <function-ref name="getIndex" scoped="" ref="0x7fdb51824340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51826220" loc="41:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb51826220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb518265a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0x7fdb52ca5560" loc="51:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0x7fdb52ca5560"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fdb52ca58e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0x7fdb52cb9620" loc="47:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0x7fdb52cb9620"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0x7fdb52cb99a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0x7fdb52ca8890" loc="50:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7fdb52ca8890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52ca8c10"/>
        <function-ref name="checkFrame" scoped="" ref="0x7fdb52ca8da0"/>
        <function-ref name="source" scoped="" ref="0x7fdb52cb4020"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52cb41b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52cb4340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52cb44d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb52cb4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0x7fdb52caf310" loc="49:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0x7fdb52caf310"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0x7fdb52caf690"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0x7fdb52caf820"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0x7fdb52caf9b0"/>
        <function-ref name="getTransmitTime" scoped="" ref="0x7fdb52cafb40"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0x7fdb52cafcd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fdb52c85400" loc="61:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52c85400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb52c85780"/>
        <function-ref name="wait" scoped="" ref="0x7fdb52c85910"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52c85aa0"/>
        <function-ref name="isFree" scoped="" ref="0x7fdb52c85c30"/>
        <function-ref name="getNow" scoped="" ref="0x7fdb52c85dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0x7fdb52c7f960" loc="62:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0x7fdb52c7f960"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52c7fce0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52c7fe70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52c88030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52c881c0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52c88350"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52c884e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7fdb52c88ab0" loc="64:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fdb52c88ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb52c7d170"/>
        <function-ref name="clear" scoped="" ref="0x7fdb52c7d8a0"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb52c84a00"/>
        <function-ref name="set" scoped="" ref="0x7fdb52c7c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0x7fdb52cd1020" loc="43:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0x7fdb52cd1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52cd13a0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52cd1530"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52cd16c0"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7fdb52cd1850"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7fdb52cd19e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0x7fdb52cc0020" loc="46:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0x7fdb52cc0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0x7fdb52cc03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0x7fdb52cc1190" loc="44:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7fdb52cc1190"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7fdb52cc1510"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7fdb52cc16a0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fdb52cc1830"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7fdb52cc19c0"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7fdb52cc1b50"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7fdb52cc1ce0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fdb52cc1e70"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fdb52cd0030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7fdb52c8b470" loc="60:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb52c8b470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7fdb52c8b7f0"/>
        <function-ref name="getDSN" scoped="" ref="0x7fdb52c8b980"/>
        <function-ref name="setFCF" scoped="" ref="0x7fdb52c8bb10"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7fdb52c8bca0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7fdb52c8be30"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7fdb52cae020"/>
        <function-ref name="setDSN" scoped="" ref="0x7fdb52cae1b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7fdb52cae340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7fdb52cae4d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7fdb52cae660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7fdb52cae7f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7fdb52cae980"/>
        <function-ref name="localAddr" scoped="" ref="0x7fdb52caeb10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fdb52caeda0"/>
        <function-ref name="localPan" scoped="" ref="0x7fdb52ca6020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7fdb52ca61b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7fdb52ca6340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7fdb52ca64d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7fdb52ca6660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52ca67f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fdb52ca6980"/>
        <function-ref name="getFCF" scoped="" ref="0x7fdb52ca6b10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fdb52ca6ca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7fdb52ca6e30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7fdb52c8a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0x7fdb52cbc480" loc="45:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7fdb52cbc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7fdb52cbc800"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7fdb52cbc990"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7fdb52cbcb20"/>
        <function-ref name="getSender" scoped="" ref="0x7fdb52cbccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0x7fdb52cb5c80" loc="48:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7fdb52cb5c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7fdb52cbb0a0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7fdb52cbb230"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7fdb52cbb3c0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7fdb52cbb550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7fdb52bf1020" loc="41:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52bf1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb52bf13c0"/>
        <function-ref name="wait" scoped="" ref="0x7fdb52bf1550"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52bf16e0"/>
        <function-ref name="isFree" scoped="" ref="0x7fdb52bf1870"/>
        <function-ref name="getNow" scoped="" ref="0x7fdb52bf1a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fdb52bf0b60" loc="47:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb52bf0b60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7fdb531b23a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7fdb531b23a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7fdb53017580"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb52bed4e0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb52bee4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb52beee60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb52bee9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb52bed9a0"/>
        <function-ref name="start" scoped="" ref="0x7fdb52bef9b0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52bee020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fdb52bf1cb0" loc="46:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fdb52bf1cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fdb52bf00a0"/>
        <function-ref name="suspend" scoped="" ref="0x7fdb52bf0230"/>
        <function-ref name="resume" scoped="" ref="0x7fdb52bf03c0"/>
        <function-ref name="run" scoped="" ref="0x7fdb52bf0550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7fdb51807480" loc="54:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb51807480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51807820"/>
        <function-ref name="wait" scoped="" ref="0x7fdb518079b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51807b40"/>
        <function-ref name="isFree" scoped="" ref="0x7fdb51807cd0"/>
        <function-ref name="getNow" scoped="" ref="0x7fdb51807e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fdb51806380" loc="59:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb51806380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7fdb53017580"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51803be0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51805bc0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb51803590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb518030d0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb518020d0"/>
        <function-ref name="start" scoped="" ref="0x7fdb518051f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51805700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fdb518024c0" loc="60:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fdb518024c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fdb51802840"/>
        <function-ref name="suspend" scoped="" ref="0x7fdb518029d0"/>
        <function-ref name="resume" scoped="" ref="0x7fdb51802b60"/>
        <function-ref name="run" scoped="" ref="0x7fdb51802cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb52b418f0" loc="50:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb52b418f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52b41c70"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52b41e00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52b40020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb52b402b0" loc="51:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb52b402b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52b40630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fdb52b423a0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52b423a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fdb52b42740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb52b46720" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb52b46720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52b46aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52b46c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52b46dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52b45020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52b451b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb52b45530" loc="41:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb52b45530"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52b458d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52b45a60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52b45bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52b45d80"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52b44020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fdb52b44b00" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fdb52b44b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52b42020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb52b42a30" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb52b42a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52b42db0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52b41020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52b411b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52b41340"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52b414d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52b41660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb52b408c0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb52b408c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52b40c40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7fdb52b40dd0"/>
        <function-ref name="source" scoped="" ref="0x7fdb52b3f020"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52b3f1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52b3f340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52b3f4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb52b3f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb52b443a0" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb52b443a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52b44740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb52b47020" loc="39:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb52b47020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52b473a0"/>
        <function-ref name="source" scoped="" ref="0x7fdb52b47530"/>
        <function-ref name="address" scoped="" ref="0x7fdb52b476c0"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52b47850"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52b479e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52b47b70"/>
        <function-ref name="type" scoped="" ref="0x7fdb52b47d00"/>
        <function-ref name="setType" scoped="" ref="0x7fdb52b46020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52b461b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb52b46340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb52b464d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb517e58f0" loc="54:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb517e58f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb517e5c70"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb517e5e00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb517e4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb517e42b0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb517e42b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb517e4630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fdb517e7420" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fdb517e7420"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fdb517e77c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb517ea8b0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb517ea8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb517eac30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb517eadc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb517e9020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb517e91b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb517e9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb517ec360" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb517ec360"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb517ec6e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb517ec870"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb517eca00"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb517ecb90"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb517ecd20"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb517eb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb517e96c0" loc="45:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb517e96c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb517e9a60"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb517e9bf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb517e9d80"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb517e8020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb517e81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7fdb517e8c90" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7fdb517e8c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb517e70a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb517e7ab0" loc="53:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb517e7ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb517e7e30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb517e5020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb517e51b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb517e5340"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb517e54d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb517e5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb517e8530" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb517e8530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb517e88d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb517e48c0" loc="56:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb517e48c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb517e4c40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7fdb517e4dd0"/>
        <function-ref name="source" scoped="" ref="0x7fdb517e3020"/>
        <function-ref name="destination" scoped="" ref="0x7fdb517e31b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb517e3340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb517e34d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb517e3660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7fdb517e38b0" loc="57:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fdb517e38b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7fdb517e3c30"/>
        <function-ref name="changed" scoped="" ref="0x7fdb517e3dc0"/>
        <function-ref name="amGroup" scoped="" ref="0x7fdb517e2020"/>
        <function-ref name="setAddress" scoped="" ref="0x7fdb517e21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb517eb270" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb517eb270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb517eb5f0"/>
        <function-ref name="source" scoped="" ref="0x7fdb517eb780"/>
        <function-ref name="address" scoped="" ref="0x7fdb517eb910"/>
        <function-ref name="destination" scoped="" ref="0x7fdb517ebaa0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb517ebc30"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb517ebdc0"/>
        <function-ref name="type" scoped="" ref="0x7fdb517ea020"/>
        <function-ref name="setType" scoped="" ref="0x7fdb517ea1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb517ea340"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb517ea4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb517ea660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7fdb52b60260" loc="54:../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fdb52b60260"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7fdb52b605e0"/>
        <function-ref name="changed" scoped="" ref="0x7fdb52b60770"/>
        <function-ref name="amGroup" scoped="" ref="0x7fdb52b60900"/>
        <function-ref name="setAddress" scoped="" ref="0x7fdb52b60a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb52b39310" loc="44:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb52b39310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52b39690"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52b39820"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52b399b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fdb52b39c00" loc="45:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb52b39c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb52b29020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb52b291b0"/>
        <function-ref name="request" scoped="" ref="0x7fdb52b29340"/>
        <function-ref name="granted" scoped="" ref="0x7fdb52b294d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52b29660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7fdb52b3a880" loc="39:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7fdb52b3a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52b3ac00"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52b3ad90"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52b39020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb52ac5150" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb52ac5150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb52ac54f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb52ac5680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb52ac41f0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb52ac41f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb52ac4590"/>
        <function-ref name="configure" scoped="" ref="0x7fdb52ac4720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb52ac6390" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb52ac6390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb52ac6730"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb52ac68c0"/>
        <function-ref name="request" scoped="" ref="0x7fdb52ac6a50"/>
        <function-ref name="granted" scoped="" ref="0x7fdb52ac6be0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52ac6d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb52ac58d0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb52ac58d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb52ac5c50"/>
        <function-ref name="userId" scoped="" ref="0x7fdb52ac5de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51794460" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb51794460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb517947e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fdb51794a70" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7fdb51794a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fdb51794df0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fdb51793020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fdb517931b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fdb51793340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb51791850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51791850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb51791bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51791d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb51790910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51790910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb51790cb0"/>
        <function-ref name="configure" scoped="" ref="0x7fdb51790e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fdb5178f120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fdb5178f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fdb5178f4a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fdb5178f630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fdb5178f7c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fdb5178f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb517929d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb517929d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51792d70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51791020"/>
        <function-ref name="request" scoped="" ref="0x7fdb517911b0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51791340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb517914d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb51790020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51790020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb517903a0"/>
        <function-ref name="userId" scoped="" ref="0x7fdb51790530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fdb5178fc20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7fdb5178fc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb5178d020"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb5178d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb52a8c2b0" loc="49:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb52a8c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52a8c630"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52a8c7c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52a8c950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb52a8cbe0" loc="50:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb52a8cbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52a8b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7fdb52a91d30" loc="42:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7fdb52a91d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7fdb52a900e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb52ac1e00" loc="39:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb52ac1e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52a921c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52a92350"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52a924e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52a92670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52a92800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7fdb52a8d470" loc="48:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52a8d470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52a8d7f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52a8d980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52a8db10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52a8dca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52a8de30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52a8c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7fdb52a90390" loc="47:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb52a90390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7fdb52a90710"/>
        <function-ref name="getDSN" scoped="" ref="0x7fdb52a908a0"/>
        <function-ref name="setFCF" scoped="" ref="0x7fdb52a90a30"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7fdb52a90bc0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7fdb52a90d50"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7fdb52a8f020"/>
        <function-ref name="setDSN" scoped="" ref="0x7fdb52a8f1b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7fdb52a8f340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7fdb52a8f4d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7fdb52a8f660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7fdb52a8f7f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7fdb52a8f980"/>
        <function-ref name="localAddr" scoped="" ref="0x7fdb52a8fb10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fdb52a8fda0"/>
        <function-ref name="localPan" scoped="" ref="0x7fdb52a8e020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7fdb52a8e1b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7fdb52a8e340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7fdb52a8e4d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7fdb52a8e660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52a8e7f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fdb52a8e980"/>
        <function-ref name="getFCF" scoped="" ref="0x7fdb52a8eb10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fdb52a8eca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7fdb52a8ee30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7fdb52a8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7fdb52a92a50" loc="40:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7fdb52a92a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52a92dd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52a91020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52a911b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52a91340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52a914d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7fdb52a91760" loc="41:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7fdb52a91760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52a91ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb52a4f4a0" loc="69:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb52a4f4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52a4f820"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52a4f9b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52a4fb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb52a4fdd0" loc="70:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb52a4fdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52a4d180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7fdb52a52730" loc="57:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb52a52730"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52a52ab0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52a52c40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52a52dd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52a51020"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52a511b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52a51340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0x7fdb52a50020" loc="62:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0x7fdb52a50020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52a503a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb52a4d410" loc="71:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb52a4d410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52a4d790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52a4d920"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52a4dab0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52a4dc40"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52a4ddd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52a4c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0x7fdb52a515d0" loc="61:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0x7fdb52a515d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52a51950"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52a51ae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52a51c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7fdb52a857c0" loc="55:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7fdb52a857c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52a85b40"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52a85cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52a85e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7fdb52a52120" loc="56:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7fdb52a52120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52a524a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0x7fdb52a50630" loc="63:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0x7fdb52a50630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52a509b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52a50b40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52a50cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52a50e60"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52a4f020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52a4f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb529ae440" loc="48:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb529ae440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb529ae7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7fdb529b3dd0" loc="40:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb529b3dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7fdb529b2180"/>
        <function-ref name="address" scoped="" ref="0x7fdb529b2310"/>
        <function-ref name="destination" scoped="" ref="0x7fdb529b24a0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb529b2630"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb529b27c0"/>
        <function-ref name="pan" scoped="" ref="0x7fdb529b2950"/>
        <function-ref name="setPan" scoped="" ref="0x7fdb529b2ae0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb529b2c70"/>
        <function-ref name="localPan" scoped="" ref="0x7fdb529b2e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb529b1080" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb529b1080"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb529b1400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb529b1590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb529b1720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb529b18b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb529b1a40"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb529b1bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7fdb529b6e00" loc="39:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb529b6e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7fdb529b51c0"/>
        <function-ref name="getDSN" scoped="" ref="0x7fdb529b5350"/>
        <function-ref name="setFCF" scoped="" ref="0x7fdb529b54e0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7fdb529b5670"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7fdb529b5800"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7fdb529b5990"/>
        <function-ref name="setDSN" scoped="" ref="0x7fdb529b5b20"/>
        <function-ref name="createAckReply" scoped="" ref="0x7fdb529b5cb0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7fdb529b5e40"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7fdb529b4020"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7fdb529b41b0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7fdb529b4340"/>
        <function-ref name="localAddr" scoped="" ref="0x7fdb529b44d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fdb529b4760"/>
        <function-ref name="localPan" scoped="" ref="0x7fdb529b48f0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7fdb529b4a80"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7fdb529b4c10"/>
        <function-ref name="setFramePending" scoped="" ref="0x7fdb529b4da0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7fdb529b3020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb529b31b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fdb529b3340"/>
        <function-ref name="getFCF" scoped="" ref="0x7fdb529b34d0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fdb529b3660"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7fdb529b37f0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7fdb529b3980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb529b0500" loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb529b0500"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb529b0880"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb529b0a10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb529b0ba0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb529b0d30"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb529ae020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb529ae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb529b1e60" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb529b1e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb529b0210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb51720440" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb51720440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb517207c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7fdb517252e0" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7fdb517252e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7fdb51725660"/>
        <function-ref name="address" scoped="" ref="0x7fdb517257f0"/>
        <function-ref name="destination" scoped="" ref="0x7fdb51725980"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb51725b10"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb51725ca0"/>
        <function-ref name="pan" scoped="" ref="0x7fdb51725e30"/>
        <function-ref name="setPan" scoped="" ref="0x7fdb51724020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb517241b0"/>
        <function-ref name="localPan" scoped="" ref="0x7fdb51724340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb51724590" loc="43:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb51724590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51724910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb51724aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51724c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb51724dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb51723020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb517231b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7fdb51728020" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7fdb51728020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7fdb517283a0"/>
        <function-ref name="getDSN" scoped="" ref="0x7fdb51728530"/>
        <function-ref name="setFCF" scoped="" ref="0x7fdb517286c0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7fdb51728850"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7fdb517289e0"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7fdb51728b70"/>
        <function-ref name="setDSN" scoped="" ref="0x7fdb51728d00"/>
        <function-ref name="createAckReply" scoped="" ref="0x7fdb51727020"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7fdb517271b0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7fdb51727340"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7fdb517274d0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7fdb51727660"/>
        <function-ref name="localAddr" scoped="" ref="0x7fdb517277f0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fdb51727a80"/>
        <function-ref name="localPan" scoped="" ref="0x7fdb51727c10"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7fdb51727da0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7fdb51726020"/>
        <function-ref name="setFramePending" scoped="" ref="0x7fdb517261b0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7fdb51726340"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb517264d0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fdb51726660"/>
        <function-ref name="getFCF" scoped="" ref="0x7fdb517267f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fdb51726980"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7fdb51726b10"/>
        <function-ref name="getFramePending" scoped="" ref="0x7fdb51726ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7fdb51723a70" loc="49:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7fdb51723a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7fdb51723df0"/>
        <function-ref name="changed" scoped="" ref="0x7fdb51721020"/>
        <function-ref name="amGroup" scoped="" ref="0x7fdb517211b0"/>
        <function-ref name="setAddress" scoped="" ref="0x7fdb51721340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb51723440" loc="44:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb51723440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb517237c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb517215d0" loc="50:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb517215d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51721950"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb51721ae0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51721c70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb51721e00"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb51720020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb517201b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb5297ba70" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb5297ba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb5297bdf0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5297a020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb5297a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb5297a440" loc="46:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb5297a440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb5297a7c0"/>
        <function-ref name="header" scoped="" ref="0x7fdb5297a950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7fdb52978400" loc="51:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb52978400"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52978780"/>
        <function-ref name="clearAll" scoped="" ref="0x7fdb52978910"/>
        <function-ref name="get" scoped="" ref="0x7fdb52978aa0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52978c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb5297c840" loc="40:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb5297c840"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb5297cbc0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5297cd50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb5297b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb5297abe0" loc="48:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb5297abe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7fdb52979020"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7fdb529791b0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7fdb52979340"/>
        <function-ref name="getSender" scoped="" ref="0x7fdb529794d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb5297b270" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb5297b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb5297b5f0"/>
        <function-ref name="header" scoped="" ref="0x7fdb5297b780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7fdb52979720" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7fdb52979720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7fdb52979aa0"/>
        <function-ref name="insertNode" scoped="" ref="0x7fdb52979c30"/>
        <function-ref name="getNode" scoped="" ref="0x7fdb52979dc0"/>
        <function-ref name="evicted" scoped="" ref="0x7fdb52978020"/>
        <function-ref name="getIndex" scoped="" ref="0x7fdb529781b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb516ce310" loc="49:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb516ce310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb516ce690"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb516ce820"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb516ce9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb516cec40" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb516cec40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb516cd020"/>
        <function-ref name="header" scoped="" ref="0x7fdb516cd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7fdb516ccab0" loc="54:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7fdb516ccab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb516cce30"/>
        <function-ref name="clearAll" scoped="" ref="0x7fdb516cb020"/>
        <function-ref name="get" scoped="" ref="0x7fdb516cb1b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb516cb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb516d09b0" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb516d09b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb516d0d30"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb516cf020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb516cf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7fdb516cde80" loc="53:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7fdb516cde80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7fdb516cc220"/>
        <function-ref name="insertNode" scoped="" ref="0x7fdb516cc3b0"/>
        <function-ref name="getNode" scoped="" ref="0x7fdb516cc540"/>
        <function-ref name="evicted" scoped="" ref="0x7fdb516cc6d0"/>
        <function-ref name="getIndex" scoped="" ref="0x7fdb516cc860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb516cf400" loc="42:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb516cf400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb516cf780"/>
        <function-ref name="header" scoped="" ref="0x7fdb516cf910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb516cfb60" loc="44:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb516cfb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb516ce020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0x7fdb516cd400" loc="52:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7fdb516cd400"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7fdb516cd780"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7fdb516cd910"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7fdb516cdaa0"/>
        <function-ref name="getSender" scoped="" ref="0x7fdb516cdc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb52966950" loc="85:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb52966950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52966cd0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52966e60"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52965020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb529652b0" loc="86:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb529652b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52965630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0x7fdb52963d90" loc="93:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7fdb52963d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb52961180"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb52961310"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb529614a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb52973e40" loc="77:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb52973e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb529681e0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52968370"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52968500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb52967a10" loc="80:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52967a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52967d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52966020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb529661b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52966340"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb529664d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52966660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb529658c0" loc="87:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb529658c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52965c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52965dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52964020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb529641b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52964340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb529644d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0x7fdb52963100" loc="92:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7fdb52963100"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fdb52963480"/>
        <function-ref name="setRetries" scoped="" ref="0x7fdb52963610"/>
        <function-ref name="getRetries" scoped="" ref="0x7fdb529637a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fdb52963930"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fdb52963ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb52968790" loc="78:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb52968790"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52968b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7fdb52964720" loc="88:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52964720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb52964aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb52964c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb52964dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7fdb52968d60" loc="79:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7fdb52968d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7fdb52967180"/>
        <function-ref name="setRetries" scoped="" ref="0x7fdb52967310"/>
        <function-ref name="getRetries" scoped="" ref="0x7fdb529674a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7fdb52967630"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7fdb529677c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb5295c880" loc="39:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb5295c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb5295cc00"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb5295cd90"/>
        <function-ref name="start" scoped="" ref="0x7fdb52948020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb529481b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb529448c0" loc="49:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb529448c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52944c40"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52944dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52943020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb529432b0" loc="50:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb529432b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52943630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb52948440" loc="40:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb52948440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb529487c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52948950"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52948ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb529473d0" loc="42:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb529473d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52947750"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb529478e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52947a70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52947c00"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52947d90"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52945020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fdb52945270" loc="44:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb52945270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fdb529455f0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fdb52945780"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fdb52945910"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fdb52945aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7fdb52945d90" loc="48:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7fdb52945d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb52944180"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb52944310"/>
        <function-ref name="start" scoped="" ref="0x7fdb529444a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52944630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb52948d70" loc="41:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb52948d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52947180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb529438c0" loc="51:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb529438c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52943c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52943dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52942020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb529421b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52942340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb529424d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7fdb516a9640" loc="37:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7fdb516a9640"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7fdb516a99c0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7fdb516a9b50"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7fdb516a9ce0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7fdb516a9e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb528d1a10" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb528d1a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb528d1d90"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb528d0020"/>
        <function-ref name="start" scoped="" ref="0x7fdb528d01b0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb528d0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7fdb528ceaa0" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fdb528ceaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fdb528cee20"/>
        <function-ref name="turnOn" scoped="" ref="0x7fdb528cd020"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb528cd1b0"/>
        <function-ref name="done" scoped="" ref="0x7fdb528cd340"/>
        <function-ref name="standby" scoped="" ref="0x7fdb528cd4d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb528cd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb528d05d0" loc="40:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb528d05d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb528d0950"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb528d0ae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb528d0c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7fdb528cc270" loc="49:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb528cc270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb528cc5f0"/>
        <function-ref name="header" scoped="" ref="0x7fdb528cc780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb528cf020" loc="41:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb528cf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb528cf3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7fdb528cd8b0" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb528cd8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb528cdc30"/>
        <function-ref name="ready" scoped="" ref="0x7fdb528cddc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb528cc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fdb528cf5f0" loc="42:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fdb528cf5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fdb528cf970"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb528cfb00"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb528cfc90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fdb528ce020" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fdb528ce020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fdb528ce3a0"/>
        <function-ref name="suspend" scoped="" ref="0x7fdb528ce530"/>
        <function-ref name="resume" scoped="" ref="0x7fdb528ce6c0"/>
        <function-ref name="run" scoped="" ref="0x7fdb528ce850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb516a2bf0" loc="43:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb516a2bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb516a0020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb516a01b0"/>
        <function-ref name="start" scoped="" ref="0x7fdb516a0340"/>
        <function-ref name="stop" scoped="" ref="0x7fdb516a04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7fdb516a0760" loc="44:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb516a0760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb516a0ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7fdb5169e670" loc="52:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fdb5169e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fdb5169e9f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7fdb5169eb80"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb5169ed10"/>
        <function-ref name="done" scoped="" ref="0x7fdb5169d020"/>
        <function-ref name="standby" scoped="" ref="0x7fdb5169d1b0"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb5169d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb516a0d70" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb516a0d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb5169f180"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5169f310"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb5169f4a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x7fdb5169b940" loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x7fdb5169b940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb5169bcc0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb5169be50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7fdb5169c950" loc="55:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb5169c950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb5169ccd0"/>
        <function-ref name="header" scoped="" ref="0x7fdb5169ce60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0x7fdb51699160" loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0x7fdb51699160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb516994e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51699670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb5169f730" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb5169f730"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb5169fab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0x7fdb5169b160" loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0x7fdb5169b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb5169b4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb5169b670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7fdb5169c060" loc="54:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb5169c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb5169c3e0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb5169c570"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb5169c700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7fdb5169fd00" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7fdb5169fd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7fdb5169e0a0"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb5169e230"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb5169e3c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fdb5169d590" loc="53:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fdb5169d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fdb5169d910"/>
        <function-ref name="suspend" scoped="" ref="0x7fdb5169daa0"/>
        <function-ref name="resume" scoped="" ref="0x7fdb5169dc30"/>
        <function-ref name="run" scoped="" ref="0x7fdb5169ddc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb52876860" loc="44:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb52876860"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52876be0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb52876d70"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52875020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb528752b0" loc="45:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb528752b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52875630"/>
        <function-ref name="header" scoped="" ref="0x7fdb528757c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fdb52875a10" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52875a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb52875d90"/>
        <function-ref name="wait" scoped="" ref="0x7fdb52874020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb528741b0"/>
        <function-ref name="isFree" scoped="" ref="0x7fdb52874340"/>
        <function-ref name="getNow" scoped="" ref="0x7fdb528744d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb52874760" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb52874760"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7fdb52874ae0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7fdb52874c70"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7fdb52874e00"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7fdb52873020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb52876060" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52876060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb528763e0"/>
        <function-ref name="header" scoped="" ref="0x7fdb52876570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fdb52877740" loc="39:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb52877740"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52877ac0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb52877c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52877de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb51661820" loc="47:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb51661820"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51661ba0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb51661d30"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51660020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb516602b0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb516602b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb51660630"/>
        <function-ref name="header" scoped="" ref="0x7fdb516607c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fdb51660a10" loc="49:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb51660a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51660d90"/>
        <function-ref name="wait" scoped="" ref="0x7fdb5165f020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5165f1b0"/>
        <function-ref name="isFree" scoped="" ref="0x7fdb5165f340"/>
        <function-ref name="getNow" scoped="" ref="0x7fdb5165f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7fdb5165f720" loc="50:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7fdb5165f720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7fdb5165faa0"/>
        <function-ref name="rand32" scoped="" ref="0x7fdb5165fc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb5165e020" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb5165e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7fdb5165e3a0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7fdb5165e530"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7fdb5165e6c0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7fdb5165e850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb51661020" loc="43:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb51661020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb516613a0"/>
        <function-ref name="header" scoped="" ref="0x7fdb51661530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fdb51662660" loc="42:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb51662660"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb516629e0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb51662b70"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51662d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0x7fdb5165eb20" loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0x7fdb5165eb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb5165d020"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb5165d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7fdb5288b160" loc="46:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7fdb5288b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7fdb5288b4e0"/>
        <function-ref name="rand32" scoped="" ref="0x7fdb5288b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7fdb5288c060" loc="45:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7fdb5288c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5288cc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb5288d230" loc="44:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb5288d230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5288d5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7fdb52884100" loc="48:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7fdb52884100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7fdb52884480"/>
        <function-ref name="rand32" scoped="" ref="0x7fdb52884610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7fdb52886020" loc="47:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7fdb52886020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52886c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb528876a0" loc="46:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb528876a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52887a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb52843630" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb52843630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb528439b0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb52843b40"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52843cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb52842020" loc="50:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb52842020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb528423a0"/>
        <function-ref name="header" scoped="" ref="0x7fdb52842530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fdb52842780" loc="51:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb52842780"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb52842b00"/>
        <function-ref name="wait" scoped="" ref="0x7fdb52842c90"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52842e20"/>
        <function-ref name="isFree" scoped="" ref="0x7fdb52840020"/>
        <function-ref name="getNow" scoped="" ref="0x7fdb528401b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0x7fdb5283f5d0" loc="54:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0x7fdb5283f5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5283f950"/>
        <function-ref name="get" scoped="" ref="0x7fdb5283fae0"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb5283fc70"/>
        <function-ref name="set" scoped="" ref="0x7fdb5283fe00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb52840440" loc="53:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb52840440"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7fdb528407c0"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7fdb52840950"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7fdb52840ae0"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7fdb52840c70"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7fdb52840e00"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7fdb5283f020"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7fdb5283f1b0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7fdb5283f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb52844400" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52844400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52844780"/>
        <function-ref name="header" scoped="" ref="0x7fdb52844910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fdb5286fac0" loc="42:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb5286fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb5286fe40"/>
        <function-ref name="ready" scoped="" ref="0x7fdb52844020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb528441b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fdb52844b60" loc="44:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb52844b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb52843020"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb528431b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb52843340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb52827d60" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb52827d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb52826180"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb52826310"/>
        <function-ref name="start" scoped="" ref="0x7fdb528264a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52826630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7fdb528227c0" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7fdb528227c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fdb52822b40"/>
        <function-ref name="request" scoped="" ref="0x7fdb52822cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb5281d020" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb5281d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb5281d3a0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb5281d530"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb5281d6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb5281d950" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb5281d950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb5281dcd0"/>
        <function-ref name="header" scoped="" ref="0x7fdb5281de60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7fdb52825840" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fdb52825840"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fdb52825bc0"/>
        <function-ref name="turnOn" scoped="" ref="0x7fdb52825d50"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb52823020"/>
        <function-ref name="done" scoped="" ref="0x7fdb528231b0"/>
        <function-ref name="standby" scoped="" ref="0x7fdb52823340"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb528234d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb52821020" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52821020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb528213a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52821530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb528216c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52821850"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb528219e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52821b70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7fdb5281e020" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7fdb5281e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fdb5281e4a0"/>
        <function-ref name="turnOn" scoped="" ref="0x7fdb5281e630"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb5281e7c0"/>
        <function-ref name="done" scoped="" ref="0x7fdb5281e950"/>
        <function-ref name="standby" scoped="" ref="0x7fdb5281eae0"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb5281ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7fdb52821e00" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7fdb52821e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fdb528201c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb52822060" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52822060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb528223e0"/>
        <function-ref name="header" scoped="" ref="0x7fdb52822570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7fdb5281f950" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7fdb5281f950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb5281fcd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7fdb528204b0" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7fdb528204b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb52820830"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb528209c0"/>
        <function-ref name="start" scoped="" ref="0x7fdb52820b50"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52820ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb5281c8c0" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb5281c8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5281cc40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb5281cdd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb5281a020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb5281a1b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb5281a340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb5281a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7fdb52825270" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7fdb52825270"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb528255f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb5281a760" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb5281a760"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fdb5281aae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7fdb5281f020" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7fdb5281f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb5281f3a0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5281f530"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb5281f6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fdb52823720" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb52823720"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52823aa0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb52823c30"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52823dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7fdb5281c120" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7fdb5281c120"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fdb5281c4a0"/>
        <function-ref name="request" scoped="" ref="0x7fdb5281c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7fdb52826880" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7fdb52826880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52826c00"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52826d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52825020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7fdb525f7b00" loc="50:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7fdb525f7b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525f7e80"/>
        <function-ref name="get" scoped="" ref="0x7fdb525f6030"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb525f61c0"/>
        <function-ref name="set" scoped="" ref="0x7fdb525f6350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb525fbc20" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525fbc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525fa020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb525fa1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb525fa340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb525fa4d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525fa660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb525fa7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb525f9cd0" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb525f9cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525f70a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb525f7230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb525f73c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb525f7550"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525f76e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb525f7870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fdb525fd020" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb525fd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb525fc5a0"/>
        <function-ref name="clear" scoped="" ref="0x7fdb525fccd0"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb525fde30"/>
        <function-ref name="set" scoped="" ref="0x7fdb525fb460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7fdb525fac00" loc="48:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb525fac00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb525f98a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fdb52601020" loc="41:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb52601020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb526005a0"/>
        <function-ref name="clear" scoped="" ref="0x7fdb52600cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb52601e30"/>
        <function-ref name="set" scoped="" ref="0x7fdb525ff460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7fdb5160de60" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7fdb5160de60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5160c210"/>
        <function-ref name="get" scoped="" ref="0x7fdb5160c3a0"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb5160c530"/>
        <function-ref name="set" scoped="" ref="0x7fdb5160c6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb5160d020" loc="44:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb5160d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5160d3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb5160d530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb5160d6c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb5160d850"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb5160d9e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb5160db70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb5160acd0" loc="54:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb5160acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb516080a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb51608230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb516083c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb51608550"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb516086e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb51608870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7fdb516112a0" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7fdb516112a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb51610800"/>
        <function-ref name="clear" scoped="" ref="0x7fdb5160e020"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb516100d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5160e750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7fdb5160ca70" loc="51:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb5160ca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb5160b6f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7fdb5160bc40" loc="52:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7fdb5160bc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb5160a8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7fdb51615360" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7fdb51615360"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb516138e0"/>
        <function-ref name="clear" scoped="" ref="0x7fdb51612090"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb516131b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb516127c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fdb527c6a50" loc="20:../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fdb527c6a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb527c36b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fdb527bf320" loc="46:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7fdb527bf320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb527bb870"/>
        <function-ref name="fired" scoped="" ref="0x7fdb527bde40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb527bcc00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb527bc780"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb527ba1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb527bbcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb527bc300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb527bd020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb527bb260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb527bd4f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb527bd9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fdb527ba7d0" loc="47:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fdb527ba7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb527b8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb527c2530" loc="45:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb527c2530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb527c28b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7fdb527af020" loc="29:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7fdb527af020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb527afe30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb527ae800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb527ae340"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb527aecc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb527b4020" loc="27:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb527b4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb527b43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7fdb527b4a10" loc="28:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7fdb527b4a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb527b02a0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb527b12a0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb527b1c20"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb527b1760"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb527b0760"/>
        <function-ref name="start" scoped="" ref="0x7fdb527b3890"/>
        <function-ref name="stop" scoped="" ref="0x7fdb527b3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb526ab890" loc="61:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb526ab890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb526a70d0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb526a80d0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb526a8a50"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb526a8590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb526a7590"/>
        <function-ref name="start" scoped="" ref="0x7fdb526a96e0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb526a9bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb526ab080" loc="60:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb526ab080"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7fdb531b2020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7fdb531b2020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb526ab400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb526a7bc0" loc="62:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb526a7bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb526a5a00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb526a44e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb526a4020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb526a49a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x7fdb515dce20" loc="66:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb515dce20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fdb515da1c0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fdb515da350"/>
        <function-ref name="getControlA" scoped="" ref="0x7fdb515da4e0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fdb515da670"/>
        <function-ref name="setControlB" scoped="" ref="0x7fdb515da800"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fdb515da990"/>
        <function-ref name="getControlB" scoped="" ref="0x7fdb515dab20"/>
        <function-ref name="setControlA" scoped="" ref="0x7fdb515dacb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb515e74b0" loc="61:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb515e74b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb515e4db0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb515e5da0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb515e4760"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb515e42a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb515e32a0"/>
        <function-ref name="start" scoped="" ref="0x7fdb515e53d0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb515e58e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb515e8c20" loc="60:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb515e8c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb515e7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb515e38d0" loc="62:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb515e38d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb515e2780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb515e0150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb515e2c40"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb515e0610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x7fdb515d5450" loc="68:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7fdb515d5450"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7fdb515d57d0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7fdb515d5960"/>
        <function-ref name="controlABusy" scoped="" ref="0x7fdb515d5af0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7fdb515d5c80"/>
        <function-ref name="countBusy" scoped="" ref="0x7fdb515d5e10"/>
        <function-ref name="compareABusy" scoped="" ref="0x7fdb515d4020"/>
        <function-ref name="getAssr" scoped="" ref="0x7fdb515d41b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7fdb515d4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x7fdb515d90a0" loc="67:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fdb515d90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb515d7a10"/>
        <function-ref name="fired" scoped="" ref="0x7fdb515d86c0"/>
        <function-ref name="get" scoped="" ref="0x7fdb515d9cd0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb515d8b80"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb515d5020"/>
        <function-ref name="set" scoped="" ref="0x7fdb515d81b0"/>
        <function-ref name="start" scoped="" ref="0x7fdb515d7090"/>
        <function-ref name="stop" scoped="" ref="0x7fdb515d7550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb515e0bc0" loc="65:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb515e0bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb515dc020"/>
        <function-ref name="test" scoped="" ref="0x7fdb515dd590"/>
        <function-ref name="get" scoped="" ref="0x7fdb515df820"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb515dc4e0"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb515dc9f0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb515de720"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb515de260"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb515dda50"/>
        <function-ref name="set" scoped="" ref="0x7fdb515dfce0"/>
        <function-ref name="start" scoped="" ref="0x7fdb515debe0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb515dd0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fdb5271d020" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb5271d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fdb5271d3a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fdb5271d530"/>
        <function-ref name="getControlA" scoped="" ref="0x7fdb5271d6c0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fdb5271d850"/>
        <function-ref name="setControlB" scoped="" ref="0x7fdb5271d9e0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fdb5271db70"/>
        <function-ref name="getControlB" scoped="" ref="0x7fdb5271dd00"/>
        <function-ref name="setControlA" scoped="" ref="0x7fdb5271c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7fdb52718a40" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7fdb52718a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7fdb52718dc0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7fdb52717020"/>
        <function-ref name="controlABusy" scoped="" ref="0x7fdb527171b0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7fdb52717340"/>
        <function-ref name="countBusy" scoped="" ref="0x7fdb527174d0"/>
        <function-ref name="compareABusy" scoped="" ref="0x7fdb52717660"/>
        <function-ref name="getAssr" scoped="" ref="0x7fdb527177f0"/>
        <function-ref name="setAssr" scoped="" ref="0x7fdb52717980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb5271c520" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fdb5271c520"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb52718020"/>
        <function-ref name="fired" scoped="" ref="0x7fdb5271bb80"/>
        <function-ref name="get" scoped="" ref="0x7fdb5271b1b0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb52719090"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb527184e0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5271b670"/>
        <function-ref name="start" scoped="" ref="0x7fdb52719550"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52719a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb52725c60" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb52725c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb5271e020"/>
        <function-ref name="test" scoped="" ref="0x7fdb5271f610"/>
        <function-ref name="get" scoped="" ref="0x7fdb527228e0"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb5271e4e0"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb5271e9f0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb527217a0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb527212e0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb5271fad0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52722da0"/>
        <function-ref name="start" scoped="" ref="0x7fdb52721c60"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5271f150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fdb5270e2b0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb5270e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fdb5270e630"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fdb5270e7c0"/>
        <function-ref name="getControlA" scoped="" ref="0x7fdb5270e950"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fdb5270eae0"/>
        <function-ref name="setControlB" scoped="" ref="0x7fdb5270ec70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fdb5270ee00"/>
        <function-ref name="getControlB" scoped="" ref="0x7fdb5270d020"/>
        <function-ref name="setControlA" scoped="" ref="0x7fdb5270d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7fdb52709a70" loc="85:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fdb52709a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fdb52709df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7fdb52708230" loc="86:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7fdb52708230"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7fdb527085b0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7fdb52708740"/>
        <function-ref name="controlABusy" scoped="" ref="0x7fdb527088d0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7fdb52708a60"/>
        <function-ref name="countBusy" scoped="" ref="0x7fdb52708bf0"/>
        <function-ref name="compareABusy" scoped="" ref="0x7fdb52708d80"/>
        <function-ref name="getAssr" scoped="" ref="0x7fdb52707020"/>
        <function-ref name="setAssr" scoped="" ref="0x7fdb527071b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb5270d6b0" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fdb5270d6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb52709110"/>
        <function-ref name="fired" scoped="" ref="0x7fdb5270cda0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5270c3d0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb5270a2a0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb527095d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5270c890"/>
        <function-ref name="start" scoped="" ref="0x7fdb5270a760"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5270ac20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb52713020" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb52713020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb5270f350"/>
        <function-ref name="test" scoped="" ref="0x7fdb527109a0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52713c50"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb5270f810"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb5270fd20"/>
        <function-ref name="reset" scoped="" ref="0x7fdb52712b20"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb52712660"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb52710e60"/>
        <function-ref name="set" scoped="" ref="0x7fdb52712150"/>
        <function-ref name="start" scoped="" ref="0x7fdb52710020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb527104e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7fdb52672490" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7fdb52672490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb52672810"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb526729a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fdb526751d0" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb526751d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb52673b30"/>
        <function-ref name="fired" scoped="" ref="0x7fdb526749f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb526734e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb52673020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb52672020"/>
        <function-ref name="start" scoped="" ref="0x7fdb52674020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52674530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb5267ccf0" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb5267ccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb52677220"/>
        <function-ref name="fired" scoped="" ref="0x7fdb526797c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb52678590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb52678110"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb52677b20"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb526776a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb52679c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb5267a940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb52678ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb5267ae10"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52679340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7fdb52621a00" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7fdb52621a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb52621d80"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb52620020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fdb52627640" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7fdb52627640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb52623c40"/>
        <function-ref name="fired" scoped="" ref="0x7fdb526241e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb52623020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb52624ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb52621590"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb52621110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb52624660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb52625390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb52623630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb52625860"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52625d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb5262c150" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb5262c150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb52628700"/>
        <function-ref name="fired" scoped="" ref="0x7fdb5262bc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb5262aa50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb5262a5b0"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb52627090"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb52628ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb5262a110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb5262cd60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb526280d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb5262b2a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5262b790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fdb5261e790" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fdb5261e790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb5261d3f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fdb5261da60" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb5261da60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb52613890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb52612260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb52613d50"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb52612720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fdb5260a2e0" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7fdb5260a2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb52607870"/>
        <function-ref name="fired" scoped="" ref="0x7fdb52609e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb52608c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb52608780"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb526051e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb52607cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb52608300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb52609020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb52607260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb526094f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb526099c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb525f1590" loc="43:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525f1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525f1910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb525f1aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb525f1c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb525f1dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525d1020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb525d11b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb525d14a0" loc="48:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb525d14a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525d1820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb525d19b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb525d1b40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb525d1cd0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525d1e60"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb525d0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x7fdb525f29b0" loc="42:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x7fdb525f29b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525f2d50"/>
        <function-ref name="get" scoped="" ref="0x7fdb525f1020"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb525f11b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb525f1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb525ce0e0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb525ce0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb525ce460"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb525ce5f0"/>
        <function-ref name="start" scoped="" ref="0x7fdb525ce780"/>
        <function-ref name="stop" scoped="" ref="0x7fdb525ce910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7fdb525cab60" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7fdb525cab60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fdb525c9020"/>
        <function-ref name="request" scoped="" ref="0x7fdb525c91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb525c5440" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb525c5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb525c57c0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb525c5950"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb525c5ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb525c5d70" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb525c5d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb525c3180"/>
        <function-ref name="header" scoped="" ref="0x7fdb525c3310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7fdb525cdb60" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fdb525cdb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fdb525cb020"/>
        <function-ref name="turnOn" scoped="" ref="0x7fdb525cb1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb525cb340"/>
        <function-ref name="done" scoped="" ref="0x7fdb525cb4d0"/>
        <function-ref name="standby" scoped="" ref="0x7fdb525cb660"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb525cb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb525c9400" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525c9400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525c9780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb525c9910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb525c9aa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb525c9c30"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525c9dc0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb525c8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7fdb525c6410" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7fdb525c6410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fdb525c6890"/>
        <function-ref name="turnOn" scoped="" ref="0x7fdb525c6a20"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb525c6bb0"/>
        <function-ref name="done" scoped="" ref="0x7fdb525c6d40"/>
        <function-ref name="standby" scoped="" ref="0x7fdb525c5020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb525c51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7fdb525c82b0" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7fdb525c82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fdb525c8630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb525ca400" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb525ca400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb525ca780"/>
        <function-ref name="header" scoped="" ref="0x7fdb525ca910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7fdb525c7d70" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7fdb525c7d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb525c6180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7fdb525c8920" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7fdb525c8920"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb525c8ca0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb525c8e30"/>
        <function-ref name="start" scoped="" ref="0x7fdb525c7020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb525c71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7fdb525c3d40" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7fdb525c3d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525c20e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb525c2270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb525c2400"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb525c2590"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525c2720"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb525c28b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7fdb525cd590" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7fdb525cd590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb525cd910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb525c2b40" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb525c2b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7fdb525c1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7fdb525c7440" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7fdb525c7440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb525c77c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb525c7950"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb525c7ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fdb525cba40" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb525cba40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb525cbdc0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb525ca020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb525ca1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7fdb525c35a0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7fdb525c35a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fdb525c3920"/>
        <function-ref name="request" scoped="" ref="0x7fdb525c3ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7fdb525ceb60" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7fdb525ceb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb525cd020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb525cd1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb525cd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7fdb525b95c0" loc="45:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7fdb525b95c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fdb525b9940"/>
        <function-ref name="request" scoped="" ref="0x7fdb525b9ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7fdb525b43b0" loc="49:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb525b43b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525b3ac0"/>
        <function-ref name="get" scoped="" ref="0x7fdb525b3570"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb525b3020"/>
        <function-ref name="set" scoped="" ref="0x7fdb525b1090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7fdb5259fca0" loc="64:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7fdb5259fca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5259e0a0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5259e230"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb5259e3c0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5259e550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7fdb525a32e0" loc="61:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fdb525a32e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb525a2840"/>
        <function-ref name="clear" scoped="" ref="0x7fdb525a0020"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb525a2110"/>
        <function-ref name="set" scoped="" ref="0x7fdb525a0750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7fdb525bd600" loc="42:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fdb525bd600"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fdb525bd980"/>
        <function-ref name="turnOn" scoped="" ref="0x7fdb525bdb10"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb525bdca0"/>
        <function-ref name="done" scoped="" ref="0x7fdb525bde30"/>
        <function-ref name="standby" scoped="" ref="0x7fdb525ba020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb525ba1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fdb5259d470" loc="66:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb5259d470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb5259d7f0"/>
        <function-ref name="wait" scoped="" ref="0x7fdb5259d980"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5259db10"/>
        <function-ref name="isFree" scoped="" ref="0x7fdb5259dca0"/>
        <function-ref name="getNow" scoped="" ref="0x7fdb5259de30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7fdb525b8e80" loc="48:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb525b8e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525b65e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb525b6090"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb525b7ad0"/>
        <function-ref name="set" scoped="" ref="0x7fdb525b6b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb525b9d90" loc="46:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb525b9d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525b8180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb525b8310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb525b84a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb525b8630"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525b87c0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb525b8950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb525a41f0" loc="60:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb525a41f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb525a4670"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525a4800"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb525a4990"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7fdb525a4b20"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7fdb525a4cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb525badd0" loc="44:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb525badd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb525b9180"/>
        <function-ref name="header" scoped="" ref="0x7fdb525b9310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb525a9dd0" loc="55:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb525a9dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7fdb53017580"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb525a56e0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb525a76b0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb525a5090"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb525a7b70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb525a5ba0"/>
        <function-ref name="start" scoped="" ref="0x7fdb525a8ca0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb525a71f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7fdb525b1940" loc="50:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fdb525b1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525af090"/>
        <function-ref name="get" scoped="" ref="0x7fdb525b0af0"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb525b05a0"/>
        <function-ref name="set" scoped="" ref="0x7fdb525af5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7fdb525aaa40" loc="54:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb525aaa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb525a96b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fdb525ba460" loc="43:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb525ba460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb525ba7e0"/>
        <function-ref name="ready" scoped="" ref="0x7fdb525ba970"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb525bab00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7fdb525afe70" loc="51:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb525afe70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525ac5e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb525ac090"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb525adad0"/>
        <function-ref name="set" scoped="" ref="0x7fdb525acb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7fdb5259e8d0" loc="65:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fdb5259e8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5259ec50"/>
        <function-ref name="get" scoped="" ref="0x7fdb5259ede0"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb5259d020"/>
        <function-ref name="set" scoped="" ref="0x7fdb5259d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7fdb5259f110" loc="63:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fdb5259f110"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5259f490"/>
        <function-ref name="get" scoped="" ref="0x7fdb5259f620"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb5259f7b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5259f940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7fdb525aa1e0" loc="52:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb525aa1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7fdb525aa560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fdb5259c110" loc="67:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fdb5259c110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fdb5259c490"/>
        <function-ref name="suspend" scoped="" ref="0x7fdb5259c620"/>
        <function-ref name="resume" scoped="" ref="0x7fdb5259c7b0"/>
        <function-ref name="run" scoped="" ref="0x7fdb5259c940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7fdb52593c40" loc="52:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7fdb52593c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7fdb52592020"/>
        <function-ref name="request" scoped="" ref="0x7fdb525921b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7fdb52572430" loc="74:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7fdb52572430"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7fdb525783d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7fdb5258ea40" loc="56:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7fdb5258ea40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5258b1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5258dc00"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb5258d6b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5258b700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7fdb525706a0" loc="80:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7fdb525706a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52570a20"/>
        <function-ref name="get" scoped="" ref="0x7fdb52570bb0"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb52570d40"/>
        <function-ref name="set" scoped="" ref="0x7fdb5256f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7fdb52595600" loc="47:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52595600"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7fdb531b23a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7fdb531b23a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52595980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7fdb5256e200" loc="83:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7fdb5256e200"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7fdb5256c970"/>
        <function-ref name="clear" scoped="" ref="0x7fdb5256b0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7fdb5256c240"/>
        <function-ref name="set" scoped="" ref="0x7fdb5256b800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7fdb5257f020" loc="70:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7fdb5257f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5257f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5257f530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5257f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5257f850"/>
        <function-ref name="get" scoped="" ref="0x7fdb5257f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5257fb70"/>
        <function-ref name="set" scoped="" ref="0x7fdb5257fd00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5257a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7fdb5256ab70" loc="86:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7fdb5256ab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb52569020"/>
        <function-ref name="wait" scoped="" ref="0x7fdb525691b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52569340"/>
        <function-ref name="isFree" scoped="" ref="0x7fdb525694d0"/>
        <function-ref name="getNow" scoped="" ref="0x7fdb52569660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7fdb52595c40" loc="49:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7fdb52595c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7fdb52594020"/>
        <function-ref name="turnOn" scoped="" ref="0x7fdb525941b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7fdb52594340"/>
        <function-ref name="done" scoped="" ref="0x7fdb525944d0"/>
        <function-ref name="standby" scoped="" ref="0x7fdb52594660"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb525947f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7fdb525789d0" loc="75:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fdb525789d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb52575630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7fdb52591550" loc="55:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7fdb52591550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52590c50"/>
        <function-ref name="get" scoped="" ref="0x7fdb52590700"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb525901b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5258e1f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7fdb52592470" loc="53:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7fdb52592470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb525927f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52592980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52592b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb52592ca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb52592e30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52591020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0x7fdb5257bdd0" loc="69:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7fdb5257bdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52580180"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52580310"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb525804a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52580630"/>
        <function-ref name="get" scoped="" ref="0x7fdb525807c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52580950"/>
        <function-ref name="set" scoped="" ref="0x7fdb52580ae0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52580c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fdb52575b50" loc="77:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7fdb52575b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52571020"/>
        <function-ref name="headerLength" scoped="" ref="0x7fdb525711b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7fdb52571340"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7fdb525714d0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7fdb52571660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7fdb52593480" loc="51:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7fdb52593480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52593800"/>
        <function-ref name="header" scoped="" ref="0x7fdb52593990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0x7fdb524d9e40" loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0x7fdb524d9e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb524d81e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb524d8370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7fdb5258a020" loc="57:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7fdb5258a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52589740"/>
        <function-ref name="get" scoped="" ref="0x7fdb525891f0"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb5258ac50"/>
        <function-ref name="set" scoped="" ref="0x7fdb52589c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7fdb52596a60" loc="46:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52596a60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7fdb531b23a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7fdb531b23a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52596de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7fdb52582380" loc="65:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7fdb52582380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb52582700"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb52582890"/>
        <function-ref name="request" scoped="" ref="0x7fdb52582a20"/>
        <function-ref name="granted" scoped="" ref="0x7fdb52582bb0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52582d40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0x7fdb52583020" loc="64:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7fdb52583020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb525834a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52583630"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb525837c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52583950"/>
        <function-ref name="get" scoped="" ref="0x7fdb52583ae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52583c70"/>
        <function-ref name="set" scoped="" ref="0x7fdb52583e00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52582020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7fdb52587560" loc="58:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7fdb52587560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52586c90"/>
        <function-ref name="get" scoped="" ref="0x7fdb52586740"/>
        <function-ref name="isSet" scoped="" ref="0x7fdb525861f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52584230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7fdb52594aa0" loc="50:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7fdb52594aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52594e20"/>
        <function-ref name="ready" scoped="" ref="0x7fdb52593020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb525931b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0x7fdb52576b30" loc="72:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7fdb52576b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7fdb52579020"/>
        <function-ref name="disable" scoped="" ref="0x7fdb525791b0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb52579340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7fdb525794d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0x7fdb5257b270" loc="67:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb5257b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7fdb5257b5f0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7fdb5257b780"/>
        <function-ref name="splitRead" scoped="" ref="0x7fdb5257b910"/>
        <function-ref name="write" scoped="" ref="0x7fdb5257baa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7fdb5256f3a0" loc="81:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7fdb5256f3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5256f720"/>
        <function-ref name="get" scoped="" ref="0x7fdb5256f8b0"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb5256fa40"/>
        <function-ref name="set" scoped="" ref="0x7fdb5256fbd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7fdb52571a10" loc="79:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7fdb52571a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52571d90"/>
        <function-ref name="get" scoped="" ref="0x7fdb52570020"/>
        <function-ref name="setValue" scoped="" ref="0x7fdb525701b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52570340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7fdb525848b0" loc="59:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7fdb525848b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7fdb52584c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7fdb5256a080" loc="85:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7fdb5256a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7fdb5256a400"/>
        <function-ref name="suspend" scoped="" ref="0x7fdb5256a590"/>
        <function-ref name="resume" scoped="" ref="0x7fdb5256a720"/>
        <function-ref name="run" scoped="" ref="0x7fdb5256a8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7fdb524937f0" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7fdb524937f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52493b70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52493d00"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52492020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524921b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52492340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524924d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52492660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524927f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0x7fdb524944e0" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7fdb524944e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52494860"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524949f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52494b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52494d10"/>
        <function-ref name="get" scoped="" ref="0x7fdb52493020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524931b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52493340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524934d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb52491ac0" loc="49:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb52491ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb5248d390"/>
        <function-ref name="fired" scoped="" ref="0x7fdb5248f360"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb5248fce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb5248f820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb5248d850"/>
        <function-ref name="start" scoped="" ref="0x7fdb52490970"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52490e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0x7fdb52496b50" loc="42:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7fdb52496b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb52495020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb524951b0"/>
        <function-ref name="request" scoped="" ref="0x7fdb52495340"/>
        <function-ref name="granted" scoped="" ref="0x7fdb524954d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52495660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0x7fdb52499940" loc="41:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7fdb52499940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52499cc0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52499e50"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52496020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524961b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52496340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524964d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52496660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524967f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7fdb52492b10" loc="48:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7fdb52492b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7fdb52491020"/>
        <function-ref name="disable" scoped="" ref="0x7fdb524911b0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb52491340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7fdb524914d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7fdb52495920" loc="43:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb52495920"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7fdb52495ca0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7fdb52495e30"/>
        <function-ref name="splitRead" scoped="" ref="0x7fdb52494020"/>
        <function-ref name="write" scoped="" ref="0x7fdb524941b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7fdb5248c020" loc="50:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7fdb5248c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7fdb53017150"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb5248cc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0x7fdb5247a3d0" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0x7fdb5247a3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5247a750"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5247a8e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5247aa70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5247ac00"/>
        <function-ref name="get" scoped="" ref="0x7fdb5247ad90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52479020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524791b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52479340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0x7fdb5247d7f0" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fdb5247d7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fdb5247be60"/>
        <function-ref name="test" scoped="" ref="0x7fdb5247b4e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb524844c0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb52483020"/>
        <function-ref name="reset" scoped="" ref="0x7fdb52483530"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb5247b9a0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52484980"/>
        <function-ref name="start" scoped="" ref="0x7fdb524839f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5247b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0x7fdb52479680" loc="47:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0x7fdb52479680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52479a00"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52479b90"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52479d20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52478020"/>
        <function-ref name="get" scoped="" ref="0x7fdb524781b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52478340"/>
        <function-ref name="set" scoped="" ref="0x7fdb524784d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52478660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7fdb52487680" loc="40:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7fdb52487680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52487a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7fdb5248b9c0" loc="39:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7fdb5248b9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7fdb5248bd40"/>
        <function-ref name="disable" scoped="" ref="0x7fdb52487020"/>
        <function-ref name="captured" scoped="" ref="0x7fdb524871b0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7fdb52487340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7fdb5245ec80" loc="84:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7fdb5245ec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb524670a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52467230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7fdb524667c0" loc="82:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7fdb524667c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7fdb52466b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb5246a1f0" loc="81:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb5246a1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5246a570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7fdb52466e40" loc="83:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb52466e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7fdb524681e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7fdb52468370"/>
        <function-ref name="splitRead" scoped="" ref="0x7fdb52468500"/>
        <function-ref name="write" scoped="" ref="0x7fdb52468690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb52467a60" loc="85:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb52467a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb52467de0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb52465020"/>
        <function-ref name="request" scoped="" ref="0x7fdb524651b0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb52465340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb524654d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fdb52459d70" loc="95:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb52459d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb52458180"/>
        <function-ref name="configure" scoped="" ref="0x7fdb52458310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x7fdb5241bde0" loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x7fdb5241bde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb5241a180"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb5241a310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7fdb52459020" loc="94:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7fdb52459020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb524593a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52459530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7fdb5245be00" loc="92:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7fdb5245be00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7fdb5245a1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb5245b7e0" loc="91:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb5245b7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5245bb60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x7fdb5243d800" loc="98:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x7fdb5243d800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7fdb5243db80"/>
        <function-ref name="sleep" scoped="" ref="0x7fdb5243c1b0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7fdb52457020"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb5243c340"/>
        <function-ref name="initMaster" scoped="" ref="0x7fdb52457340"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7fdb524574d0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fdb52457660"/>
        <function-ref name="read" scoped="" ref="0x7fdb524577f0"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7fdb52457980"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7fdb52457b10"/>
        <function-ref name="setClock" scoped="" ref="0x7fdb52457ca0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb52457e30"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7fdb52456020"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7fdb524562b0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7fdb52456440"/>
        <function-ref name="write" scoped="" ref="0x7fdb524565d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fdb52456760"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7fdb524568f0"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7fdb52456a80"/>
        <function-ref name="getClock" scoped="" ref="0x7fdb52456c10"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7fdb52456da0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7fdb5243dd10"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7fdb524571b0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7fdb5243c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7fdb5245a480" loc="93:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7fdb5245a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7fdb5245a800"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7fdb5245a990"/>
        <function-ref name="splitRead" scoped="" ref="0x7fdb5245ab20"/>
        <function-ref name="write" scoped="" ref="0x7fdb5245acb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7fdb5243c620" loc="99:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5243c620"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fdb5243c9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x7fdb523fd700" loc="76:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x7fdb523fd700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7fdb523fda80"/>
        <function-ref name="sleep" scoped="" ref="0x7fdb523f8020"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7fdb523fdda0"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb523f81b0"/>
        <function-ref name="initMaster" scoped="" ref="0x7fdb523fa1b0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7fdb523fa340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fdb523fa4d0"/>
        <function-ref name="read" scoped="" ref="0x7fdb523fa660"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7fdb523fa7f0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7fdb523fa980"/>
        <function-ref name="setClock" scoped="" ref="0x7fdb523fab10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb523faca0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7fdb523fae30"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7fdb523f9120"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7fdb523f92b0"/>
        <function-ref name="write" scoped="" ref="0x7fdb523f9440"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fdb523f95d0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7fdb523f9760"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7fdb523f98f0"/>
        <function-ref name="getClock" scoped="" ref="0x7fdb523f9a80"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7fdb523f9c10"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7fdb523fdc10"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7fdb523fa020"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7fdb523f9da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x7fdb523ece30" loc="81:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x7fdb523ece30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523eb1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523eb370"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523eb500"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523eb690"/>
        <function-ref name="get" scoped="" ref="0x7fdb523eb820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523eb9b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb523ebb40"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523ebcd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7fdb523f0970" loc="79:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7fdb523f0970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523f0cf0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523f0e80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523ed030"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523ed1c0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523ed350"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523ed4e0"/>
        <function-ref name="set" scoped="" ref="0x7fdb523ed670"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523ed800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x7fdb523f16c0" loc="78:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x7fdb523f16c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523f1a40"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523f1bd0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523f1d60"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523f0020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523f01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523f0340"/>
        <function-ref name="set" scoped="" ref="0x7fdb523f04d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523f0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fdb523efe00" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb523efe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb523f11c0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb523f1350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x7fdb523ea060" loc="82:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x7fdb523ea060"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fdb523ea3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x7fdb523f5670" loc="74:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x7fdb523f5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7fdb523f59f0"/>
        <function-ref name="sleep" scoped="" ref="0x7fdb523f2020"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7fdb523f5d10"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb523f21b0"/>
        <function-ref name="initMaster" scoped="" ref="0x7fdb523f41b0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7fdb523f4340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fdb523f44d0"/>
        <function-ref name="read" scoped="" ref="0x7fdb523f4660"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7fdb523f47f0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7fdb523f4980"/>
        <function-ref name="setClock" scoped="" ref="0x7fdb523f4b10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb523f4ca0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7fdb523f4e30"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7fdb523f3120"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7fdb523f32b0"/>
        <function-ref name="write" scoped="" ref="0x7fdb523f3440"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fdb523f35d0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7fdb523f3760"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7fdb523f38f0"/>
        <function-ref name="getClock" scoped="" ref="0x7fdb523f3a80"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7fdb523f3c10"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7fdb523f5b80"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7fdb523f4020"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7fdb523f3da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x7fdb523edb20" loc="80:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x7fdb523edb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523ec020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523ec1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523ec340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523ec4d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523ec660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523ec7f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb523ec980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523ecb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb5239f6c0" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb5239f6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb5239fa60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb5239fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb5239e730" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb5239e730"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb5239ead0"/>
        <function-ref name="configure" scoped="" ref="0x7fdb5239ec60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb523a0900" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb523a0900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb523a0ca0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb523a0e30"/>
        <function-ref name="request" scoped="" ref="0x7fdb5239f020"/>
        <function-ref name="granted" scoped="" ref="0x7fdb5239f1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb5239f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb5239fe40" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb5239fe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb5239e1e0"/>
        <function-ref name="userId" scoped="" ref="0x7fdb5239e370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51538850" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb51538850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51538bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fdb51538e60" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7fdb51538e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fdb51536210"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fdb515363a0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fdb51536530"/>
        <function-ref name="dequeue" scoped="" ref="0x7fdb515366c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb51534b40" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51534b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb51533020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb515331b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb51533cf0" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51533cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb515320e0"/>
        <function-ref name="configure" scoped="" ref="0x7fdb51532270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fdb51532500" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fdb51532500"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fdb51532880"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fdb51532a10"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fdb51532ba0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fdb51532d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb51535d80" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb51535d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51534180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51534310"/>
        <function-ref name="request" scoped="" ref="0x7fdb515344a0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51534630"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb515347c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb51533400" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51533400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51533780"/>
        <function-ref name="userId" scoped="" ref="0x7fdb51533910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fdb51531060" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7fdb51531060"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb515313e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51531570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fdb5238d020" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb5238d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7fdb5238d3a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fdb5238d530"/>
        <function-ref name="getControlA" scoped="" ref="0x7fdb5238d6c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fdb5238d850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fdb5238d9e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7fdb5238db70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fdb5238dd00"/>
        <function-ref name="getControlB" scoped="" ref="0x7fdb5238c020"/>
        <function-ref name="setControlC" scoped="" ref="0x7fdb5238c1b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7fdb5238c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb5238c850" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fdb5238c850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fdb52382e60"/>
        <function-ref name="test" scoped="" ref="0x7fdb523824e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523844c0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb52383020"/>
        <function-ref name="reset" scoped="" ref="0x7fdb52383530"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb523829a0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52384980"/>
        <function-ref name="start" scoped="" ref="0x7fdb523839f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52382020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb52380ad0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fdb52380ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb5237d4e0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb5237e1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5237f790"/>
        <function-ref name="reset" scoped="" ref="0x7fdb5237e670"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb5237d9a0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5237fc50"/>
        <function-ref name="start" scoped="" ref="0x7fdb5237eb30"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5237d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb52396bf0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb52396bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb5238f020"/>
        <function-ref name="test" scoped="" ref="0x7fdb523915d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523938a0"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb5238f4e0"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb5238f9f0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb52392760"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb523922a0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb52391a90"/>
        <function-ref name="set" scoped="" ref="0x7fdb52393d60"/>
        <function-ref name="start" scoped="" ref="0x7fdb52392c20"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52391110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fdb523732c0" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb523732c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7fdb52373640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fdb523737d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7fdb52373960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fdb52373af0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fdb52373c80"/>
        <function-ref name="setControlB" scoped="" ref="0x7fdb52373e10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fdb52372020"/>
        <function-ref name="getControlB" scoped="" ref="0x7fdb523721b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7fdb52372340"/>
        <function-ref name="setControlA" scoped="" ref="0x7fdb523724d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7fdb5236d5a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7fdb5236d5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb52369020"/>
        <function-ref name="fired" scoped="" ref="0x7fdb5236cc10"/>
        <function-ref name="get" scoped="" ref="0x7fdb5236c240"/>
        <function-ref name="reset" scoped="" ref="0x7fdb5236a110"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb523694e0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5236c700"/>
        <function-ref name="start" scoped="" ref="0x7fdb5236a5d0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5236aa90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb523729e0" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fdb523729e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fdb5236ee60"/>
        <function-ref name="test" scoped="" ref="0x7fdb5236e4e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523716b0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb5236f0d0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb5236f5e0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb5236e9a0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52371b70"/>
        <function-ref name="start" scoped="" ref="0x7fdb5236faa0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5236e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7fdb52369ba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7fdb52369ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb52365550"/>
        <function-ref name="fired" scoped="" ref="0x7fdb523661f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523687f0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb523666b0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb52365a10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52368cb0"/>
        <function-ref name="start" scoped="" ref="0x7fdb52366b70"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52365090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7fdb52364120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7fdb52364120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb52361a90"/>
        <function-ref name="fired" scoped="" ref="0x7fdb52363770"/>
        <function-ref name="get" scoped="" ref="0x7fdb52364d50"/>
        <function-ref name="reset" scoped="" ref="0x7fdb52363c30"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb52360020"/>
        <function-ref name="set" scoped="" ref="0x7fdb52363260"/>
        <function-ref name="start" scoped="" ref="0x7fdb52361110"/>
        <function-ref name="stop" scoped="" ref="0x7fdb523615d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb52378020" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb52378020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb52374350"/>
        <function-ref name="test" scoped="" ref="0x7fdb523759a0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52378c50"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb52374810"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb52374d20"/>
        <function-ref name="reset" scoped="" ref="0x7fdb52377b20"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb52377660"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb52375e60"/>
        <function-ref name="set" scoped="" ref="0x7fdb52377150"/>
        <function-ref name="start" scoped="" ref="0x7fdb52375020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb523754e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb522940b0" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb522940b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TOne" ref="0x7fdb530c1410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb52291b30"/>
        <function-ref name="fired" scoped="" ref="0x7fdb522939f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb522914e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb52291020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb52290020"/>
        <function-ref name="start" scoped="" ref="0x7fdb52293020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52293530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb522ddb50" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb522ddb50"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7fdb531b2020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7fdb531b2020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb522d1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb522d1410" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb522d1410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb522cd810"/>
        <function-ref name="test" scoped="" ref="0x7fdb522cee60"/>
        <function-ref name="get" scoped="" ref="0x7fdb522d0090"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb522cdcd0"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb522cc260"/>
        <function-ref name="reset" scoped="" ref="0x7fdb522ce020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb522d0a60"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb522cd350"/>
        <function-ref name="set" scoped="" ref="0x7fdb522d0550"/>
        <function-ref name="start" scoped="" ref="0x7fdb522ce4e0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb522ce9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb51507e10" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7fdb51507e10"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7fdb531b3c00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7fdb531b3c00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TOne" ref="0x7fdb530c1410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb515046e0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb515056b0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb51504090"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51505b70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb51504ba0"/>
        <function-ref name="start" scoped="" ref="0x7fdb51506ca0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb515051f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7fdb514fe570" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7fdb514fe570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb514fa020"/>
        <function-ref name="fired" scoped="" ref="0x7fdb514fdbc0"/>
        <function-ref name="get" scoped="" ref="0x7fdb514fd1f0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb514fb0d0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb514fa4e0"/>
        <function-ref name="set" scoped="" ref="0x7fdb514fd6b0"/>
        <function-ref name="start" scoped="" ref="0x7fdb514fb590"/>
        <function-ref name="stop" scoped="" ref="0x7fdb514fba50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7fdb51503140" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7fdb51503140"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb514ff4e0"/>
        <function-ref name="test" scoped="" ref="0x7fdb51500a90"/>
        <function-ref name="get" scoped="" ref="0x7fdb51503d70"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb514ff9a0"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb514fe020"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51502c30"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51502770"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb514ff020"/>
        <function-ref name="set" scoped="" ref="0x7fdb51502260"/>
        <function-ref name="start" scoped="" ref="0x7fdb51500110"/>
        <function-ref name="stop" scoped="" ref="0x7fdb515005d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fdb5228c020" loc="39:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fdb5228c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb5228cc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb5228be10" loc="24:../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb5228be10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TOne" ref="0x7fdb530c1410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb52288ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb52286670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb522861b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb52286b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb52283a00" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb52283a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TOne" ref="0x7fdb530c1410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb52271890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb52270260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb52271d50"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb52270720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb52270cb0" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb52270cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb5226b090"/>
        <function-ref name="test" scoped="" ref="0x7fdb5226c6e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5226e980"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb5226b550"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb5226ba60"/>
        <function-ref name="reset" scoped="" ref="0x7fdb5226d840"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb5226d380"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb5226cba0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5226ee40"/>
        <function-ref name="start" scoped="" ref="0x7fdb5226dd00"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5226c220"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fdb52249c00" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7fdb52249c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb52248a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb522474e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb52247020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb522479a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb52266830" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb52266830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb5224b6a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb52249090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb5224bb60"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb52249550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fdb52244680" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7fdb52244680"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb522433d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fdb52243a40" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb52243a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb52242890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb52241260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb52242d50"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb52241720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7fdb52239650" loc="36:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7fdb52239650"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7fdb522365b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fdb521de490" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb521de490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb521de810"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb521de9a0"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb521deb30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb521decc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb521dee50"/>
        <function-ref name="get" scoped="" ref="0x7fdb521db020"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb521db1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb521db7f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb521db340"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb521db4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb521db660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7fdb521d6550" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7fdb521d6550"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521d68d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521d6a60"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521d6bf0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521d6d80"/>
        <function-ref name="get" scoped="" ref="0x7fdb521d5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521d51b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb521d5340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521d54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb521da7b0" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb521da7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb521dab30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7fdb521d57f0" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7fdb521d57f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521d5b70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521d5d00"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521d4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521d41b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb521d4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521d44d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb521d4660"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521d47f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fdb521dadb0" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb521dadb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb521d7180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb521d7310"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb521d74a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb521d7630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb521d77c0"/>
        <function-ref name="get" scoped="" ref="0x7fdb521d7950"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb521d7ae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb521d61b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb521d7c70"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb521d7e00"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb521d6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7fdb521d4b10" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7fdb521d4b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521d3020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521d31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521d3340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521d34d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb521d3660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521d37f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb521d3980"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521d3b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7fdb521b8c80" loc="44:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7fdb521b8c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521b70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521b7230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521b73c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521b7550"/>
        <function-ref name="get" scoped="" ref="0x7fdb521b76e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521b7870"/>
        <function-ref name="set" scoped="" ref="0x7fdb521b7a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521b7b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7fdb521b5020" loc="45:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7fdb521b5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521b53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521b5530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521b56c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521b5850"/>
        <function-ref name="get" scoped="" ref="0x7fdb521b59e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521b5b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb521b5d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521b4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7fdb521b3600" loc="47:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb521b3600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb521b3980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7fdb521b4380" loc="46:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7fdb521b4380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521b4700"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521b4890"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521b4a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521b4bb0"/>
        <function-ref name="get" scoped="" ref="0x7fdb521b4d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521b3020"/>
        <function-ref name="set" scoped="" ref="0x7fdb521b31b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521b3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb521ac870" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="InterferenceAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb521ac870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb531079b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb53107d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb521a1cf0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb521a3300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb521a10d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb521a3c00"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb521a0660"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb521a01e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb521a3780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb521a4480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb521a16e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb521a4950"/>
        <function-ref name="stop" scoped="" ref="0x7fdb521a4e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fdb5219ee00" loc="43:../../tos/platforms/micaz/DemoSensorC.nc">
      <component-ref qname="InterferenceAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x7fdb5219ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb5219ca80"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb51ff3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fdb514cbe80" loc="41:../../tos/platforms/mica/VoltageC.nc">
      <component-ref qname="InterferenceAppC.Sensor.DemoChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x7fdb514cbe80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb514c9a90"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb514c8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb514c4020" loc="25:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="InterferenceAppC.Sensor.DemoChannel.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb514c4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb514c43a0"/>
        <function-ref name="configure" scoped="" ref="0x7fdb514c4530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fdb514c6020" loc="22:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="InterferenceAppC.Sensor.DemoChannel.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x7fdb514c6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb514c6c10"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb514c50d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x7fdb514c56b0" loc="24:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="InterferenceAppC.Sensor.DemoChannel.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb514c56b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x7fdb514c5a30"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb514c5bc0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x7fdb514c5d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fdb521872c0" loc="19:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x7fdb521872c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb52186020"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb521864a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7fdb521844f0" loc="20:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x7fdb521844f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb52183150"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb52183610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x7fdb52180280" loc="23:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb52180280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x7fdb52180600"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb52180790"/>
        <function-ref name="getPrescaler" scoped="" ref="0x7fdb52180920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fdb5217e1d0" loc="24:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb5217e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb5217e550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb5217e6e0"/>
        <function-ref name="request" scoped="" ref="0x7fdb5217e870"/>
        <function-ref name="granted" scoped="" ref="0x7fdb5217ea00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb5217eb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb52179210" loc="58:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb52179210"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb52179590"/>
        <function-ref name="configure" scoped="" ref="0x7fdb52179720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x7fdb5216d420" loc="56:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x7fdb5216d420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fdb5216d7a0"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb5216d930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x7fdb52173290" loc="55:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x7fdb52173290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fdb52173610"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb521737a0"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb52173930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb5217ddd0" loc="54:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb5217ddd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb5217a180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb5217a310"/>
        <function-ref name="request" scoped="" ref="0x7fdb5217a4a0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb5217a630"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb5217a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb5216b830" loc="54:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb5216b830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5216bbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x7fdb52169320" loc="57:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x7fdb52169320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fdb521696a0"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb52169830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x7fdb5216a820" loc="56:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x7fdb5216a820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fdb5216aba0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5216ad30"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb52169020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x7fdb52159710" loc="60:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x7fdb52159710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x7fdb52159a90"/>
        <function-ref name="getAdmux" scoped="" ref="0x7fdb52159c20"/>
        <function-ref name="setPrescaler" scoped="" ref="0x7fdb52159db0"/>
        <function-ref name="isEnabled" scoped="" ref="0x7fdb52168020"/>
        <function-ref name="enableAdc" scoped="" ref="0x7fdb521681b0"/>
        <function-ref name="setAdmux" scoped="" ref="0x7fdb52168340"/>
        <function-ref name="enableInterruption" scoped="" ref="0x7fdb521684d0"/>
        <function-ref name="isComplete" scoped="" ref="0x7fdb52168660"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb521687f0"/>
        <function-ref name="disableAdc" scoped="" ref="0x7fdb52168980"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x7fdb52168b10"/>
        <function-ref name="disableInterruption" scoped="" ref="0x7fdb52168ca0"/>
        <function-ref name="startConversion" scoped="" ref="0x7fdb52168e30"/>
        <function-ref name="isStarted" scoped="" ref="0x7fdb52167120"/>
        <function-ref name="setAdcsra" scoped="" ref="0x7fdb521672b0"/>
        <function-ref name="setContinuous" scoped="" ref="0x7fdb52167440"/>
        <function-ref name="getAdcsra" scoped="" ref="0x7fdb521675d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fdb52167760"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb521678f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fdb5216a020" loc="55:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb5216a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb5216a3a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5216a530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7fdb52167be0" loc="61:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb52167be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7fdb52158020"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7fdb521581b0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7fdb52158340"/>
        <function-ref name="actualMicro" scoped="" ref="0x7fdb521584d0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7fdb52158660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x7fdb52126080" loc="45:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x7fdb52126080"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x7fdb52126400"/>
        <function-ref name="getAdmux" scoped="" ref="0x7fdb52126590"/>
        <function-ref name="setPrescaler" scoped="" ref="0x7fdb52126720"/>
        <function-ref name="isEnabled" scoped="" ref="0x7fdb521268b0"/>
        <function-ref name="enableAdc" scoped="" ref="0x7fdb52126a40"/>
        <function-ref name="setAdmux" scoped="" ref="0x7fdb52126bd0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x7fdb52126d60"/>
        <function-ref name="isComplete" scoped="" ref="0x7fdb52125020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb521251b0"/>
        <function-ref name="disableAdc" scoped="" ref="0x7fdb52125340"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x7fdb521254d0"/>
        <function-ref name="disableInterruption" scoped="" ref="0x7fdb52125660"/>
        <function-ref name="startConversion" scoped="" ref="0x7fdb521257f0"/>
        <function-ref name="isStarted" scoped="" ref="0x7fdb52125a80"/>
        <function-ref name="setAdcsra" scoped="" ref="0x7fdb52125c10"/>
        <function-ref name="setContinuous" scoped="" ref="0x7fdb52125da0"/>
        <function-ref name="getAdcsra" scoped="" ref="0x7fdb52124020"/>
        <function-ref name="getValue" scoped="" ref="0x7fdb521241b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb52124340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x7fdb521214a0" loc="48:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x7fdb521214a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x7fdb52121820"/>
        <function-ref name="getAdmux" scoped="" ref="0x7fdb521219b0"/>
        <function-ref name="setPrescaler" scoped="" ref="0x7fdb52121b40"/>
        <function-ref name="isEnabled" scoped="" ref="0x7fdb52121cd0"/>
        <function-ref name="enableAdc" scoped="" ref="0x7fdb52121e60"/>
        <function-ref name="setAdmux" scoped="" ref="0x7fdb52120020"/>
        <function-ref name="enableInterruption" scoped="" ref="0x7fdb521201b0"/>
        <function-ref name="isComplete" scoped="" ref="0x7fdb52120340"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb521204d0"/>
        <function-ref name="disableAdc" scoped="" ref="0x7fdb52120660"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x7fdb521207f0"/>
        <function-ref name="disableInterruption" scoped="" ref="0x7fdb52120980"/>
        <function-ref name="startConversion" scoped="" ref="0x7fdb52120b10"/>
        <function-ref name="isStarted" scoped="" ref="0x7fdb52120da0"/>
        <function-ref name="setAdcsra" scoped="" ref="0x7fdb5211f020"/>
        <function-ref name="setContinuous" scoped="" ref="0x7fdb5211f1b0"/>
        <function-ref name="getAdcsra" scoped="" ref="0x7fdb5211f340"/>
        <function-ref name="getValue" scoped="" ref="0x7fdb5211f4d0"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb5211f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7fdb5211f980" loc="49:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7fdb5211f980"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fdb5211fd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb520756c0" loc="92:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb520756c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb52075a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb52075bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb520733e0" loc="96:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb520733e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb52073780"/>
        <function-ref name="configure" scoped="" ref="0x7fdb52073910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fdb52075e40" loc="93:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb52075e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb520741e0"/>
        <function-ref name="requested" scoped="" ref="0x7fdb52074370"/>
        <function-ref name="granted" scoped="" ref="0x7fdb52074500"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52074690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb52074820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb520767f0" loc="91:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb520767f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb52076b90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb52076d20"/>
        <function-ref name="request" scoped="" ref="0x7fdb52075020"/>
        <function-ref name="granted" scoped="" ref="0x7fdb520751b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52075340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb52074a70" loc="94:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb52074a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb52074df0"/>
        <function-ref name="userId" scoped="" ref="0x7fdb52073020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb514b3850" loc="44:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb514b3850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb514b3bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x7fdb514b3e60" loc="45:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x7fdb514b3e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fdb514b2210"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fdb514b23a0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fdb514b2530"/>
        <function-ref name="dequeue" scoped="" ref="0x7fdb514b26c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb514b0dc0" loc="55:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb514b0dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb514ae180"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb514ae310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb514adb60" loc="60:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb514adb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb514ac020"/>
        <function-ref name="configure" scoped="" ref="0x7fdb514ac1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fdb514ac440" loc="61:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7fdb514ac440"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fdb514ac7c0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fdb514ac950"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fdb514acae0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fdb514acc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fdb514ae560" loc="56:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb514ae560"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb514ae8e0"/>
        <function-ref name="requested" scoped="" ref="0x7fdb514aea70"/>
        <function-ref name="granted" scoped="" ref="0x7fdb514aec00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb514aed90"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb514ad020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb514ab020" loc="62:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb514ab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb514ab3a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb514ab530"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb514ab6c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb514ab850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb514ab9e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb514abb70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb514abd00"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb514aa4d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb514aa1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb514aa020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb514aa340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb514b0060" loc="54:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb514b0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb514b0400"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb514b0590"/>
        <function-ref name="request" scoped="" ref="0x7fdb514b0720"/>
        <function-ref name="granted" scoped="" ref="0x7fdb514b08b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb514b0a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb514ad270" loc="57:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb514ad270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb514ad5f0"/>
        <function-ref name="userId" scoped="" ref="0x7fdb514ad780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fdb514aa7a0" loc="75:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7fdb514aa7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb514aab20"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb514aacb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7fdb52070960" loc="72:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7fdb52070960"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7fdb52070ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7fdb52059020" loc="73:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb52059020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb520593a0"/>
        <function-ref name="requested" scoped="" ref="0x7fdb52059530"/>
        <function-ref name="granted" scoped="" ref="0x7fdb520596c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52059850"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb520599e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7fdb52070200" loc="70:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb52070200"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb52070580"/>
        <function-ref name="stop" scoped="" ref="0x7fdb52070710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fdb52059c30" loc="74:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb52059c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb52058020"/>
        <function-ref name="userId" scoped="" ref="0x7fdb520581b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7fdb51477bd0" loc="62:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7fdb51477bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7fdb51476020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7fdb51476270" loc="63:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51476270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb514765f0"/>
        <function-ref name="requested" scoped="" ref="0x7fdb51476780"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51476910"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51476aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51476c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7fdb51477470" loc="60:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51477470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb514777f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51477980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fdb51476e80" loc="64:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51476e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51475220"/>
        <function-ref name="userId" scoped="" ref="0x7fdb514753b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7fdb520498d0" loc="54:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7fdb520498d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7fdb52048780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fdb5204f550" loc="48:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x7fdb5204f550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb5204e170"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb5204e5f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7fdb5204d2c0" loc="49:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x7fdb5204d2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb5204c020"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb5204c4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x7fdb5204ab90" loc="53:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb5204ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x7fdb52049020"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb520491b0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x7fdb52049340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x7fdb5204cb80" loc="52:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x7fdb5204cb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fdb5204a020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5204a1b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7fdb5204a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x7fdb52037660" loc="104:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x7fdb52037660"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb520379e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb52037b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fdb52022150" loc="24:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x7fdb52022150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb52022d60"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb5200a260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x7fdb5200aaf0" loc="26:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x7fdb5200aaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fdb52009750"/>
        <function-ref name="readDone" scoped="" ref="0x7fdb52009bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fdb52007300" loc="27:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7fdb52007300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb520076a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb52007830"/>
        <function-ref name="request" scoped="" ref="0x7fdb520079c0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb52007b50"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb52007ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcConfig" ref="0x7fdb51ffa160" loc="40:../../tos/platforms/mica/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x7fdb51ffa160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x7fdb51ffa4e0"/>
        <function-ref name="getChannel" scoped="" ref="0x7fdb51ffa670"/>
        <function-ref name="getPrescaler" scoped="" ref="0x7fdb51ffa800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb51f62020" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="InterferenceAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb51f62020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51f623a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51f62530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51f626c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51f62850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51f629e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb51f62c30" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="InterferenceAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb51f62c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51f61020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb51f611b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51f61340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51f614d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb51f61660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb51f618b0" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="InterferenceAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb51f618b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb51f61c30"/>
        <function-ref name="source" scoped="" ref="0x7fdb51f61dc0"/>
        <function-ref name="address" scoped="" ref="0x7fdb51f60020"/>
        <function-ref name="destination" scoped="" ref="0x7fdb51f601b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb51f60340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb51f604d0"/>
        <function-ref name="type" scoped="" ref="0x7fdb51f60660"/>
        <function-ref name="setType" scoped="" ref="0x7fdb51f607f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb51f60980"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb51f60b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb51f60ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7fdb51f5f020" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="InterferenceAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7fdb51f5f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb51f5f3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb51f5f530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb51f5f6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb514628a0" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="InterferenceAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb514628a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51462c20"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51462db0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51461020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb514611b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51461340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb51461590" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="InterferenceAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb51461590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51461910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb51461aa0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51461c30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51461dc0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb5145f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb5145f270" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="InterferenceAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb5145f270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb5145f5f0"/>
        <function-ref name="source" scoped="" ref="0x7fdb5145f780"/>
        <function-ref name="address" scoped="" ref="0x7fdb5145f910"/>
        <function-ref name="destination" scoped="" ref="0x7fdb5145faa0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb5145fc30"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb5145fdc0"/>
        <function-ref name="type" scoped="" ref="0x7fdb5145e020"/>
        <function-ref name="setType" scoped="" ref="0x7fdb5145e1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb5145e340"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb5145e4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb5145e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7fdb5145e8f0" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="InterferenceAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7fdb5145e8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb5145ec70"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb5145ee00"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb5145d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb51454b20" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="InterferenceAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb51454b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51453020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb514531b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51453340"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb514534d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51453660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fdb51453910" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="InterferenceAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb51453910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51453c90"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51453e20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51452020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb514521b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51452340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fdb51452590" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="InterferenceAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb51452590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb51452910"/>
        <function-ref name="source" scoped="" ref="0x7fdb51452aa0"/>
        <function-ref name="address" scoped="" ref="0x7fdb51452c30"/>
        <function-ref name="destination" scoped="" ref="0x7fdb51452dc0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb51451020"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb514511b0"/>
        <function-ref name="type" scoped="" ref="0x7fdb51451340"/>
        <function-ref name="setType" scoped="" ref="0x7fdb514514d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb51451660"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb514517f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb51451980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb51fc5c10" loc="43:../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb51fc5c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51fc2020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51fc21b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51fc2340"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51fc24d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51fc2660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fdb51f77400" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb51f77400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51f777a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51f77930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51f77ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51f77c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51f77de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb51f78580" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb51f78580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51f78920"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51f78ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51f78c40"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51f78dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51f77020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fdb51f75720" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb51f75720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51f75aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb51f75c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51f75dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51f74020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb51f741b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7fdb51f74480" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7fdb51f74480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51f74800"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51f74990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7fdb51f74c60" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7fdb51f74c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51f73020"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51f731b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fdb51f76060" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb51f76060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb51f763e0"/>
        <function-ref name="source" scoped="" ref="0x7fdb51f76570"/>
        <function-ref name="address" scoped="" ref="0x7fdb51f76700"/>
        <function-ref name="destination" scoped="" ref="0x7fdb51f76890"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb51f76a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb51f76bb0"/>
        <function-ref name="type" scoped="" ref="0x7fdb51f76d40"/>
        <function-ref name="setType" scoped="" ref="0x7fdb51f75020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb51f751b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb51f75340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb51f754d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb51f5b320" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb51f5b320"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb51f5b6a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb51f5b830"/>
        <function-ref name="start" scoped="" ref="0x7fdb51f5b9c0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51f5bb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb51f5a370" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb51f5a370"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51f5a6f0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51f5a880"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51f5aa10"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51f5aba0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51f5ad30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb51f58b40" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb51f58b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51f57020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb51f571b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51f57340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51f574d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb51f57660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb51f58530" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb51f58530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb51f588b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51f559a0" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb51f559a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51f55d20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51f54020"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb51f541b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51f54340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb51f544d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51f54660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb51f547f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51f54e30"/>
        <function-ref name="set" scoped="" ref="0x7fdb51f54980"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51f54b10"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51f54ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fdb51f55020" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb51f55020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb51f553a0"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb51f55530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb51f556c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb51f57910" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb51f57910"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb51f57c90"/>
        <function-ref name="source" scoped="" ref="0x7fdb51f57e20"/>
        <function-ref name="address" scoped="" ref="0x7fdb51f56020"/>
        <function-ref name="destination" scoped="" ref="0x7fdb51f561b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb51f56340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb51f564d0"/>
        <function-ref name="type" scoped="" ref="0x7fdb51f56660"/>
        <function-ref name="setType" scoped="" ref="0x7fdb51f567f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb51f56980"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb51f56b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb51f56ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb51efad90" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7fdb51efad90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51ef9180"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51ef9310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51ef94a0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51ef9630"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51ef97c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb51ef9a50" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7fdb51ef9a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb51ef9dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb51f51b40" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7fdb51f51b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51efd020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51efd1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51efd340"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51efd4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51efd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb51efb720" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7fdb51efb720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51efbaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb51efbc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51efbdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51efa020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb51efa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb51efd9e0" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb51efd9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb51efdd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fdb51efa400" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb51efa400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb51efa780"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb51efa910"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb51efaaa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb51efc020" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7fdb51efc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb51efc3a0"/>
        <function-ref name="source" scoped="" ref="0x7fdb51efc530"/>
        <function-ref name="address" scoped="" ref="0x7fdb51efc6c0"/>
        <function-ref name="destination" scoped="" ref="0x7fdb51efc850"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb51efc9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb51efcb70"/>
        <function-ref name="type" scoped="" ref="0x7fdb51efcd00"/>
        <function-ref name="setType" scoped="" ref="0x7fdb51efb020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb51efb1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb51efb340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb51efb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb51ef44e0" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb51ef44e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb51ef4860"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb51ef49f0"/>
        <function-ref name="start" scoped="" ref="0x7fdb51ef4b80"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51ef4d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb51ef1020" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb51ef1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb530678e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51ef13a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51ef1530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51ef16c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51ef1850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51ef19e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51ef7e50" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb51ef7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51ef4210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb51ef24c0" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb51ef24c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb530678e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb51ef2840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51ef0940" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb51ef0940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51ef0cc0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51ef0e50"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb51eef020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51eef1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb51eef340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51eef4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb51eef660"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51eefca0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51eef7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51eef980"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51eefb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7fdb51ef0020" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fdb51ef0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb530678e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fdb51ef03a0"/>
        <function-ref name="offset" scoped="" ref="0x7fdb51ef0530"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fdb51ef06c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb51ec9c80" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7fdb51ec9c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb51ec80a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb51ec8230"/>
        <function-ref name="start" scoped="" ref="0x7fdb51ec83c0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51ec8550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7fdb51e62e40" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x7fdb51e62e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51e611e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51e61370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fdb51eb4530" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7fdb51eb4530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51eb48b0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51eb4a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7fdb51e99d50" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x7fdb51e99d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51e98100"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51e98290"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51ec9630" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb51ec9630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51ec99b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7fdb51eb1130" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x7fdb51eb1130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7fdb51eb14b0"/>
        <function-ref name="flush" scoped="" ref="0x7fdb51eb1640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7fdb51e64400" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x7fdb51e64400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51e64780"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51e64910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7fdb51eb8410" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fdb51eb8410"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fdb51eb8790"/>
        <function-ref name="resetSend" scoped="" ref="0x7fdb51eb8920"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fdb51eb8ab0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fdb51eb8c40"/>
        <function-ref name="putData" scoped="" ref="0x7fdb51eb8dd0"/>
        <function-ref name="putDone" scoped="" ref="0x7fdb51ec1020"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fdb51ec11b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51ec1430" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb51ec1430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51ec17b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51ec1940"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb51ec1ad0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51ec1c60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb51ec1df0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51ebe020"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb51ebe1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51ebe7f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51ebe340"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51ebe4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51ebe660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7fdb51e5d0c0" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fdb51e5d0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51e5d440"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51e5d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7fdb51ec3b10" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7fdb51ec3b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fdb51ec7020"/>
        <function-ref name="nextByte" scoped="" ref="0x7fdb51ec71b0"/>
        <function-ref name="startSend" scoped="" ref="0x7fdb51ec7340"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fdb51ec74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7fdb51ec2080" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fdb51ec2080"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fdb51ec2400"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fdb51ec2590"/>
        <function-ref name="endPacket" scoped="" ref="0x7fdb51ec2720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7fdb51d93c50" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x7fdb51d93c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51d92020"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51d921b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb51d98830" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7fdb51d98830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb530678e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51d98bd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51d98d60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51d97020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51d971b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51d97340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7fdb51d92480" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x7fdb51d92480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51d92800"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51d92990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb51d98110" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7fdb51d98110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb530678e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb51d984b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7fdb51d97760" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x7fdb51d97760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb530678e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fdb51d97b00"/>
        <function-ref name="offset" scoped="" ref="0x7fdb51d97c90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fdb51d97e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51d94590" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb51d94590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51d94910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51d94aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb51d94c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51d94dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb51d93020"/>
        <function-ref name="get" scoped="" ref="0x7fdb51d931b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb51d93340"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51d93980"/>
        <function-ref name="set" scoped="" ref="0x7fdb51d93660"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51d934d0"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51d937f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7fdb51d959d0" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7fdb51d959d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fdb51d95d50"/>
        <function-ref name="nextByte" scoped="" ref="0x7fdb51d94020"/>
        <function-ref name="startSend" scoped="" ref="0x7fdb51d941b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fdb51d94340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7fdb51d950e0" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fdb51d950e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fdb51d95460"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fdb51d955f0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fdb51d95780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7fdb51d82d20" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7fdb51d82d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51d8c0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51d8c270"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51d8c400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51d8c590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51d8c720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51d8c8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51d8ca40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7fdb51d90b60" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fdb51d90b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fdb51d8d020"/>
        <function-ref name="resetSend" scoped="" ref="0x7fdb51d8d1b0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fdb51d8d340"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fdb51d8d4d0"/>
        <function-ref name="putData" scoped="" ref="0x7fdb51d8d660"/>
        <function-ref name="putDone" scoped="" ref="0x7fdb51d8d7f0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fdb51d8d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51d8ccc0" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7fdb51d8ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51d8b0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51d8b230"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb51d8b3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51d8b550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb51d8b6e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51d8b870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb51d8ba00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51d801b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51d8bb90"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51d8bd20"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51d80020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fdb51d64020" loc="42:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7fdb51d64020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51d643a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fdb51d64530"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51d646c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fdb51d64850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fdb51d66960" loc="41:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7fdb51d66960"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51d66ce0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51d66e70"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51d65030"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51d651c0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51d65350"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51d654e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51d65670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fdb51d66150" loc="40:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7fdb51d66150"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51d664d0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51d66660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fdb51d63cb0" loc="41:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7fdb51d63cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51d5c0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fdb51d5c230"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51d5c3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fdb51d5c550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fdb51d5c850" loc="42:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7fdb51d5c850"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51d5cbd0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51d5cd60"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51d5b020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51d5b1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51d5b340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51d5b4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51d5b660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fdb51d5bc20" loc="43:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb51d5bc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51d59a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d584e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d58020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51d589a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fdb51d634b0" loc="40:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7fdb51d634b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51d63830"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51d639c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fdb51d0f5a0" loc="50:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7fdb51d0f5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51d0f920"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fdb51d0fab0"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51d0fc40"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fdb51d0fdd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x7fdb51d0d0a0" loc="53:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x7fdb51d0d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51d0d420"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51d0d5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51d55770" loc="48:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb51d55770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51d55af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fdb51d0e0c0" loc="51:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7fdb51d0e0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51d0e440"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51d0e5d0"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51d0e760"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51d0e8f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51d0ea80"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51d0ec10"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51d0eda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fdb51d0b810" loc="56:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb51d0b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51d096a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d08090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d09b60"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51d08550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x7fdb51d0c0a0" loc="55:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x7fdb51d0c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb51d0c420"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51d0c5b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51d0c740"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51d0c8d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51d0ca60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb51d0cbf0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51d0cd80"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fdb51d0b020"/>
        <function-ref name="tx" scoped="" ref="0x7fdb51d0b1b0"/>
        <function-ref name="rx" scoped="" ref="0x7fdb51d0b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fdb51d55d80" loc="49:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7fdb51d55d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51d0f180"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51d0f310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x7fdb51d0d880" loc="54:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x7fdb51d0d880"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51d0dc00"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51d0dd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7fdb51ce63a0" loc="49:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7fdb51ce63a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb51ce6720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51ce68b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51ce6a40"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51ce6bd0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51ce6d60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb51ce5020"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51ce51b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fdb51ce5340"/>
        <function-ref name="tx" scoped="" ref="0x7fdb51ce54d0"/>
        <function-ref name="rx" scoped="" ref="0x7fdb51ce5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7fdb51ce4c40" loc="53:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7fdb51ce4c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb51ce3020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51ce31b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51ce3340"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51ce34d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51ce3660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb51ce37f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51ce3980"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fdb51ce3b10"/>
        <function-ref name="tx" scoped="" ref="0x7fdb51ce3ca0"/>
        <function-ref name="rx" scoped="" ref="0x7fdb51ce3e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7fdb51ce7990" loc="48:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7fdb51ce7990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51ce7d10"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51ce6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7fdb51ce59f0" loc="51:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7fdb51ce59f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51ce5d70"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51ce4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7fdb51ce43b0" loc="52:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7fdb51ce43b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51ce4730"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51ce48c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7fdb51ce70f0" loc="47:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7fdb51ce70f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51ce7470"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51ce7600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x7fdb51ce2bc0" loc="114:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x7fdb51ce2bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51cde020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7fdb51cdd5f0" loc="117:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7fdb51cdd5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb51cdd970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51cddb00"/>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51cddc90"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51cdde20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51cdc020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb51cdc1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51cdc340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fdb51cdc4d0"/>
        <function-ref name="tx" scoped="" ref="0x7fdb51cdc660"/>
        <function-ref name="rx" scoped="" ref="0x7fdb51cdc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x7fdb51cdcb50" loc="119:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x7fdb51cdcb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51cdb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7fdb51cd95f0" loc="122:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7fdb51cd95f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb51cd9970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51cd9b00"/>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51cd9c90"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51cd9e20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51cd8020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb51cd81b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51cd8340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7fdb51cd84d0"/>
        <function-ref name="tx" scoped="" ref="0x7fdb51cd8660"/>
        <function-ref name="rx" scoped="" ref="0x7fdb51cd87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7fdb51cdecd0" loc="116:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7fdb51cdecd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51cdd0a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51cdd230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7fdb51cdb3f0" loc="120:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7fdb51cdb3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51cdb770"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51cdb900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7fdb51cdbcd0" loc="121:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7fdb51cdbcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51cd90a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51cd9230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7fdb51cd8b20" loc="124:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7fdb51cd8b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7fdb51cd7020"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7fdb51cd71b0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7fdb51cd7340"/>
        <function-ref name="actualMicro" scoped="" ref="0x7fdb51cd74d0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7fdb51cd7660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7fdb51cd7980" loc="125:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7fdb51cd7980"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fdb51cd7d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7fdb51cde3f0" loc="115:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7fdb51cde3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51cde770"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51cde900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb51c78dc0" loc="24:../../tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb51c78dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51c75ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51c74670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51c741b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51c74b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb51c73de0" loc="24:../../tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb51c73de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TThree" ref="0x7fdb530c17b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51c70ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51c6e670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51c6e1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51c6eb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fdb51c65020" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb51c65020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7fdb51c653a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fdb51c65530"/>
        <function-ref name="getControlA" scoped="" ref="0x7fdb51c656c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fdb51c65850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fdb51c659e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7fdb51c65b70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fdb51c65d00"/>
        <function-ref name="getControlB" scoped="" ref="0x7fdb51c64020"/>
        <function-ref name="setControlC" scoped="" ref="0x7fdb51c641b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7fdb51c64340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51c64850" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fdb51c64850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51c60e60"/>
        <function-ref name="test" scoped="" ref="0x7fdb51c604e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c634c0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51c61020"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51c61530"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51c609a0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51c63980"/>
        <function-ref name="start" scoped="" ref="0x7fdb51c619f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51c60020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51c5fad0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7fdb51c5fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb51c5b4e0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51c5c1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c5e790"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51c5c670"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51c5b9a0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51c5ec50"/>
        <function-ref name="start" scoped="" ref="0x7fdb51c5cb30"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51c5b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb51c6dcc0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb51c6dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb51c66090"/>
        <function-ref name="test" scoped="" ref="0x7fdb51c676e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c6a980"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb51c66550"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb51c66a60"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51c69840"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51c69380"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51c67ba0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51c6ae40"/>
        <function-ref name="start" scoped="" ref="0x7fdb51c69d00"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51c67220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7fdb51c512c0" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7fdb51c512c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7fdb51c51640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7fdb51c517d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7fdb51c51960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7fdb51c51af0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7fdb51c51c80"/>
        <function-ref name="setControlB" scoped="" ref="0x7fdb51c51e10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7fdb51c50020"/>
        <function-ref name="getControlB" scoped="" ref="0x7fdb51c501b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7fdb51c50340"/>
        <function-ref name="setControlA" scoped="" ref="0x7fdb51c504d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7fdb51c4b5a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7fdb51c4b5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb51c47020"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51c4ac10"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c4a240"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51c49110"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51c474e0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51c4a700"/>
        <function-ref name="start" scoped="" ref="0x7fdb51c495d0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51c49a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51c509e0" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7fdb51c509e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51c4de60"/>
        <function-ref name="test" scoped="" ref="0x7fdb51c4d4e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c4f6b0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51c4e0d0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51c4e5e0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51c4d9a0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51c4fb70"/>
        <function-ref name="start" scoped="" ref="0x7fdb51c4eaa0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51c4d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7fdb51c47ba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7fdb51c47ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb51c44550"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51c451f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c467f0"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51c456b0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51c44a10"/>
        <function-ref name="set" scoped="" ref="0x7fdb51c46cb0"/>
        <function-ref name="start" scoped="" ref="0x7fdb51c45b70"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51c44090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7fdb51c42120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7fdb51c42120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7fdb51c40a90"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51c41770"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c42d50"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51c41c30"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51c3f020"/>
        <function-ref name="set" scoped="" ref="0x7fdb51c41260"/>
        <function-ref name="start" scoped="" ref="0x7fdb51c40110"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51c405d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb51c56020" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb51c56020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb51c53350"/>
        <function-ref name="test" scoped="" ref="0x7fdb51c549a0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c56c50"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb51c53810"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb51c53d20"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51c55b20"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51c55660"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51c54e60"/>
        <function-ref name="set" scoped="" ref="0x7fdb51c55150"/>
        <function-ref name="start" scoped="" ref="0x7fdb51c54020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51c544e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51bc5c60" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7fdb51bc5c60"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7fdb531b2020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7fdb531b2020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51bc4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51bc4410" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb51bc4410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb51bc0810"/>
        <function-ref name="test" scoped="" ref="0x7fdb51bc1e60"/>
        <function-ref name="get" scoped="" ref="0x7fdb51bc2090"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb51bc0cd0"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb51bbe260"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51bc1020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51bc2a60"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51bc0350"/>
        <function-ref name="set" scoped="" ref="0x7fdb51bc2550"/>
        <function-ref name="start" scoped="" ref="0x7fdb51bc14e0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51bc19a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb51bbc3c0" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb51bbc3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TThree" ref="0x7fdb530c17b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51bbb240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51bbbbc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51bbb700"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51bb90d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51bb9660" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7fdb51bb9660"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7fdb51bb5a90"/>
        <function-ref name="test" scoped="" ref="0x7fdb51bb5110"/>
        <function-ref name="get" scoped="" ref="0x7fdb51bb83d0"/>
        <function-ref name="setScale" scoped="" ref="0x7fdb51bb4020"/>
        <function-ref name="getScale" scoped="" ref="0x7fdb51bb4530"/>
        <function-ref name="reset" scoped="" ref="0x7fdb51bb72a0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51bb8da0"/>
        <function-ref name="isOn" scoped="" ref="0x7fdb51bb55d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51bb8890"/>
        <function-ref name="start" scoped="" ref="0x7fdb51bb7760"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51bb7c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fdb51bad0f0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7fdb51bad0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TThree" ref="0x7fdb530c17b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51bab020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51bab9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51bab4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51babe60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb51bb1cd0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7fdb51bb1cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb53106d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7fdb53104180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51bafb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51bae550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51bae090"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51baea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7fdb51b9f1e0" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x7fdb51b9f1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fdb51b9f560"/>
        <function-ref name="offset" scoped="" ref="0x7fdb51b9f6f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fdb51b9f880"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7fdb5305db70" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7fdb52ffc2c0" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fdb52ffd890" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fdb52ffdc10" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52ffc020" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fdb52ff8970" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ff8370" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52ff86a0" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb52ff7a60" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb52ffb630" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ffb3b0" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb52ff9b80" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ff95a0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fdb52ff98f0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7fdb53057020" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fdb53059c90" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7fdb53056520" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fdb530562a0" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fdb530592b0" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb53057870" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7fdb52fd7d30" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
              <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52fd73d0" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7fdb52fd7720" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52fd7a50" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7fdb52fe1070" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7fdb52fe1820" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7fdb52fe0030" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7fdb52fde020" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7fdb52fdd7d0" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb52fdc020" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7fdb52fe07c0" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52fdcb90" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fdb52fdc910" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7fdb52fe28a0" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7fdb52fde800" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7fdb52fdd020" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fdb52fd1020" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52fd9c50" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fdb52fd0110" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52fd1e10" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fdb52fcc490" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52fcde50" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52fcc1c0" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb52fcd560" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fdb52fcf5e0" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52fcf020" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52fcf350" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7fdb53182670" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7fdb53181020" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7fdb52fbc040" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fbdd90" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fdb52fc6bc0" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fc6940" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fdb52fc8020" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fdb52fc8ae0" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fc8860" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fdb52fc3600" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fc3020" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52fc3370" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fdb52fc5020" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fc49e0" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52fc4d30" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7fdb52fbfae0" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fbf860" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7fdb52fbee60" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fbe8b0" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7fdb52fbebd0" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fdb5306ae00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fdb52fc1890" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fc1610" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fdb52fbb600" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52fbb020" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fdb52fbb370" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7fdb52fba490" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb5305ad30" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb5305ad30"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fdb52feda20" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fdb52ff0350" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7fdb52fee120" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fdb52fefb00" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fdb52fefe40" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7fdb52fef350" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7fdb52feba70" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7fdb52feb1f0" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fdb52ff0b30" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7fdb52ff38d0" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fdb52ff3650" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7fdb52fed0c0" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fdb52feeac0" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fdb52feee00" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7fdb52ff23b0" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fdb52ff2130" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb52ff2bb0" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fdb52f8da40" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7fdb52f81dc0" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7fdb52f81b40" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7fdb52f83390" loc="31:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7fdb52f83e10" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7fdb52f83b90" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7fdb52f82940" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7fdb52f826c0" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7fdb52f81270" loc="53:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fdb52f6f3b0" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fdb52f6fae0" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fdb52f70580" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fdb52f6e9b0" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb52f70c80" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fdb52f6e270" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52f74790" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fdb52f74e60" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fdb5318c190" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7fdb5318a190" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7fdb5318c900" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7fdb530b72b0" loc="85:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7fdb530b79f0" loc="86:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fdb530baac0" loc="79:../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7fdb53098540" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7fdb53131470"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7fdb5309a6a0" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7fdb52daf440" loc="59:../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7fdb52db2e00" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fdb52daf1b0" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7fdb52da3b50" loc="65:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52da3530" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7fdb52da38c0" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7fdb52da1d00" loc="71:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52da1a80" loc="71:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7fdb52da4c60" loc="57:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7fdb52da42a0" loc="52:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7fdb52da4020" loc="52:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7fdb52daaad0" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52daa850" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7fdb52da8cd0" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52da8a50" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7fdb52da6020" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52da9ce0" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7fdb52d9a040" loc="65:../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d9bd90" loc="65:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7fdb52d9e030" loc="46:../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52dab9e0" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7fdb52dabd70" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7fdb52d9b020" loc="59:../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d9dc80" loc="59:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7fdb52d9d450" loc="53:../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d9ede0" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7fdb52d9d1c0" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7fdb52d99020" loc="71:../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d9ad70" loc="71:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="37:../../tos/lib/rfxlink/util/RadioChannel.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="setChannelDone" ref="0x7fdb52d95af0" loc="50:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7fdb52d952e0" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7fdb52d95060" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7fdb52d94390" loc="55:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb52da2500" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb52da2500"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fdb52da2740" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52da2740"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7fdb52d905f0" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52da2740"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d90370" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7fdb52d8f780" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d8f500" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7fdb52d91350" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d910d0" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52d8da90" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52da2740"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d8d4a0" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7fdb52d8d800" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52da2740"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0x7fdb52d798a0" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7fdb52d798a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0x7fdb52d74a90" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
          <long>&#10; Clears the isSet flag.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d74810" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb52d74020" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7fdb52d798a0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d76c90" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7fdb52d76490" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d76210" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52d73810" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="55:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
          <long>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7fdb52d798a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d73210" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7fdb52d73580" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7fdb52d798a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb52d67350" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb52d67350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fdb52d67c70" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7fdb52d68ac0" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d68840" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fdb52d47bf0" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7fdb52d48be0" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fdb52d48270" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fdb52d47420" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fdb52d468b0" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0x7fdb52d42d40" loc="41:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d42ac0" loc="41:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fdb52d498e0" loc="37:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fdb52d42350" loc="39:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d420d0" loc="39:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fdb52d3f830" loc="45:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d3f210" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52d3f5a0" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fdb52d41af0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d414d0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52d41860" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0x7fdb52d3ec70" loc="49:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7fdb530155a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d3e9f0" loc="49:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0x7fdb52d3d980" loc="51:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7fdb530155a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d3d370" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fdb52d3d6f0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7fdb530155a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fdb52d3e2a0" loc="47:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d3e020" loc="47:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7fdb52d3b120" loc="53:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7fdb530155a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb52d50b70" loc="67:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fdb52d50220" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fdb52d505a0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52d508d0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fdb52d4c660" loc="122:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d4c060" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52d4c390" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb52d4d790" loc="110:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb52d4fc00" loc="83:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d4f980" loc="83:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb52d4ede0" loc="97:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52d4e800" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fdb52d4eb50" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0x7fdb52d1e3e0" loc="59:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0x7fdb52d1ecf0" loc="72:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0x7fdb52d1d790" loc="79:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0x7fdb52d21c40" loc="48:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
        <long>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example). &#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fdb52d062a0" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fdb52d06020" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0x7fdb52d06a80" loc="62:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb52d0fe40" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fdb52d0fbc0" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52d07810" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fdb52d07590" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="43:../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="38:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0x7fdb52d0dd60" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fdb52d0dae0" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0x7fdb52d0b3f0" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="65:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fdb52d0b170" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0x7fdb52d0c970" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="60:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
          <long>&#10; Returns the node address for the given entry.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fdb52d0c6f0" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x7fdb52d09020" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fdb52d0bc60" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0x7fdb52d0d2a0" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fdb52d0d020" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0x7fdb52ca5270" loc="40:../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0x7fdb52cb9350" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cb90d0" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0x7fdb52caacb0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52caaa30" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0x7fdb52ca8490" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ca8210" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fdb52cac490" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cac210" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fdb52cbacc0" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cbaa40" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fdb52caa2b0" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cacbc0" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52caa020" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fdb52cada20" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cad440" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52cad790" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fdb52ca9a20" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ca9440" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fdb52ca9790" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0x7fdb52cb32b0" loc="42:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
          <long>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0x7fdb52cb3c10" loc="49:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0x7fdb52caf020" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cb0c30" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0x7fdb52cb2760" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cb24e0" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0x7fdb52cb02a0" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
          <long>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cb0020" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0x7fdb52c86850" loc="60:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
          <long>&#10; This event is fired when the specified timeout period expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0x7fdb52c87910" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7fdb53017580"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0x7fdb52c87690" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7fdb53017580"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb52c860e0" loc="55:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0x7fdb52c8ae20" loc="45:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7fdb52c850e0" loc="65:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
          <long>&#10; Returns the current time as measured by the radio stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7fdb53017580"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="37:../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0x7fdb52c7f550" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="69:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
          <long>&#10; Clears all metadata and sets all default values in the headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c7f2d0" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fdb52c82860" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c825e0" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb52c80020" loc="61:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fdb52c816b0" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
          <long>&#10; Sets the length of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c810d0" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7fdb52c81420" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7fdb52c89cc0" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c89a40" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7fdb52c80ab0" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="63:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c80830" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb52ccfbb0" loc="46:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7fdb52ccf390" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ccf110" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7fdb52cce750" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
          <long>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cce4d0" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0x7fdb52ccc020" loc="59:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0x7fdb52cccba0" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ccc920" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0x7fdb52ccabc0" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
          <long>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cca940" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0x7fdb52cc3e00" loc="86:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
          <long>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0x7fdb52cc3630" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb52cc3020" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fdb52cc33a0" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7fdb52cc70b0" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
          <long>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cc8df0" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0x7fdb52cc7bc0" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cc7940" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0x7fdb52cc5b00" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb52cc54f0" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fdb52cc5870" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0x7fdb52cc9720" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
          <long>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7fdb52cc85c0" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cc8020" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fdb52cc8330" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7fdb52cc46c0" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cc4440" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0x7fdb52c96d60" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c96ae0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0x7fdb52c97490" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c97210" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0x7fdb52ca3940" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ca3370" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0x7fdb52ca36b0" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0x7fdb52ca0b10" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ca0890" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0x7fdb52c91bd0" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c915f0" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52c91940" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0x7fdb52ca0020" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ca2ca0" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0x7fdb52c962f0" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c97cf0" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0x7fdb52c96060" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0x7fdb52c9e630" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb52c9e020" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fdb52c9e3a0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0x7fdb52c92e20" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c92ba0" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0x7fdb52ca2430" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ca21b0" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0x7fdb52c9b2a0" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c9b020" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0x7fdb52c9c630" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb52c9c020" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fdb52c9c3a0" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0x7fdb52c8d390" loc="178:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7fdb530159c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7fdb52c8f680" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c8f400" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7fdb52c8eb70" loc="173:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7fdb530155a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0x7fdb52c923a0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c93d90" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52c92110" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0x7fdb52c9f630" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c9f3b0" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0x7fdb52c989d0" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
          <long>&#10; Sets the frame pending field in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c98400" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0x7fdb52c98740" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0x7fdb52c95b40" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c95570" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0x7fdb52c958b0" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fdb52c8ddc0" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c8db40" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7fdb52c9a0c0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
          <long>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c9baa0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7fdb52c9bdb0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0x7fdb52ca4b60" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52ca48e0" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7fdb52c8e2a0" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c8e020" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0x7fdb52c935f0" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c93370" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0x7fdb52c9abc0" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52c9a940" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x7fdb52cbe8b0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
          <long>&#10; Sets the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cbe2d0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0x7fdb52cbe620" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0x7fdb52cbc0e0" loc="58:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x7fdb52cbf020" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cd0ce0" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x7fdb52cbfab0" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cbf830" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0x7fdb52cb75f0" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cb7370" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0x7fdb52cb8a10" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
          <long>&#10; Returns the initial amount of maximum backoff for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cb8790" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0x7fdb52cb7e40" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0x7fdb52cb5960" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52cb56e0" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb52c1e8a0" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb52c1e8a0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fdb52c1eae0" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fdb52c17800" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fdb52c1a7e0" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7fdb52c19e10" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fdb52c19840" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7fdb52c19b80" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fdb52c19020" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fdb52c16020" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fdb52c1b680" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fdb52c1b400" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52c1eae0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb52c1a020" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="38:../../tos/lib/rfxlink/util/BareSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb52bdd2a0" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52bdd020" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb52bdcdd0" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52bdcb50" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb52bdc2b0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52bddbc0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fdb52bdc020" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="37:../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7fdb52bda8d0" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
              <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52bda610" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7fdb52bc76a0" loc="50:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7fdb52bc6600" loc="60:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7fdb52bc7e80" loc="55:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7fdb52bcbdf0" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7fdb52bcb810" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fdb53068210"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7fdb52bcbb60" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb530685f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7fdb52b1f8e0" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fdb52b1e270" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7fdb52b19a10" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fdb52b191f0" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7fdb52b1c0e0" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7fdb52b1c940" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7fdb52b10b50" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb52b1ab00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fdb52b108d0" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb52b1ab00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7fdb52b15a80" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7fdb52b12620" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb52b1ab00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fdb52b123a0" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb52b1ab00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fdb52b10020" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb52b1ab00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="38:../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7fdb529a4020" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
              <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb529a5d30" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0x7fdb529a5390" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb529a5110" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="38:../../tos/lib/rfxlink/util/RadioState.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="turnOff" ref="0x7fdb52939d10" loc="45:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7fdb52936e60" loc="57:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7fdb52934920" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7fdb529346a0" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0x7fdb52933120" loc="70:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="66:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0x7fdb52936600" loc="51:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
          <long>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7fdb529339d0" loc="75:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="72:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="38:../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0x7fdb52931730" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb529314b0" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0x7fdb52930bc0" loc="64:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb52930350" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fdb529300d0" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../tos/interfaces/Random.nc">
      <documentation loc="34:../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7fdb528b9e50" loc="52:../../tos/interfaces/Random.nc">
        <documentation loc="48:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7fdb528b9650" loc="46:../../tos/interfaces/Random.nc">
        <documentation loc="42:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb53a9d170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7fdb5288de30" loc="53:../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7fdb5288de30"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7fdb5288a9a0" loc="64:../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7fdb5288de30"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7fdb5288a720" loc="64:../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7fdb5288de30"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="37:../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0x7fdb528620b0" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="54:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52864db0" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb52868e60" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
          <long>&#10; Returns if the flag is set for this message. &#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52868be0" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0x7fdb52865c10" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
          <long>&#10; Sets the flag in this message to the specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52865650" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7fdb52865980" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52864650" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb528643d0" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="38:../../tos/lib/rfxlink/util/RadioCCA.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="done" ref="0x7fdb52831460" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fdb528311e0" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fdb528349c0" loc="45:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb527ad460" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb527ad460"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fdb527ad6a0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb527ad6a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fdb527ab020" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb527ad6a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fdb527aa120" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fdb527ab8a0" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fdb527aa880" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7fdb5277cb20" loc="89:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7fdb5277d8e0" loc="85:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7fdb527805a0" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7fdb5277c350" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7fdb5277c0d0" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7fdb5277d110" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb5277fe30" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7fdb5277b5c0" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7fdb5277b340" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7fdb52780d40" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7fdb5277f710" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb5277f490" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x7fdb5276b910" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x7fdb5276d880" loc="68:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x7fdb5276c030" loc="74:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x7fdb5276c860" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7fdb5276a190" loc="98:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x7fdb5276b0e0" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7fdb5276e5e0" loc="57:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7fdb530ebda0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7fdb530ea230"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7fdb5276d040" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7fdb530ebda0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7fdb530ea230"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7fdb5276eda0" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7fdb530ebda0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7fdb530ea230"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7fdb527790d0" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb527790d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7fdb527759f0" loc="74:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fdb52777bf0" loc="58:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb52779a10" loc="48:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb527790d0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fdb52776390" loc="62:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7fdb527741f0" loc="80:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52777440" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb527790d0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7fdb527771c0" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb527790d0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fdb52776b00" loc="65:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb52775270" loc="68:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7fdb5278e430" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fdb5278e430"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7fdb52787020" loc="98:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7fdb52789020" loc="87:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb5278ed60" loc="61:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fdb5278e430"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7fdb52787a00" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7fdb52787780" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7fdb52786270" loc="110:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fdb5278b7b0" loc="75:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fdb5278b020" loc="70:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7fdb527897e0" loc="93:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb5278c760" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fdb5278e430"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7fdb5278c4e0" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7fdb5278e430"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fdb5278a020" loc="78:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb5278a770" loc="81:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb52574020" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb52574020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fdb52574260" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52574260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7fdb52574d90" loc="66:../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52574260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fdb52574b10" loc="66:../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52574260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7fdb52577610" loc="54:../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7fdb525767d0" loc="66:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fdb52576020" loc="61:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fdb52577d30" loc="61:../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7fdb5257ad70" loc="53:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7fdb5257e020" loc="62:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb52581ca0" loc="62:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7fdb5257d3c0" loc="74:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb5257d140" loc="74:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7fdb5257e890" loc="68:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7fdb5257de50" loc="81:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb5257dbd0" loc="81:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7fdb52485350" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52485350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7fdb5247d2a0" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7fdb5247d020" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7fdb5247e020" loc="76:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb52485c90" loc="47:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52485350"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fdb52481110" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52485350"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7fdb52482e10" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52485350"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fdb524818c0" loc="64:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7fdb5247e7e0" loc="82:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52482670" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52485350"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7fdb524823f0" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb52485350"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fdb52480070" loc="67:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb524807c0" loc="70:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb524633b0" loc="76:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7fdb52464a00" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7fdb52464d90" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52463110" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb52460980" loc="88:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7fdb52461bd0" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7fdb52460020" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52460360" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fdb524606d0" loc="89:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7fdb52466440" loc="45:../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7fdb524661c0" loc="45:../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x7fdb5244c1f0" loc="86:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x7fdb52442070" loc="126:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x7fdb52447a00" loc="117:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x7fdb52442a90" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x7fdb52442810" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x7fdb5244ea10" loc="83:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x7fdb524455c0" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x7fdb52445340" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7fdb524490b0" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x7fdb5244add0" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7fdb5244b190" loc="97:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x7fdb5243d4e0" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x7fdb5243d260" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x7fdb52449850" loc="114:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x7fdb52441c10" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x7fdb52441990" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7fdb52440b70" loc="136:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x7fdb524448a0" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x7fdb52444620" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x7fdb5243eb10" loc="140:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x7fdb524463f0" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x7fdb52446170" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7fdb5244bb70" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb5244b8f0" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7fdb524472a0" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x7fdb52447020" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x7fdb52445e30" loc="123:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x7fdb52441270" loc="129:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x7fdb52440390" loc="132:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x7fdb5243e350" loc="138:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x7fdb52446b70" loc="120:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fdb5244c980" loc="89:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7fdb5244a5b0" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb5244a330" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fdb523ef190" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb523ef9e0" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x7fdb5238ba20" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7fdb52387020" loc="87:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7fdb5238eac0" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7fdb52386270" loc="91:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7fdb52387a10" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7fdb52387790" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7fdb5238ad80" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb5238ab00" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7fdb52386c70" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7fdb523869f0" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7fdb5238b2b0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x7fdb52388750" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb523884d0" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7fdb5238a3e0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb5238a160" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../tos/interfaces/Read.nc">
      <documentation loc="33:../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7fdb5219b4a0" loc="49:../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fdb5219b4a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7fdb5219bd60" loc="55:../../tos/interfaces/Read.nc">
        <documentation loc="50:../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7fdb52198ac0" loc="63:../../tos/interfaces/Read.nc">
        <documentation loc="57:../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fdb5219b4a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fdb52198510" loc="63:../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7fdb52198830" loc="63:../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fdb5219b4a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x7fdb5218a4b0" loc="32:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7fdb5218dbb0" loc="25:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x7fdb5218ad00" loc="39:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7fdb52182390" loc="52:../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fdb52182390"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7fdb52182c90" loc="58:../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7fdb52181a20" loc="66:../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fdb52182390"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fdb52181470" loc="66:../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7fdb52181790" loc="66:../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fdb52182390"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7fdb521719c0" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7fdb52172c50" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x7fdb52171020" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x7fdb521713a0" loc="101:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x7fdb52171710" loc="101:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7fdb5216fb90" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb52170a40" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x7fdb52170d80" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x7fdb5216f110" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x7fdb5216f4f0" loc="120:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x7fdb5216f8d0" loc="120:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7fdb521763c0" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7fdb52177660" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x7fdb521779e0" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x7fdb52177d60" loc="71:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x7fdb52176110" loc="71:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb52174d10" loc="91:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7fdb52174430" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb52176e30" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x7fdb521741a0" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x7fdb5215ec00" loc="114:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x7fdb52166790" loc="53:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb531136c0"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x7fdb53113b90"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x7fdb5215b020" loc="140:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7fdb5215cd30" loc="140:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x7fdb5215d4c0" loc="122:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x7fdb52162560" loc="82:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x7fdb521652a0" loc="58:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb531136c0"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x7fdb53113b90"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x7fdb52165020" loc="58:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb531136c0"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x7fdb53113b90"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x7fdb521614e0" loc="91:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x7fdb5215c4d0" loc="133:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb5215b820" loc="150:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x7fdb52162cc0" loc="86:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x7fdb521604b0" loc="99:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x7fdb52161c90" loc="95:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7fdb52160c40" loc="106:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x7fdb5215dc90" loc="127:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x7fdb52163560" loc="69:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb5310c590"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x7fdb5310cc70"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x7fdb521632e0" loc="69:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb5310c590"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x7fdb5310cc70"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x7fdb5215e4b0" loc="110:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x7fdb52165ae0" loc="64:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb5310c590"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x7fdb5310cc70"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7fdb52163d70" loc="75:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7fdb52159400" loc="156:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb52159180" loc="156:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fdb520e2420" loc="56:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7fdb520e1500" loc="73:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fdb520e6b40" loc="46:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fdb520e2c90" loc="65:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fdb520e1e30" loc="81:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7fdb5206a020" loc="62:../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb51fdc5e0" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb51fdc020" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51fdc350" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fdb51fd7bb0" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb51fd75b0" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51fd78e0" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb51fdbd20" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb51fda900" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb51fda680" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb51fd9e00" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb51fd9820" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fdb51fd9b70" loc="100:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7fdb51eec670" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb51eec060" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7fdb51eec3e0" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7fdb51eee820" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7fdb51eed6d0" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb51eed0d0" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb53000a60"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52ffd0d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7fdb51eed440" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fdb51eb5760" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb51eb4020" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7fdb51eb3e10" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7fdb51eb36a0" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7fdb51ebd770" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7fdb51ebcbe0" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7fdb51eb9840" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb51eb95c0" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7fdb51ebb4a0" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7fdb51ebc350" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb51ebc0d0" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7fdb51eb80e0" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7fdb51ebbd50" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7fdb51ec4190" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7fdb51ec4ac0" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7fdb51ec57b0" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7fdb51ec5530" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7fdb51ec3690" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fdb51ec3410" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7fdb51ec03e0" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7fdb51ebf030" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb51ec0d80" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7fdb51ebfb00" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fdb51ebf880" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb51d8ac40" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fdb51d8a670" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51d8a9b0" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7fdb51d85a70" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fdb51d857f0" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fdb51d84890" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fdb51d842c0" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51d84600" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7fdb51d86610" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7fdb51d822c0" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fdb51d81820" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51d81b60" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fdb51d82020" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7fdb51d85020" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb51d89610" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fdb51d88bd0" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51d89020" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb53a9e610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fdb51d89370" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb51d625b0" loc="50:../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fdb51d62330" loc="50:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7fdb51d62df0" loc="59:../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fdb51d60cf0" loc="69:../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fdb51d60700" loc="69:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7fdb51d60a60" loc="69:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7fdb51d5eb50" loc="79:../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:../../tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:../../tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7fdb51d4b820" loc="44:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7fdb51d4c910" loc="42:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x7fdb51d47110" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb51d49e60" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7fdb51d49070" loc="47:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7fdb51d50980" loc="40:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7fdb51d4c190" loc="41:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7fdb51d4b0e0" loc="43:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fdb53185020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x7fdb51d4a020" loc="45:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb531b4500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7fdb51d4a950" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb51d4a6d0" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7fdb51d49790" loc="48:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb53a9fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
