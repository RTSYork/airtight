<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="24:MCCC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdcf744b0"/></from>
      <to><interface-ref name="FlowSend" scoped="" ref="0x7f7bdd421a90"/></to>
    </wire>
    <wire loc="25:MCCC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f7bdd41e7d0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f7bde62a0c0"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f7bde62a0c0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f7bde627db0"/></to>
    </wire>
    <wire loc="27:MCCC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd41b120"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bde238790"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bde238790"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bde20a0c0"/></to>
    </wire>
    <wire loc="28:MCCC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdd41c440"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bde239b00"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bde239b00"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bde20b410"/></to>
    </wire>
    <wire loc="30:MCCC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bdd41edd0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bde62d890"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bde62d890"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bde4532a0"/></to>
    </wire>
    <wire loc="31:MCCC.nc">
      <from><interface-ref name="MacControl" scoped="" ref="0x7f7bdd41a850"/></from>
      <to><interface-ref name="MacPowerControl" scoped="" ref="0x7f7bde898020"/></to>
    </wire>
    <wire loc="36:TdmaMacC.nc">
      <from><interface-ref name="MacPowerControl" scoped="" ref="0x7f7bde898020"/></from>
      <to><interface-ref name="MacPowerControl" scoped="" ref="0x7f7bde7aedc0"/></to>
    </wire>
    <wire loc="32:MCCC.nc">
      <from><interface-ref name="MacSend" scoped="" ref="0x7f7bdd418020"/></from>
      <to><interface-ref name="MacSend" scoped="" ref="0x7f7bde823c80"/></to>
    </wire>
    <wire loc="40:TdmaMacC.nc">
      <from><interface-ref name="MacSend" scoped="" ref="0x7f7bde823c80"/></from>
      <to><interface-ref name="MacSend" scoped="" ref="0x7f7bde7af860"/></to>
    </wire>
    <wire loc="33:MCCC.nc">
      <from><interface-ref name="MacReceive" scoped="" ref="0x7f7bdd418d30"/></from>
      <to><interface-ref name="MacReceive" scoped="" ref="0x7f7bde81f680"/></to>
    </wire>
    <wire loc="41:TdmaMacC.nc">
      <from><interface-ref name="MacReceive" scoped="" ref="0x7f7bde81f680"/></from>
      <to><interface-ref name="MacReceive" scoped="" ref="0x7f7bde7ae690"/></to>
    </wire>
    <wire loc="34:MCCC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bdd4173f0"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde89c020"/></to>
    </wire>
    <wire loc="37:TdmaMacC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde89c020"/></from>
      <to><interface-ref name="Frame" scoped="" ref="0x7f7bde7b0c60"/></to>
    </wire>
    <wire loc="49:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdcfd3020"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x7f7bdd166bc0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x7f7bdd160b50"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdd1d5770"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdd372540"/></to>
    </wire>
    <wire loc="65:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdd0013c0"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdc8a9420"/></to>
    </wire>
    <wire loc="120:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bdda3d600"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bddc58b40"/></to>
    </wire>
    <wire loc="52:../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bddd1c080"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bdca12760"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdca41b60"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdcb06460"/></to>
    </wire>
    <wire loc="47:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdcb95d90"/></to>
    </wire>
    <wire loc="49:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bde428b30"/></to>
    </wire>
    <wire loc="36:MCCC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdd6fc700"/></to>
    </wire>
    <wire loc="58:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bdd6fc700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdd64b1e0"/></to>
    </wire>
    <wire loc="37:MCCC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f7bdd6fc0c0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f7bde62a0c0"/></to>
    </wire>
    <wire loc="33:TdmaMacC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bde89e020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bde7b0550"/></to>
    </wire>
    <wire loc="45:TdmaMacC.nc">
      <from><interface-ref name="Slotter" scoped="" ref="0x7f7bde77db40"/></from>
      <to><interface-ref name="Slotter" scoped="" ref="0x7f7bde634ba0"/></to>
    </wire>
    <wire loc="45:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Slotter" scoped="" ref="0x7f7bde634ba0"/></from>
      <to><interface-ref name="Slotter" scoped="" ref="0x7f7bde425ac0"/></to>
    </wire>
    <wire loc="46:TdmaMacC.nc">
      <from><interface-ref name="SlotterControl" scoped="" ref="0x7f7bde777130"/></from>
      <to><interface-ref name="SlotterControl" scoped="" ref="0x7f7bde631300"/></to>
    </wire>
    <wire loc="53:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="SlotterControl" scoped="" ref="0x7f7bde631300"/></from>
      <to><interface-ref name="SlotterControl" scoped="" ref="0x7f7bde424150"/></to>
    </wire>
    <wire loc="47:TdmaMacC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde783330"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde630330"/></to>
    </wire>
    <wire loc="46:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde630330"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde423180"/></to>
    </wire>
    <wire loc="50:TdmaMacC.nc">
      <from><interface-ref name="RadioPowerControl" scoped="" ref="0x7f7bde761460"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bde23e020"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bde23e020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bde2102e0"/></to>
    </wire>
    <wire loc="51:TdmaMacC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bde78d4e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bde238790"/></to>
    </wire>
    <wire loc="52:TdmaMacC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bde79d020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bde239b00"/></to>
    </wire>
    <wire loc="53:TdmaMacC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bde79f9a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bde62d890"/></to>
    </wire>
    <wire loc="54:TdmaMacC.nc">
      <from><interface-ref name="ACK" scoped="" ref="0x7f7bde75d890"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde236e40"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde236e40"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde209800"/></to>
    </wire>
    <wire loc="55:TdmaMacC.nc">
      <from><interface-ref name="phyDataSend" scoped="" ref="0x7f7bde758020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bde23c050"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:TdmaMacC.nc">
      <from><interface-ref name="phyDataReceive" scoped="" ref="0x7f7bde758d50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bde23b210"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:TdmaMacC.nc">
      <from><interface-ref name="phyNotificationSend" scoped="" ref="0x7f7bde74fa10"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bde23c050"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:TdmaMacC.nc">
      <from><interface-ref name="phyNotificationReceive" scoped="" ref="0x7f7bde759890"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bde23b210"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:TdmaMacC.nc">
      <from><interface-ref name="forwardQueue" scoped="" ref="0x7f7bde7689a0"/></from>
      <to><interface-ref name="PCQ" scoped="" ref="0x7f7bdd710da0"/></to>
    </wire>
    <wire loc="17:PrioCritQueueC.nc">
      <from><interface-ref name="PCQ" scoped="" ref="0x7f7bdd710da0"/></from>
      <to><interface-ref name="PrioCritQueue" scoped="" ref="0x7f7bdc844770"/></to>
    </wire>
    <wire loc="66:TdmaMacC.nc">
      <from><interface-ref name="GlobalTime" scoped="" ref="0x7f7bde749cc0"/></from>
      <to><interface-ref name="GlobalTime" scoped="" ref="0x7f7bdd6fb770"/></to>
    </wire>
    <wire loc="56:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="GlobalTime" scoped="" ref="0x7f7bdd6fb770"/></from>
      <to><interface-ref name="GlobalTime" scoped="" ref="0x7f7bdd649060"/></to>
    </wire>
    <wire loc="67:TdmaMacC.nc">
      <from><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f7bde733dc0"/></from>
      <to><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f7bdd6f98c0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f7bdd6f98c0"/></from>
      <to><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f7bdd646120"/></to>
    </wire>
    <wire loc="68:TdmaMacC.nc">
      <from><interface-ref name="TimeSyncMode" scoped="" ref="0x7f7bde72fe20"/></from>
      <to><interface-ref name="TimeSyncMode" scoped="" ref="0x7f7bdd6f8970"/></to>
    </wire>
    <wire loc="61:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncMode" scoped="" ref="0x7f7bdd6f8970"/></from>
      <to><interface-ref name="TimeSyncMode" scoped="" ref="0x7f7bdd645080"/></to>
    </wire>
    <wire loc="70:TdmaMacC.nc">
      <from><interface-ref name="FaultClearTimer" scoped="" ref="0x7f7bde73ca40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bdd7c0b00"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdd7c0b00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddab22e0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="47:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f7bde62c770"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f7bde425310"/></to>
    </wire>
    <wire loc="44:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f7bde417a90"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f7bde62a0c0"/></to>
    </wire>
    <wire loc="50:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bde422290"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bde2484e0"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bde2484e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bdcc1e890"/></to>
    </wire>
    <wire loc="54:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bde418440"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bde62d890"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f7bde464470"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f7bde9bc9d0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f7bde9bc9d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f7bde8e7e40"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde463020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f7bdd92f680"/></to>
    </wire>
    <wire loc="123:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde463020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f7bdda3ea60"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde463020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bde626020"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bde626020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bde61d380"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde463720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f7bde625020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdd049c60"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f7bde625020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bde3212a0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f7bde61f1d0"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f7bde489690"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7f7bde61c180"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bde489020"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f7bde61da60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bde42d2e0"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f7bde61da60"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde624ae0"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde624ae0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde6125f0"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f7bde6151e0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f7bde625020"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7f7bde60bb20"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7f7bde5ff060"/></to>
    </wire>
    <wire loc="141:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7f7bde5ff060"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f7bde574da0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f7bde611e60"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f7bde6151e0"/></to>
    </wire>
    <wire loc="191:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7f7bde5cacb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bde4da160"/></to>
    </wire>
    <wire loc="165:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7f7bde5e64e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f7bde5492b0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f7bde5492b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcde2e20"/></to>
    </wire>
    <wire loc="176:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7f7bde5d9350"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f7bde5378f0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f7bde5378f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd703f0"/></to>
    </wire>
    <wire loc="185:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7f7bde5d0cb0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f7bde528c10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f7bde528c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdccfc3f0"/></to>
    </wire>
    <wire loc="196:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x7f7bde5c2060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bde4c06d0"/></to>
    </wire>
    <wire loc="143:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7f7bde5fd670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f7bde5712b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f7bde5712b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcf130a0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7f7bde5d2670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f7bde52a8f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f7bde52a8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd03e20"/></to>
    </wire>
    <wire loc="146:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7f7bde5fbcb0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f7bde569a20"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f7bde569a20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcebb060"/></to>
    </wire>
    <wire loc="157:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7f7bde5efcb0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f7bde557020"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f7bde557020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdce490a0"/></to>
    </wire>
    <wire loc="168:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7f7bde5e2e40"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f7bde545760"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f7bde545760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcdd86d0"/></to>
    </wire>
    <wire loc="179:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7f7bde5d6cb0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f7bde534da0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f7bde534da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd67e20"/></to>
    </wire>
    <wire loc="138:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7f7bde604800"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f7bde5788f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f7bde5788f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcf2d0a0"/></to>
    </wire>
    <wire loc="149:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7f7bde5f7670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f7bde565020"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f7bde565020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdceb29b0"/></to>
    </wire>
    <wire loc="160:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7f7bde5eb670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f7bde5545d0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f7bde5545d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdce409b0"/></to>
    </wire>
    <wire loc="171:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7f7bde5de670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f7bde542c10"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f7bde542c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcdce0a0"/></to>
    </wire>
    <wire loc="188:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7f7bde5cc670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f7bde5242b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f7bde5242b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdccf3e20"/></to>
    </wire>
    <wire loc="194:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7f7bde5c5b20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bde4ca160"/></to>
    </wire>
    <wire loc="174:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7f7bde5dccb0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f7bde5395d0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f7bde5395d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd77e20"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f7bde574da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcf249b0"/></to>
    </wire>
    <wire loc="152:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7f7bde5f3020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f7bde5625d0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f7bde5625d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcea83f0"/></to>
    </wire>
    <wire loc="192:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7f7bde5c84e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bde4d6c90"/></to>
    </wire>
    <wire loc="155:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7f7bde5f1670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f7bde55ad30"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f7bde55ad30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdce50a60"/></to>
    </wire>
    <wire loc="166:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7f7bde5e5800"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f7bde548440"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f7bde548440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcdde0a0"/></to>
    </wire>
    <wire loc="177:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7f7bde5d8670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f7bde536a80"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f7bde536a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd6d6d0"/></to>
    </wire>
    <wire loc="186:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7f7bde5ce020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f7bde527da0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f7bde527da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdccf96d0"/></to>
    </wire>
    <wire loc="144:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7f7bde5fc990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f7bde570440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f7bde570440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcf103f0"/></to>
    </wire>
    <wire loc="147:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7f7bde5f9020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f7bde568c10"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f7bde568c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdceb83f0"/></to>
    </wire>
    <wire loc="158:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7f7bde5ed020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f7bde5562b0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f7bde5562b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdce463f0"/></to>
    </wire>
    <wire loc="169:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7f7bde5e0060"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f7bde5448f0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f7bde5448f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcdd59b0"/></to>
    </wire>
    <wire loc="180:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7f7bde5d4020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f7bde532020"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f7bde532020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd630a0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7f7bde603b20"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f7bde576a80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f7bde576a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcf2a3f0"/></to>
    </wire>
    <wire loc="150:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7f7bde5f6990"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f7bde5642b0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f7bde5642b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdceafe20"/></to>
    </wire>
    <wire loc="161:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7f7bde5ea990"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f7bde553760"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f7bde553760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdce3de20"/></to>
    </wire>
    <wire loc="189:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7f7bde5cb990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f7bde523440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f7bde523440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdccef0a0"/></to>
    </wire>
    <wire loc="164:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7f7bde5e7020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f7bde54a020"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f7bde54a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcde5c90"/></to>
    </wire>
    <wire loc="175:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7f7bde5da020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f7bde538760"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f7bde538760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd730a0"/></to>
    </wire>
    <wire loc="184:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7f7bde5d1990"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f7bde529a80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f7bde529a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdccff0a0"/></to>
    </wire>
    <wire loc="195:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7f7bde5c4e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bde4c6c90"/></to>
    </wire>
    <wire loc="142:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7f7bde5fe350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f7bde572020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f7bde572020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcf21e20"/></to>
    </wire>
    <wire loc="153:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7f7bde5f2350"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f7bde561760"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f7bde561760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcea56d0"/></to>
    </wire>
    <wire loc="182:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7f7bde5d3350"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f7bde52b7a0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f7bde52b7a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd06c90"/></to>
    </wire>
    <wire loc="156:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7f7bde5f0990"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f7bde559e60"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f7bde559e60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdce4de20"/></to>
    </wire>
    <wire loc="167:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7f7bde5e4b20"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f7bde5475d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f7bde5475d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcddb3f0"/></to>
    </wire>
    <wire loc="178:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7f7bde5d7990"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f7bde535c10"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f7bde535c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd6a9b0"/></to>
    </wire>
    <wire loc="187:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7f7bde5cd350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f7bde525020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f7bde525020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdccf69b0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7f7bde613530"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f7bde5796b0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f7bde5796b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcf31da0"/></to>
    </wire>
    <wire loc="148:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7f7bde5f8350"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f7bde567da0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f7bde567da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdceb56d0"/></to>
    </wire>
    <wire loc="159:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7f7bde5ec350"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f7bde555440"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f7bde555440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdce436d0"/></to>
    </wire>
    <wire loc="170:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7f7bde5df350"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f7bde543a80"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f7bde543a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcdd2e20"/></to>
    </wire>
    <wire loc="193:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7f7bde5c7800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bde4d06d0"/></to>
    </wire>
    <wire loc="173:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7f7bde5dd990"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f7bde53b3f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f7bde53b3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcd7ac90"/></to>
    </wire>
    <wire loc="162:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7f7bde5e9cb0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f7bde5518f0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f7bde5518f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdce390a0"/></to>
    </wire>
    <wire loc="140:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7f7bde602e40"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f7bde575c10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f7bde575c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdcf276d0"/></to>
    </wire>
    <wire loc="151:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7f7bde5f5cb0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f7bde563440"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f7bde563440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f7bdceab0a0"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde8e6d30"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f7bde8e02c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f7bde8fd3b0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f7bde8c2330"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f7bddbb1cb0"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bde42d2e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bde456c30"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f7bde452a00"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f7bde454a00"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f7bde454a00"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x7f7bde603b20"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f7bde451ca0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f7bde432ce0"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f7bde432ce0"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x7f7bde604800"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f7bde44f020"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f7bde42e020"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f7bde42e020"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x7f7bde613530"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f7bdcc160a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bdcc237c0"/></to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bdcc237c0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bdcc0dd90"/></to>
    </wire>
    <wire loc="38:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bdcc1ac00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bde2ce290"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bde2ce290"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bde2890f0"/></to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f7bdcc080b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bde3daa90"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bde3daa90"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bde3b6b80"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f7bdcc03570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f7bde3c1650"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bde3cdd80"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bde3ae020"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f7bde3c5bf0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f7bde3ad850"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f7bde3c1650"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f7bde3a85a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f7bde3c1650"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f7bde3a4ba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f7bde3c1650"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f7bde39f120"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bde321a10"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bde3daa90"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f7bde287540"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bde2c6290"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bde2c6290"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bde2c0020"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bde2ad280"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bde3daa90"/></to>
    </wire>
    <wire loc="75:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bde2102e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bde1e7080"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f7bde2394f0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f7bde20cd60"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f7bde20cd60"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f7bde1e4bb0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bde20b410"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f7bde1e2a10"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bde23c050"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bde20f320"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bde20f320"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bde1e61d0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f7bde23bdf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f7bde20c1d0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f7bde20c1d0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f7bde1e4020"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde22e8a0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde208320"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde208320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde1c7320"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bde23b210"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bde20e510"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bde20e510"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bde1e53f0"/></to>
    </wire>
    <wire loc="85:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde209800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde1d0800"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f7bde226bf0"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f7bde208e10"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f7bde208e10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f7bde1c7e10"/></to>
    </wire>
    <wire loc="83:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bde20a0c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bde1e32d0"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f7bde222960"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f7bde207ad0"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f7bde207ad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f7bde1c6ad0"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f7bde2199e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bde1f68a0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bde1f68a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bde1b9270"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde218af0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde1ee970"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde1ee970"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde1b53f0"/></to>
    </wire>
    <wire loc="254:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bde1e7080"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bdddf0880"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bde1fba00"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bde1be1c0"/></to>
    </wire>
    <wire loc="345:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bde1be1c0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bdda5c3b0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f7bde1e4bb0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f7bddfd73a0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f7bde1e2a10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bddfda720"/></to>
    </wire>
    <wire loc="136:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bde1e61d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bddfd9530"/></to>
    </wire>
    <wire loc="138:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f7bde1e4020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f7bddfd8b00"/></to>
    </wire>
    <wire loc="91:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bde1fe400"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bde1c3c90"/></to>
    </wire>
    <wire loc="343:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bde1c3c90"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bdda60e80"/></to>
    </wire>
    <wire loc="255:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde1c7320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdddd9270"/></to>
    </wire>
    <wire loc="137:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bde1e53f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bddfd83a0"/></to>
    </wire>
    <wire loc="309:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bde1b9270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bddaa5020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bde1f7270"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bde1bcd70"/></to>
    </wire>
    <wire loc="347:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bde1bcd70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdda52a40"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bde200df0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bde1c56d0"/></to>
    </wire>
    <wire loc="344:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bde1c56d0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bdda56e70"/></to>
    </wire>
    <wire loc="288:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde1d0800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bddcd9560"/></to>
    </wire>
    <wire loc="226:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f7bde1c7e10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f7bdddfbd60"/></to>
    </wire>
    <wire loc="140:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bde1e32d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bddfdb020"/></to>
    </wire>
    <wire loc="264:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f7bde1c6ad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f7bddd645f0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bde1f34c0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bde1bc510"/></to>
    </wire>
    <wire loc="346:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bde1bc510"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bdda521e0"/></to>
    </wire>
    <wire loc="310:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde1b53f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bddaa9020"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bdddf0880"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f7bdddd9d90"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bdda5c3b0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bdda36a40"/></to>
    </wire>
    <wire loc="172:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f7bde1df020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f7bddf25d30"/></to>
    </wire>
    <wire loc="160:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0x7f7bde1d72c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f7bddf59390"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f7bddf59390"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f7bdcb039d0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f7bddfd73a0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f7bdcb58420"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bddaa9020"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdc986360"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bddfd9530"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bdcb5a6c0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f7bddfd8b00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f7bdcb59c90"/></to>
    </wire>
    <wire loc="173:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bde1c83c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bdde46dd0"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bdde46dd0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bdca962e0"/></to>
    </wire>
    <wire loc="174:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f7bde1d1890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bddf54e00"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdddd9270"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdca1a640"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bdda60e80"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bdda39550"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bddfd83a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdcb59530"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bddfda720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdcb5b8b0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bddaa5020"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdc9822a0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdda52a40"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdd934020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bdda56e70"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bdda2f560"/></to>
    </wire>
    <wire loc="170:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0x7f7bde1d9a60"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f7bddf26a50"/></to>
    </wire>
    <wire loc="117:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f7bdddfbd60"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f7bdddf6100"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bddfdb020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdcb5c270"/></to>
    </wire>
    <wire loc="171:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0x7f7bde1e0840"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f7bddf25760"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f7bddd645f0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f7bdca10d00"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bdda521e0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bdda2c8b0"/></to>
    </wire>
    <wire loc="116:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bde119880"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bdde49e00"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bdde49e00"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bdca99020"/></to>
    </wire>
    <wire loc="117:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bde1128d0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bde084480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f7bde111160"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bddaa5020"/></to>
    </wire>
    <wire loc="119:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0x7f7bde115020"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda61d90"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda61d90"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda3a470"/></to>
    </wire>
    <wire loc="124:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bde082020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bdda51dd0"/></to>
    </wire>
    <wire loc="101:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bdda51dd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bdd939ac0"/></to>
    </wire>
    <wire loc="125:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f7bde083140"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f7bde1b0e50"/></to>
    </wire>
    <wire loc="131:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bddfd48c0"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f7bde135e30"/></to>
    </wire>
    <wire loc="132:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bddfd58f0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f7bddfce880"/></to>
    </wire>
    <wire loc="133:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bddfd42b0"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0x7f7bddee3020"/></to>
    </wire>
    <wire loc="134:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bddfd7a30"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0x7f7bddee3630"/></to>
    </wire>
    <wire loc="149:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f7bddfcdc00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f7bddf59390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bddfcd310"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0x7f7bddee45d0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bddf23390"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bdde49e00"/></to>
    </wire>
    <wire loc="166:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bddf1f2b0"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f7bddf187c0"/></to>
    </wire>
    <wire loc="167:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bddf1fbe0"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f7bddee5120"/></to>
    </wire>
    <wire loc="168:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f7bddf20470"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bddee5730"/></to>
    </wire>
    <wire loc="182:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bddee24a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdde10840"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdde10840"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdca429b0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bddee2dd0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdde44e60"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bdde44e60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdca94440"/></to>
    </wire>
    <wire loc="184:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bddee1410"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdde44080"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdde44080"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdca95590"/></to>
    </wire>
    <wire loc="190:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bdde43500"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdddfaa10"/></to>
    </wire>
    <wire loc="115:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdddfaa10"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f7bdddf88c0"/></to>
    </wire>
    <wire loc="194:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdde42440"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdddfb790"/></to>
    </wire>
    <wire loc="114:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bdddfb790"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f7bdddf82b0"/></to>
    </wire>
    <wire loc="217:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bdde0dbe0"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0x7f7bde14be40"/></to>
    </wire>
    <wire loc="218:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bdde0fa70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdde06e40"/></to>
    </wire>
    <wire loc="113:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdde06e40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f7bdddf9950"/></to>
    </wire>
    <wire loc="219:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f7bdde0c720"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f7bde164390"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f7bde164390"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f7bdcb943d0"/></to>
    </wire>
    <wire loc="220:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bdde0b400"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bde163150"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdddf7720"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bddcd9560"/></to>
    </wire>
    <wire loc="232:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bdddf9950"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bddddb440"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bddddb440"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f7bdddd88c0"/></to>
    </wire>
    <wire loc="233:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdddf82b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bddddbd70"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bddddbd70"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f7bdddd62b0"/></to>
    </wire>
    <wire loc="234:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bdddf88c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdddda3d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdddda3d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f7bdddd68c0"/></to>
    </wire>
    <wire loc="250:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f7bdddd9d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bddd67a10"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bddd67a10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bdca13bf0"/></to>
    </wire>
    <wire loc="251:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bdddd88c0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bddd655d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bddd655d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdca12d70"/></to>
    </wire>
    <wire loc="252:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdddd62b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bddd64020"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bddd64020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdca10730"/></to>
    </wire>
    <wire loc="253:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bdddd68c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bddaa3c20"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f7bddaa3c20"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdc96d020"/></to>
    </wire>
    <wire loc="260:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f7bddd628b0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f7bddd0d1d0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f7bddd0d1d0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f7bdc9d4660"/></to>
    </wire>
    <wire loc="261:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddd61270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdde0f270"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdde0f270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdca41400"/></to>
    </wire>
    <wire loc="262:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f7bddd63aa0"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f7bdda74b60"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f7bdda74b60"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f7bdda6d410"/></to>
    </wire>
    <wire loc="263:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f7bddd63020"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f7bde1b0e50"/></to>
    </wire>
    <wire loc="268:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdde0d440"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddd0dac0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddd0dac0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdc9d3020"/></to>
    </wire>
    <wire loc="277:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bddd090a0"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f7bde1426b0"/></to>
    </wire>
    <wire loc="278:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bddd0c310"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f7bddd04470"/></to>
    </wire>
    <wire loc="279:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bddd0cc40"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddd04d60"/></to>
    </wire>
    <wire loc="280:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bddd0a400"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bde084480"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f7bddcd6e60"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f7bdda9a9b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bddcd70e0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bde084480"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bddcd7d30"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f7bde1509c0"/></to>
    </wire>
    <wire loc="293:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bddcd8020"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f7bddcb9270"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f7bddcb9270"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f7bddcb3b00"/></to>
    </wire>
    <wire loc="294:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bddcd8950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddcb9b60"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddcb9b60"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f7bddcb2450"/></to>
    </wire>
    <wire loc="299:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bddcb02b0"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f7bde13ba30"/></to>
    </wire>
    <wire loc="300:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bddcb3b00"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f7bdda73a40"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f7bdda73a40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f7bdda6c440"/></to>
    </wire>
    <wire loc="301:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bddcb2450"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdda72400"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdda72400"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f7bdda6cd70"/></to>
    </wire>
    <wire loc="302:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0x7f7bddcb2bf0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f7bdda615c0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f7bdda615c0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f7bdda3bc40"/></to>
    </wire>
    <wire loc="307:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bddaa1c00"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdda52a40"/></to>
    </wire>
    <wire loc="308:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bddaa0cd0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda99590"/></to>
    </wire>
    <wire loc="311:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f7bdda9fb00"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f7bdda9a9b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bdda794a0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda61d90"/></to>
    </wire>
    <wire loc="326:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bdda6ab40"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f7bde13ba30"/></to>
    </wire>
    <wire loc="327:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bdda6c440"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f7bdda62460"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f7bdda62460"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f7bdda3caa0"/></to>
    </wire>
    <wire loc="328:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdda6cd70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdda62dd0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdda62dd0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdda3b480"/></to>
    </wire>
    <wire loc="329:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0x7f7bdda6d410"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f7bdda65600"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f7bdda65600"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f7bdda3dc40"/></to>
    </wire>
    <wire loc="341:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bdda4c1f0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f7bde1597c0"/></to>
    </wire>
    <wire loc="342:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f7bdda4b2e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bddaa5020"/></to>
    </wire>
    <wire loc="349:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f7bdda47110"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f7bdda9a9b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f7bdda47ca0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f7bdda9a9b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f7bdda468d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f7bdda9a9b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdda45470"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bde084480"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f7bdda44110"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f7bde1b0e50"/></to>
    </wire>
    <wire loc="46:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bde163150"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bdcb93150"/></to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bde084480"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdcb78300"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bdcb77260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bde082020"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f7bdcb74410"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f7bde083140"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f7bdcb548b0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f7bddff4260"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bdcb58ab0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f7bddfd7a30"/></to>
    </wire>
    <wire loc="69:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bdcb578f0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f7bddfd58f0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdcb562b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f7bddfd42b0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bdcb568c0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f7bddfd48c0"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f7bddf58150"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f7bdcb02850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f7bddf588d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f7bdcb01020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdcb01910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bddf571f0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f7bdcb00120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f7bdcb06a70"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f7bdcb00c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f7bdca94a70"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f7bddff4260"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bdca935d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f7bdde43500"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdca92440"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f7bdde42440"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f7bdca3ee80"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f7bdde0c720"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bdca3dab0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bdde0b400"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bdca3f310"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f7bdde0fa70"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdca3fc40"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f7bdde0d440"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0x7f7bdca3e400"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f7bdde0dbe0"/></to>
    </wire>
    <wire loc="118:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f7bdddf6d90"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdddf7720"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f7bdca0e590"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f7bddd63020"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f7bdca0f670"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f7bddd63aa0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f7bdca0d060"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f7bddd628b0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdca0d950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddd61270"/></to>
    </wire>
    <wire loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x7f7bdca0c940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0x7f7bdca0b160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0x7f7bdca0c160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bdc9d3820"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f7bddd0c310"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bdc9cf020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f7bddd090a0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdc9d12b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f7bddd0cc40"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdc9d1a10"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bddd0a400"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f7bdc9d0720"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f7bddd22a20"/></to>
    </wire>
    <wire loc="56:../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f7bddd22a20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f7bddd1ba20"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0x7f7bdc9cfb20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f7bddd20920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f7bddd1c940"/></to>
    </wire>
    <wire loc="54:../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bddd269a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bddd1c080"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bddcbcac0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f7bddcb6120"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f7bddcb8400"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f7bddcb2bf0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f7bddcba470"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f7bddcb4be0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f7bddcb8b60"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f7bddcb1440"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f7bddcb7a80"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f7bddcb02b0"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f7bddcbbe80"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f7bddcb45d0"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f7bddcbb590"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f7bddcb6be0"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bdc96acd0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f7bddaa0cd0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdc96ca70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bddaa1c00"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f7bdc96bc40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f7bddc59080"/></to>
    </wire>
    <wire loc="26:../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f7bddc59080"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f7bddc4e020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f7bdc96de60"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0x7f7bdda9fb00"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f7bddc4e020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f7bddac6790"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddc55a40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bddad4150"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bddc58b40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bddc4c790"/></to>
    </wire>
    <wire loc="35:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bddc4c790"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bddb52530"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f7bddace640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bddb23d60"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bddb1d1d0"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7f7bddc491d0"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7f7bddc491d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bddb52d40"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bddac5a60"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7f7bddc45850"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7f7bddc45850"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bddb4d180"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bddb4d180"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bdc9438d0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bddb52530"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdc948c20"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bddb52d40"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bdc9474b0"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdc941bc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bddbcee20"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bddbcee20"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bddbbb060"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bdc93ce20"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bddbc62b0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bddbc62b0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bddbb6570"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f7bdc93a0a0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f7bddbc56b0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f7bddbc56b0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f7bddbb49d0"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f7bdc936450"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f7bddbc1b30"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f7bddbc1b30"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f7bddbaf460"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f7bddb19490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f7bddac9a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddab22e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddc55a40"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bdda760e0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f7bdda70920"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f7bdda72b60"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f7bdda6b5a0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda71400"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f7bdda6bd40"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f7bdda702b0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f7bdda6ab40"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f7bdda74590"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f7bdda6fd70"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f7bdda76b60"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f7bdda6f440"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bdd939ac0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bdd847c60"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdda59940"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdda32020"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdd934020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f7bdd841880"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f7bdda1cb50"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f7bdda4c1f0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f7bdda19a10"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f7bdda47110"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f7bdda186a0"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0x7f7bdda47ca0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f7bdda163a0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f7bdda468d0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f7bdda15200"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f7bdda4b2e0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f7bdda209d0"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdd934020"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdda11b70"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdda45470"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f7bdda2b020"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0x7f7bdd941940"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f7bdd941940"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f7bde5fbcb0"/></to>
    </wire>
    <wire loc="105:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f7bdda2a380"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0x7f7bdd93eb50"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f7bdd93eb50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f7bdd915bd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdda23270"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdd93d920"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdd93d920"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdd919320"/></to>
    </wire>
    <wire loc="108:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f7bdda23dd0"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0x7f7bdd93c4e0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f7bdd93c4e0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x7f7bde5f2350"/></to>
    </wire>
    <wire loc="109:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f7bdda27020"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f7bdd93b7f0"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f7bdd93b7f0"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x7f7bde5fd670"/></to>
    </wire>
    <wire loc="111:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f7bdda1eb30"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f7bdd93ab10"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f7bdd93ab10"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f7bdd9329c0"/></to>
    </wire>
    <wire loc="112:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f7bdda11080"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f7bdda44110"/></to>
    </wire>
    <wire loc="113:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f7bdda1a430"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f7bdd828990"/></to>
    </wire>
    <wire loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0x7f7bdd981e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f7bdd847c60"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f7bdc87d4c0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdd919320"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdd90b660"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f7bdd841880"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f7bdd832020"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0x7f7bdd92aa20"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x7f7bde5df350"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0x7f7bdd929cc0"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x7f7bde5e2e40"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f7bdd92e020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f7bde3c5bf0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f7bdd90ee60"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f7bdd9092d0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f7bdd917c20"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f7bdd90b020"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bdd91c630"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdd90c900"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f7bdd915bd0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f7bdd851210"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f7bdd851210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f7bdc8a79d0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdd84e0d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdd908050"/></to>
    </wire>
    <wire loc="100:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x7f7bdd8eda40"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x7f7bdd8adc70"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x7f7bdd8adc70"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x7f7bdd8a6b40"/></to>
    </wire>
    <wire loc="101:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f7bdd8ec7b0"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f7bde8c4bc0"/></to>
    </wire>
    <wire loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x7f7bdd8ca190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x7f7bdd89ce50"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f7bde8c4bc0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x7f7bdd8a0390"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f7bde5fbcb0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7f7bdd89f650"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x7f7bde5f9020"/></to>
    </wire>
    <wire loc="88:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x7f7bdd89e800"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x7f7bde5f8350"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x7f7bdd89db10"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x7f7bde5f7670"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f7bdd850020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f7bdc8a5850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f7bdd8507a0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f7bdc8a4020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdc8a4910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdd84e0d0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f7bdc8a3120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f7bdc8a9a30"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f7bdc8a3c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f7bdc8797f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bde3daa90"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f7bdc874c10"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f7bde3c1650"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bdd831300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bdd83a180"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f7bdd837540"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bde2c6290"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdd7c6140"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddab22e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:PrioCritQueueC.nc">
      <from><interface-ref name="prio1Queue" scoped="" ref="0x7f7bdc83c8c0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f7bdc82a310"/></to>
    </wire>
    <wire loc="19:PrioCritQueueC.nc">
      <from><interface-ref name="prio2Queue" scoped="" ref="0x7f7bdc837370"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f7bdc824720"/></to>
    </wire>
    <wire loc="20:PrioCritQueueC.nc">
      <from><interface-ref name="prio3Queue" scoped="" ref="0x7f7bdc833e60"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f7bdc81da00"/></to>
    </wire>
    <wire loc="62:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f7bdd6f3780"/></from>
      <to><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f7bdd645970"/></to>
    </wire>
    <wire loc="57:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f7bdd6fcd80"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f7bdd64b7b0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f7bdd644150"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f7bdd6fc0c0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x7f7bdd644760"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd62fe00"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd62fe00"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd60c020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdd6434f0"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd616920"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bdd63f300"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdd62ce50"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncPacket" scoped="" ref="0x7f7bdd638e10"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd612b00"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd612b00"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd5f1020"/></to>
    </wire>
    <wire loc="71:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f7bdd635790"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f7bddc59080"/></to>
    </wire>
    <wire loc="74:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdd63f9f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bdd44b5a0"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdd44b5a0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddab22e0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f7bdd63ad10"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f7bddd22a20"/></to>
    </wire>
    <wire loc="84:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bdd6394c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bdd4429c0"/></to>
    </wire>
    <wire loc="349:../../tos/lib/ftsp/TimeSyncP.nc">
      <from><interface-ref name="sendMsg" scoped="" ref="0x7f7bdd634860"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/lib/ftsp/TimeSyncP.nc">
      <from><interface-ref name="processMsg" scoped="" ref="0x7f7bdd6330a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd60c020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bde2102e0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd5f1020"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd472600"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdd6290c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdd60a2b0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdd60a2b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdd47f8b0"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd616920"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd5f7d60"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd5f7d60"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd477510"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f7bdd62aa70"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f7bdd60bc30"/></to>
    </wire>
    <wire loc="67:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f7bdd60bc30"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f7bdd481bf0"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdd627e80"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdd607320"/></to>
    </wire>
    <wire loc="70:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdd607320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde208320"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdd6213f0"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdd602920"/></to>
    </wire>
    <wire loc="73:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdd602920"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdd47e940"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bdd62ce50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdd60b050"/></to>
    </wire>
    <wire loc="66:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bdd60b050"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdd481490"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdd61d590"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdd5feb00"/></to>
    </wire>
    <wire loc="74:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdd5feb00"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdd47a9b0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdd626db0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdd606270"/></to>
    </wire>
    <wire loc="72:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdd606270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bde1f68a0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd6274e0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd608800"/></to>
    </wire>
    <wire loc="69:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd608800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde209800"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd629d30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd609020"/></to>
    </wire>
    <wire loc="65:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd609020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd480270"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdd61a220"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdd5fb780"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdd5fb780"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde1ee970"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd472600"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdc74d570"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdd47f8b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdc759720"/></to>
    </wire>
    <wire loc="79:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd477510"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdc754a60"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f7bdd481bf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f7bdc75b8b0"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdd47e940"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdc7587b0"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bdd481490"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdc75b150"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdd47a9b0"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdc74fac0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd480270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc75a020"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdd4700a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bde1f68a0"/></to>
    </wire>
    <wire loc="81:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdd46c060"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde1ee970"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdd46ad80"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdda52a40"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdd467020"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdda59940"/></to>
    </wire>
    <wire loc="84:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubAMSend" scoped="" ref="0x7f7bdc74cdc0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bdc735cf0"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bdc735cf0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bdc6de020"/></to>
    </wire>
    <wire loc="85:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubAMPacket" scoped="" ref="0x7f7bdc7496b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc733590"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc733590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc6dd8b0"/></to>
    </wire>
    <wire loc="86:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f7bdc748da0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdc734930"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdc734930"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdc6dec30"/></to>
    </wire>
    <wire loc="89:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdc74aa50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bde23b210"/>
      <arguments>
        <value cst="I:61">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubSnoop" scoped="" ref="0x7f7bdc7490a0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f7bde23bdf0"/>
      <arguments>
        <value cst="I:61">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdc747e20"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdd4700a0"/></to>
    </wire>
    <wire loc="93:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdc743ce0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdd46c060"/></to>
    </wire>
    <wire loc="95:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f7bdc73ec40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f7bddc59080"/></to>
    </wire>
    <wire loc="96:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdc73fa90"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdd46ad80"/></to>
    </wire>
    <wire loc="97:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdc73ddf0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdd467020"/></to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bdc6de020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bdc6d2a20"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdc6dec30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bde239b00"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc6dd8b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bde238790"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f7bdc732c10"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f7bdc6db020"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f7bdc6db020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde236e40"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdc6d1780"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdd4f4930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc6d0400"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bde238790"/></to>
    </wire>
    <wire loc="53:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdd4f4930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdd4a64b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bdd4a5400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bde23c050"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd4a4060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bde238790"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdd4a3720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bde239b00"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f7bdd4a2480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f7bdd4a2c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f7bdcfff330"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f7bdd009510"/></to>
    </wire>
    <wire loc="67:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bdcffbd40"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bdd010540"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bdd010540"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bdc6810c0"/></to>
    </wire>
    <wire loc="68:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdcff99b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdd00e270"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdd00e270"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdd3d4470"/></to>
    </wire>
    <wire loc="71:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f7bdcfda2a0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f7bdcffea70"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdd3d4470"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdd377d60"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd00ee80"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3d3120"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3d3120"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3796c0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f7bdd00c5d0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd3d2800"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd3d2800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd376a10"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdc681d30"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdd3e3530"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc67f970"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3d3120"/></to>
    </wire>
    <wire loc="54:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdd3e3530"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdd3e0060"/></to>
    </wire>
    <wire loc="55:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bdd3e0e20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bdd3d6b10"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f7bdd3d6b10"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f7bdd3ce300"/></to>
    </wire>
    <wire loc="56:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3dfa70"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3d3120"/></to>
    </wire>
    <wire loc="57:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdd3dd0e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bdd3d4470"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f7bdd3ddd70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f7bdd3db5e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd3d9a90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd372b90"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd372b90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd347670"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bdd3d5e40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdd3790d0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f7bdd372540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f7bdd347020"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bdd36b2b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bdd3d1300"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f7bdd3754a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdd36e790"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f7bdd374120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdd36fc60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f7bdd367970"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f7bdd0241e0"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f7bdd36e790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdd217de0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f7bdd36fc60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f7bdd2176c0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f7bdd216c20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f7bdd367970"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bdd33b020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bdd36b2b0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bdd214920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bdd36b2b0"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f7bdd20bcc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f7bdd36b2b0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f7bdd215590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f7bdd33dc40"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f7bdd215e80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f7bdd340720"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f7bdd33f020"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f7bdd210e00"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f7bdd335860"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f7bdd1e5150"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f7bdd1e5150"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f7bdd1e24b0"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f7bdd202d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f7bdd1e5960"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f7bdd1e5960"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f7bdd1db850"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f7bdd2e16e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f7bdd3184f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f7bdd2e4c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f7bdd2dda00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f7bdd212020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f7bdd212800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f7bdd1e3020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f7bdd1e2cb0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f7bdd1e2cb0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f7bdd18f5a0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f7bdd1db850"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f7bdd18e0c0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f7bdd1e24b0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f7bdd1d5d80"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bdd1dac20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bdd0fddc0"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bdd0fddc0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bdd035cd0"/></to>
    </wire>
    <wire loc="53:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bdd18a810"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bdd1dac20"/></to>
    </wire>
    <wire loc="56:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x7f7bdd18c0a0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f7bdd16c0f0"/></to>
    </wire>
    <wire loc="60:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x7f7bdd16c0f0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f7bdd1623f0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x7f7bdd18c880"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f7bdd16c990"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x7f7bdd16c990"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f7bdd162cd0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x7f7bdd18b0a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f7bdd16b3a0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x7f7bdd16b3a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f7bdd1615f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x7f7bdd169c40"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x7f7bdd15e5f0"/></to>
    </wire>
    <wire loc="64:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x7f7bdd16a9f0"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x7f7bdd15f3f0"/></to>
    </wire>
    <wire loc="65:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x7f7bdd1693b0"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x7f7bdd15fcd0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f7bdd15db20"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f7bde61f1d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f7bdd15c980"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f7bde8c4bc0"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f7bdd0310f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bdd0f7de0"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f7bdd0f7de0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f7bdd0413c0"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdd03e660"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bdd0f2cc0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdd0f2cc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bdd0db020"/></to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bdd0ea020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bdd0d62c0"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f7bdd0e9850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f7bdd0d59e0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f7bdd0e4ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f7bdd0d05a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f7bdd0e4ad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f7bdd0ccba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f7bdd0e4ad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f7bdd0c7120"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdd048410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bdd0f2cc0"/></to>
    </wire>
    <wire loc="114:../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7f7bdcff4d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f7bdcfd3680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f7bdcfda2a0"/></to>
    </wire>
    <wire loc="44:../../tos/lib/printf/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f7bdcfcdd50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f7bde62a0c0"/></to>
    </wire>
    <wire loc="47:../../tos/lib/printf/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f7bdcfc94a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd3d9a90"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdcfca370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddab22e0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="17:TXFlowC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f7bdc570270"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f7bde62a0c0"/></to>
    </wire>
    <wire loc="18:TXFlowC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f7bdc570840"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f7bde239b00"/></to>
    </wire>
    <wire loc="19:TXFlowC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc56f590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f7bde238790"/></to>
    </wire>
    <wire loc="20:TXFlowC.nc">
      <from><interface-ref name="SendTimer" scoped="" ref="0x7f7bdc576310"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f7bdc57e640"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f7bdc57e640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddab22e0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:TXFlowC.nc">
      <from><interface-ref name="AppSend" scoped="" ref="0x7f7bdc571610"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f7bdcf744b0"/></to>
    </wire>
    <wire loc="20:TXFlowP.nc">
      <from><interface-ref name="send" scoped="" ref="0x7f7bdc56ec50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TdmaMacC" loc="8:TdmaMacC.nc">
      <configuration/>
    </component>
    <component qname="TdmaMacP" loc="30:TdmaMacP.nc">
      <module/>
    </component>
    <component qname="GenericSlotterC" loc="30:../../tos/system/GenericSlotterC.nc">
      <documentation loc="23:../../tos/system/GenericSlotterC.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="80:../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:../../tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="GenericSlotterP" loc="30:../../tos/system/GenericSlotterP.nc">
      <documentation loc="23:../../tos/system/GenericSlotterP.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C" loc="26(GenericSlotterC.Alarm32khz32C):../../tos/platforms/mica/Alarm32khz32C.nc">
      <documentation loc="11:../../tos/platforms/mica/Alarm32khz32C.nc">
        <short>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register). Note that creating one of these Alarms consumes a 16-bit&#10; 32kHz Alarm (see Alarm32khz16C).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Alarm16" loc="28(GenericSlotterC.Alarm32khz32C.Alarm16):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm" loc="51(GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="22:../../tos/platforms/mica/Counter32khz32C.nc">
      <documentation loc="11:../../tos/platforms/mica/Counter32khz32C.nc">
        <short>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform32" loc="54(Counter32khz32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde930950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f7bde92f180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="counter_one_overflow_t" ref="0x7f7bde8ea1f0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Transform32" loc="51(GenericSlotterC.Alarm32khz32C.Transform32):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde930950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f7bde92f180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="37:../../tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC" loc="35(RF230RadioC.NeighborhoodC):../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC.NeighborhoodP" loc="37(RF230RadioC.NeighborhoodC.NeighborhoodP):../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="37(RF230RadioC.UniqueLayerC.UniqueLayerP):../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../tos/system/RandomC.nc">
      <documentation loc="33:../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f7bddc418e0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="TdmaMacC.TimerMilliC" loc="44(TdmaMacC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.FaultClearTimer" loc="44(TdmaMacC.FaultClearTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC" loc="7(TdmaMacC.PrioCritQueueC):PrioCritQueueC.nc">
      <documentation loc="1:PrioCritQueueC.nc">
        <short>&#10;A priority queue supporting 3 levels of priority for MCC packets&#10;</short>
      </documentation>
      <instance number="0">
        <component-ref qname="PrioCritQueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:20">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.QP" loc="3(TdmaMacC.PrioCritQueueC.QP):PrioCritQueueP.nc">
      <instance number="0">
        <component-ref qname="PrioCritQueueP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f7bdd7b94e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q1" loc="42(TdmaMacC.PrioCritQueueC.Q1):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f7bdd7b94e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q2" loc="42(TdmaMacC.PrioCritQueueC.Q2):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f7bdd7b94e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q3" loc="42(TdmaMacC.PrioCritQueueC.Q3):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f7bdd7b94e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncC" loc="39:../../tos/lib/ftsp/TimeSyncC.nc">
      <configuration/>
    </component>
    <component qname="TimeSyncC.TimeSyncP" loc="37(TimeSyncC.TimeSyncP):../../tos/lib/ftsp/TimeSyncP.nc">
      <instance number="0">
        <component-ref qname="TimeSyncP"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncMessageC" loc="37:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC" loc="37:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC" loc="40(RF230TimeSyncMessageC.TimeSyncMessageLayerC):../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeSyncMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP" loc="37(RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP):../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeSyncMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC" loc="47(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:61">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC" loc="47(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP" loc="43(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncC.TimerC" loc="44(TimeSyncC.TimerC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="NoLedsC" loc="45:../../tos/system/NoLedsC.nc">
      <documentation loc="35:../../tos/system/NoLedsC.nc">
        <short>&#10; A null operation replacement for the LedsC component.</short>
        <long>&#10; A null operation replacement for the LedsC component. As many&#10; components might concurrently signal information through LEDs,&#10; using LedsC and NoLedsC allows an application builder to select&#10; which components control the LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 19, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MCCP" loc="4:MCCP.nc">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:../../tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:../../tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:../../tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):../../tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:../../tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:../../tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:../../tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:../../tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:../../tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f7bde8ebd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f7bde8ebd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x7f7bde8ea670"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../tos/lib/printf/PutcharP.nc">
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../tos/lib/printf/SerialStartP.nc">
      <documentation loc="33:../../tos/lib/printf/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MCCC.TimerMilliC" loc="44(MCCC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1" loc="1(MCCC.TXFlow1):TXFlowC.nc">
      <instance number="0">
        <component-ref qname="TXFlowC"/>
        <arguments>
          <value cst="I:11">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:40">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:40">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1.TimerMilliC" loc="44(MCCC.TXFlow1.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MCCC.TXFlow1.TXF" loc="4(MCCC.TXFlow1.TXF):TXFlowP.nc">
      <instance number="0">
        <component-ref qname="TXFlowP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f7bde5bf590" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f7bde5bf900" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f7bde5bfc70" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f7bde5b19e0" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f7bde5b1d70" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f7bde5ae170" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f7bde5ae4c0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f7bde51a0d0" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f7bde51a460" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f7bde51a7f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f7bde51ab40" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Alarm32khz32C" loc="26:../../tos/platforms/mica/Alarm32khz32C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/Alarm32khz32C.nc">
        <short>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register). Note that creating one of these Alarms consumes a 16-bit&#10; 32kHz Alarm (see Alarm32khz16C).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f7bde3207c0" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f7bde3207c0"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7f7bde320b30" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f7bde30b500" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f7bde30b500"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f7bde30bcc0" loc="52:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f7bde30bcc0"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x7f7bde309020" loc="53:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f7bde2c2900" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f7bde2c2900"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f7bde2bf120" loc="43:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f7bde2bf120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f7bde2a5830" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f7bde2a5830"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f7bde2a2020" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f7bde2a2020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f7bde2a2410" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f7bde2a2410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f7bde2a2bf0" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f7bde2a2bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f7bde2a1020" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f7bde2a1820" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f7bde2a1820"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f7bde2d0b30" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f7bde2d0b30"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f7bde280370" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f7bde280370"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f7bde280760" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f7bde280760"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f7bde27e020" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f7bde27e020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f7bde27e3f0" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f7bde1a07d0" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
          <component-ref qname="NeighborhoodC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f7bde19ce40" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
          <component-ref qname="NeighborhoodP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f7bddfb8590" loc="83:../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f7bddfa9060" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f7bdde3f820" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
          <component-ref qname="UniqueLayerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f7bdde32020" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
          <component-ref qname="UniqueLayerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f7bddc418e0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f7bddc418e0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f7bddc41bf0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f7bddc34400" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f7bddc34400"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f7bddc34710" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bddc4a900" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bddc4a900"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bddb17870" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bddb17870"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f7bddb17ba0" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bddac7dd0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bddac7dd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PrioCritQueueC" loc="7:PrioCritQueueC.nc" abstract="">
      <documentation loc="1:PrioCritQueueC.nc">
        <short>&#10;A priority queue supporting 3 levels of priority for MCC packets&#10;</short>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f7bdd7b94e0" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f7bdd7b94e0"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f7bdd7b9860" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit1" ref="0x7f7bdd7b9bc0" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit2" ref="0x7f7bdd7b6020" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit3" ref="0x7f7bdd7b6380" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PrioCritQueueP" loc="3:PrioCritQueueP.nc" abstract="">
      <parameters>
        <typedef name="queue_t" ref="0x7f7bdd7adb20" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f7bdd7adb20"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f7bdd7a9020" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit1" ref="0x7f7bdd7a9380" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit2" ref="0x7f7bdd7a96e0" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit3" ref="0x7f7bdd7a9a40" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f7bdd740320" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f7bdd740320"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f7bdd7406a0" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimeSyncP" loc="37:../../tos/lib/ftsp/TimeSyncP.nc" abstract="">
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bdd6f5a00" loc="37:../../tos/lib/ftsp/TimeSyncP.nc">
          <component-ref qname="TimeSyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bdd6f5a00"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimeSyncMessageLayerC" loc="40:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeSyncMessageLayerP" loc="37:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f7bdd518910" loc="47:../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f7bdd5116a0" loc="47:../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f7bdd5082e0" loc="43:../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f7bdd4eec80" loc="45:../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f7bdd3f2720" loc="47:../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:../../tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TXFlowC" loc="1:TXFlowC.nc" abstract="">
      <parameters>
        <constant name="flow_num" ref="0x7f7bdcfbecc0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="dest_id" ref="0x7f7bdcfbb060" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="crit_level" ref="0x7f7bdcfbb3e0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="periodSlots" ref="0x7f7bdcfbb760" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="deadlineSlots" ref="0x7f7bdcfbbb00" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="c" ref="0x7f7bdcfbbe20" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="priority" ref="0x7f7bdcfb91b0" loc="1:TXFlowC.nc">
          <component-ref qname="TXFlowC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="TXFlowP" loc="4:TXFlowP.nc" abstract="">
      <parameters>
        <constant name="flow_num" ref="0x7f7bdcfb1dc0" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="dest_id" ref="0x7f7bdcfae160" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="crit_level" ref="0x7f7bdcfae4e0" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="periodSlots" ref="0x7f7bdcfae860" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="deadlineSlots" ref="0x7f7bdcfaec00" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="c" ref="0x7f7bdcfad020" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
        <constant name="priority" ref="0x7f7bdcfad390" loc="4:TXFlowP.nc">
          <component-ref qname="TXFlowP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="1" name="MacReceive" ref="0x7f7bde81f680" loc="16:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f7bde81f680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde81fa00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacPowerControl" ref="0x7f7bde898020" loc="17:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacPowerControl" scoped="" ref="0x7f7bde898020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bde8983a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bde898530"/>
        <function-ref name="start" scoped="" ref="0x7f7bde8986c0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde898850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bde89e020" loc="10:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde89e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde89e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacSend" ref="0x7f7bde823c80" loc="15:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f7bde823c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde89b0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde89b230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde89b3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde89b550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bde89b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f7bde89c020" loc="11:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde89c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f7bde89c3a0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f7bde89c530"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f7bde89c6c0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f7bde89c850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Slotter" ref="0x7f7bde77db40" loc="56:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f7bde77db40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f7bde78c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacReceive" ref="0x7f7bde7ae690" loc="39:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f7bde7ae690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde7aea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Frame" ref="0x7f7bde7b0c60" loc="34:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Frame" scoped="" ref="0x7f7bde7b0c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f7bde7af020"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f7bde7af1b0"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f7bde7af340"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f7bde7af4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacPowerControl" ref="0x7f7bde7aedc0" loc="40:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacPowerControl" scoped="" ref="0x7f7bde7aedc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bde7ad180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bde7ad310"/>
        <function-ref name="start" scoped="" ref="0x7f7bde7ad4a0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde7ad630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f7bde7aa720" loc="44:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bde7aa720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bde7aaaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GlobalTime" ref="0x7f7bde749cc0" loc="72:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f7bde749cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f7bde74e980"/>
        <function-ref name="global2Local" scoped="" ref="0x7f7bde748910"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f7bde74ee40"/>
        <function-ref name="local2Global" scoped="" ref="0x7f7bde7483c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f7bde79d020" loc="53:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bde79d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde79d3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bde79d530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde79d6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde79d850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bde79d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GenericSlotterPowerControl" ref="0x7f7bde77e5b0" loc="55:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GenericSlotterPowerControl" scoped="" ref="0x7f7bde77e5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bde77e930"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde77eac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="forwardQueue" ref="0x7f7bde7689a0" loc="59:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="forwardQueue" scoped="" ref="0x7f7bde7689a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f7bde775020"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f7bde765d90"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bde7644d0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bde762260"/>
        <function-ref name="headPrio" scoped="" ref="0x7f7bde766ac0"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f7bde7754a0"/>
        <function-ref name="full" scoped="" ref="0x7f7bde776a40"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bde775970"/>
        <function-ref name="clearLO" scoped="" ref="0x7f7bde764ca0"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f7bde7626e0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bde765260"/>
        <function-ref name="empty" scoped="" ref="0x7f7bde7765c0"/>
        <function-ref name="headHI" scoped="" ref="0x7f7bde7665b0"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f7bde765910"/>
        <function-ref name="head" scoped="" ref="0x7f7bde775df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPowerControl" ref="0x7f7bde761460" loc="64:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPowerControl" scoped="" ref="0x7f7bde761460"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bde7617e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bde761970"/>
        <function-ref name="start" scoped="" ref="0x7f7bde761b00"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde761c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f7bde7811d0" loc="54:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f7bde7811d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f7bde781550"/>
        <function-ref name="rand32" scoped="" ref="0x7f7bde7816e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ACK" ref="0x7f7bde75d890" loc="60:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ACK" scoped="" ref="0x7f7bde75d890"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bde75dc10"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bde75dda0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bde761020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyDataSend" ref="0x7f7bde758020" loc="67:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyDataSend" scoped="" ref="0x7f7bde758020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde7583a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde758530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde7586c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde758850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bde7589e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyNotificationReceive" ref="0x7f7bde759890" loc="66:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyNotificationReceive" scoped="" ref="0x7f7bde759890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde759c10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncInfo" ref="0x7f7bde733dc0" loc="74:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f7bde733dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f7bde737180"/>
        <function-ref name="getRootID" scoped="" ref="0x7f7bde737310"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f7bde7374a0"/>
        <function-ref name="getOffset" scoped="" ref="0x7f7bde737630"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f7bde7377c0"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f7bde737950"/>
        <function-ref name="getSkew" scoped="" ref="0x7f7bde737ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bde7b0550" loc="33:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde7b0550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde7b08d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacSend" ref="0x7f7bde7af860" loc="38:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f7bde7af860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde7afbe0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde7afd70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde7ae020"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde7ae1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bde7ae340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncMode" ref="0x7f7bde72fe20" loc="75:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7f7bde72fe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde731410"/>
        <function-ref name="getMode" scoped="" ref="0x7f7bde7315a0"/>
        <function-ref name="setMode" scoped="" ref="0x7f7bde731730"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bde79f9a0" loc="48:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bde79f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bde79fd20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bde7ab020"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bde7ab1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bde7ab340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bde7ab4d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde7ab660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bde7ab7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bde7abe30"/>
        <function-ref name="set" scoped="" ref="0x7f7bde7ab980"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bde7abb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bde7abca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FrameConfiguration" ref="0x7f7bde783330" loc="58:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde783330"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f7bde7836b0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f7bde783840"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f7bde7839d0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f7bde783b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FaultClearTimer" ref="0x7f7bde73ca40" loc="73:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FaultClearTimer" scoped="" ref="0x7f7bde73ca40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bde73a020"/>
        <function-ref name="fired" scoped="" ref="0x7f7bde745510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bde73b300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bde745e10"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bde73a920"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bde73a4a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bde745990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bde746670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bde73b910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bde746b40"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde745090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f7bde78d4e0" loc="52:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bde78d4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bde78d860"/>
        <function-ref name="source" scoped="" ref="0x7f7bde78d9f0"/>
        <function-ref name="address" scoped="" ref="0x7f7bde78db80"/>
        <function-ref name="destination" scoped="" ref="0x7f7bde78dd10"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bde79e020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bde79e1b0"/>
        <function-ref name="type" scoped="" ref="0x7f7bde79e340"/>
        <function-ref name="setType" scoped="" ref="0x7f7bde79e4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bde79e660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bde79e7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bde79e980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyDataReceive" ref="0x7f7bde758d50" loc="68:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyDataReceive" scoped="" ref="0x7f7bde758d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde750100"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyNotificationSend" ref="0x7f7bde74fa10" loc="65:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyNotificationSend" scoped="" ref="0x7f7bde74fa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde74fd90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde759020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde7591b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde759340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bde7594d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SlotterControl" ref="0x7f7bde777130" loc="57:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f7bde777130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bde783020"/>
        <function-ref name="getSlot" scoped="" ref="0x7f7bde777740"/>
        <function-ref name="synchronize" scoped="" ref="0x7f7bde7778d0"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f7bde777a60"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bde777bf0"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f7bde777d80"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde7775b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Slotter" ref="0x7f7bde634ba0" loc="32:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f7bde634ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f7bde631020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f7bde62c770" loc="35:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f7bde62c770"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bde62caf0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde62cc80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f7bde630330" loc="34:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde630330"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f7bde6306b0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f7bde630840"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f7bde6309d0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f7bde630b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlotterControl" ref="0x7f7bde631300" loc="33:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f7bde631300"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bde630020"/>
        <function-ref name="getSlot" scoped="" ref="0x7f7bde631810"/>
        <function-ref name="synchronize" scoped="" ref="0x7f7bde6319a0"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f7bde631b30"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bde631cc0"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f7bde631e50"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde631680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f7bde62a7c0" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde62a7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde62ab40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f7bde62a0c0" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bde62a0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bde62a440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f7bde625020" loc="52:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f7bde625020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde6253a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bde626020" loc="46:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde626020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde6263a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f7bde61f1d0" loc="50:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f7bde61f1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f7bde61f550"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f7bde61f6e0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f7bde61f870"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f7bde61fa00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f7bde61fb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f7bde61da60" loc="45:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7f7bde61da60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde61dde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bde61d380" loc="44:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde61d380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde61d700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7f7bde61c180" loc="46:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7f7bde61c180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde61c500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f7bde6151e0" loc="41:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f7bde6151e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde615560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f7bde624ae0" loc="40:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde624ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde624e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f7bde611e60" loc="45:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f7bde611e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde610210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7f7bde60bb20" loc="44:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7f7bde60bb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde611020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde6111b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde611340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde6114d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde611660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde6117f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde611980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde611b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f7bde6125f0" loc="43:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde6125f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde612970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7f7bde5cacb0" loc="98:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7f7bde5cacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5c9610"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5c97a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5c9930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5c9ac0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5c9c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5c9de0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5c8020"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5c81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7f7bde5e64e0" loc="72:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7f7bde5e64e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5e6860"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5e69f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5e6b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5e6d10"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5e5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5e51b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5e5340"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5e54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7f7bde5d9350" loc="83:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7f7bde5d9350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5d96d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5d9860"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5d99f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5d9b80"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5d9d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5d8020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5d81b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7f7bde5d0cb0" loc="92:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7f7bde5d0cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5cf0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5cf230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5cf3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5cf550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5cf6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5cf870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5cfa00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5cfb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x7f7bde5c2060" loc="103:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x7f7bde5c2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5c23e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5c2570"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5c2700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5c2890"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5c2a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5c2bb0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5c2d40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5c1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7f7bde5fd670" loc="50:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7f7bde5fd670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5fd9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5fdb80"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5fdd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5fc020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5fc1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5fc340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5fc4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5fc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7f7bde5d2670" loc="90:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7f7bde5d2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5d29f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5d2b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5d2d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5d1020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5d11b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5d1340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5d14d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7f7bde5fbcb0" loc="53:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7f7bde5fbcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5fa0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5fa230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5fa3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5fa550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5fa6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5fa870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5faa00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5fab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7f7bde5efcb0" loc="64:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7f7bde5efcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5ee0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ee230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ee3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5ee550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5ee6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5ee870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5eea00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5eeb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7f7bde5e2e40" loc="75:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7f7bde5e2e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5e11e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5e1370"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5e1500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5e1690"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5e1820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5e19b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5e1b40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5e1cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7f7bde5d6cb0" loc="86:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7f7bde5d6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5d50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5d5230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5d53c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5d5550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5d56e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5d5870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5d5a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d5b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7f7bde604800" loc="45:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7f7bde604800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde604b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde604d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde603020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde6031b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde603340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde6034d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde603660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde6037f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7f7bde5f7670" loc="56:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7f7bde5f7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f79f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5f7b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5f7d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5f6020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5f61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5f6340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5f64d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5f6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7f7bde5eb670" loc="67:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7f7bde5eb670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5eb9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ebb80"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ebd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5ea020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5ea1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5ea340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5ea4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5ea660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7f7bde5de670" loc="78:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7f7bde5de670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5de9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5deb80"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ded10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5dd020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5dd1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5dd340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5dd4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5dd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7f7bde5cc670" loc="95:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7f7bde5cc670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5cc9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ccb80"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ccd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5cb020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5cb1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5cb340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5cb4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5cb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7f7bde5c5b20" loc="101:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7f7bde5c5b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5c4020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5c41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5c4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5c44d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5c4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5c47f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5c4980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5c4b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7f7bde5dccb0" loc="81:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7f7bde5dccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5db0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5db230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5db3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5db550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5db6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5db870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5dba00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5dbb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7f7bde5ff060" loc="48:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7f7bde5ff060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5ff3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ff570"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ff700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5ff890"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5ffa20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5ffbb0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5ffd40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5fe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7f7bde5f3020" loc="59:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7f7bde5f3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5f3530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5f36c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5f3850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5f39e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5f3b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5f3d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5f2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7f7bde5c84e0" loc="99:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7f7bde5c84e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5c8860"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5c89f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5c8b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5c8d10"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5c7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5c71b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5c7340"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5c74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7f7bde5f1670" loc="62:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7f7bde5f1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f19f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5f1b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5f1d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5f0020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5f01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5f0340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5f04d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5f0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7f7bde5e5800" loc="73:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7f7bde5e5800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5e5b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5e5d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5e4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5e41b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5e4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5e44d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5e4660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5e47f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7f7bde5d8670" loc="84:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7f7bde5d8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5d89f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5d8b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5d8d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5d7020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5d71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5d7340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5d74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7f7bde5ce020" loc="93:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7f7bde5ce020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5ce3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ce530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ce6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5ce850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5ce9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5ceb70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5ced00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5cd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7f7bde5fc990" loc="51:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7f7bde5fc990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5fcd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5fb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5fb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5fb340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5fb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5fb660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5fb7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5fb980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7f7bde5f9020" loc="54:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7f7bde5f9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5f9530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5f96c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5f9850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5f99e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5f9b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5f9d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5f8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7f7bde5ed020" loc="65:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7f7bde5ed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5ed3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ed530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ed6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5ed850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5ed9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5edb70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5edd00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5ec020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7f7bde5e0060" loc="76:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7f7bde5e0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5e03e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5e0570"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5e0700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5e0890"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5e0a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5e0bb0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5e0d40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5df020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7f7bde5d4020" loc="87:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7f7bde5d4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5d43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5d4530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5d46c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5d4850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5d49e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5d4b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5d4d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7f7bde603b20" loc="46:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7f7bde603b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde602020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde6021b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde602340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde6024d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde602660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde6027f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde602980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde602b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7f7bde5f6990" loc="57:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7f7bde5f6990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f6e10"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5f5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5f51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5f5340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5f54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5f5660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5f57f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5f5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7f7bde5ea990" loc="68:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7f7bde5ea990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5ead10"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5e9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5e91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5e9340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5e94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5e9660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5e97f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5e9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7f7bde5cb990" loc="96:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7f7bde5cb990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5cbd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ca020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ca1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5ca340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5ca4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5ca660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5ca7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5ca980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7f7bde5e7020" loc="71:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7f7bde5e7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5e75a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5e7730"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5e78c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5e7a50"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5e7be0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5e7d70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5e6020"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5e61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7f7bde5da020" loc="82:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7f7bde5da020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5da3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5da530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5da6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5da850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5da9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5dab70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5dad00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7f7bde5d1990" loc="91:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7f7bde5d1990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5d1d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5d0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5d01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5d0340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5d04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5d0660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5d07f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d0980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7f7bde5c4e40" loc="102:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7f7bde5c4e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5c31e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5c3370"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5c3500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5c3690"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5c3820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5c39b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5c3b40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5c3cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7f7bde5fe350" loc="49:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7f7bde5fe350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5fe6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5fe860"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5fe9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5feb80"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5fed10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5fd020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5fd1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5fd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7f7bde5f2350" loc="60:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7f7bde5f2350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f26d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5f2860"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5f29f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5f2b80"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5f2d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5f1020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5f11b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5f1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7f7bde5d3350" loc="89:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7f7bde5d3350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5d36d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5d3860"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5d39f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5d3b80"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5d3d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5d2020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5d21b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7f7bde5f0990" loc="63:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7f7bde5f0990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f0d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ef020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ef1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5ef340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5ef4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5ef660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5ef7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5ef980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7f7bde5e4b20" loc="74:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7f7bde5e4b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5e2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5e21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5e2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5e24d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5e2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5e27f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5e2980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5e2b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7f7bde5d7990" loc="85:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7f7bde5d7990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5d7d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5d6020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5d61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5d6340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5d64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5d6660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5d67f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5d6980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7f7bde5cd350" loc="94:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7f7bde5cd350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5cd6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5cd860"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5cd9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5cdb80"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5cdd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5cc020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5cc1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5cc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7f7bde613530" loc="44:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7f7bde613530"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde6138b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde613a40"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde613bd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde613d60"/>
        <function-ref name="get" scoped="" ref="0x7f7bde604020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde6041b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde604340"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde6044d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7f7bde5f8350" loc="55:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7f7bde5f8350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f86d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5f8860"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5f89f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5f8b80"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5f8d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5f7020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5f71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5f7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7f7bde5ec350" loc="66:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7f7bde5ec350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5ec6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5ec860"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5ec9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5ecb80"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5ecd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5eb020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5eb1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5eb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7f7bde5df350" loc="77:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7f7bde5df350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5df6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5df860"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5df9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5dfb80"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5dfd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5de020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5de1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5de340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7f7bde5c7800" loc="100:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7f7bde5c7800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5c7b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5c7d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5c5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5c51b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5c5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5c54d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5c5660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5c57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7f7bde5dd990" loc="80:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7f7bde5dd990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5ddd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5dc020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5dc1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5dc340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5dc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5dc660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5dc7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5dc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7f7bde5e9cb0" loc="69:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7f7bde5e9cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5e80a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5e8230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5e83c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5e8550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5e86e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5e8870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5e8a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5e8b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7f7bde602e40" loc="47:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7f7bde602e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde6011e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde601370"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde601500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde601690"/>
        <function-ref name="get" scoped="" ref="0x7f7bde601820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde6019b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde601b40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde601cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7f7bde5f5cb0" loc="58:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7f7bde5f5cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5f40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5f4230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5f43c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5f4550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5f46e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5f4870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5f4a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5f4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f7bde576a80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f7bde576a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde576e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde575020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5751b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde575340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5754d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde575660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5757f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde575980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f7bde572020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f7bde572020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5723a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde572530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5726c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde572850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5729e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde572b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde572d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde571020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f7bde5796b0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f7bde5796b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde579a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde579bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde579d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde578020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5781b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde578340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5784d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde578660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f7bde575c10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f7bde575c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde574020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5741b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde574340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5744d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde574660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5747f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde574980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde574b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f7bde5712b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f7bde5712b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde571630"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5717c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde571950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde571ae0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde571c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde571e00"/>
        <function-ref name="set" scoped="" ref="0x7f7bde570020"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5701b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f7bde5788f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f7bde5788f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde578c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde578e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde576020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5761b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde576340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5764d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde576660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5767f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f7bde574da0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f7bde574da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde573180"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde573310"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5734a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde573630"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5737c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde573950"/>
        <function-ref name="set" scoped="" ref="0x7f7bde573ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde573c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f7bde570440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f7bde570440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5707c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde570950"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde570ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde570c70"/>
        <function-ref name="get" scoped="" ref="0x7f7bde570e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde56f020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde56f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde56f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcf31da0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcf31da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcf30180"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcf30310"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcf304a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcf30630"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcf307c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcf30950"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcf30ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcf30c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcf2d0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcf2d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcf2d420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcf2d5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcf2d740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcf2d8d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcf2da60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcf2dbf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcf2dd80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcf2c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcf2a3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcf2a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcf2a770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcf2a900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcf2aa90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcf2ac20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcf2adb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcf29020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcf291b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcf29340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcf276d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcf276d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcf27a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcf27be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcf27d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcf26020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcf261b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcf26340"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcf264d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcf26660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcf249b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcf249b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcf24d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcf23020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcf231b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcf23340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcf234d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcf23660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcf237f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcf23980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcf21e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcf21e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcf201c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcf20350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcf204e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcf20670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcf20800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcf20990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcf20b20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcf20cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcf130a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcf130a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcf13420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcf135b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcf13740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcf138d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcf13a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcf13bf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcf13d80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcf12020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcf103f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcf103f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcf10770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcf10900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcf10a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcf10c20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcf10db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcf0f020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcf0f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcf0f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f7bde567da0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f7bde567da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde566180"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde566310"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5664a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde566630"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5667c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde566950"/>
        <function-ref name="set" scoped="" ref="0x7f7bde566ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde566c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f7bde563440" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f7bde563440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5637c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde563950"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde563ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde563c70"/>
        <function-ref name="get" scoped="" ref="0x7f7bde563e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde562020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5621b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde562340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f7bde569a20" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f7bde569a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde569da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde568020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5681b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde568340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5684d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde568660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5687f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde568980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f7bde565020" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f7bde565020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5653a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde565530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5656c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde565850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5659e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde565b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde565d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde564020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f7bde5625d0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f7bde5625d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde562950"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde562ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde562c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde562e00"/>
        <function-ref name="get" scoped="" ref="0x7f7bde561020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5611b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde561340"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5614d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f7bde568c10" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f7bde568c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde567020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5671b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde567340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5674d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde567660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5677f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde567980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde567b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f7bde5642b0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f7bde5642b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde564630"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5647c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde564950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde564ae0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde564c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde564e00"/>
        <function-ref name="set" scoped="" ref="0x7f7bde563020"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5631b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f7bde561760" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f7bde561760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde561ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde561c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde561e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde560020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5601b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde560340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5604d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde560660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcebb060" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcebb060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcebb3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcebb570"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcebb700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcebb890"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcebba20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcebbbb0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcebbd40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdceba020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdceb83f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdceb83f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdceb8770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdceb8900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdceb8a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdceb8c20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdceb8db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdceb7020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdceb71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdceb7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdceb56d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdceb56d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdceb5a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdceb5be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdceb5d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdceb4020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdceb41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdceb4340"/>
        <function-ref name="set" scoped="" ref="0x7f7bdceb44d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdceb4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdceb29b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdceb29b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdceb2d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdceb1020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdceb11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdceb1340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdceb14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdceb1660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdceb17f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdceb1980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdceafe20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdceafe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdceae1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdceae350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdceae4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdceae670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdceae800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdceae990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdceaeb20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdceaecb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdceab0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdceab0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdceab420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdceab5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdceab740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdceab8d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdceaba60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdceabbf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdceabd80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdceaa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcea83f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcea83f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcea8770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcea8900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcea8a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcea8c20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcea8db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcea7020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcea71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcea7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcea56d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcea56d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcea5a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcea5be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcea5d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcea4020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcea41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcea4340"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcea44d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcea4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f7bde557020" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f7bde557020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5573a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde557530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5576c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde557850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5579e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde557b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde557d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde556020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f7bde5545d0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f7bde5545d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde554950"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde554ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde554c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde554e00"/>
        <function-ref name="get" scoped="" ref="0x7f7bde553020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5531b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde553340"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5534d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f7bde55ad30" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f7bde55ad30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5590e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde559270"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde559400"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde559590"/>
        <function-ref name="get" scoped="" ref="0x7f7bde559720"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5598b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde559a40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde559bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f7bde5562b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f7bde5562b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde556630"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5567c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde556950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde556ae0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde556c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde556e00"/>
        <function-ref name="set" scoped="" ref="0x7f7bde555020"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5551b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f7bde553760" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f7bde553760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde553ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde553c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde553e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde551020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5511b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde551340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5514d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde551660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f7bde559e60" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f7bde559e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde558210"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5583a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde558530"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5586c0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde558850"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5589e0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde558b70"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde558d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f7bde555440" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f7bde555440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5557c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde555950"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde555ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde555c70"/>
        <function-ref name="get" scoped="" ref="0x7f7bde555e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde554020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5541b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde554340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f7bde5518f0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f7bde5518f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde551c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde551e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde550020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5501b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde550340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5504d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde550660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5507f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdce50a60" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdce50a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdce50de0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdce4f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdce4f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdce4f340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdce4f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdce4f660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdce4f7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdce4f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdce4de20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdce4de20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdce4c1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdce4c350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdce4c4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdce4c670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdce4c800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdce4c990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdce4cb20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdce4ccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdce490a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdce490a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdce49420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdce495b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdce49740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdce498d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdce49a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdce49bf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdce49d80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdce48020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdce463f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdce463f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdce46770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdce46900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdce46a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdce46c20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdce46db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdce45020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdce451b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdce45340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdce436d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdce436d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdce43a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdce43be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdce43d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdce42020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdce421b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdce42340"/>
        <function-ref name="set" scoped="" ref="0x7f7bdce424d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdce42660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdce409b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdce409b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdce40d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdce3f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdce3f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdce3f340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdce3f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdce3f660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdce3f7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdce3f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdce3de20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdce3de20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdce3c1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdce3c350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdce3c4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdce3c670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdce3c800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdce3c990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdce3cb20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdce3ccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdce390a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdce390a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdce39420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdce395b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdce39740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdce398d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdce39a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdce39bf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdce39d80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdce38020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f7bde548440" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f7bde548440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5487c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde548950"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde548ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde548c70"/>
        <function-ref name="get" scoped="" ref="0x7f7bde548e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde547020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5471b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde547340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f7bde5448f0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f7bde5448f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde544c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde544e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde543020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5431b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde543340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5434d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde543660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5437f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f7bde54a020" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f7bde54a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde54a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde54a530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde54a6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde54a850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde54a9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde54ab70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde54ad00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde549020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f7bde5475d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f7bde5475d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde547950"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde547ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde547c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde547e00"/>
        <function-ref name="get" scoped="" ref="0x7f7bde545020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5451b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde545340"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5454d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f7bde543a80" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f7bde543a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde543e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde542020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5421b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde542340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5424d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde542660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5427f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde542980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f7bde5492b0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f7bde5492b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde549630"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5497c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde549950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde549ae0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde549c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde549e00"/>
        <function-ref name="set" scoped="" ref="0x7f7bde548020"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5481b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f7bde545760" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f7bde545760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde545ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde545c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde545e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde544020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5441b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde544340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5444d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde544660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f7bde542c10" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f7bde542c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde541020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5411b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde541340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5414d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde541660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5417f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde541980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde541b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcde5c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcde5c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcde40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcde4230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcde43c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcde4550"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcde46e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcde4870"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcde4a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcde4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcde2e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcde2e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcde11c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcde1350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcde14e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcde1670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcde1800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcde1990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcde1b20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcde1cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcdde0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcdde0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcdde420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcdde5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcdde740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcdde8d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcddea60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcddebf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcdded80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcddd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcddb3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcddb3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcddb770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcddb900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcddba90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcddbc20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcddbdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcdda020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcdda1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcdda340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcdd86d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcdd86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcdd8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcdd8be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcdd8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcdd7020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcdd71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcdd7340"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcdd74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcdd7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcdd59b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcdd59b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcdd5d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcdd4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcdd41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcdd4340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcdd44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcdd4660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcdd47f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcdd4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcdd2e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcdd2e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcdd11c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcdd1350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcdd14e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcdd1670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcdd1800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcdd1990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcdd1b20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcdd1cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcdce0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcdce0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcdce420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcdce5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcdce740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcdce8d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcdcea60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcdcebf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcdced80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcdcd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f7bde538760" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f7bde538760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde538ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde538c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde538e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde537020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5371b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde537340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5374d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde537660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f7bde535c10" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f7bde535c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde534020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5341b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde534340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5344d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde534660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5347f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde534980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde534b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f7bde53b3f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f7bde53b3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde53b770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde53b900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde53ba90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde53bc20"/>
        <function-ref name="get" scoped="" ref="0x7f7bde53bdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde539020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5391b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde539340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f7bde5378f0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f7bde5378f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde537c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde537e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde536020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5361b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde536340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5364d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde536660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5367f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f7bde534da0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f7bde534da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde533180"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde533310"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5334a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde533630"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5337c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde533950"/>
        <function-ref name="set" scoped="" ref="0x7f7bde533ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde533c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f7bde5395d0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f7bde5395d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde539950"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde539ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde539c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde539e00"/>
        <function-ref name="get" scoped="" ref="0x7f7bde538020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5381b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde538340"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5384d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f7bde536a80" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f7bde536a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde536e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde535020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5351b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde535340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5354d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde535660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5357f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde535980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f7bde532020" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f7bde532020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5323a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde532530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5326c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde532850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5329e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde532b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde532d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde531020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd7ac90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd7ac90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd790a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd79230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd793c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd79550"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd796e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd79870"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd79a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd79b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd77e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd77e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd761c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd76350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd764e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd76670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd76800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd76990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd76b20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd76cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd730a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd730a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd73420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd735b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd73740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd738d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd73a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd73bf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd73d80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd72020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd703f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd703f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd70770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd70900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd70a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd70c20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd70db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd6f020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd6f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd6f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd6d6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd6d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd6da50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd6dbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd6dd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd6c020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd6c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd6c340"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd6c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd6c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd6a9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd6a9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd6ad30"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd69020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd691b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd69340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd694d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd69660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd697f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd69980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd67e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd67e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd661c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd66350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd664e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd66670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd66800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd66990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd66b20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd66cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd630a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd630a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd63420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd635b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd63740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd638d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd63a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd63bf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd63d80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd62020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f7bde529a80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f7bde529a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde529e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde528020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5281b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde528340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5284d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde528660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5287f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde528980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f7bde525020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f7bde525020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5253a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde525530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5256c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde525850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5259e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde525b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde525d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde524020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f7bde52b7a0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f7bde52b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde52bb20"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde52bcb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde52be40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde52a020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde52a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde52a340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde52a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde52a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f7bde528c10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f7bde528c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde527020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5271b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde527340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5274d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde527660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5277f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde527980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde527b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f7bde5242b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f7bde5242b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde524630"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde5247c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde524950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde524ae0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde524c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde524e00"/>
        <function-ref name="set" scoped="" ref="0x7f7bde523020"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5231b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f7bde52a8f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f7bde52a8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde52ac70"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde52ae00"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde529020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde5291b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde529340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde5294d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde529660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde5297f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f7bde527da0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f7bde527da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde526180"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde526310"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5264a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde526630"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5267c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde526950"/>
        <function-ref name="set" scoped="" ref="0x7f7bde526ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde526c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f7bde523440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f7bde523440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde5237c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde523950"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde523ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde523c70"/>
        <function-ref name="get" scoped="" ref="0x7f7bde523e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde522020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5221b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde522340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd06c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd06c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd050a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd05230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd053c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd05550"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd056e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd05870"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd05a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd05b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdcd03e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdcd03e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdcd021c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdcd02350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdcd024e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdcd02670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcd02800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdcd02990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcd02b20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdcd02cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdccff0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdccff0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdccff420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdccff5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdccff740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdccff8d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdccffa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdccffbf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdccffd80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdccfe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdccfc3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdccfc3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdccfc770"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdccfc900"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdccfca90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdccfcc20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdccfcdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdccfb020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdccfb1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdccfb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdccf96d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdccf96d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdccf9a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdccf9be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdccf9d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdccf8020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdccf81b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdccf8340"/>
        <function-ref name="set" scoped="" ref="0x7f7bdccf84d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdccf8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdccf69b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdccf69b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdccf6d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdccf5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdccf51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdccf5340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdccf54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdccf5660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdccf57f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdccf5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdccf3e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdccf3e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdccf21c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdccf2350"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdccf24e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdccf2670"/>
        <function-ref name="get" scoped="" ref="0x7f7bdccf2800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdccf2990"/>
        <function-ref name="set" scoped="" ref="0x7f7bdccf2b20"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdccf2cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bdccef0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bdccef0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdccef420"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdccef5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdccef740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdccef8d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdccefa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdccefbf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdccefd80"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdccee020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde51ba20" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde51ba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde51bda0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde504020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde5041b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde504340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde5044d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde504660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde5047f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde504980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde5006d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde5006d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde500a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde500be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde500d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4ff020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4ff1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4ff340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4ff4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4ff660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4fa160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4fa160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4fa4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4fa670"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4fa800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4fa990"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4fab20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4facb0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4fae40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4f5c90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4f5c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4f40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4f4230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4f43c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4f4550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4f46e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4f4870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4f4a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4f4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4f06d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4f06d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4f0a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4f0be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4f0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4ef020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4ef1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4ef340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4ef4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4ef660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4ea160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4ea160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4ea4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4ea670"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4ea800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4ea990"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4eab20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4eacb0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4eae40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4e9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4e5c90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4e5c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4e40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4e4230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4e43c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4e4550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4e46e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4e4870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4e4a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4e4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4e06d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4e06d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4e0a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4e0be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4e0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4df020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4df1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4df340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4df4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4df660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4da160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4da160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4da4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4da670"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4da800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4da990"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4dab20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4dacb0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4dae40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4d9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4d6c90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4d6c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4d40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4d4230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4d43c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4d4550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4d46e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4d4870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4d4a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4d4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4d06d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4d06d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4d0a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4d0be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4d0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4cf020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4cf1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4cf340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4cf4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4cf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4ca160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4ca160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4ca4e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4ca670"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4ca800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4ca990"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4cab20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4cacb0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4cae40"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4c9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4c6c90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4c6c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4c40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4c4230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4c43c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4c4550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4c46e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4c4870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4c4a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4c4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f7bde4c06d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f7bde4c06d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4c0a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde4c0be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4c0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde4bf020"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4bf1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde4bf340"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4bf4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde4bf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bde489020" loc="61:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde489020"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f7bde9fb3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f7bde9fb3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde4893a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f7bde489690" loc="62:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f7bde489690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f7bde489a10"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f7bde489ba0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f7bde489d30"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f7bde483020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f7bde4831b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f7bde463720" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bde463720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde463aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f7bde627db0" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bde627db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bde464180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f7bde463020" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f7bde463020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde4633a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f7bde464470" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f7bde464470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde4647f0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f7bde464980"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f7bde464b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f7bde9b2bd0" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde9b2bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdea32020"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdea321b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f7bde9bc9d0" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f7bde9bc9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde9bcd50"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f7bdf3c0020"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f7bdf3c01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f7bde8e6d30" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f7bde8e6d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bde8e50e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bde8e5270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f7bde8e02c0" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f7bde8e02c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f7bde8e0640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f7bde8e07d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f7bde8e0960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f7bde8e7e40" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f7bde8e7e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde8e61e0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f7bde8e6370"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f7bde8e6500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f7bde8c2330" loc="86:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f7bde8c2330"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f7bde8c26b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f7bde8fd3b0" loc="82:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f7bde8fd3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f7bde8fd730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f7bde8fd8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f7bde8fda50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f7bde8c4bc0" loc="83:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f7bde8c4bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f7bde8c6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f7bde62d890" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bde62d890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bde62dc10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bde62dda0"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bde457020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bde4571b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bde457340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4574d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bde457660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bde457ca0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4577f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bde457980"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bde457b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f7bde452a00" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f7bde452a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde452d80"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde451020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4511b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde451340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4514d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde451660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4517f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde451980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bde456c30" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde456c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde453020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f7bde451ca0" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f7bde451ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4500a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde450230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4503c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde450550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4506e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde450870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde450a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde450b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f7bde4532a0" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bde4532a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bde453620"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bde4537b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bde453940"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bde453ad0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bde453c60"/>
        <function-ref name="get" scoped="" ref="0x7f7bde453df0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bde452020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bde452660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4521b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bde452340"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bde4524d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f7bde44f020" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f7bde44f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde44f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde44f530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde44f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde44f850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde44f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde44fb70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde44fd00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde44e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f7bde454a00" loc="44:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f7bde454a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde454d80"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde432020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4321b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde432340"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4324d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde432660"/>
        <function-ref name="set" scoped="" ref="0x7f7bde4327f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde432980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f7bde432ce0" loc="45:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f7bde432ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde4310a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde431230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde4313c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde431550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde4316e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde431870"/>
        <function-ref name="set" scoped="" ref="0x7f7bde431a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde431b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f7bde42d2e0" loc="47:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde42d2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde42d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f7bde42e020" loc="46:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f7bde42e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bde42e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bde42e530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bde42e6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bde42e850"/>
        <function-ref name="get" scoped="" ref="0x7f7bde42e9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bde42eb70"/>
        <function-ref name="set" scoped="" ref="0x7f7bde42ed00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bde42d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Slotter" ref="0x7f7bde425ac0" loc="34:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f7bde425ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f7bde425e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f7bde417a90" loc="42:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bde417a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bde417e10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f7bde422290" loc="39:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bde422290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde930950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f7bde92f180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bde419b30"/>
        <function-ref name="fired" scoped="" ref="0x7f7bde41aaa0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bde4194e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bde419020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bde418020"/>
        <function-ref name="start" scoped="" ref="0x7f7bde41a0d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde41a5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bde428b30" loc="32:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde428b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde425020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bde418440" loc="40:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bde418440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bde4187c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bde418950"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bde418ae0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bde418c70"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bde418e00"/>
        <function-ref name="get" scoped="" ref="0x7f7bde417020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bde4171b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bde4177f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde417340"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bde4174d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bde417660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f7bde425310" loc="33:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f7bde425310"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bde425690"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde425820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f7bde423180" loc="36:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bde423180"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f7bde423500"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f7bde423690"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f7bde423820"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f7bde4239b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlotterControl" ref="0x7f7bde424150" loc="35:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f7bde424150"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bde424e30"/>
        <function-ref name="getSlot" scoped="" ref="0x7f7bde424660"/>
        <function-ref name="synchronize" scoped="" ref="0x7f7bde4247f0"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f7bde424980"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bde424b10"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f7bde424ca0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde4244d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bde2484e0" loc="28:../../tos/platforms/mica/Alarm32khz32C.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bde2484e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde930950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f7bde92f180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bde246db0"/>
        <function-ref name="fired" scoped="" ref="0x7f7bde247da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bde246760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bde2462a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bde2452a0"/>
        <function-ref name="start" scoped="" ref="0x7f7bde2473d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde2478e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bdcc237c0" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdcc237c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdcc20020"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdcc21020"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdcc219a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdcc214e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdcc204e0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdcc22620"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcc22b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f7bde3cdd80" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bde3cdd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f7bde3d6180"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f7bde3d6310"/>
        <function-ref name="getControlA" scoped="" ref="0x7f7bde3d64a0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f7bde3d6630"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f7bde3d67c0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f7bde3d6950"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f7bde3d6ae0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f7bde3d6c70"/>
        <function-ref name="setControlC" scoped="" ref="0x7f7bde3d6e00"/>
        <function-ref name="setControlA" scoped="" ref="0x7f7bde3d5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f7bde3c5bf0" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f7bde3c5bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f7bde3c2020"/>
        <function-ref name="test" scoped="" ref="0x7f7bde3c3630"/>
        <function-ref name="get" scoped="" ref="0x7f7bde3cc8a0"/>
        <function-ref name="captured" scoped="" ref="0x7f7bde3c42a0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde3c47b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde3c3af0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde3ccd60"/>
        <function-ref name="start" scoped="" ref="0x7f7bde3c4c70"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde3c3170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f7bde3c1650" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f7bde3c1650"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bde3b8110"/>
        <function-ref name="fired" scoped="" ref="0x7f7bde3c0da0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde3c03d0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde3b92a0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde3b85d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde3c0890"/>
        <function-ref name="start" scoped="" ref="0x7f7bde3b9760"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde3b9c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bde3daa90" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bde3daa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bde3d8e60"/>
        <function-ref name="test" scoped="" ref="0x7f7bde3d84e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde3e26f0"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bde3d7350"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bde3d7860"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde3e15d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde3e1110"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde3d89a0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde3e2bb0"/>
        <function-ref name="start" scoped="" ref="0x7f7bde3e1a90"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde3d8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f7bde3ae020" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bde3ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f7bde3ae3a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f7bde3ae530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f7bde3ae6c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f7bde3ae850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f7bde3ae9e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f7bde3aeb70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f7bde3aed00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f7bde3ad020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f7bde3ad1b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f7bde3ad340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f7bde3a85a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f7bde3a85a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bde3a4020"/>
        <function-ref name="fired" scoped="" ref="0x7f7bde3a7c10"/>
        <function-ref name="get" scoped="" ref="0x7f7bde3a7240"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde3a6110"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde3a44e0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde3a7700"/>
        <function-ref name="start" scoped="" ref="0x7f7bde3a65d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde3a6a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f7bde3ad850" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f7bde3ad850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f7bde3a9e60"/>
        <function-ref name="test" scoped="" ref="0x7f7bde3a94e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde3ac4c0"/>
        <function-ref name="captured" scoped="" ref="0x7f7bde3ab020"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde3ab530"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde3a99a0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde3ac980"/>
        <function-ref name="start" scoped="" ref="0x7f7bde3ab9f0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde3a9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f7bde3a4ba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f7bde3a4ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bde3a1550"/>
        <function-ref name="fired" scoped="" ref="0x7f7bde3a21f0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde3a37f0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde3a26b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde3a1a10"/>
        <function-ref name="set" scoped="" ref="0x7f7bde3a3cb0"/>
        <function-ref name="start" scoped="" ref="0x7f7bde3a2b70"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde3a1090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f7bde39f120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f7bde39f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bde39da90"/>
        <function-ref name="fired" scoped="" ref="0x7f7bde39e770"/>
        <function-ref name="get" scoped="" ref="0x7f7bde39fd50"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde39ec30"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde39b020"/>
        <function-ref name="set" scoped="" ref="0x7f7bde39e260"/>
        <function-ref name="start" scoped="" ref="0x7f7bde39d110"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde39d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bde3b6b80" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bde3b6b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bde3af020"/>
        <function-ref name="test" scoped="" ref="0x7f7bde3b1550"/>
        <function-ref name="get" scoped="" ref="0x7f7bde3b37d0"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bde3af4e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bde3af9f0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde3b26b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde3b21f0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde3b1a10"/>
        <function-ref name="set" scoped="" ref="0x7f7bde3b3c90"/>
        <function-ref name="start" scoped="" ref="0x7f7bde3b2b70"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde3b1090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bde3212a0" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bde3212a0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f7bde9fb020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f7bde9fb020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bde321620"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f7bde321a10" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bde321a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bde310e60"/>
        <function-ref name="test" scoped="" ref="0x7f7bde3104e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde3136b0"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bde30f350"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bde30f860"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde312590"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde3120d0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde3109a0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde313b70"/>
        <function-ref name="start" scoped="" ref="0x7f7bde312a50"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde310020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bdcc0dd90" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdcc0dd90"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f7bde9fcc00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f7bde9fcc00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdcc0a670"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdcc0b5d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdcc0a020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdcc0ba90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdcc0ab30"/>
        <function-ref name="start" scoped="" ref="0x7f7bdcc0cbc0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcc0b110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7f7bdcc03570" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f7bdcc03570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bdcc00020"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdcc02bc0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcc021f0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdcc010d0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdcc004e0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcc026b0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdcc01590"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcc01a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7f7bdcc080b0" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f7bdcc080b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bdcc054e0"/>
        <function-ref name="test" scoped="" ref="0x7f7bdcc06a50"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcc08ce0"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bdcc059a0"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bdcc03020"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdcc07bf0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdcc07730"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdcc05020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcc07220"/>
        <function-ref name="start" scoped="" ref="0x7f7bdcc060d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcc06590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bde2ce290" loc="24:../../tos/platforms/mica/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bde2ce290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde930950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f7bde92f180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bde2ca0d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bde2caa50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bde2ca590"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde2c9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bde2c6290" loc="24:../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bde2c6290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bde2c50d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bde2c5a50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bde2c5590"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde2c4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bde2c0020" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bde2c0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bde2c0e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bde2ae800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bde2ae340"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde2aecc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f7bde2ad280" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bde2ad280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bde2a9810"/>
        <function-ref name="test" scoped="" ref="0x7f7bde2aae60"/>
        <function-ref name="get" scoped="" ref="0x7f7bde2ac020"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bde2a9cd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bde2a8260"/>
        <function-ref name="reset" scoped="" ref="0x7f7bde2aa020"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde2ac9f0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bde2a9350"/>
        <function-ref name="set" scoped="" ref="0x7f7bde2ac4e0"/>
        <function-ref name="start" scoped="" ref="0x7f7bde2aa4e0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde2aa9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f7bde287540" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f7bde287540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bde2853d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bde285d50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bde285890"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde284260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bde2890f0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bde2890f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde930950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f7bde92f180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bde288020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bde2889a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bde2884e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bde288e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bdcc1e890" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdcc1e890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde930950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f7bde92f180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdcc1a0d0"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdcc1b0d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdcc1ba50"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdcc1b590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdcc1a590"/>
        <function-ref name="start" scoped="" ref="0x7f7bdcc1c6e0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcc1cbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f7bdcc160a0" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x7f7bdcc160a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdcc14b30"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdcc159f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdcc144e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdcc14020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdcc13020"/>
        <function-ref name="start" scoped="" ref="0x7f7bdcc15020"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcc15530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f7bdcc1ac00" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdcc1ac00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde930950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f7bde92f180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdcc19a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdcc184e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdcc18020"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdcc189a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bde23e020" loc="41:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bde23e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bde23e3a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bde23e530"/>
        <function-ref name="start" scoped="" ref="0x7f7bde23e6c0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde23e850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f7bde2394f0" loc="46:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f7bde2394f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f7bde239870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bde239b00" loc="48:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bde239b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde239e80"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bde238030"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde2381c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde238350"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bde2384e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bde23c050" loc="43:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bde23c050"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde23c3d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde23c560"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde23c6f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde23c880"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bde23ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bde23bdf0" loc="45:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bde23bdf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde23a1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f7bde22e8a0" loc="52:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde22e8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f7bde22ec20"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f7bde22edb0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f7bde233020"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f7bde2331b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bde23b210" loc="44:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bde23b210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde23b590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f7bde236e40" loc="51:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde236e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bde2341e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bde234370"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bde234500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f7bde226bf0" loc="53:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f7bde226bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f7bde232020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f7bde2321b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f7bde232340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f7bde2324d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f7bde232660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bde238790" loc="49:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bde238790"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bde238b10"/>
        <function-ref name="source" scoped="" ref="0x7f7bde238ca0"/>
        <function-ref name="address" scoped="" ref="0x7f7bde238e30"/>
        <function-ref name="destination" scoped="" ref="0x7f7bde236020"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bde2361b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bde236340"/>
        <function-ref name="type" scoped="" ref="0x7f7bde2364d0"/>
        <function-ref name="setType" scoped="" ref="0x7f7bde236660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bde2367f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bde236980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bde236b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f7bde222960" loc="54:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f7bde222960"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f7bde222ce0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bde222e70"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bde22c030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0x7f7bde2199e0" loc="56:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f7bde2199e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bde221020"/>
        <function-ref name="clear" scoped="" ref="0x7f7bde221750"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bde224890"/>
        <function-ref name="set" scoped="" ref="0x7f7bde221e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f7bde218af0" loc="57:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde218af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bde216210"/>
        <function-ref name="clear" scoped="" ref="0x7f7bde216940"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bde217a80"/>
        <function-ref name="set" scoped="" ref="0x7f7bde214090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bde2102e0" loc="45:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bde2102e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bde210660"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bde2107f0"/>
        <function-ref name="start" scoped="" ref="0x7f7bde210980"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde210b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f7bde1fba00" loc="62:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bde1fba00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1f91b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde1fac00"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bde1fa6b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1f9700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f7bde20cd60" loc="50:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f7bde20cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f7bde20b180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bde20b410" loc="52:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bde20b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde20b790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bde20b920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde20bab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde20bc40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bde20bdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bde20f320" loc="47:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bde20f320"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde20f6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde20f830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde20f9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde20fb50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bde20fce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bde20c1d0" loc="49:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bde20c1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde20c550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f7bde1fe400" loc="61:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bde1fe400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1fdc10"/>
        <function-ref name="get" scoped="" ref="0x7f7bde1fd6c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bde1fd170"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1fb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f7bde208320" loc="56:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde208320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f7bde2086a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f7bde208830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f7bde2089c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f7bde208b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bde20e510" loc="48:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bde20e510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde20e890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f7bde1f68a0" loc="66:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bde1f68a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bde1f1e10"/>
        <function-ref name="clear" scoped="" ref="0x7f7bde1f05a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bde1f16e0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1f0cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f7bde1f7270" loc="65:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bde1f7270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bde1f6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f7bde200df0" loc="60:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bde200df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde2045e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde204090"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bde205ac0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde204b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f7bde209800" loc="55:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde209800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bde209b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bde209d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bde208020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f7bde208e10" loc="57:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f7bde208e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f7bde2071c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f7bde207350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f7bde2074e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f7bde207670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f7bde207800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bde20a0c0" loc="53:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bde20a0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bde20a440"/>
        <function-ref name="source" scoped="" ref="0x7f7bde20a5d0"/>
        <function-ref name="address" scoped="" ref="0x7f7bde20a760"/>
        <function-ref name="destination" scoped="" ref="0x7f7bde20a8f0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bde20aa80"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bde20ac10"/>
        <function-ref name="type" scoped="" ref="0x7f7bde20ada0"/>
        <function-ref name="setType" scoped="" ref="0x7f7bde209020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bde2091b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bde209340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bde2094d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f7bde207ad0" loc="58:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f7bde207ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f7bde207e50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bde206020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bde2061b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f7bde1f34c0" loc="63:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bde1f34c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f7bde1f3840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f7bde1ee970" loc="67:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde1ee970"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bde1ec020"/>
        <function-ref name="clear" scoped="" ref="0x7f7bde1ec750"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bde1ed7c0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1ece80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bde1e7080" loc="41:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bde1e7080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bde1e7400"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bde1e7590"/>
        <function-ref name="start" scoped="" ref="0x7f7bde1e7720"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde1e78b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f7bde1be1c0" loc="85:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bde1be1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1bd910"/>
        <function-ref name="get" scoped="" ref="0x7f7bde1bd3c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bde1bedf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1bde60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0x7f7bde1df020" loc="65:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f7bde1df020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f7bde1df3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0x7f7bde1d72c0" loc="67:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0x7f7bde1d72c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bde1d7640"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bde1d77d0"/>
        <function-ref name="request" scoped="" ref="0x7f7bde1d7960"/>
        <function-ref name="granted" scoped="" ref="0x7f7bde1d7af0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bde1d7c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f7bde1e4bb0" loc="57:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f7bde1e4bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f7bde1e3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f7bde1b53f0" loc="90:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bde1b53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bde1b4970"/>
        <function-ref name="clear" scoped="" ref="0x7f7bde1b30d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bde1b4240"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1b3800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bde1e61d0" loc="54:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bde1e61d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde1e6550"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde1e66e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde1e6870"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde1e6a00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bde1e6b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bde1e4020" loc="56:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bde1e4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde1e43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f7bde1c83c0" loc="69:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bde1c83c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f7bde1c8740"/>
        <function-ref name="address" scoped="" ref="0x7f7bde1c88d0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bde1c8a60"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bde1c8bf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bde1c8d80"/>
        <function-ref name="pan" scoped="" ref="0x7f7bde1d1020"/>
        <function-ref name="setPan" scoped="" ref="0x7f7bde1d11b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bde1d1340"/>
        <function-ref name="localPan" scoped="" ref="0x7f7bde1d14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0x7f7bde1d1890" loc="70:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f7bde1d1890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1d1d10"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bde1d0020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde1d01b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde1d0340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bde1d04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f7bde1c7320" loc="74:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bde1c7320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f7bde1c76a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f7bde1c7830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f7bde1c79c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f7bde1c7b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f7bde1c3c90" loc="84:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bde1c3c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1c03c0"/>
        <function-ref name="get" scoped="" ref="0x7f7bde1c1e30"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bde1c18e0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1c0910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bde1e53f0" loc="55:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bde1e53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde1e5770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0x7f7bde1e2a10" loc="59:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f7bde1e2a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1e2d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bde1e1020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde1e11b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde1e1340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bde1e14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f7bde1b9270" loc="89:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bde1b9270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bde1b8800"/>
        <function-ref name="clear" scoped="" ref="0x7f7bde1b7020"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bde1b80d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1b7750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f7bde1bcd70" loc="88:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bde1bcd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bde1ba9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f7bde1c56d0" loc="83:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bde1c56d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1c4e70"/>
        <function-ref name="get" scoped="" ref="0x7f7bde1c4920"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bde1c43d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1c33f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f7bde1d0800" loc="73:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bde1d0800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bde1d0b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bde1d0d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bde1c7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f7bde1d9a60" loc="63:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f7bde1d9a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bde1d9de0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bde1e0020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde1e01b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde1e0340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bde1e04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f7bde1c7e10" loc="75:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f7bde1c7e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f7bde1c61c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f7bde1c6350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f7bde1c64e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f7bde1c6670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f7bde1c6800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bde1e32d0" loc="58:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bde1e32d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bde1e3650"/>
        <function-ref name="source" scoped="" ref="0x7f7bde1e37e0"/>
        <function-ref name="address" scoped="" ref="0x7f7bde1e3970"/>
        <function-ref name="destination" scoped="" ref="0x7f7bde1e3b00"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bde1e3c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bde1e3e20"/>
        <function-ref name="type" scoped="" ref="0x7f7bde1e2020"/>
        <function-ref name="setType" scoped="" ref="0x7f7bde1e21b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bde1e2340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bde1e24d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bde1e2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f7bde1e0840" loc="64:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f7bde1e0840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bde1e0bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f7bde1c6ad0" loc="81:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f7bde1c6ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f7bde1c6e50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bde1c5020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bde1c51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f7bde1bc510" loc="86:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bde1bc510"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f7bde1bc890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0x7f7bde1b0e50" loc="44:../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f7bde1b0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f7bde1af210"/>
        <function-ref name="suspend" scoped="" ref="0x7f7bde1af3a0"/>
        <function-ref name="resume" scoped="" ref="0x7f7bde1af530"/>
        <function-ref name="run" scoped="" ref="0x7f7bde1af6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f7bde163150" loc="38:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bde163150"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1634f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7f7bde163680"/>
        <function-ref name="get" scoped="" ref="0x7f7bde163810"/>
        <function-ref name="set" scoped="" ref="0x7f7bde1639a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f7bde164390" loc="37:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f7bde164390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f7bde164710"/>
        <function-ref name="insertNode" scoped="" ref="0x7f7bde1648a0"/>
        <function-ref name="getNode" scoped="" ref="0x7f7bde164a30"/>
        <function-ref name="evicted" scoped="" ref="0x7f7bde164bc0"/>
        <function-ref name="getIndex" scoped="" ref="0x7f7bde164d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f7bdcb93150" loc="43:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bdcb93150"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdcb934f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7f7bdcb93680"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcb93810"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcb939a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f7bdcb943d0" loc="42:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f7bdcb943d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f7bdcb94750"/>
        <function-ref name="insertNode" scoped="" ref="0x7f7bdcb948e0"/>
        <function-ref name="getNode" scoped="" ref="0x7f7bdcb94a70"/>
        <function-ref name="evicted" scoped="" ref="0x7f7bdcb94c00"/>
        <function-ref name="getIndex" scoped="" ref="0x7f7bdcb94d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdcb95d90" loc="41:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdcb95d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdcb94180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0x7f7bde13ba30" loc="51:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0x7f7bde13ba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f7bde13bdb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0x7f7bde149020" loc="47:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0x7f7bde149020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0x7f7bde1493a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0x7f7bde135e30" loc="50:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f7bde135e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bde13c1e0"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f7bde13c370"/>
        <function-ref name="source" scoped="" ref="0x7f7bde13c500"/>
        <function-ref name="destination" scoped="" ref="0x7f7bde13c690"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bde13c820"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bde13c9b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bde13cb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0x7f7bde13dcf0" loc="49:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0x7f7bde13dcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0x7f7bde1460a0"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0x7f7bde146230"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0x7f7bde1463c0"/>
        <function-ref name="getTransmitTime" scoped="" ref="0x7f7bde146550"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0x7f7bde1466e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f7bde1128d0" loc="61:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bde1128d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f7bde112c50"/>
        <function-ref name="wait" scoped="" ref="0x7f7bde112de0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde116020"/>
        <function-ref name="isFree" scoped="" ref="0x7f7bde1161b0"/>
        <function-ref name="getNow" scoped="" ref="0x7f7bde116340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0x7f7bde115020" loc="62:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0x7f7bde115020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bde1153a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bde115530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde1156c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bde115850"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bde1159e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bde115b70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f7bde111160" loc="64:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f7bde111160"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bde10a7c0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bde109020"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bde10a090"/>
        <function-ref name="set" scoped="" ref="0x7f7bde109750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0x7f7bde1597c0" loc="43:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f7bde1597c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bde159b40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bde159cd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bde159e60"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f7bde15e020"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f7bde15e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0x7f7bde148990" loc="46:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0x7f7bde148990"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0x7f7bde148d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0x7f7bde1509c0" loc="44:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f7bde1509c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f7bde150d40"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f7bde15d020"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f7bde15d1b0"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f7bde15d340"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f7bde15d4d0"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f7bde15d660"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f7bde15d7f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f7bde15d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f7bde119880" loc="60:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bde119880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f7bde119c00"/>
        <function-ref name="getDSN" scoped="" ref="0x7f7bde119d90"/>
        <function-ref name="setFCF" scoped="" ref="0x7f7bde132020"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f7bde1321b0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f7bde132340"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f7bde1324d0"/>
        <function-ref name="setDSN" scoped="" ref="0x7f7bde132660"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f7bde1327f0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f7bde132980"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f7bde132b10"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f7bde132ca0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f7bde132e30"/>
        <function-ref name="localAddr" scoped="" ref="0x7f7bde131020"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f7bde1312b0"/>
        <function-ref name="localPan" scoped="" ref="0x7f7bde131440"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f7bde1315d0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f7bde131760"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f7bde1318f0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f7bde131a80"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bde131c10"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f7bde131da0"/>
        <function-ref name="getFCF" scoped="" ref="0x7f7bde118020"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f7bde1181b0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f7bde118340"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f7bde1184d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0x7f7bde14be40" loc="45:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f7bde14be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f7bde1581e0"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f7bde158370"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f7bde158500"/>
        <function-ref name="getSender" scoped="" ref="0x7f7bde158690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0x7f7bde1426b0" loc="48:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f7bde1426b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f7bde142a30"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f7bde142bc0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f7bde142d50"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f7bde147020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f7bde084480" loc="41:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bde084480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f7bde084820"/>
        <function-ref name="wait" scoped="" ref="0x7f7bde0849b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bde084b40"/>
        <function-ref name="isFree" scoped="" ref="0x7f7bde084cd0"/>
        <function-ref name="getNow" scoped="" ref="0x7f7bde084e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f7bde082020" loc="47:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bde082020"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f7bde9fb3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f7bde9fb3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f7bde854180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bde080870"/>
        <function-ref name="fired" scoped="" ref="0x7f7bde081840"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bde080220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bde081d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bde080d30"/>
        <function-ref name="start" scoped="" ref="0x7f7bde082e30"/>
        <function-ref name="stop" scoped="" ref="0x7f7bde081380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f7bde083140" loc="46:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f7bde083140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f7bde0834c0"/>
        <function-ref name="suspend" scoped="" ref="0x7f7bde083650"/>
        <function-ref name="resume" scoped="" ref="0x7f7bde0837e0"/>
        <function-ref name="run" scoped="" ref="0x7f7bde083970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f7bdcb78300" loc="54:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdcb78300"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f7bdcb786a0"/>
        <function-ref name="wait" scoped="" ref="0x7f7bdcb78830"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdcb789c0"/>
        <function-ref name="isFree" scoped="" ref="0x7f7bdcb78b50"/>
        <function-ref name="getNow" scoped="" ref="0x7f7bdcb78ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f7bdcb77260" loc="59:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdcb77260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f7bde854180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdcb75b30"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdcb76a60"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdcb754e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdcb75020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdcb74020"/>
        <function-ref name="start" scoped="" ref="0x7f7bdcb76090"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcb765a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f7bdcb74410" loc="60:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f7bdcb74410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f7bdcb74790"/>
        <function-ref name="suspend" scoped="" ref="0x7f7bdcb74920"/>
        <function-ref name="resume" scoped="" ref="0x7f7bdcb74ab0"/>
        <function-ref name="run" scoped="" ref="0x7f7bdcb74c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bddfd58f0" loc="50:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bddfd58f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddfd5c70"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddfd5e00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddfd4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bddfd42b0" loc="51:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bddfd42b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddfd4630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f7bddfd73a0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f7bddfd73a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f7bddfd7740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bddfda720" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bddfda720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddfdaaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddfdac30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bddfdadc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddfd9020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddfd91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bddfd9530" loc="41:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bddfd9530"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddfd98d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bddfd9a60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddfd9bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddfd9d80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddfd8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bddfd8b00" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bddfd8b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddfd7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bddfd7a30" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bddfd7a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddfd7db0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddfd5020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddfd51b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddfd5340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddfd54d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bddfd5660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bddfd48c0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bddfd48c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bddfd4c40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f7bddfd4dd0"/>
        <function-ref name="source" scoped="" ref="0x7f7bddfd3020"/>
        <function-ref name="destination" scoped="" ref="0x7f7bddfd31b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bddfd3340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bddfd34d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bddfd3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bddfd83a0" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bddfd83a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddfd8740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bddfdb020" loc="39:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bddfdb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bddfdb3a0"/>
        <function-ref name="source" scoped="" ref="0x7f7bddfdb530"/>
        <function-ref name="address" scoped="" ref="0x7f7bddfdb6c0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bddfdb850"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bddfdb9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bddfdbb70"/>
        <function-ref name="type" scoped="" ref="0x7f7bddfdbd00"/>
        <function-ref name="setType" scoped="" ref="0x7f7bddfda020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bddfda1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bddfda340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bddfda4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bdcb578f0" loc="54:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bdcb578f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdcb57c70"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdcb57e00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdcb56020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdcb562b0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdcb562b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdcb56630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f7bdcb58420" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f7bdcb58420"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f7bdcb587c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdcb5b8b0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdcb5b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdcb5bc30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdcb5bdc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdcb5a020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdcb5a1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdcb5a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdcb5d360" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdcb5d360"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdcb5d6e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdcb5d870"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdcb5da00"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdcb5db90"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdcb5dd20"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdcb5c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bdcb5a6c0" loc="45:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdcb5a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdcb5aa60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdcb5abf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdcb5ad80"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdcb59020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdcb591b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bdcb59c90" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bdcb59c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdcb580a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdcb58ab0" loc="53:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdcb58ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdcb58e30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdcb57020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdcb571b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdcb57340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdcb574d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdcb57660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdcb59530" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdcb59530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdcb598d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bdcb568c0" loc="56:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bdcb568c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdcb56c40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f7bdcb56dd0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdcb54020"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdcb541b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdcb54340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdcb544d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdcb54660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f7bdcb548b0" loc="57:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f7bdcb548b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f7bdcb54c30"/>
        <function-ref name="changed" scoped="" ref="0x7f7bdcb54dc0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f7bdcb53020"/>
        <function-ref name="setAddress" scoped="" ref="0x7f7bdcb531b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdcb5c270" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdcb5c270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdcb5c5f0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdcb5c780"/>
        <function-ref name="address" scoped="" ref="0x7f7bdcb5c910"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdcb5caa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdcb5cc30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdcb5cdc0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdcb5b020"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdcb5b1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdcb5b340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdcb5b4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdcb5b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f7bddff4260" loc="54:../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f7bddff4260"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f7bddff45e0"/>
        <function-ref name="changed" scoped="" ref="0x7f7bddff4770"/>
        <function-ref name="amGroup" scoped="" ref="0x7f7bddff4900"/>
        <function-ref name="setAddress" scoped="" ref="0x7f7bddff4a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bddfcd310" loc="44:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bddfcd310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddfcd690"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddfcd820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddfcd9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f7bddfcdc00" loc="45:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f7bddfcdc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bddfbd020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bddfbd1b0"/>
        <function-ref name="request" scoped="" ref="0x7f7bddfbd340"/>
        <function-ref name="granted" scoped="" ref="0x7f7bddfbd4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bddfbd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f7bddfce880" loc="39:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f7bddfce880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddfcec00"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddfced90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddfcd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f7bddf58150" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f7bddf58150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f7bddf584f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f7bddf58680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f7bddf571f0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bddf571f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f7bddf57590"/>
        <function-ref name="configure" scoped="" ref="0x7f7bddf57720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f7bddf59390" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f7bddf59390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bddf59730"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bddf598c0"/>
        <function-ref name="request" scoped="" ref="0x7f7bddf59a50"/>
        <function-ref name="granted" scoped="" ref="0x7f7bddf59be0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bddf59d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f7bddf588d0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f7bddf588d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f7bddf58c50"/>
        <function-ref name="userId" scoped="" ref="0x7f7bddf58de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdcb06460" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdcb06460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdcb067e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f7bdcb06a70" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f7bdcb06a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdcb06df0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f7bdcb05020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f7bdcb051b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdcb05340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f7bdcb02850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f7bdcb02850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f7bdcb02bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f7bdcb02d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f7bdcb01910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdcb01910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f7bdcb01cb0"/>
        <function-ref name="configure" scoped="" ref="0x7f7bdcb01e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f7bdcb00120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f7bdcb00120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdcb004a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f7bdcb00630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f7bdcb007c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdcb00950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f7bdcb039d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f7bdcb039d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bdcb03d70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bdcb02020"/>
        <function-ref name="request" scoped="" ref="0x7f7bdcb021b0"/>
        <function-ref name="granted" scoped="" ref="0x7f7bdcb02340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bdcb024d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f7bdcb01020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f7bdcb01020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f7bdcb013a0"/>
        <function-ref name="userId" scoped="" ref="0x7f7bdcb01530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f7bdcb00c20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f7bdcb00c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdcaff020"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdcaff1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bddf1f2b0" loc="49:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bddf1f2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddf1f630"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddf1f7c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddf1f950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bddf1fbe0" loc="50:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bddf1fbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddf1e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f7bddf25d30" loc="42:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f7bddf25d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f7bddf230e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bddf54e00" loc="39:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bddf54e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddf261c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddf26350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bddf264e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddf26670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddf26800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7f7bddf20470" loc="48:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bddf20470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddf207f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddf20980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddf20b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddf20ca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddf20e30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bddf1f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f7bddf23390" loc="47:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bddf23390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f7bddf23710"/>
        <function-ref name="getDSN" scoped="" ref="0x7f7bddf238a0"/>
        <function-ref name="setFCF" scoped="" ref="0x7f7bddf23a30"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f7bddf23bc0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f7bddf23d50"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f7bddf22020"/>
        <function-ref name="setDSN" scoped="" ref="0x7f7bddf221b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f7bddf22340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f7bddf224d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f7bddf22660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f7bddf227f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f7bddf22980"/>
        <function-ref name="localAddr" scoped="" ref="0x7f7bddf22b10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f7bddf22da0"/>
        <function-ref name="localPan" scoped="" ref="0x7f7bddf21020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f7bddf211b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f7bddf21340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f7bddf214d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f7bddf21660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bddf217f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f7bddf21980"/>
        <function-ref name="getFCF" scoped="" ref="0x7f7bddf21b10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f7bddf21ca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f7bddf21e30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f7bddf20020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f7bddf26a50" loc="40:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f7bddf26a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddf26dd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bddf25020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddf251b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddf25340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddf254d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f7bddf25760" loc="41:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f7bddf25760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddf25ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bddee24a0" loc="69:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bddee24a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddee2820"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddee29b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddee2b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bddee2dd0" loc="70:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bddee2dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddee1180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f7bddee5730" loc="57:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bddee5730"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddee5ab0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddee5c40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddee5dd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddee4020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddee41b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bddee4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0x7f7bddee3020" loc="62:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0x7f7bddee3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddee33a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bddee1410" loc="71:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bddee1410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddee1790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddee1920"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddee1ab0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddee1c40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddee1dd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bddee0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0x7f7bddee45d0" loc="61:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0x7f7bddee45d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddee4950"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddee4ae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddee4c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f7bddf187c0" loc="55:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f7bddf187c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddf18b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddf18cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddf18e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f7bddee5120" loc="56:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f7bddee5120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddee54a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0x7f7bddee3630" loc="63:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0x7f7bddee3630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddee39b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddee3b40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddee3cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddee3e60"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddee2020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bddee21b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdde42440" loc="48:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdde42440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdde427c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f7bdde46dd0" loc="40:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bdde46dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f7bdde45180"/>
        <function-ref name="address" scoped="" ref="0x7f7bdde45310"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdde454a0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdde45630"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdde457c0"/>
        <function-ref name="pan" scoped="" ref="0x7f7bdde45950"/>
        <function-ref name="setPan" scoped="" ref="0x7f7bdde45ae0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdde45c70"/>
        <function-ref name="localPan" scoped="" ref="0x7f7bdde45e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdde44080" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdde44080"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdde44400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdde44590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdde44720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdde448b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdde44a40"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdde44bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f7bdde49e00" loc="39:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bdde49e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f7bdde481c0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f7bdde48350"/>
        <function-ref name="setFCF" scoped="" ref="0x7f7bdde484e0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f7bdde48670"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f7bdde48800"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f7bdde48990"/>
        <function-ref name="setDSN" scoped="" ref="0x7f7bdde48b20"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f7bdde48cb0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f7bdde48e40"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f7bdde47020"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f7bdde471b0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f7bdde47340"/>
        <function-ref name="localAddr" scoped="" ref="0x7f7bdde474d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f7bdde47760"/>
        <function-ref name="localPan" scoped="" ref="0x7f7bdde478f0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f7bdde47a80"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f7bdde47c10"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f7bdde47da0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f7bdde46020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdde461b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f7bdde46340"/>
        <function-ref name="getFCF" scoped="" ref="0x7f7bdde464d0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f7bdde46660"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f7bdde467f0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f7bdde46980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdde43500" loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdde43500"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdde43880"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdde43a10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdde43ba0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdde43d30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdde42020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdde421b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdde44e60" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdde44e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdde43210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdca92440" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdca92440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdca927c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f7bdca962e0" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f7bdca962e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f7bdca96660"/>
        <function-ref name="address" scoped="" ref="0x7f7bdca967f0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdca96980"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdca96b10"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdca96ca0"/>
        <function-ref name="pan" scoped="" ref="0x7f7bdca96e30"/>
        <function-ref name="setPan" scoped="" ref="0x7f7bdca95020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdca951b0"/>
        <function-ref name="localPan" scoped="" ref="0x7f7bdca95340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdca95590" loc="43:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdca95590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdca95910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdca95aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdca95c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdca95dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdca94020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdca941b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f7bdca99020" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f7bdca99020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f7bdca993a0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f7bdca99530"/>
        <function-ref name="setFCF" scoped="" ref="0x7f7bdca996c0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f7bdca99850"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f7bdca999e0"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f7bdca99b70"/>
        <function-ref name="setDSN" scoped="" ref="0x7f7bdca99d00"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f7bdca98020"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f7bdca981b0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f7bdca98340"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f7bdca984d0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f7bdca98660"/>
        <function-ref name="localAddr" scoped="" ref="0x7f7bdca987f0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f7bdca98a80"/>
        <function-ref name="localPan" scoped="" ref="0x7f7bdca98c10"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f7bdca98da0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f7bdca97020"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f7bdca971b0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f7bdca97340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdca974d0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f7bdca97660"/>
        <function-ref name="getFCF" scoped="" ref="0x7f7bdca977f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f7bdca97980"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f7bdca97b10"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f7bdca97ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f7bdca94a70" loc="49:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f7bdca94a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f7bdca94df0"/>
        <function-ref name="changed" scoped="" ref="0x7f7bdca93020"/>
        <function-ref name="amGroup" scoped="" ref="0x7f7bdca931b0"/>
        <function-ref name="setAddress" scoped="" ref="0x7f7bdca93340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdca94440" loc="44:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdca94440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdca947c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdca935d0" loc="50:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdca935d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdca93950"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdca93ae0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdca93c70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdca93e00"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdca92020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdca921b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bdde0fa70" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bdde0fa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdde0fdf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdde0d020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdde0d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdde0d440" loc="46:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdde0d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdde0d7c0"/>
        <function-ref name="header" scoped="" ref="0x7f7bdde0d950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f7bdde0b400" loc="51:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bdde0b400"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdde0b780"/>
        <function-ref name="clearAll" scoped="" ref="0x7f7bdde0b910"/>
        <function-ref name="get" scoped="" ref="0x7f7bdde0baa0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdde0bc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdde10840" loc="40:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdde10840"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdde10bc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdde10d50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdde0f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bdde0dbe0" loc="48:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bdde0dbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f7bdde0c020"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f7bdde0c1b0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f7bdde0c340"/>
        <function-ref name="getSender" scoped="" ref="0x7f7bdde0c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bdde0f270" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdde0f270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdde0f5f0"/>
        <function-ref name="header" scoped="" ref="0x7f7bdde0f780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f7bdde0c720" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f7bdde0c720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f7bdde0caa0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f7bdde0cc30"/>
        <function-ref name="getNode" scoped="" ref="0x7f7bdde0cdc0"/>
        <function-ref name="evicted" scoped="" ref="0x7f7bdde0b020"/>
        <function-ref name="getIndex" scoped="" ref="0x7f7bdde0b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bdca3f310" loc="49:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bdca3f310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdca3f690"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdca3f820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdca3f9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdca3fc40" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdca3fc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdca3e020"/>
        <function-ref name="header" scoped="" ref="0x7f7bdca3e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f7bdca3dab0" loc="54:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f7bdca3dab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdca3de30"/>
        <function-ref name="clearAll" scoped="" ref="0x7f7bdca3c020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdca3c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdca3c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdca429b0" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdca429b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdca42d30"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdca41020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdca411b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f7bdca3ee80" loc="53:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f7bdca3ee80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f7bdca3d220"/>
        <function-ref name="insertNode" scoped="" ref="0x7f7bdca3d3b0"/>
        <function-ref name="getNode" scoped="" ref="0x7f7bdca3d540"/>
        <function-ref name="evicted" scoped="" ref="0x7f7bdca3d6d0"/>
        <function-ref name="getIndex" scoped="" ref="0x7f7bdca3d860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bdca41400" loc="42:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdca41400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdca41780"/>
        <function-ref name="header" scoped="" ref="0x7f7bdca41910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdca41b60" loc="44:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdca41b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdca3f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0x7f7bdca3e400" loc="52:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f7bdca3e400"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f7bdca3e780"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f7bdca3e910"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f7bdca3eaa0"/>
        <function-ref name="getSender" scoped="" ref="0x7f7bdca3ec30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bdddf9950" loc="85:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bdddf9950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdddf9cd0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdddf9e60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdddf8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdddf82b0" loc="86:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdddf82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdddf8630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0x7f7bdddf6d90" loc="93:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f7bdddf6d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdddf5180"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdddf5310"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdddf54a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdde06e40" loc="77:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdde06e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdddfb1e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdddfb370"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdddfb500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdddfaa10" loc="80:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdddfaa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdddfad90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdddf9020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdddf91b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdddf9340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdddf94d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdddf9660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdddf88c0" loc="87:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdddf88c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdddf8c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdddf8dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdddf7020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdddf71b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdddf7340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdddf74d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0x7f7bdddf6100" loc="92:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f7bdddf6100"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f7bdddf6480"/>
        <function-ref name="setRetries" scoped="" ref="0x7f7bdddf6610"/>
        <function-ref name="getRetries" scoped="" ref="0x7f7bdddf67a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f7bdddf6930"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f7bdddf6ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdddfb790" loc="78:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdddfb790"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdddfbb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f7bdddf7720" loc="88:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdddf7720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdddf7aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdddf7c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdddf7dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f7bdddfbd60" loc="79:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f7bdddfbd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f7bdddfa180"/>
        <function-ref name="setRetries" scoped="" ref="0x7f7bdddfa310"/>
        <function-ref name="getRetries" scoped="" ref="0x7f7bdddfa4a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f7bdddfa630"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f7bdddfa7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bdddf0880" loc="39:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bdddf0880"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdddf0c00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdddf0d90"/>
        <function-ref name="start" scoped="" ref="0x7f7bddddb020"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddddb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bdddd88c0" loc="49:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bdddd88c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdddd8c40"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdddd8dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdddd6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdddd62b0" loc="50:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdddd62b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdddd6630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bddddb440" loc="40:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bddddb440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddddb7c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddddb950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddddbae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdddda3d0" loc="42:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdddda3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdddda750"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdddda8e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddddaa70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddddac00"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddddad90"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdddd9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f7bdddd9270" loc="44:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdddd9270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f7bdddd95f0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f7bdddd9780"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f7bdddd9910"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f7bdddd9aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f7bdddd9d90" loc="48:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f7bdddd9d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdddd8180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdddd8310"/>
        <function-ref name="start" scoped="" ref="0x7f7bdddd84a0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdddd8630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bddddbd70" loc="41:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bddddbd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdddda180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdddd68c0" loc="51:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdddd68c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdddd6c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdddd6dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdddd5020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdddd51b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdddd5340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdddd54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f7bdca1a640" loc="37:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdca1a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f7bdca1a9c0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f7bdca1ab50"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f7bdca1ace0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f7bdca1ae70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bddd67a10" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bddd67a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bddd67d90"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bddd65020"/>
        <function-ref name="start" scoped="" ref="0x7f7bddd651b0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddd65340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f7bddd63aa0" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f7bddd63aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f7bddd63e20"/>
        <function-ref name="turnOn" scoped="" ref="0x7f7bddd62020"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bddd621b0"/>
        <function-ref name="done" scoped="" ref="0x7f7bddd62340"/>
        <function-ref name="standby" scoped="" ref="0x7f7bddd624d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bddd62660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bddd655d0" loc="40:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bddd655d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddd65950"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddd65ae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddd65c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f7bddd61270" loc="49:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddd61270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddd615f0"/>
        <function-ref name="header" scoped="" ref="0x7f7bddd61780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bddd64020" loc="41:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bddd64020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddd643a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f7bddd628b0" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bddd628b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddd62c30"/>
        <function-ref name="ready" scoped="" ref="0x7f7bddd62dc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddd61020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f7bddd645f0" loc="42:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f7bddd645f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f7bddd64970"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bddd64b00"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bddd64c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f7bddd63020" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f7bddd63020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f7bddd633a0"/>
        <function-ref name="suspend" scoped="" ref="0x7f7bddd63530"/>
        <function-ref name="resume" scoped="" ref="0x7f7bddd636c0"/>
        <function-ref name="run" scoped="" ref="0x7f7bddd63850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bdca13bf0" loc="43:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bdca13bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdca12020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdca121b0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdca12340"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdca124d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f7bdca12760" loc="44:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bdca12760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdca12ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f7bdca0f670" loc="52:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f7bdca0f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f7bdca0f9f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f7bdca0fb80"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bdca0fd10"/>
        <function-ref name="done" scoped="" ref="0x7f7bdca0e020"/>
        <function-ref name="standby" scoped="" ref="0x7f7bdca0e1b0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bdca0e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdca12d70" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdca12d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdca10180"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdca10310"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdca104a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x7f7bdca0c940" loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x7f7bdca0c940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdca0ccc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdca0ce50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f7bdca0d950" loc="55:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdca0d950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdca0dcd0"/>
        <function-ref name="header" scoped="" ref="0x7f7bdca0de60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0x7f7bdca0b160" loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0x7f7bdca0b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdca0b4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdca0b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdca10730" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdca10730"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdca10ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0x7f7bdca0c160" loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0x7f7bdca0c160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdca0c4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdca0c670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f7bdca0d060" loc="54:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bdca0d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdca0d3e0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bdca0d570"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdca0d700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f7bdca10d00" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f7bdca10d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f7bdca0f0a0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bdca0f230"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bdca0f3c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f7bdca0e590" loc="53:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f7bdca0e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f7bdca0e910"/>
        <function-ref name="suspend" scoped="" ref="0x7f7bdca0eaa0"/>
        <function-ref name="resume" scoped="" ref="0x7f7bdca0ec30"/>
        <function-ref name="run" scoped="" ref="0x7f7bdca0edc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bddd0c310" loc="44:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bddd0c310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddd0c690"/>
        <function-ref name="ready" scoped="" ref="0x7f7bddd0c820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddd0c9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bddd0cc40" loc="45:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bddd0cc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddd0a020"/>
        <function-ref name="header" scoped="" ref="0x7f7bddd0a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f7bddd0a400" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bddd0a400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f7bddd0a780"/>
        <function-ref name="wait" scoped="" ref="0x7f7bddd0a910"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddd0aaa0"/>
        <function-ref name="isFree" scoped="" ref="0x7f7bddd0ac30"/>
        <function-ref name="getNow" scoped="" ref="0x7f7bddd0adc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bddd090a0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bddd090a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f7bddd09420"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f7bddd095b0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f7bddd09740"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f7bddd098d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bddd0dac0" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddd0dac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddd0de40"/>
        <function-ref name="header" scoped="" ref="0x7f7bddd0c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f7bddd0d1d0" loc="39:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bddd0d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddd0d550"/>
        <function-ref name="ready" scoped="" ref="0x7f7bddd0d6e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddd0d870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bdc9d3820" loc="47:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bdc9d3820"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc9d3ba0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bdc9d3d30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc9d1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdc9d12b0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdc9d12b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdc9d1630"/>
        <function-ref name="header" scoped="" ref="0x7f7bdc9d17c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f7bdc9d1a10" loc="49:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdc9d1a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f7bdc9d1d90"/>
        <function-ref name="wait" scoped="" ref="0x7f7bdc9d0020"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc9d01b0"/>
        <function-ref name="isFree" scoped="" ref="0x7f7bdc9d0340"/>
        <function-ref name="getNow" scoped="" ref="0x7f7bdc9d04d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f7bdc9d0720" loc="50:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f7bdc9d0720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f7bdc9d0aa0"/>
        <function-ref name="rand32" scoped="" ref="0x7f7bdc9d0c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bdc9cf020" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bdc9cf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f7bdc9cf3a0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f7bdc9cf530"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f7bdc9cf6c0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f7bdc9cf850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bdc9d3020" loc="43:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdc9d3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdc9d33a0"/>
        <function-ref name="header" scoped="" ref="0x7f7bdc9d3530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f7bdc9d4660" loc="42:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bdc9d4660"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc9d49e0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bdc9d4b70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc9d4d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0x7f7bdc9cfb20" loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0x7f7bdc9cfb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdc9ce020"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdc9ce1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f7bddd22a20" loc="46:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f7bddd22a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f7bddd22da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f7bddd1f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f7bddd20920" loc="45:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f7bddd20920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bddd22560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bddd269a0" loc="44:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bddd269a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bddd26d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f7bddd1ba20" loc="48:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f7bddd1ba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f7bddd1bda0"/>
        <function-ref name="rand32" scoped="" ref="0x7f7bddd1a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f7bddd1c940" loc="47:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f7bddd1c940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bddd1b560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bddd1c080" loc="46:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bddd1c080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bddd1c400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bddcd8020" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bddcd8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddcd83a0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bddcd8530"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddcd86c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bddcd8950" loc="50:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bddcd8950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddcd8cd0"/>
        <function-ref name="header" scoped="" ref="0x7f7bddcd8e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f7bddcd70e0" loc="51:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bddcd70e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f7bddcd7460"/>
        <function-ref name="wait" scoped="" ref="0x7f7bddcd75f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddcd7780"/>
        <function-ref name="isFree" scoped="" ref="0x7f7bddcd7910"/>
        <function-ref name="getNow" scoped="" ref="0x7f7bddcd7aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0x7f7bddcd6e60" loc="54:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f7bddcd6e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddcd5210"/>
        <function-ref name="get" scoped="" ref="0x7f7bddcd53a0"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bddcd5530"/>
        <function-ref name="set" scoped="" ref="0x7f7bddcd56c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bddcd7d30" loc="53:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bddcd7d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f7bddcd60e0"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f7bddcd6270"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f7bddcd6400"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f7bddcd6590"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f7bddcd6720"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f7bddcd68b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f7bddcd6a40"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f7bddcd6bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bddd04d60" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddd04d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddcd9180"/>
        <function-ref name="header" scoped="" ref="0x7f7bddcd9310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f7bddd04470" loc="42:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bddd04470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddd047f0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bddd04980"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddd04b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f7bddcd9560" loc="44:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bddcd9560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bddcd98e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bddcd9a70"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bddcd9c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bddcbcac0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bddcbcac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bddcbce40"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bddcbb020"/>
        <function-ref name="start" scoped="" ref="0x7f7bddcbb1b0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddcbb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f7bddcb8400" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f7bddcb8400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f7bddcb8780"/>
        <function-ref name="request" scoped="" ref="0x7f7bddcb8910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bddcb3b00" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bddcb3b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddcb3e80"/>
        <function-ref name="ready" scoped="" ref="0x7f7bddcb2030"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddcb21c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bddcb2450" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bddcb2450"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddcb27d0"/>
        <function-ref name="header" scoped="" ref="0x7f7bddcb2960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f7bddcba470" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f7bddcba470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f7bddcba7f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f7bddcba980"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bddcbab10"/>
        <function-ref name="done" scoped="" ref="0x7f7bddcbaca0"/>
        <function-ref name="standby" scoped="" ref="0x7f7bddcbae30"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bddcb9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bddcb8b60" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bddcb8b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddcb7020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddcb71b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddcb7340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddcb74d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddcb7660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bddcb77f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f7bddcb4be0" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f7bddcb4be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f7bddcb30a0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f7bddcb3230"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bddcb33c0"/>
        <function-ref name="done" scoped="" ref="0x7f7bddcb3550"/>
        <function-ref name="standby" scoped="" ref="0x7f7bddcb36e0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bddcb3870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f7bddcb7a80" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f7bddcb7a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f7bddcb7e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bddcb9b60" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bddcb9b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddcb8020"/>
        <function-ref name="header" scoped="" ref="0x7f7bddcb81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f7bddcb45d0" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f7bddcb45d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddcb4950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f7bddcb6120" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f7bddcb6120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bddcb64a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bddcb6630"/>
        <function-ref name="start" scoped="" ref="0x7f7bddcb67c0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddcb6950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bddcb1440" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bddcb1440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddcb17c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddcb1950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddcb1ae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddcb1c70"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddcb1e00"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bddcb0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f7bddcbbe80" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f7bddcbbe80"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bddcba220"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bddcb02b0" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bddcb02b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f7bddcb0630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f7bddcb6be0" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f7bddcb6be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddcb4020"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddcb41b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddcb4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f7bddcb9270" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bddcb9270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddcb95f0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bddcb9780"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddcb9910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f7bddcb2bf0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f7bddcb2bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f7bddcb1020"/>
        <function-ref name="request" scoped="" ref="0x7f7bddcb11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f7bddcbb590" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f7bddcbb590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bddcbb910"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bddcbbaa0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bddcbbc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f7bdda9fb00" loc="50:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f7bdda9fb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda9fe80"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda9e030"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdda9e1c0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda9e350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bddaa3c20" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bddaa3c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bddaa1020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bddaa11b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bddaa1340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bddaa14d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bddaa1660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bddaa17f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bddaa0cd0" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bddaa0cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda9f0a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdda9f230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda9f3c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdda9f550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda9f6e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda9f870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f7bddaa5020" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bddaa5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bddaa45a0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bddaa4cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bddaa5e30"/>
        <function-ref name="set" scoped="" ref="0x7f7bddaa3460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f7bddaa1c00" loc="48:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bddaa1c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bddaa08a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f7bddaa9020" loc="41:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bddaa9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bddaa85a0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bddaa8cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bddaa9e30"/>
        <function-ref name="set" scoped="" ref="0x7f7bddaa6460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f7bdc96de60" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f7bdc96de60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc96c210"/>
        <function-ref name="get" scoped="" ref="0x7f7bdc96c3a0"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdc96c530"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc96c6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdc96d020" loc="44:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdc96d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc96d3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdc96d530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc96d6c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdc96d850"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdc96d9e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdc96db70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdc96acd0" loc="54:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdc96acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc9690a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdc969230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc9693c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdc969550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdc9696e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdc969870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f7bdc9822a0" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdc9822a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdc981800"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdc980020"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdc9810d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc980750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f7bdc96ca70" loc="51:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdc96ca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdc96b6f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f7bdc96bc40" loc="52:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f7bdc96bc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdc96a8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f7bdc986360" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdc986360"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdc9858e0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdc983090"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdc9851b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc9837c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f7bddc59080" loc="20:../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f7bddc59080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bddc59cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f7bddc55a40" loc="46:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddc55a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bddc50020"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddc53510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bddc51300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bddc53e10"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bddc50920"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bddc504a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bddc53990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bddc54670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bddc51910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bddc54b40"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddc53090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f7bddc4e020" loc="47:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f7bddc4e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bddc4ec50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bddc58b40" loc="45:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bddc58b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bddc55020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7f7bddc45850" loc="29:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7f7bddc45850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bddc446a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bddc43090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bddc44b60"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bddc43550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bddc4c790" loc="27:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bddc4c790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bddc4cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7f7bddc491d0" loc="28:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7f7bddc491d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bddc47b30"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddc489f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bddc474e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bddc47020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bddc45020"/>
        <function-ref name="start" scoped="" ref="0x7f7bddc48020"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddc48530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bddb52d40" loc="61:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bddb52d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bddb4f670"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddb50590"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bddb4f020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bddb50a50"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bddb4fb30"/>
        <function-ref name="start" scoped="" ref="0x7f7bddb51ba0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddb500d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bddb52530" loc="60:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bddb52530"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f7bde9fb020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f7bde9fb020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bddb528b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bddb4d180" loc="62:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bddb4d180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bddb4c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bddb4c9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bddb4c4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bddb4ce60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x7f7bdc93ce20" loc="66:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bdc93ce20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f7bdc93b1c0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f7bdc93b350"/>
        <function-ref name="getControlA" scoped="" ref="0x7f7bdc93b4e0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f7bdc93b670"/>
        <function-ref name="setControlB" scoped="" ref="0x7f7bdc93b800"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f7bdc93b990"/>
        <function-ref name="getControlB" scoped="" ref="0x7f7bdc93bb20"/>
        <function-ref name="setControlA" scoped="" ref="0x7f7bdc93bcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bdc9474b0" loc="61:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdc9474b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdc945db0"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdc946da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdc945760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdc9452a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdc9432a0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdc9463d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdc9468e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdc948c20" loc="60:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdc948c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdc947020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bdc9438d0" loc="62:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdc9438d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdc942780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdc941150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdc942c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdc941610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x7f7bdc936450" loc="68:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f7bdc936450"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f7bdc9367d0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f7bdc936960"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f7bdc936af0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f7bdc936c80"/>
        <function-ref name="countBusy" scoped="" ref="0x7f7bdc936e10"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f7bdc935020"/>
        <function-ref name="getAssr" scoped="" ref="0x7f7bdc9351b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f7bdc935340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x7f7bdc93a0a0" loc="67:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f7bdc93a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bdc937a10"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdc9386c0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdc93acd0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdc938b80"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdc936020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc9381b0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdc937090"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdc937550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f7bdc941bc0" loc="65:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdc941bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bdc93c020"/>
        <function-ref name="test" scoped="" ref="0x7f7bdc93d590"/>
        <function-ref name="get" scoped="" ref="0x7f7bdc940820"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bdc93c4e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bdc93c9f0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdc93e720"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdc93e260"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdc93da50"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc940ce0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdc93ebe0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdc93d0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f7bddbc62b0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bddbc62b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f7bddbc6630"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f7bddbc67c0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f7bddbc6950"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f7bddbc6ae0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f7bddbc6c70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f7bddbc6e00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f7bddbc5020"/>
        <function-ref name="setControlA" scoped="" ref="0x7f7bddbc51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f7bddbc1b30" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f7bddbc1b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f7bddbc0020"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f7bddbc01b0"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f7bddbc0340"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f7bddbc04d0"/>
        <function-ref name="countBusy" scoped="" ref="0x7f7bddbc0660"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f7bddbc07f0"/>
        <function-ref name="getAssr" scoped="" ref="0x7f7bddbc0980"/>
        <function-ref name="setAssr" scoped="" ref="0x7f7bddbc0b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f7bddbc56b0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f7bddbc56b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bddbc1110"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddbc4da0"/>
        <function-ref name="get" scoped="" ref="0x7f7bddbc43d0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bddbc22a0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bddbc15d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bddbc4890"/>
        <function-ref name="start" scoped="" ref="0x7f7bddbc2760"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddbc2c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bddbcee20" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bddbcee20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bddbc7350"/>
        <function-ref name="test" scoped="" ref="0x7f7bddbc89a0"/>
        <function-ref name="get" scoped="" ref="0x7f7bddbcbac0"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bddbc7810"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bddbc7d20"/>
        <function-ref name="reset" scoped="" ref="0x7f7bddbca9f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bddbca530"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bddbc8e60"/>
        <function-ref name="set" scoped="" ref="0x7f7bddbca020"/>
        <function-ref name="start" scoped="" ref="0x7f7bddbc8020"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddbc84e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f7bddbb6570" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bddbb6570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f7bddbb68f0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f7bddbb6a80"/>
        <function-ref name="getControlA" scoped="" ref="0x7f7bddbb6c10"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f7bddbb6da0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f7bddbb4020"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f7bddbb41b0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f7bddbb4340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f7bddbb44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f7bddbb1cb0" loc="85:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f7bddbb1cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f7bddbaf0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f7bddbaf460" loc="86:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f7bddbaf460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f7bddbaf7e0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f7bddbaf970"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f7bddbafb00"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f7bddbafc90"/>
        <function-ref name="countBusy" scoped="" ref="0x7f7bddbafe20"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f7bddbae020"/>
        <function-ref name="getAssr" scoped="" ref="0x7f7bddbae1b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f7bddbae340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f7bddbb49d0" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f7bddbb49d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bddbb1350"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddbb2020"/>
        <function-ref name="get" scoped="" ref="0x7f7bddbb3630"/>
        <function-ref name="reset" scoped="" ref="0x7f7bddbb24e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bddbb1810"/>
        <function-ref name="set" scoped="" ref="0x7f7bddbb3af0"/>
        <function-ref name="start" scoped="" ref="0x7f7bddbb29a0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddbb2e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bddbbb060" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bddbbb060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bddbb74e0"/>
        <function-ref name="test" scoped="" ref="0x7f7bddbb8a10"/>
        <function-ref name="get" scoped="" ref="0x7f7bddbbbc90"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bddbb79a0"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bddbb6020"/>
        <function-ref name="reset" scoped="" ref="0x7f7bddbb9b80"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bddbb96c0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bddbb7020"/>
        <function-ref name="set" scoped="" ref="0x7f7bddbb91b0"/>
        <function-ref name="start" scoped="" ref="0x7f7bddbb8090"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddbb8550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f7bddb19490" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7f7bddb19490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bddb19810"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bddb199a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f7bddb1d1d0" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bddb1d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bddb1bb30"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddb1c9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bddb1b4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bddb1b020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bddb19020"/>
        <function-ref name="start" scoped="" ref="0x7f7bddb1c020"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddb1c530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bddb23d60" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bddb23d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bddb1e220"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddb217d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bddb20590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bddb20110"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bddb1eb20"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bddb1e6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bddb21c50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bddb22980"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bddb20ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bddb22e50"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddb21350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f7bddac9a00" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7f7bddac9a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bddac9d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bddac8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f7bddace640" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7f7bddace640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bddacac40"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddacc1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bddaca020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bddaccae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bddac9590"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bddac9110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bddacc660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bddacd390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bddaca630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bddacd860"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddacdd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bddad4150" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bddad4150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bddad0700"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddad3c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bddad1a50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bddad15b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bddace090"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bddad0ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bddad1110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bddad4d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bddad00d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bddad32a0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddad3790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f7bddac6790" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f7bddac6790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bddac53f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f7bddac5a60" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bddac5a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bddabb890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bddab9260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bddabbd50"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bddab9720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f7bddab22e0" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f7bddab22e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bddaae870"/>
        <function-ref name="fired" scoped="" ref="0x7f7bddab1e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bddab0c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bddab0780"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bddaad1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bddaaecf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bddab0300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bddab1020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bddaae260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bddab14f0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bddab19c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdda99590" loc="43:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda99590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda99910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdda99aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda99c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdda99dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda79020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda791b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdda794a0" loc="48:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdda794a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda79820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdda799b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda79b40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdda79cd0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda79e60"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda78020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x7f7bdda9a9b0" loc="42:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x7f7bdda9a9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda9ad50"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda99020"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdda991b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda99340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bdda760e0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bdda760e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdda76460"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdda765f0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdda76780"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdda76910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f7bdda72b60" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f7bdda72b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f7bdda71020"/>
        <function-ref name="request" scoped="" ref="0x7f7bdda711b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bdda6c440" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bdda6c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdda6c7c0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bdda6c950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdda6cae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdda6cd70" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdda6cd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdda6b180"/>
        <function-ref name="header" scoped="" ref="0x7f7bdda6b310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f7bdda74b60" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f7bdda74b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f7bdda73020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f7bdda731b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bdda73340"/>
        <function-ref name="done" scoped="" ref="0x7f7bdda734d0"/>
        <function-ref name="standby" scoped="" ref="0x7f7bdda73660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bdda737f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdda71400" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda71400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda71780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdda71910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda71aa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdda71c30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda71dc0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda70020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f7bdda6d410" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f7bdda6d410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f7bdda6d890"/>
        <function-ref name="turnOn" scoped="" ref="0x7f7bdda6da20"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bdda6dbb0"/>
        <function-ref name="done" scoped="" ref="0x7f7bdda6dd40"/>
        <function-ref name="standby" scoped="" ref="0x7f7bdda6c020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bdda6c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f7bdda702b0" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f7bdda702b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f7bdda70630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bdda72400" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdda72400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdda72780"/>
        <function-ref name="header" scoped="" ref="0x7f7bdda72910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f7bdda6fd70" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f7bdda6fd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdda6d180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f7bdda70920" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f7bdda70920"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdda70ca0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdda70e30"/>
        <function-ref name="start" scoped="" ref="0x7f7bdda6f020"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdda6f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdda6bd40" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdda6bd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda6a0e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdda6a270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda6a400"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdda6a590"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda6a720"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda6a8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f7bdda74590" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f7bdda74590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdda74910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bdda6ab40" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bdda6ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f7bdda69020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f7bdda6f440" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f7bdda6f440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdda6f7c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdda6f950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdda6fae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f7bdda73a40" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bdda73a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdda73dc0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bdda72020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdda721b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f7bdda6b5a0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f7bdda6b5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f7bdda6b920"/>
        <function-ref name="request" scoped="" ref="0x7f7bdda6bab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f7bdda76b60" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f7bdda76b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdda74020"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdda741b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdda74340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f7bdda615c0" loc="45:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f7bdda615c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f7bdda61940"/>
        <function-ref name="request" scoped="" ref="0x7f7bdda61ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f7bdda5c3b0" loc="49:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bdda5c3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda5bac0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda5b570"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdda5b020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda59090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f7bdda47ca0" loc="64:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f7bdda47ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda460a0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda46230"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdda463c0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda46550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f7bdda4b2e0" loc="61:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f7bdda4b2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdda4a840"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdda48020"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdda4a110"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda48750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f7bdda65600" loc="42:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f7bdda65600"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f7bdda65980"/>
        <function-ref name="turnOn" scoped="" ref="0x7f7bdda65b10"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bdda65ca0"/>
        <function-ref name="done" scoped="" ref="0x7f7bdda65e30"/>
        <function-ref name="standby" scoped="" ref="0x7f7bdda62020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bdda621b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f7bdda45470" loc="66:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdda45470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f7bdda457f0"/>
        <function-ref name="wait" scoped="" ref="0x7f7bdda45980"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdda45b10"/>
        <function-ref name="isFree" scoped="" ref="0x7f7bdda45ca0"/>
        <function-ref name="getNow" scoped="" ref="0x7f7bdda45e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f7bdda60e80" loc="48:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bdda60e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda5d5e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda5d090"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdda5fad0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda5db30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdda61d90" loc="46:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda61d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda60180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdda60310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda604a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdda60630"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda607c0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda60950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bdda4c1f0" loc="60:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bdda4c1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda4c670"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda4c800"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda4c990"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f7bdda4cb20"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f7bdda4ccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bdda62dd0" loc="44:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdda62dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdda61180"/>
        <function-ref name="header" scoped="" ref="0x7f7bdda61310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bdda51dd0" loc="55:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdda51dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f7bde854180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdda4d6e0"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdda4e6b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdda4d090"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdda4eb70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdda4dba0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdda50ca0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdda4e1f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f7bdda59940" loc="50:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdda59940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda56090"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda58af0"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdda585a0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda565e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f7bdda52a40" loc="54:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdda52a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdda516b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f7bdda62460" loc="43:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bdda62460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdda627e0"/>
        <function-ref name="ready" scoped="" ref="0x7f7bdda62970"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdda62b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f7bdda56e70" loc="51:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bdda56e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda545e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda54090"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdda55ad0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda54b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f7bdda468d0" loc="65:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f7bdda468d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda46c50"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda46de0"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdda45020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda451b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f7bdda47110" loc="63:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f7bdda47110"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda47490"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda47620"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdda477b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda47940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f7bdda521e0" loc="52:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bdda521e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f7bdda52560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f7bdda44110" loc="67:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f7bdda44110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f7bdda44490"/>
        <function-ref name="suspend" scoped="" ref="0x7f7bdda44620"/>
        <function-ref name="resume" scoped="" ref="0x7f7bdda447b0"/>
        <function-ref name="run" scoped="" ref="0x7f7bdda44940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f7bdda3bc40" loc="52:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f7bdda3bc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f7bdda3a020"/>
        <function-ref name="request" scoped="" ref="0x7f7bdda3a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f7bdda1a430" loc="74:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f7bdda1a430"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f7bdda203d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f7bdda36a40" loc="56:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f7bdda36a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda331b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda35c00"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdda356b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda33700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f7bdda186a0" loc="80:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f7bdda186a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda18a20"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda18bb0"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdda18d40"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda16020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f7bdda3d600" loc="47:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f7bdda3d600"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f7bde9fb3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f7bde9fb3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdda3d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f7bdda15200" loc="83:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f7bdda15200"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdda14970"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdda130d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdda14240"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda13800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f7bdda27020" loc="70:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f7bdda27020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdda273a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdda27530"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdda276c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdda27850"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda279e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdda27b70"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda27d00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdda22020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f7bdda11b70" loc="86:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f7bdda11b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f7bdda10020"/>
        <function-ref name="wait" scoped="" ref="0x7f7bdda101b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdda10340"/>
        <function-ref name="isFree" scoped="" ref="0x7f7bdda104d0"/>
        <function-ref name="getNow" scoped="" ref="0x7f7bdda10660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f7bdda3dc40" loc="49:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f7bdda3dc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f7bdda3c020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f7bdda3c1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f7bdda3c340"/>
        <function-ref name="done" scoped="" ref="0x7f7bdda3c4d0"/>
        <function-ref name="standby" scoped="" ref="0x7f7bdda3c660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f7bdda3c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7f7bdda209d0" loc="75:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f7bdda209d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdda1c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f7bdda39550" loc="55:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f7bdda39550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda37c50"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda37700"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdda371b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda361f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f7bdda3a470" loc="53:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f7bdda3a470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda3a7f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdda3a980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda3ab10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdda3aca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda3ae30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda39020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0x7f7bdda23dd0" loc="69:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f7bdda23dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdda28180"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdda28310"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdda284a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdda28630"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda287c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdda28950"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda28ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdda28c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f7bdda1cb50" loc="77:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f7bdda1cb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdda19020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f7bdda191b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f7bdda19340"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f7bdda194d0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f7bdda19660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f7bdda3b480" loc="51:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f7bdda3b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdda3b800"/>
        <function-ref name="header" scoped="" ref="0x7f7bdda3b990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0x7f7bdd981e40" loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0x7f7bdd981e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd9801e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd980370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f7bdda32020" loc="57:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdda32020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda30740"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda301f0"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdda32c50"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda30c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f7bdda3ea60" loc="46:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f7bdda3ea60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f7bde9fb3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f7bde9fb3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdda3ede0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f7bdda2a380" loc="65:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f7bdda2a380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bdda2a700"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bdda2a890"/>
        <function-ref name="request" scoped="" ref="0x7f7bdda2aa20"/>
        <function-ref name="granted" scoped="" ref="0x7f7bdda2abb0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bdda2ad40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0x7f7bdda2b020" loc="64:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f7bdda2b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdda2b4a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdda2b630"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdda2b7c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdda2b950"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda2bae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdda2bc70"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda2be00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdda2a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f7bdda2f560" loc="58:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f7bdda2f560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda2ec90"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda2e740"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdda2e1f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda2c230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f7bdda3caa0" loc="50:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f7bdda3caa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdda3ce20"/>
        <function-ref name="ready" scoped="" ref="0x7f7bdda3b020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdda3b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0x7f7bdda1eb30" loc="72:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f7bdda1eb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f7bdda21020"/>
        <function-ref name="disable" scoped="" ref="0x7f7bdda211b0"/>
        <function-ref name="captured" scoped="" ref="0x7f7bdda21340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f7bdda214d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0x7f7bdda23270" loc="67:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdda23270"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f7bdda235f0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f7bdda23780"/>
        <function-ref name="splitRead" scoped="" ref="0x7f7bdda23910"/>
        <function-ref name="write" scoped="" ref="0x7f7bdda23aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f7bdda163a0" loc="81:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f7bdda163a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda16720"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda168b0"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdda16a40"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda16bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f7bdda19a10" loc="79:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f7bdda19a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdda19d90"/>
        <function-ref name="get" scoped="" ref="0x7f7bdda18020"/>
        <function-ref name="setValue" scoped="" ref="0x7f7bdda181b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdda18340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f7bdda2c8b0" loc="59:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f7bdda2c8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f7bdda2cc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f7bdda11080" loc="85:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f7bdda11080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f7bdda11400"/>
        <function-ref name="suspend" scoped="" ref="0x7f7bdda11590"/>
        <function-ref name="resume" scoped="" ref="0x7f7bdda11720"/>
        <function-ref name="run" scoped="" ref="0x7f7bdda118b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f7bdd93b7f0" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f7bdd93b7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd93bb70"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd93bd00"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd93a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd93a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd93a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd93a4d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd93a660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd93a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0x7f7bdd93c4e0" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f7bdd93c4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd93c860"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd93c9f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd93cb80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd93cd10"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd93b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd93b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd93b340"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd93b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bdd939ac0" loc="49:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdd939ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdd935390"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd936360"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdd936ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdd936820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdd935850"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd938970"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd938e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0x7f7bdd93eb50" loc="42:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f7bdd93eb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bdd93d020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bdd93d1b0"/>
        <function-ref name="request" scoped="" ref="0x7f7bdd93d340"/>
        <function-ref name="granted" scoped="" ref="0x7f7bdd93d4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bdd93d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0x7f7bdd941940" loc="41:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f7bdd941940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd941cc0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd941e50"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd93e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd93e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd93e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd93e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd93e660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd93e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f7bdd93ab10" loc="48:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f7bdd93ab10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f7bdd939020"/>
        <function-ref name="disable" scoped="" ref="0x7f7bdd9391b0"/>
        <function-ref name="captured" scoped="" ref="0x7f7bdd939340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f7bdd9394d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f7bdd93d920" loc="43:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdd93d920"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f7bdd93dca0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f7bdd93de30"/>
        <function-ref name="splitRead" scoped="" ref="0x7f7bdd93c020"/>
        <function-ref name="write" scoped="" ref="0x7f7bdd93c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f7bdd934020" loc="50:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdd934020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd934c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0x7f7bdd92aa20" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0x7f7bdd92aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd92ada0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd929020"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd9291b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd929340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd9294d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd929660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd9297f0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd929980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0x7f7bdd92e020" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f7bdd92e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f7bdd92a4e0"/>
        <function-ref name="test" scoped="" ref="0x7f7bdd92ca10"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd92ec50"/>
        <function-ref name="captured" scoped="" ref="0x7f7bdd92d660"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd92db70"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd92a020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd92d150"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd92c090"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd92c550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0x7f7bdd929cc0" loc="47:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0x7f7bdd929cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd9280a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd928230"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd9283c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd928550"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd9286e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd928870"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd928a00"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd928b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f7bdd92f680" loc="40:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f7bdd92f680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd92fa00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f7bdd9329c0" loc="39:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f7bdd9329c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f7bdd932d40"/>
        <function-ref name="disable" scoped="" ref="0x7f7bdd92f020"/>
        <function-ref name="captured" scoped="" ref="0x7f7bdd92f1b0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f7bdd92f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f7bdd90ee60" loc="84:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f7bdd90ee60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd915210"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd9153a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f7bdd917c20" loc="82:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f7bdd917c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f7bdd919020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd91c630" loc="81:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd91c630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd91c9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f7bdd919320" loc="83:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdd919320"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f7bdd9196a0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f7bdd919830"/>
        <function-ref name="splitRead" scoped="" ref="0x7f7bdd9199c0"/>
        <function-ref name="write" scoped="" ref="0x7f7bdd919b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f7bdd915bd0" loc="85:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f7bdd915bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bdd914020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bdd9141b0"/>
        <function-ref name="request" scoped="" ref="0x7f7bdd914340"/>
        <function-ref name="granted" scoped="" ref="0x7f7bdd9144d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bdd914660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f7bdd908050" loc="95:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdd908050"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f7bdd9083d0"/>
        <function-ref name="configure" scoped="" ref="0x7f7bdd908560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x7f7bdd8ca190" loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x7f7bdd8ca190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd8ca510"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd8ca6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f7bdd9092d0" loc="94:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f7bdd9092d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd909650"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd9097e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f7bdd90b020" loc="92:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f7bdd90b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f7bdd90b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd90c900" loc="91:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd90c900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd90cc80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x7f7bdd8eda40" loc="98:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x7f7bdd8eda40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f7bdd8eddc0"/>
        <function-ref name="sleep" scoped="" ref="0x7f7bdd8ec340"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f7bdd9071b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f7bdd8ec4d0"/>
        <function-ref name="initMaster" scoped="" ref="0x7f7bdd9074d0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f7bdd907660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f7bdd9077f0"/>
        <function-ref name="read" scoped="" ref="0x7f7bdd907980"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f7bdd907b10"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f7bdd907ca0"/>
        <function-ref name="setClock" scoped="" ref="0x7f7bdd907e30"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f7bdd906020"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f7bdd9061b0"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f7bdd906440"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f7bdd9065d0"/>
        <function-ref name="write" scoped="" ref="0x7f7bdd906760"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f7bdd9068f0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f7bdd906a80"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f7bdd906c10"/>
        <function-ref name="getClock" scoped="" ref="0x7f7bdd906da0"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f7bdd8ec020"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f7bdd907020"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f7bdd907340"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f7bdd8ec1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f7bdd90b660" loc="93:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f7bdd90b660"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f7bdd90b9e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f7bdd90bb70"/>
        <function-ref name="splitRead" scoped="" ref="0x7f7bdd90bd00"/>
        <function-ref name="write" scoped="" ref="0x7f7bdd909020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f7bdd8ec7b0" loc="99:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f7bdd8ec7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f7bdd8ecb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x7f7bdd8adc70" loc="76:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x7f7bdd8adc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f7bdd8a9020"/>
        <function-ref name="sleep" scoped="" ref="0x7f7bdd8a74d0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f7bdd8a9340"/>
        <function-ref name="dataReady" scoped="" ref="0x7f7bdd8a7660"/>
        <function-ref name="initMaster" scoped="" ref="0x7f7bdd8a9660"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f7bdd8a97f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f7bdd8a9980"/>
        <function-ref name="read" scoped="" ref="0x7f7bdd8a9b10"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f7bdd8a9ca0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f7bdd8a9e30"/>
        <function-ref name="setClock" scoped="" ref="0x7f7bdd8a8020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f7bdd8a81b0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f7bdd8a8340"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f7bdd8a85d0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f7bdd8a8760"/>
        <function-ref name="write" scoped="" ref="0x7f7bdd8a88f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f7bdd8a8a80"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f7bdd8a8c10"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f7bdd8a8da0"/>
        <function-ref name="getClock" scoped="" ref="0x7f7bdd8a7020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f7bdd8a71b0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f7bdd8a91b0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f7bdd8a94d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f7bdd8a7340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x7f7bdd89db10" loc="81:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x7f7bdd89db10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd89c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd89c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd89c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd89c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd89c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd89c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd89c980"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd89cb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7f7bdd89f650" loc="79:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7f7bdd89f650"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd89f9d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd89fb60"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd89fcf0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd89fe80"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd89e030"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd89e1c0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd89e350"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd89e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x7f7bdd8a0390" loc="78:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x7f7bdd8a0390"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd8a0710"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd8a08a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd8a0a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd8a0bc0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd8a0d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd89f020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd89f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd89f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f7bdd8a1990" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f7bdd8a1990"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd8a1d10"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd8a0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x7f7bdd89ce50" loc="82:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x7f7bdd89ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f7bdd89b210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x7f7bdd8a6b40" loc="74:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x7f7bdd8a6b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f7bdd8a3020"/>
        <function-ref name="sleep" scoped="" ref="0x7f7bdd8a14d0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f7bdd8a3340"/>
        <function-ref name="dataReady" scoped="" ref="0x7f7bdd8a1660"/>
        <function-ref name="initMaster" scoped="" ref="0x7f7bdd8a3660"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f7bdd8a37f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f7bdd8a3980"/>
        <function-ref name="read" scoped="" ref="0x7f7bdd8a3b10"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f7bdd8a3ca0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f7bdd8a3e30"/>
        <function-ref name="setClock" scoped="" ref="0x7f7bdd8a2020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f7bdd8a21b0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f7bdd8a2340"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f7bdd8a25d0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f7bdd8a2760"/>
        <function-ref name="write" scoped="" ref="0x7f7bdd8a28f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f7bdd8a2a80"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f7bdd8a2c10"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f7bdd8a2da0"/>
        <function-ref name="getClock" scoped="" ref="0x7f7bdd8a1020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f7bdd8a11b0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f7bdd8a31b0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f7bdd8a34d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f7bdd8a1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x7f7bdd89e800" loc="80:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x7f7bdd89e800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f7bdd89eb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f7bdd89ed10"/>
        <function-ref name="toggle" scoped="" ref="0x7f7bdd89d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f7bdd89d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd89d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f7bdd89d4d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd89d660"/>
        <function-ref name="clr" scoped="" ref="0x7f7bdd89d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f7bdd850020" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f7bdd850020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f7bdd8503c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f7bdd850550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f7bdd84e0d0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdd84e0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f7bdd84e470"/>
        <function-ref name="configure" scoped="" ref="0x7f7bdd84e600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f7bdd851210" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f7bdd851210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bdd8515b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bdd851740"/>
        <function-ref name="request" scoped="" ref="0x7f7bdd8518d0"/>
        <function-ref name="granted" scoped="" ref="0x7f7bdd851a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bdd851bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f7bdd8507a0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f7bdd8507a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f7bdd850b20"/>
        <function-ref name="userId" scoped="" ref="0x7f7bdd850cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdc8a9420" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdc8a9420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdc8a97a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f7bdc8a9a30" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f7bdc8a9a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc8a9db0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f7bdc8a8020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f7bdc8a81b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc8a8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f7bdc8a5850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f7bdc8a5850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f7bdc8a5bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f7bdc8a5d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f7bdc8a4910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f7bdc8a4910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f7bdc8a4cb0"/>
        <function-ref name="configure" scoped="" ref="0x7f7bdc8a4e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f7bdc8a3120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f7bdc8a3120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc8a34a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f7bdc8a3630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f7bdc8a37c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc8a3950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f7bdc8a79d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f7bdc8a79d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f7bdc8a7d70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f7bdc8a5020"/>
        <function-ref name="request" scoped="" ref="0x7f7bdc8a51b0"/>
        <function-ref name="granted" scoped="" ref="0x7f7bdc8a5340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f7bdc8a54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f7bdc8a4020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f7bdc8a4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f7bdc8a43a0"/>
        <function-ref name="userId" scoped="" ref="0x7f7bdc8a4530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f7bdc8a3c20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f7bdc8a3c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdc8a2020"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdc8a21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bdd847c60" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdd847c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdd8434e0"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd8444e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdd844e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdd8449a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdd8439a0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd845ac0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd844020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f7bdc87d4c0" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f7bdc87d4c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f7bde9fcc00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f7bde9fcc00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f7bde8eb9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdc87adb0"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdc87cda0"/>
        <function-ref name="startAt" scoped="" ref="0x7f7bdc87a760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdc87a2a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f7bdc8792a0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdc87c3d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdc87c8e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7f7bdc874c10" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f7bdc874c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bdc8715d0"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdc8722a0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdc8738a0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdc872760"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdc871a90"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc873d60"/>
        <function-ref name="start" scoped="" ref="0x7f7bdc872c20"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdc871110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7f7bdc8797f0" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f7bdc8797f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bdc876cd0"/>
        <function-ref name="test" scoped="" ref="0x7f7bdc876350"/>
        <function-ref name="get" scoped="" ref="0x7f7bdc8784c0"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bdc8741b0"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bdc8746c0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdc8774e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdc877020"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdc876810"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc878980"/>
        <function-ref name="start" scoped="" ref="0x7f7bdc8779a0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdc877e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f7bdd841880" loc="39:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f7bdd841880"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd83e500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f7bdd837540" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f7bdd837540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd8363d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd836d50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd836890"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd835260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bdd83a180" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdd83a180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd839020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd8399a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd8394e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd839e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f7bdd832020" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f7bdd832020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd832c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f7bdd831300" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdd831300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd830150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd830ad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd830610"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd82f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f7bdd828990" loc="36:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f7bdd828990"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f7bdd8257c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bdd7c6140" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TdmaMacC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdd7c6140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdd7c3630"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd7c5b70"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bdd7c4920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bdd7c44a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bdd7c1020"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bdd7c3ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdd7c4020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bdd7c6d30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bdd7c3020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bdd7c5220"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd7c56f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bdd7c0b00" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TdmaMacC.FaultClearTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdd7c0b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdd7bb110"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd7be5b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bdd7bd4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bdd7bd020"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bdd7bba10"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bdd7bb590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdd7bea30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bdd7bf750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bdd7bdab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bdd7bfc20"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd7be130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PCQ" ref="0x7f7bdd710da0" loc="8:PrioCritQueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCQ" scoped="" ref="0x7f7bdd710da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f7bdd70e300"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f7bdd709020"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdd709720"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdd7085a0"/>
        <function-ref name="headPrio" scoped="" ref="0x7f7bdd70cd60"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f7bdd70e780"/>
        <function-ref name="full" scoped="" ref="0x7f7bdd70fe50"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdd70ec50"/>
        <function-ref name="clearLO" scoped="" ref="0x7f7bdd708020"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f7bdd708a20"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdd70b490"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdd70f9d0"/>
        <function-ref name="headHI" scoped="" ref="0x7f7bdd70c850"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f7bdd70bb40"/>
        <function-ref name="head" scoped="" ref="0x7f7bdd70c110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PrioCritQueue" ref="0x7f7bdc844770" loc="4:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PrioCritQueue" scoped="" ref="0x7f7bdc844770"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f7bdc843c90"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f7bdc83f9d0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc83d110"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdc83de60"/>
        <function-ref name="headPrio" scoped="" ref="0x7f7bdc840770"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f7bdc842170"/>
        <function-ref name="full" scoped="" ref="0x7f7bdc843810"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdc842640"/>
        <function-ref name="clearLO" scoped="" ref="0x7f7bdc83d8e0"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f7bdc83c310"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc840e70"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdc843390"/>
        <function-ref name="headHI" scoped="" ref="0x7f7bdc840260"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f7bdc83f550"/>
        <function-ref name="head" scoped="" ref="0x7f7bdc842ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio3Queue" ref="0x7f7bdc833e60" loc="9:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio3Queue" scoped="" ref="0x7f7bdc833e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f7bdc830da0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc82fb40"/>
        <function-ref name="element" scoped="" ref="0x7f7bdc82d220"/>
        <function-ref name="full" scoped="" ref="0x7f7bdc830020"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdc830920"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc82f490"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdc831a80"/>
        <function-ref name="size" scoped="" ref="0x7f7bdc8304a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio1Queue" ref="0x7f7bdc83c8c0" loc="7:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio1Queue" scoped="" ref="0x7f7bdc83c8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f7bdc839720"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc8384d0"/>
        <function-ref name="element" scoped="" ref="0x7f7bdc838b40"/>
        <function-ref name="full" scoped="" ref="0x7f7bdc83b960"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdc8392a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc839dd0"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdc83b4e0"/>
        <function-ref name="size" scoped="" ref="0x7f7bdc83bde0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio2Queue" ref="0x7f7bdc837370" loc="8:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio2Queue" scoped="" ref="0x7f7bdc837370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f7bdc834260"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc833020"/>
        <function-ref name="element" scoped="" ref="0x7f7bdc833690"/>
        <function-ref name="full" scoped="" ref="0x7f7bdc8354a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdc835da0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc834910"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdc835020"/>
        <function-ref name="size" scoped="" ref="0x7f7bdc835920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f7bdc82a310" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f7bdc82a310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f7bdc828260"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc826020"/>
        <function-ref name="element" scoped="" ref="0x7f7bdc826690"/>
        <function-ref name="full" scoped="" ref="0x7f7bdc8294a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdc829da0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc828910"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdc829020"/>
        <function-ref name="size" scoped="" ref="0x7f7bdc829920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f7bdc824720" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f7bdc824720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f7bdc8215f0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc8203a0"/>
        <function-ref name="element" scoped="" ref="0x7f7bdc820a10"/>
        <function-ref name="full" scoped="" ref="0x7f7bdc823810"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdc821170"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc821ca0"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdc823390"/>
        <function-ref name="size" scoped="" ref="0x7f7bdc823c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f7bdc81da00" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f7bdc81da00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f7bde7ba4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f7bde7b7a10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f7bdc81b920"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdc81a6d0"/>
        <function-ref name="element" scoped="" ref="0x7f7bdc81ad40"/>
        <function-ref name="full" scoped="" ref="0x7f7bdc81caf0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdc81b4a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdc81a020"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdc81c670"/>
        <function-ref name="size" scoped="" ref="0x7f7bdc81b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f7bdd6fc0c0" loc="41:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bdd6fc0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bdd6fc440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GlobalTime" ref="0x7f7bdd6fb770" loc="44:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f7bdd6fb770"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f7bdd6fa3d0"/>
        <function-ref name="global2Local" scoped="" ref="0x7f7bdd6f9360"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f7bdd6fa890"/>
        <function-ref name="local2Global" scoped="" ref="0x7f7bdd6fade0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncInfo" ref="0x7f7bdd6f98c0" loc="47:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f7bdd6f98c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f7bdd6f9c40"/>
        <function-ref name="getRootID" scoped="" ref="0x7f7bdd6f9dd0"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f7bdd6f8020"/>
        <function-ref name="getOffset" scoped="" ref="0x7f7bdd6f81b0"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f7bdd6f8340"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f7bdd6f84d0"/>
        <function-ref name="getSkew" scoped="" ref="0x7f7bdd6f8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd6fc700" loc="42:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd6fc700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd6fca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncMode" ref="0x7f7bdd6f8970" loc="48:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7f7bdd6f8970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd6f8cf0"/>
        <function-ref name="getMode" scoped="" ref="0x7f7bdd6f8e80"/>
        <function-ref name="setMode" scoped="" ref="0x7f7bdd6f6030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncNotify" ref="0x7f7bdd6f3780" loc="49:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f7bdd6f3780"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncNotify"/>
      </instance>
      <interface-functions>
        <function-ref name="msg_received" scoped="" ref="0x7f7bdd6f3b00"/>
        <function-ref name="msg_sent" scoped="" ref="0x7f7bdd6f3c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f7bdd6fcd80" loc="43:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f7bdd6fcd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd6fb180"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd6fb310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f7bdd644150" loc="52:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bdd644150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bdd6444d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GlobalTime" ref="0x7f7bdd649060" loc="43:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f7bdd649060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f7bdd649c90"/>
        <function-ref name="global2Local" scoped="" ref="0x7f7bdd648c50"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f7bdd6481b0"/>
        <function-ref name="local2Global" scoped="" ref="0x7f7bdd648700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7f7bdd635790" loc="60:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f7bdd635790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd6343f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x7f7bdd644760" loc="53:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x7f7bdd644760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdd644ae0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdd644c70"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd644e00"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd643020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f7bdd6434f0" loc="54:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdd6434f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd642390"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd640c80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd640800"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd642c60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd6401b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f7bdd63ad10" loc="57:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f7bdd63ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f7bdd6390e0"/>
        <function-ref name="rand32" scoped="" ref="0x7f7bdd639270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncInfo" ref="0x7f7bdd646120" loc="46:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f7bdd646120"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f7bdd6464a0"/>
        <function-ref name="getRootID" scoped="" ref="0x7f7bdd646630"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f7bdd6467c0"/>
        <function-ref name="getOffset" scoped="" ref="0x7f7bdd646950"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f7bdd646ae0"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f7bdd646c70"/>
        <function-ref name="getSkew" scoped="" ref="0x7f7bdd646e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd64b1e0" loc="41:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd64b1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd64b560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f7bdd63f300" loc="55:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdd63f300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd63f680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncMode" ref="0x7f7bdd645080" loc="47:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7f7bdd645080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd645400"/>
        <function-ref name="getMode" scoped="" ref="0x7f7bdd645590"/>
        <function-ref name="setMode" scoped="" ref="0x7f7bdd645720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendMsg" ref="0x7f7bdd634860" loc="349:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendMsg" scoped="" ref="0x7f7bdd634860"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd634be0"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd634d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="processMsg" ref="0x7f7bdd6330a0" loc="292:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="processMsg" scoped="" ref="0x7f7bdd6330a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd633420"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd6335b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bdd6394c0" loc="58:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdd6394c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdd639940"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdd639ad0"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdd639c60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdd639df0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdd638020"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd6381b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdd638340"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdd638980"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd638660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdd6384d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdd6387f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncNotify" ref="0x7f7bdd645970" loc="48:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f7bdd645970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncNotify"/>
      </instance>
      <interface-functions>
        <function-ref name="msg_received" scoped="" ref="0x7f7bdd645cf0"/>
        <function-ref name="msg_sent" scoped="" ref="0x7f7bdd645e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f7bdd64b7b0" loc="42:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f7bdd64b7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd64bb30"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd64bcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f7bdd63f9f0" loc="56:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdd63f9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdd63a020"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd63d510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bdd63b300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bdd63de10"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bdd63a920"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bdd63a4a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdd63d990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bdd63e670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bdd63b910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bdd63eb40"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd63d090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncPacket" ref="0x7f7bdd638e10" loc="59:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacket" scoped="" ref="0x7f7bdd638e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd636c60"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdd6351b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bdd62fe00" loc="41:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd62fe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdd62c1c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdd62c350"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd62c4e0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd62c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f7bdd612b00" loc="56:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd612b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd611a40"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdd60f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdd6290c0" loc="45:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd6290c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd629440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd6295d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd629760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd6298f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd629a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f7bdd616920" loc="55:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd616920"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd615740"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd612090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd614bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd614090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd6145a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bdd62aa70" loc="44:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bdd62aa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd62adf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f7bdd627e80" loc="48:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdd627e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f7bdd626220"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f7bdd6263b0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f7bdd626540"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f7bdd6266d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f7bdd6213f0" loc="51:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdd6213f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd620200"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd61eaf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd61e670"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd620ad0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd61e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdd62ce50" loc="43:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdd62ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd62a210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f7bdd61d590" loc="52:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdd61d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd61c390"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdd61c8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f7bdd626db0" loc="50:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdd626db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdd624370"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdd624aa0"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd625bf0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd622210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f7bdd6274e0" loc="47:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd6274e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdd627860"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdd6279f0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdd627b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdd629d30" loc="46:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd629d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd6280e0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd628270"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd628400"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd628590"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd628720"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd6288b0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd628a40"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd628bd0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd628d60"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd627020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd6271b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f7bdd61a220" loc="54:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdd61a220"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdd6197c0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdd618020"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd619090"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd618750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bdd60c020" loc="41:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd60c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdd60c3a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdd60c530"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd60c6c0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd60c850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f7bdd5f1020" loc="56:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd5f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd5f0020"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdd5f0530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdd60a2b0" loc="45:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd60a2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd60a630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd60a7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd60a950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd60aae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd60ac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f7bdd5f7d60" loc="55:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd5f7d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd5f5b60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd5f34a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd5f3020"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd5f4450"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd5f4960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bdd60bc30" loc="44:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bdd60bc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd60a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f7bdd607320" loc="48:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f7bdd607320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f7bdd6076a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f7bdd607830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f7bdd6079c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f7bdd607b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f7bdd602920" loc="51:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdd602920"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd600740"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd5fe090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd5ffbf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd5ff090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd5ff5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdd60b050" loc="43:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdd60b050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd60b3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f7bdd5feb00" loc="52:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdd5feb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd5fc930"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdd5fce40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f7bdd606270" loc="50:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdd606270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdd604800"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdd603020"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd6040d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd603750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f7bdd608800" loc="47:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd608800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdd608b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdd608d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdd607020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdd609020" loc="46:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd609020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd6093a0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd609530"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd6096c0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd609850"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd6099e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd609b70"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd609d00"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd608020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd6081b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd608340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd6084d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f7bdd5fb780" loc="54:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdd5fb780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdd5fad00"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdd5f8460"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd5fa5d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd5f8b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f7bdd472600" loc="53:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdd472600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd4713f0"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdd471900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdd47f8b0" loc="47:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd47f8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd47fc30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd47fdc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd47e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd47e1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd47e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bdd481bf0" loc="45:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bdd481bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd480020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f7bdd477510" loc="52:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdd477510"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd476390"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd474d00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd474860"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd476c80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd4741f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f7bdd47e940" loc="49:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdd47e940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd47d780"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd47a110"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd47bc30"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd47b090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd47b5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdd481490" loc="44:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdd481490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd481830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f7bdd47a9b0" loc="50:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdd47a9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd4787a0"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdd478cb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampRadio" ref="0x7f7bdd4700a0" loc="58:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdd4700a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdd46f750"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdd46fe80"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd46f020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd46e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f7bdd46ad80" loc="61:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdd46ad80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd4689e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f7bdd467020" loc="62:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdd467020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd466740"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd4661f0"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdd467c50"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd466c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdd480270" loc="46:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd480270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd4805f0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd480780"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd480910"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd480aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd480c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd480dc0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd47f020"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd47f1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd47f340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd47f4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd47f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampMilli" ref="0x7f7bdd46c060" loc="59:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdd46c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdd46b5d0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdd46bd00"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdd46ce70"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd46a460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdc74aa50" loc="56:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdc74aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdc74add0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMSend" ref="0x7f7bdc74cdc0" loc="55:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMSend" scoped="" ref="0x7f7bdc74cdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc74a180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc74a310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc74a4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc74a630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc74a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f7bdc74d570" loc="50:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f7bdc74d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdc74c390"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdc74c8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdc759720" loc="44:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdc759720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc759aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdc759c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc759dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc758020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdc7581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f7bdc754a60" loc="47:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f7bdc754a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc752890"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc74f220"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc751d50"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc7511b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc7516e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f7bdc75b8b0" loc="42:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f7bdc75b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdc75bc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f7bdc748da0" loc="59:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f7bdc748da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc747310"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdc7474a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc747630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc7477c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdc747950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f7bdc7587b0" loc="46:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f7bdc7587b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc7575e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc754090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc756bc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc756020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc756550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMPacket" ref="0x7f7bdc7496b0" loc="58:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMPacket" scoped="" ref="0x7f7bdc7496b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdc749a30"/>
        <function-ref name="source" scoped="" ref="0x7f7bdc749bc0"/>
        <function-ref name="address" scoped="" ref="0x7f7bdc749d50"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdc748020"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdc7481b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdc748340"/>
        <function-ref name="type" scoped="" ref="0x7f7bdc7484d0"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdc748660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdc7487f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdc748980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdc748b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdc75b150" loc="41:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdc75b150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdc75b4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f7bdc74fac0" loc="49:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f7bdc74fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f7bdc74e930"/>
        <function-ref name="eventTime" scoped="" ref="0x7f7bdc74ee40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampRadio" ref="0x7f7bdc747e20" loc="61:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f7bdc747e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdc7453f0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdc745b20"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdc746ca0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc7432a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f7bdc73ddf0" loc="67:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f7bdc73ddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc73b5e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdc73b090"/>
        <function-ref name="isSet" scoped="" ref="0x7f7bdc73cac0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc73bb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f7bdc73fa90" loc="64:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f7bdc73fa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f7bde856d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdc73e6f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f7bdc73ec40" loc="65:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f7bdc73ec40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdc73d8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdc75a020" loc="43:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc75a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdc75a3a0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdc75a530"/>
        <function-ref name="address" scoped="" ref="0x7f7bdc75a6c0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdc75a850"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdc75a9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdc75ab70"/>
        <function-ref name="type" scoped="" ref="0x7f7bdc75ad00"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdc759020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdc7591b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdc759340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdc7594d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSnoop" ref="0x7f7bdc7490a0" loc="57:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSnoop" scoped="" ref="0x7f7bdc7490a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdc749420"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampMilli" ref="0x7f7bdc743ce0" loc="62:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f7bdc743ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f7bdc7412e0"/>
        <function-ref name="clear" scoped="" ref="0x7f7bdc741a10"/>
        <function-ref name="isValid" scoped="" ref="0x7f7bdc742b60"/>
        <function-ref name="set" scoped="" ref="0x7f7bdc73f170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bdc735cf0" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdc735cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc7340a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc734230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc7343c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc734550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc7346e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdc734930" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdc734930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc734cb0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdc734e40"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc733020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc7331b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdc733340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdc733590" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc733590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdc733910"/>
        <function-ref name="source" scoped="" ref="0x7f7bdc733aa0"/>
        <function-ref name="address" scoped="" ref="0x7f7bdc733c30"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdc733dc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdc732020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdc7321b0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdc732340"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdc7324d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdc732660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdc7327f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdc732980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f7bdc732c10" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f7bdc732c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdc731020"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdc7311b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdc731340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bdc6de020" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdc6de020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc6de3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc6de530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc6de6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc6de850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc6de9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdc6dec30" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdc6dec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc6dd020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdc6dd1b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc6dd340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc6dd4d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdc6dd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdc6dd8b0" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc6dd8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdc6ddc30"/>
        <function-ref name="source" scoped="" ref="0x7f7bdc6dddc0"/>
        <function-ref name="address" scoped="" ref="0x7f7bdc6dc020"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdc6dc1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdc6dc340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdc6dc4d0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdc6dc660"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdc6dc7f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdc6dc980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdc6dcb10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdc6dcca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f7bdc6db020" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f7bdc6db020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdc6db3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdc6db530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdc6db6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bdc6d2a20" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdc6d2a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc6d2da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc6d1020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc6d11b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc6d1340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc6d14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f7bdc6d1780" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdc6d1780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc6d1b00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc6d1c90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc6d1e20"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc6d0020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc6d01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f7bdc6d0400" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc6d0400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdc6d0780"/>
        <function-ref name="source" scoped="" ref="0x7f7bdc6d0910"/>
        <function-ref name="address" scoped="" ref="0x7f7bdc6d0aa0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdc6d0c30"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdc6d0dc0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdc6cf020"/>
        <function-ref name="type" scoped="" ref="0x7f7bdc6cf1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdc6cf340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdc6cf4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdc6cf660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdc6cf7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdd4f4930" loc="43:../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdd4f4930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd4f4cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd4f4e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd4f0020"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd4f01b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd4f0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f7bdd4a5400" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdd4a5400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd4a57a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd4a5930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd4a5ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd4a5c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd4a5de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdd4a64b0" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdd4a64b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd4a6850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd4a69e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd4a6b70"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd4a6d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd4a5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f7bdd4a3720" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd4a3720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd4a3aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd4a3c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd4a3dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd4a2020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd4a21b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f7bdd4a2480" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7f7bdd4a2480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd4a2800"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd4a2990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f7bdd4a2c60" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7f7bdd4a2c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd4a1020"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd4a11b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f7bdd4a4060" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd4a4060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd4a43e0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd4a4570"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd4a4700"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd4a4890"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd4a4a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd4a4bb0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd4a4d40"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd4a3020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd4a31b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd4a3340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd4a34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bdd44b5a0" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TimeSyncC.TimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdd44b5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdd447a80"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd449090"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bdd449e10"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bdd449990"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bdd4464a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bdd446020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdd449510"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bdd44a200"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bdd447470"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bdd44a6d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd44aba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd442380" loc="46:../../tos/system/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd442380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd442700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f7bdd4429c0" loc="47:../../tos/system/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdd4429c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdd442d40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdd441020"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdd4411b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdd441340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdd4414d0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd441660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdd4417f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdd441e30"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd441980"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdd441b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdd441ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacReceive" ref="0x7f7bdd418d30" loc="21:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f7bdd418d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd4170e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f7bdd41e7d0" loc="11:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bdd41e7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bdd41eb50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f7bdd41c440" loc="13:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd41c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd41c7c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd41c950"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd41cae0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd41cc70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd41ce00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FlowSend" ref="0x7f7bdd421a90" loc="7:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FlowSend" scoped="" ref="0x7f7bdd421a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd421e10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd41e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd41e1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd41e340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd41e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacControl" ref="0x7f7bdd41a850" loc="15:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacControl" scoped="" ref="0x7f7bdd41a850"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdd41abd0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdd41ad60"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd419020"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd4191b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacSend" ref="0x7f7bdd418020" loc="20:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f7bdd418020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd4183a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd418530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd4186c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd418850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd4189e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bdd41edd0" loc="12:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdd41edd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdd41d180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdd41d310"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdd41d4a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdd41d630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdd41d7c0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd41d950"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdd41dae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdd41c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd41dc70"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdd41de00"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdd41c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f7bdd4194e0" loc="16:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd4194e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdd419860"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdd4199f0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdd419b80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FrameConfiguration" ref="0x7f7bdd4173f0" loc="22:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f7bdd4173f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f7bdd417770"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f7bdd417900"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f7bdd417a90"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f7bdd417c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f7bdd41b120" loc="14:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd41b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd41b4a0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd41b630"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd41b7c0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd41b950"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd41bae0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd41bc70"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd41be00"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd41a020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd41a1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd41a340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd41a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bdd010540" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdd010540"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd0108c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd010a50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd010be0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd010d70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd00e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdd00e270" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd00e270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd00e5f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd00e780"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd00e910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd00eaa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd00ec30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdd00ee80" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd00ee80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd00d220"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd00d3b0"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd00d540"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd00d6d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd00d860"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd00d9f0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd00db80"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd00dd10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd00c020"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd00c1b0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd00c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f7bdd00c5d0" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f7bdd00c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdd00c950"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdd00cae0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdd00cc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bdc6810c0" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdc6810c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc681440"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc6815d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc681760"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc6818f0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc681a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f7bdc681d30" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdc681d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc67f0e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc67f270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc67f400"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc67f590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc67f720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f7bdc67f970" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc67f970"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdc67fcf0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdc67fe80"/>
        <function-ref name="address" scoped="" ref="0x7f7bdc67e030"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdc67e1c0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdc67e350"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdc67e4e0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdc67e670"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdc67e800"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdc67e990"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdc67eb20"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdc67ecb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdd3e3530" loc="44:../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdd3e3530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd3e38b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3e3a40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd3e3bd0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd3e3d60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd3e2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f7bdd3e0e20" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdd3e0e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd3df1e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3df370"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd3df500"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd3df690"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd3df820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdd3e0060" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdd3e0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd3e0400"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3e0590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd3e0720"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd3e08b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd3e0a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f7bdd3dd0e0" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd3dd0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd3dd460"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd3dd5f0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3dd780"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd3dd910"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd3ddaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f7bdd3ddd70" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7f7bdd3ddd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd3db180"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd3db310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f7bdd3db5e0" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7f7bdd3db5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd3db960"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd3dbaf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f7bdd3dfa70" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3dfa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd3dfdf0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd3de020"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd3de1b0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd3de340"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd3de4d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd3de660"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd3de7f0"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd3de980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd3deb10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd3deca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd3dee30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bdd3d9a90" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd3d9a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdd3d9e10"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdd3d6020"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd3d61b0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd3d6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bdd3d6b10" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdd3d6b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd3d5020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3d51b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd3d5340"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd3d54d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd3d5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdd3d4470" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd3d4470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd3d47f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd3d4980"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3d4b10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd3d4ca0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd3d4e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdd3d5e40" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdd3d5e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd3d41e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bdd3d1300" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdd3d1300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdd3d1680"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdd3d1810"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdd3d19a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdd3d1b30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdd3d1cc0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd3d1e50"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdd3d0020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdd3d0660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd3d01b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdd3d0340"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdd3d04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f7bdd3d2800" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd3d2800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdd3d2b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdd3d2d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdd3d1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdd3d3120" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3d3120"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd3d34a0"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd3d3630"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd3d37c0"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd3d3950"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd3d3ae0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd3d3c70"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd3d3e00"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd3d2020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd3d21b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd3d2340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd3d24d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f7bdd3754a0" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f7bdd3754a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd375820"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3759b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd375b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd375cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd375e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f7bdd374120" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f7bdd374120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd3744a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f7bdd3ce300" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdd3ce300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd3ce6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3ce830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd3ce9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd3ceb50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd3cece0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f7bdd377d60" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdd377d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdd376180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdd376310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd3764a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd376630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdd3767c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdd3790d0" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdd3790d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd379470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f7bdd376a10" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f7bdd376a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f7bdd376d90"/>
        <function-ref name="noAck" scoped="" ref="0x7f7bdd375020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f7bdd3751b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f7bdd3796c0" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdd3796c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdd379a40"/>
        <function-ref name="source" scoped="" ref="0x7f7bdd379bd0"/>
        <function-ref name="address" scoped="" ref="0x7f7bdd379d60"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdd377020"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdd3771b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdd377340"/>
        <function-ref name="type" scoped="" ref="0x7f7bdd3774d0"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdd377660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdd3777f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdd377980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdd377b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bdd372b90" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd372b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdd36f020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdd36f1b0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd36f340"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd36f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdd36e790" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdd36e790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f7bde83cbe0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd36eb10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd36eca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd36ee30"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd36d020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd36d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd372540" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd372540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd3728c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdd36fc60" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdd36fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f7bde83cbe0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd36e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bdd36b2b0" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdd36b2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdd36b630"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdd36b7c0"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdd36b950"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdd36bae0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdd36bc70"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd36be00"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdd36a020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdd36a660"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd36a1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdd36a340"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdd36a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f7bdd367970" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f7bdd367970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f7bde83cbe0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f7bdd367cf0"/>
        <function-ref name="offset" scoped="" ref="0x7f7bdd367e80"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f7bdd36b030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f7bdd347670" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f7bdd347670"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdd3479f0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdd347b80"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd347d10"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd346020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f7bdd2e16e0" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x7f7bdd2e16e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd2e1a60"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd2e1bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f7bdd335860" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f7bdd335860"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd335be0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd335d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f7bdd3184f0" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x7f7bdd3184f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd318870"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd318a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd347020" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd347020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd3473a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f7bdd331480" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x7f7bdd331480"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f7bdd331800"/>
        <function-ref name="flush" scoped="" ref="0x7f7bdd331990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f7bdd2e4c70" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x7f7bdd2e4c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd2e3020"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd2e31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f7bdd33f020" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f7bdd33f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f7bdd33f3a0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f7bdd33f530"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f7bdd33f6c0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f7bdd33f850"/>
        <function-ref name="putData" scoped="" ref="0x7f7bdd33f9e0"/>
        <function-ref name="putDone" scoped="" ref="0x7f7bdd33fb70"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f7bdd33fd00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bdd33b020" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdd33b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdd33b3a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdd33b530"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdd33b6c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdd33b850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdd33b9e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd33bb70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdd33bd00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdd3354d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd335020"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdd3351b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdd335340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f7bdd2dda00" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f7bdd2dda00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd2ddd80"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd2dc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f7bdd340720" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f7bdd340720"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f7bdd340aa0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f7bdd340c30"/>
        <function-ref name="startSend" scoped="" ref="0x7f7bdd340dc0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f7bdd345020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f7bdd33dc40" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f7bdd33dc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f7bdd344020"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f7bdd3441b0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f7bdd344340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f7bdd212020" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x7f7bdd212020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd2123a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd212530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f7bdd217de0" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdd217de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f7bde83cbe0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd2161c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdd216350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdd2164e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdd216670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd216800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f7bdd212800" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x7f7bdd212800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdd212b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdd212d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f7bdd2176c0" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f7bdd2176c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f7bde83cbe0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f7bdd217a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f7bdd216c20" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x7f7bdd216c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f7bde83cbe0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f7bdd215020"/>
        <function-ref name="offset" scoped="" ref="0x7f7bdd2151b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f7bdd215340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bdd214920" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdd214920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdd214ca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdd214e30"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdd213020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdd2131b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdd213340"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd2134d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdd213660"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdd213ca0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd213980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdd2137f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdd213b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f7bdd215e80" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f7bdd215e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f7bdd214220"/>
        <function-ref name="nextByte" scoped="" ref="0x7f7bdd2143b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f7bdd214540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f7bdd2146d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f7bdd215590" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f7bdd215590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f7bdd215910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f7bdd215aa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f7bdd215c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f7bdd202d20" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f7bdd202d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd20b0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f7bdd20b270"/>
        <function-ref name="receive" scoped="" ref="0x7f7bdd20b400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f7bdd20b590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f7bdd20b720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f7bdd20b8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd20ba40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f7bdd210e00" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f7bdd210e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f7bdd20d1c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f7bdd20d350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f7bdd20d4e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f7bdd20d670"/>
        <function-ref name="putData" scoped="" ref="0x7f7bdd20d800"/>
        <function-ref name="putDone" scoped="" ref="0x7f7bdd20d990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f7bdd20db20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bdd20bcc0" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdd20bcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdd20a0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdd20a230"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdd20a3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdd20a550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdd20a6e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd20a870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdd20aa00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdd2001b0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd20ab90"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdd20ad20"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdd200020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f7bdd1e3020" loc="42:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f7bdd1e3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd1e33a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f7bdd1e3530"/>
        <function-ref name="receive" scoped="" ref="0x7f7bdd1e36c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f7bdd1e3850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f7bdd1e5960" loc="41:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f7bdd1e5960"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd1e5ce0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f7bdd1e5e70"/>
        <function-ref name="receive" scoped="" ref="0x7f7bdd1e4030"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f7bdd1e41c0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f7bdd1e4350"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f7bdd1e44e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd1e4670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f7bdd1e5150" loc="40:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f7bdd1e5150"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd1e54d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd1e5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f7bdd1e2cb0" loc="41:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f7bdd1e2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd1db0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f7bdd1db230"/>
        <function-ref name="receive" scoped="" ref="0x7f7bdd1db3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f7bdd1db550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f7bdd1db850" loc="42:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f7bdd1db850"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd1dbbd0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f7bdd1dbd60"/>
        <function-ref name="receive" scoped="" ref="0x7f7bdd1da020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f7bdd1da1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f7bdd1da340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f7bdd1da4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd1da660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f7bdd1dac20" loc="43:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdd1dac20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd1d9a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd1d84e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd1d8020"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd1d89a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f7bdd1e24b0" loc="40:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f7bdd1e24b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd1e2830"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd1e29c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f7bdd18f5a0" loc="50:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f7bdd18f5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd18f920"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f7bdd18fab0"/>
        <function-ref name="receive" scoped="" ref="0x7f7bdd18fc40"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f7bdd18fdd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x7f7bdd18c0a0" loc="53:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x7f7bdd18c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd18c420"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd18c5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd1d5770" loc="48:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd1d5770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd1d5af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f7bdd18e0c0" loc="51:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f7bdd18e0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdd18e440"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f7bdd18e5d0"/>
        <function-ref name="receive" scoped="" ref="0x7f7bdd18e760"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f7bdd18e8f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f7bdd18ea80"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f7bdd18ec10"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdd18eda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f7bdd18a810" loc="56:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdd18a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd1896a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd188090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd189b60"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd188550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x7f7bdd18b0a0" loc="55:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x7f7bdd18b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f7bdd18b420"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f7bdd18b5b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f7bdd18b740"/>
        <function-ref name="txDone" scoped="" ref="0x7f7bdd18b8d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f7bdd18ba60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f7bdd18bbf0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f7bdd18bd80"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f7bdd18a020"/>
        <function-ref name="tx" scoped="" ref="0x7f7bdd18a1b0"/>
        <function-ref name="rx" scoped="" ref="0x7f7bdd18a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f7bdd1d5d80" loc="49:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f7bdd1d5d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd18f180"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd18f310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x7f7bdd18c880" loc="54:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x7f7bdd18c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd18cc00"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd18cd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f7bdd16b3a0" loc="49:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f7bdd16b3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f7bdd16b720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f7bdd16b8b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f7bdd16ba40"/>
        <function-ref name="txDone" scoped="" ref="0x7f7bdd16bbd0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f7bdd16bd60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f7bdd16a020"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f7bdd16a1b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f7bdd16a340"/>
        <function-ref name="tx" scoped="" ref="0x7f7bdd16a4d0"/>
        <function-ref name="rx" scoped="" ref="0x7f7bdd16a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f7bdd169c40" loc="53:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f7bdd169c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f7bdd167020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f7bdd1671b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f7bdd167340"/>
        <function-ref name="txDone" scoped="" ref="0x7f7bdd1674d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f7bdd167660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f7bdd1677f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f7bdd167980"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f7bdd167b10"/>
        <function-ref name="tx" scoped="" ref="0x7f7bdd167ca0"/>
        <function-ref name="rx" scoped="" ref="0x7f7bdd167e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f7bdd16c990" loc="48:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f7bdd16c990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd16cd10"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd16b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f7bdd16a9f0" loc="51:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f7bdd16a9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd16ad70"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd169020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f7bdd1693b0" loc="52:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f7bdd1693b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd169730"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd1698c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f7bdd16c0f0" loc="47:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f7bdd16c0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd16c470"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd16c600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x7f7bdd166bc0" loc="114:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x7f7bdd166bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd162020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f7bdd1615f0" loc="117:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f7bdd1615f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f7bdd161970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f7bdd161b00"/>
        <function-ref name="rxDone" scoped="" ref="0x7f7bdd161c90"/>
        <function-ref name="txDone" scoped="" ref="0x7f7bdd161e20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f7bdd160020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f7bdd1601b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f7bdd160340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f7bdd1604d0"/>
        <function-ref name="tx" scoped="" ref="0x7f7bdd160660"/>
        <function-ref name="rx" scoped="" ref="0x7f7bdd1607f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x7f7bdd160b50" loc="119:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x7f7bdd160b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd15f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f7bdd15e5f0" loc="122:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f7bdd15e5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f7bdd15e970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f7bdd15eb00"/>
        <function-ref name="rxDone" scoped="" ref="0x7f7bdd15ec90"/>
        <function-ref name="txDone" scoped="" ref="0x7f7bdd15ee20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f7bdd15d020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f7bdd15d1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f7bdd15d340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f7bdd15d4d0"/>
        <function-ref name="tx" scoped="" ref="0x7f7bdd15d660"/>
        <function-ref name="rx" scoped="" ref="0x7f7bdd15d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f7bdd162cd0" loc="116:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f7bdd162cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd1610a0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd161230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f7bdd15f3f0" loc="120:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f7bdd15f3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd15f770"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd15f900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f7bdd15fcd0" loc="121:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f7bdd15fcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd15e0a0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd15e230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7f7bdd15db20" loc="124:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f7bdd15db20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f7bdd15c020"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f7bdd15c1b0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f7bdd15c340"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f7bdd15c4d0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f7bdd15c660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f7bdd15c980" loc="125:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f7bdd15c980"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f7bdd15cd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f7bdd1623f0" loc="115:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f7bdd1623f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f7bdd162770"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd162900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bdd0fddc0" loc="24:../../tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdd0fddc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd0faca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd0f9670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd0f91b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd0f9b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bdd0f7de0" loc="24:../../tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdd0f7de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f7bde8ebd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd0f4ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd0f3670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd0f31b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd0f3b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f7bdd0ea020" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bdd0ea020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f7bdd0ea3a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f7bdd0ea530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f7bdd0ea6c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f7bdd0ea850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f7bdd0ea9e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f7bdd0eab70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f7bdd0ead00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f7bdd0e9020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f7bdd0e91b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f7bdd0e9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f7bdd0e9850" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f7bdd0e9850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f7bdd0e5e60"/>
        <function-ref name="test" scoped="" ref="0x7f7bdd0e54e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd0e74c0"/>
        <function-ref name="captured" scoped="" ref="0x7f7bdd0e6020"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd0e6530"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd0e59a0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd0e7980"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0e69f0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f7bdd0e4ad0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f7bdd0e4ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bdd0e04e0"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd0e11b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd0e2790"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd0e1670"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd0e09a0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd0e2c50"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0e1b30"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0e0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bdd0f2cc0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdd0f2cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bdd0eb090"/>
        <function-ref name="test" scoped="" ref="0x7f7bdd0ec6e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd0ef980"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bdd0eb550"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bdd0eba60"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd0ed840"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd0ed380"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd0ecba0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd0efe40"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0edd00"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0ec220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f7bdd0d62c0" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f7bdd0d62c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f7bdd0d6640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f7bdd0d67d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f7bdd0d6960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f7bdd0d6af0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f7bdd0d6c80"/>
        <function-ref name="setControlB" scoped="" ref="0x7f7bdd0d6e10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f7bdd0d5020"/>
        <function-ref name="getControlB" scoped="" ref="0x7f7bdd0d51b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7f7bdd0d5340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f7bdd0d54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f7bdd0d05a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f7bdd0d05a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bdd0cc020"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd0cfc10"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd0cf240"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd0cd110"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd0cc4e0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd0cf700"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0cd5d0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0cda90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f7bdd0d59e0" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f7bdd0d59e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f7bdd0d1e60"/>
        <function-ref name="test" scoped="" ref="0x7f7bdd0d14e0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd0d46b0"/>
        <function-ref name="captured" scoped="" ref="0x7f7bdd0d30d0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd0d35e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd0d19a0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd0d4b70"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0d3aa0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0d1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f7bdd0ccba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f7bdd0ccba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bdd0c8550"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd0ca1f0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd0cb7f0"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd0ca6b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd0c8a10"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd0cbcb0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0cab70"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0c8090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f7bdd0c7120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f7bdd0c7120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f7bdd0c5a90"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdd0c6770"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd0c7d50"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd0c6c30"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd0c3020"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd0c6260"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0c5110"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0c55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bdd0db020" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdd0db020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bdd0d7350"/>
        <function-ref name="test" scoped="" ref="0x7f7bdd0d99a0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd0dbc50"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bdd0d7810"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bdd0d7d20"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd0dab20"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd0da660"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd0d9e60"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd0da150"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0d9020"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0d94e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd049c60" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd049c60"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f7bde9fb020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f7bde9fb020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd048020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f7bdd048410" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdd048410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bdd044810"/>
        <function-ref name="test" scoped="" ref="0x7f7bdd046e60"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd047090"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bdd044cd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bdd043260"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd046020"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd047a60"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd044350"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd047550"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd0464e0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd0469a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bdd0413c0" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdd0413c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f7bde8ebd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd03f240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd03fbc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd03f700"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd03e0d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f7bdd03e660" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdd03e660"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f7bdd03aa90"/>
        <function-ref name="test" scoped="" ref="0x7f7bdd03a110"/>
        <function-ref name="get" scoped="" ref="0x7f7bdd03d3d0"/>
        <function-ref name="setScale" scoped="" ref="0x7f7bdd039020"/>
        <function-ref name="getScale" scoped="" ref="0x7f7bdd039530"/>
        <function-ref name="reset" scoped="" ref="0x7f7bdd03b2a0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd03dda0"/>
        <function-ref name="isOn" scoped="" ref="0x7f7bdd03a5d0"/>
        <function-ref name="set" scoped="" ref="0x7f7bdd03d890"/>
        <function-ref name="start" scoped="" ref="0x7f7bdd03b760"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdd03bc20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f7bdd0310f0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f7bdd0310f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f7bde8ebd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd030020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd0309a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd0304e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd030e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f7bdd035cd0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f7bdd035cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde92f5c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f7bde92f930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f7bdd034b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f7bdd033550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f7bdd033090"/>
        <function-ref name="overflow" scoped="" ref="0x7f7bdd033a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f7bdd0241e0" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x7f7bdd0241e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f7bdd024560"/>
        <function-ref name="offset" scoped="" ref="0x7f7bdd0246f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f7bdd024880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f7bdd009510" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f7bdd009510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f7bdd0074a0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdd005260"/>
        <function-ref name="element" scoped="" ref="0x7f7bdd0058d0"/>
        <function-ref name="full" scoped="" ref="0x7f7bdd0085b0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdd007020"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdd007b50"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdd008130"/>
        <function-ref name="size" scoped="" ref="0x7f7bdd008a30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f7bdcfff330" loc="93:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f7bdcfff330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f7bdcffc260"/>
        <function-ref name="enqueue" scoped="" ref="0x7f7bdcffb020"/>
        <function-ref name="element" scoped="" ref="0x7f7bdcffb690"/>
        <function-ref name="full" scoped="" ref="0x7f7bdcffd4a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f7bdcffdda0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f7bdcffc910"/>
        <function-ref name="empty" scoped="" ref="0x7f7bdcffd020"/>
        <function-ref name="size" scoped="" ref="0x7f7bdcffd920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f7bdcffbd40" loc="94:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f7bdcffbd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdcff90e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdcff9270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdcff9400"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdcff9590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdcff9720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f7bdcff99b0" loc="95:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdcff99b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdcff9d30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdcff8020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdcff81b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdcff8340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdcff84d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7f7bdcff4d10" loc="114:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="retrySend" scoped="" ref="0x7f7bdcff4d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdcff30e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdcff3270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdd0013c0" loc="89:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdd0013c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdd001740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f7bdcff8750" loc="96:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f7bdcff8750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f7bdcff8ad0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f7bdcff8c60"/>
        <function-ref name="led1On" scoped="" ref="0x7f7bdcff8df0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f7bdcff7020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f7bdcff71b0"/>
        <function-ref name="get" scoped="" ref="0x7f7bdcff7340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f7bdcff74d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f7bdcff7b10"/>
        <function-ref name="set" scoped="" ref="0x7f7bdcff7660"/>
        <function-ref name="led0On" scoped="" ref="0x7f7bdcff77f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f7bdcff7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7f7bdcffea70" loc="90:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f7bdcffea70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f7bdcffedf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f7bdcfda2a0" loc="43:../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f7bdcfda2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f7bdcfda620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f7bdcfd3020" loc="94:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f7bdcfd3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f7bdcfd33a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f7bdcfd3680" loc="95:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f7bdcfd3680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f7bdcfd3a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f7bdcfcdd50" loc="39:../../tos/lib/printf/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bdcfcdd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bdcfc9100"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f7bdcfc94a0" loc="40:../../tos/lib/printf/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f7bdcfc94a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f7bdcfc9820"/>
        <function-ref name="stopDone" scoped="" ref="0x7f7bdcfc99b0"/>
        <function-ref name="start" scoped="" ref="0x7f7bdcfc9b40"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcfc9cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bdcfca370" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MCCC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdcfca370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdcfc0870"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdcfc3e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bdcfc1c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bdcfc1780"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bdcfbf1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bdcfc0cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdcfc1300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bdcfc3020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bdcfc0260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bdcfc34f0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdcfc39c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f7bdcf744b0" loc="2:TXFlowC.nc">
      <component-ref qname="MCCC.TXFlow1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f7bdcf744b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdcf74830"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdcf749c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdcf74b50"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdcf74ce0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdcf74e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f7bdc57e640" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MCCC.TXFlow1.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f7bdc57e640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdc57bc40"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdc57c1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bdc57b020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bdc57cae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bdc579590"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bdc579110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdc57c660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bdc57d390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bdc57b630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bdc57d860"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdc57dd30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendTimer" ref="0x7f7bdc576310" loc="6:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendTimer" scoped="" ref="0x7f7bdc576310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f7bde9301a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f7bde930510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f7bdc572870"/>
        <function-ref name="fired" scoped="" ref="0x7f7bdc575e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f7bdc574c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f7bdc574780"/>
        <function-ref name="getdt" scoped="" ref="0x7f7bdc5711e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f7bdc572cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f7bdc574300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f7bdc575020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f7bdc572260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f7bdc5754f0"/>
        <function-ref name="stop" scoped="" ref="0x7f7bdc5759c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="send" ref="0x7f7bdc56ec50" loc="20:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="send" scoped="" ref="0x7f7bdc56ec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f7bdc56d020"/>
        <function-ref name="runTask" scoped="" ref="0x7f7bdc56d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f7bdc570270" loc="8:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f7bdc570270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f7bdc5705f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f7bdc570840" loc="9:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f7bdc570840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f7bdc570bc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f7bdc570d50"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc56f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc56f1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f7bdc56f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AppSend" ref="0x7f7bdc571610" loc="7:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AppSend" scoped="" ref="0x7f7bdc571610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f7bdc571990"/>
        <function-ref name="getPayload" scoped="" ref="0x7f7bdc571b20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f7bdc571cb0"/>
        <function-ref name="cancel" scoped="" ref="0x7f7bdc571e40"/>
        <function-ref name="sendDone" scoped="" ref="0x7f7bdc570020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f7bdc56f590" loc="10:TXFlowP.nc">
      <component-ref qname="MCCC.TXFlow1.TXF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f7bdc56f590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f7bdc56f910"/>
        <function-ref name="source" scoped="" ref="0x7f7bdc56faa0"/>
        <function-ref name="address" scoped="" ref="0x7f7bdc56fc30"/>
        <function-ref name="destination" scoped="" ref="0x7f7bdc56fdc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f7bdc56e020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f7bdc56e1b0"/>
        <function-ref name="type" scoped="" ref="0x7f7bdc56e340"/>
        <function-ref name="setType" scoped="" ref="0x7f7bdc56e4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f7bdc56e660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f7bdc56e7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f7bdc56e980"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f7bde824d10" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
              <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde8243b0" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f7bde824700" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde824a30" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f7bde81e5c0" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f7bde81e340" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f7bde81dab0" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f7bde81d830" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f7bde821920" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f7bde81ee10" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f7bde89fb50" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <function command="" provided="0" name="send" ref="0x7f7bde82b5e0" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde82b020" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde82b350" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f7bde826bb0" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde8265b0" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde8268e0" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f7bde828d20" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f7bde829900" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde829680" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f7bde827e00" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde827820" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f7bde827b70" loc="100:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FrameConfiguration" loc="31:../../tos/interfaces/FrameConfiguration.nc">
      <documentation loc="23:../../tos/interfaces/FrameConfiguration.nc">
        <short>&#10; </short>
        <long>&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision$&#10; @date $Date$&#10;&#10; This interface will be implemented by the different TDMA protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="setFrameLength" ref="0x7f7bde89ace0" loc="33:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="numSlots" ref="0x7f7bde89aa60" loc="33:../../tos/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlotLength" ref="0x7f7bde89a350" loc="32:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="slotTimeBms" ref="0x7f7bde89a0d0" loc="32:../../tos/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlotLength" ref="0x7f7bde8994b0" loc="34:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getFrameLength" ref="0x7f7bde899c00" loc="35:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Slotter" loc="30:../../tos/interfaces/Slotter.nc">
      <documentation loc="23:../../tos/interfaces/Slotter.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <function event="" provided="0" name="slot" ref="0x7f7bde77d8a0" loc="31:../../tos/interfaces/Slotter.nc">
        <interfacedef-ref qname="Slotter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="num" ref="0x7f7bde77d620" loc="31:../../tos/interfaces/Slotter.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f7bde7aa350" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GlobalTime" loc="37:../../tos/lib/ftsp/GlobalTime.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bde750910" loc="37:../../tos/lib/ftsp/GlobalTime.nc">
          <interfacedef-ref qname="GlobalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bde750910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getLocalTime" ref="0x7f7bde74c2b0" loc="42:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="39:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Returns the current local time of this mote.</short>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="global2Local" ref="0x7f7bde749640" loc="76:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="68:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Converts the global time given in &#60;code>time&#60;/code> into the&#10; correspoding local time and stores this again in&#10; &#60;code>time&#60;/code>.</short>
          <long>&#10; Converts the global time given in &#60;code>time&#60;/code> into the&#10; correspoding local time and stores this again in&#10; &#60;code>time&#60;/code>. This method performs the inverse of the&#10; &#60;code>local2Global&#60;/clode> transformation.&#10;&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f7bde7493c0" loc="76:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getGlobalTime" ref="0x7f7bde74cd40" loc="49:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="44:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Reads the current global time.</short>
          <long>&#10; Reads the current global time. This method is a combination&#10; of &#60;code>getLocalTime&#60;/code> and &#60;code>local2Global&#60;/code>.&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f7bde74cac0" loc="49:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="local2Global" ref="0x7f7bde74a8e0" loc="66:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="51:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Converts the local time given in &#60;code>time&#60;/code> into the&#10; corresponding global time and stores this again in&#10; &#60;code>time&#60;/code>.</short>
          <long>&#10; Converts the local time given in &#60;code>time&#60;/code> into the&#10; corresponding global time and stores this again in&#10; &#60;code>time&#60;/code>. The following equation is used to compute the&#10; conversion:&#10;&#10;&#9;globalTime = localTime + offset + skew * (localTime - syncPoint)&#10;&#10; The skew is normalized to 0.0 (1.0 is subtracted) to increase the&#10; machine precision. The syncPoint value is periodically updated to&#10; increase the machine precision of the floating point arithmetic and&#10; also to allow time wrap.&#10;&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f7bde74a660" loc="66:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f7bde78b8a0" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde78b620" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f7bde789950" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde7896d0" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f7bde786d30" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde786730" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde786a60" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f7bde788da0" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f7bde787dd0" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde787810" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde787b40" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f7bde780760" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f7bde77e020" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PrioCritQueue" loc="9:PrioCritQueue.nc">
      <documentation loc="1:PrioCritQueue.nc">
        <short>&#10;  Interface to a priority queue that contains items&#10;  of multiple priority levels.</short>
        <long>&#10;  Interface to a priority queue that contains items&#10;  of multiple priority levels. The queue has a maximum size.&#10;&#10;  @author James Harbin&#10;  @date   $Date: 2017-08-31 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f7bde77c560" loc="9:PrioCritQueue.nc">
          <interfacedef-ref qname="PrioCritQueue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="size" ref="0x7f7bde774d50" loc="31:PrioCritQueue.nc">
        <documentation loc="25:PrioCritQueue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeuePrio" ref="0x7f7bde76c5b0" loc="83:PrioCritQueue.nc">
        <documentation loc="77:PrioCritQueue.nc">
          <short>&#10; Remove the head of the queue of particular priority.</short>
          <long>&#10; Remove the head of the queue of particular priority. If that queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f7bde76c330" loc="83:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f7bde76b7f0" loc="92:PrioCritQueue.nc">
        <documentation loc="85:PrioCritQueue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f7bde76b220" loc="92:PrioCritQueue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f7bdf3bab50"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x7f7bdf3bab50"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
          <variable name="prio" ref="0x7f7bde76b560" loc="92:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f7bde76ad00" loc="98:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headPrio" ref="0x7f7bde770350" loc="63:PrioCritQueue.nc">
        <documentation loc="56:PrioCritQueue.nc">
          <short>&#10; Get the head of the queue of a particular priority without&#10; removing it.</short>
          <long>&#10; Get the head of the queue of a particular priority without&#10; removing it. If that queue is empty, the return value is&#10; undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f7bde7700d0" loc="63:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sizePrio" ref="0x7f7bde7737f0" loc="34:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f7bde773570" loc="34:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f7bde7745d0" loc="23:PrioCritQueue.nc">
        <documentation loc="18:PrioCritQueue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f7bde771020" loc="41:PrioCritQueue.nc">
        <documentation loc="36:PrioCritQueue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearLO" ref="0x7f7bde76a530" loc="95:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeHI" ref="0x7f7bde768460" loc="101:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f7bde76d020" loc="71:PrioCritQueue.nc">
        <documentation loc="65:PrioCritQueue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f7bde77ce10" loc="16:PrioCritQueue.nc">
        <documentation loc="11:PrioCritQueue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headHI" ref="0x7f7bde76f9c0" loc="54:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="q_status" ref="0x7f7bde76f740" loc="54:PrioCritQueue.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeueHI" ref="0x7f7bde76dbe0" loc="75:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="head" ref="0x7f7bde771a60" loc="51:PrioCritQueue.nc">
        <documentation loc="43:PrioCritQueue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined. q_status is a pointer&#10; to an error_t to set as SUCCESS or FAIL depending on whether&#10; there was anything returned&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bde77c560"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="q_status" ref="0x7f7bde7717e0" loc="51:PrioCritQueue.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../tos/interfaces/Random.nc">
      <documentation loc="34:../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f7bde782e50" loc="52:../../tos/interfaces/Random.nc">
        <documentation loc="48:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f7bde782650" loc="46:../../tos/interfaces/Random.nc">
        <documentation loc="42:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f7bde75e9b0" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde75e730" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f7bde75cb90" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde75c910" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f7bde75bd10" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde75ba90" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f7bde7572c0" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f7bde75f8c0" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f7bde75fc40" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde757020" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f7bde751970" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde751370" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde7516a0" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f7bde752a60" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f7bde756630" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde7563b0" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f7bde754b80" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde7545a0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f7bde7548f0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncInfo" loc="36:../../tos/lib/ftsp/TimeSyncInfo.nc">
      <function command="" provided="0" name="getSyncPoint" ref="0x7f7bde7358b0" loc="55:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="50:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the local time of the last synchronization point.</short>
          <long>&#10; Returns the local time of the last synchronization point. This &#10; value is close to the current local time and updated when a new&#10; time synchronization message arrives.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRootID" ref="0x7f7bde734190" loc="60:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="57:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the current root to which this node is synchronized.</short>
          <long>&#10; Returns the current root to which this node is synchronized. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSeqNum" ref="0x7f7bde7349a0" loc="65:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="62:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the latest seq number seen from the current root.</short>
          <long>&#10; Returns the latest seq number seen from the current root.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOffset" ref="0x7f7bde738730" loc="41:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="38:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns current offset of the local time wrt global time.</short>
          <long>&#10; Returns current offset of the local time wrt global time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNumEntries" ref="0x7f7bde733270" loc="71:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="67:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the number of entries stored currently in the &#10; regerssion table.</short>
          <long>&#10; Returns the number of entries stored currently in the &#10; regerssion table.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeartBeats" ref="0x7f7bde733ac0" loc="76:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="73:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the value of heartBeats variable.</short>
          <long>&#10; Returns the value of heartBeats variable. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSkew" ref="0x7f7bde735020" loc="48:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="43:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns current skew of the local time wrt global time.</short>
          <long>&#10; Returns current skew of the local time wrt global time.&#10; This value is normalized to 0.0 (1.0 is subtracted) to get maximum &#10; representation precision.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-float cname="float" size="I:4" alignment="I:1"></type-float>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncMode" loc="44:../../tos/lib/ftsp/TimeSyncMode.nc">
      <documentation loc="36:../../tos/lib/ftsp/TimeSyncMode.nc">
        <short>&#10; the time sync module can work in two modes:&#10;            - TS_TIMER_MODE (default): TS msgs sent period.</short>
        <long>&#10; the time sync module can work in two modes:&#10;            - TS_TIMER_MODE (default): TS msgs sent period. from the timer&#10;            - TS_USER_MODE: TS msgs sent only when explic. asked by user &#10;                            via TimeSyncMode.send() command, TimeSync.Timer &#10;                            is stopped in this mode&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f7bde72fad0" loc="61:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="57:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; command to send out time synchronization message.</short>
          <long>&#10; command to send out time synchronization message.&#10; returns FAIL if TimeSync not in TS_USER_MODE&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f7bde72f350" loc="55:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="52:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; Gets the current mode of the TimeSync module.</short>
          <long>&#10; Gets the current mode of the TimeSync module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f7bde736b20" loc="50:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="46:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; Sets the current mode of the TimeSync module.</short>
          <long>&#10; Sets the current mode of the TimeSync module.&#10; returns FAIL if didn't succeed&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f7bde7368a0" loc="50:../../tos/lib/ftsp/TimeSyncMode.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f7bde7a6a00" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f7bde7a41f0" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f7bde7a49d0" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f7bde7a3940" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f7bde7a0120" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f7bde7a0930" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f7bde7a3190" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bde79f4c0" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f7bde79f240" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f7bde7a6270" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f7bde7a2190" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f7bde7a2920" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bde7475c0" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bde7475c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f7bde73e420" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f7bde743d60" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f7bde740b10" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f7bde740540" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f7bde740880" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f7bde741d60" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f7bde73c460" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f7bde73ebb0" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f7bde741570" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f7bde7442a0" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f7bde744020" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f7bde73faa0" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f7bde73f4d0" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f7bde73f810" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f7bde744d60" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f7bde744ae0" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f7bde743650" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f7bde790d30" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde790ab0" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f7bde79a920" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde79a6a0" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f7bde7a9d20" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f7bde79c820" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde79c5a0" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f7bde797360" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde79bd30" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f7bde7970d0" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f7bde798d30" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde798750" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f7bde798aa0" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f7bde794810" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde794590" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f7bde792b90" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde7925e0" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f7bde792900" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f7bde8479e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f7bde795600" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde795380" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f7bde78f2f0" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f7bde793cf0" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f7bde78f060" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f7bde78d190" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlotterControl" loc="30:../../tos/interfaces/SlotterControl.nc">
      <documentation loc="23:../../tos/interfaces/SlotterControl.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <function command="" provided="0" name="stop" ref="0x7f7bde778700" loc="37:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlot" ref="0x7f7bde778e50" loc="38:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="synchronize" ref="0x7f7bde77b020" loc="31:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="toSlot" ref="0x7f7bde78cc90" loc="31:../../tos/interfaces/SlotterControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSynchornized" ref="0x7f7bde77b790" loc="32:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f7bde77a020" loc="34:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemaining" ref="0x7f7bde778020" loc="36:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f7bde77a770" loc="35:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f7bde62fae0" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f7bde62c350" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7f7bde620dc0" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7f7bde620b40" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7f7bde623390" loc="31:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7f7bde623e10" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f7bde623b90" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7f7bde621940" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f7bde6216c0" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7f7bde620270" loc="53:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f7bde60c1f0" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f7bde60c920" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f7bde60e390" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f7bde60b7b0" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f7bde60ea90" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f7bde60b070" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bde60f5b0" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f7bde60fc80" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f7bde9bd620" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f7bde9bc650" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f7bde9bdd90" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f7bde9b4a30" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f7bde9b22b0" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f7bde8e17f0" loc="85:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f7bde8e0020" loc="86:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f7bde8e1020" loc="79:../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f7bde8c6e20" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f7bde95bdf0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f7bde8c4810" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bde420510" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bde420510"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f7bde420750" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f7bde41b350" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f7bde41d350" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f7bde41c940" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f7bde41c370" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f7bde41c6b0" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f7bde41db30" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f7bde41bb40" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f7bde41f2e0" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f7bde41f060" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde420750"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f7bde41fb10" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x7f7bde3d3850" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f7bde3d0de0" loc="87:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f7bde3d48d0" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f7bde3cd020" loc="91:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f7bde3cf810" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f7bde3cf590" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f7bde3d1c40" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f7bde3d19c0" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f7bde3cda20" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f7bde3cd7a0" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f7bde3d30e0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x7f7bde3d0610" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f7bde3d0390" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f7bde3d12a0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f7bde3d1020" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f7bde3d58a0" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3d58a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7f7bde3c56a0" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7f7bde3c5420" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f7bde3c64c0" loc="76:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f7bde3ca270" loc="47:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3d58a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f7bde3c9670" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3d58a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f7bde3c93f0" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3d58a0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f7bde3c9e20" loc="64:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f7bde3c6c80" loc="82:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bde3cac10" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3d58a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f7bde3ca990" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3d58a0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f7bde3c85d0" loc="67:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f7bde3c8d20" loc="70:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f7bde3c2a80" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3c2a80"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7f7bde3bb3e0" loc="74:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f7bde3bd5c0" loc="58:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f7bde3bf420" loc="48:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3c2a80"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f7bde3bdd30" loc="62:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f7bde3bbba0" loc="80:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bde3bfde0" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3c2a80"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f7bde3bfb60" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde3c2a80"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f7bde3bc4e0" loc="65:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f7bde3bcc30" loc="68:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f7bde3e3ab0" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f7bde3e3ab0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7f7bde3db350" loc="98:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f7bde3dd3e0" loc="87:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f7bde3e0420" loc="61:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f7bde3e3ab0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7f7bde3dbd30" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7f7bde3dbab0" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7f7bde3da550" loc="110:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f7bde3dfd50" loc="75:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f7bde3df5c0" loc="70:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f7bde3ddba0" loc="93:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bde3e0dd0" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f7bde3e3ab0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f7bde3e0b50" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f7bde3e3ab0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f7bde3de4e0" loc="78:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f7bde3dec30" loc="81:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bde2cf780" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bde2cf780"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f7bde2cf9c0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde2cf9c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f7bde2cc350" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde2cf9c0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f7bde2cb4b0" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f7bde2ccbd0" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f7bde2cbc10" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f7bde237630" loc="59:../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f7bde237020" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f7bde2373a0" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f7bde230e30" loc="65:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde230810" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f7bde230ba0" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f7bde22e020" loc="71:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde22fd70" loc="71:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f7bde230020" loc="57:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f7bde231520" loc="52:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f7bde2312a0" loc="52:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f7bde227390" loc="65:../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde227110" loc="65:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f7bde22b410" loc="46:../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde233d90" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f7bde22b180" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f7bde228350" loc="59:../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde2280d0" loc="59:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f7bde22a830" loc="53:../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde22a210" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f7bde22a5a0" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f7bde226390" loc="71:../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde226110" loc="71:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="37:../../tos/lib/rfxlink/util/RadioChannel.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="setChannelDone" ref="0x7f7bde223de0" loc="50:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f7bde2235d0" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f7bde223350" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f7bde222660" loc="55:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bde22c7a0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bde22c7a0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f7bde22c9e0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde22c9e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f7bde21e840" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde22c9e0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde21e5c0" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f7bde21c9d0" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde21c750" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f7bde2205f0" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde220370" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bde21bd00" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde22c9e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde21b710" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f7bde21ba70" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bde22c9e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0x7f7bde2068a0" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f7bde2068a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0x7f7bde201a90" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
          <long>&#10; Clears the isSet flag.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde201810" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f7bde201020" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f7bde2068a0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde203c90" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f7bde203490" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde203210" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bde200810" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="55:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
          <long>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f7bde2068a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde200210" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f7bde200580" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f7bde2068a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bde1f4350" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bde1f4350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f7bde1f4c70" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f7bdf3b3170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f7bde1f5ac0" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1f5840" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f7bde1d4bf0" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f7bde1d5be0" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f7bde1d5270" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f7bde1d4420" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f7bde1d38b0" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0x7f7bde1cfd40" loc="41:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1cfac0" loc="41:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f7bde1d28e0" loc="37:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f7bde1cf350" loc="39:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1cf0d0" loc="39:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f7bde1cc830" loc="45:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1cc210" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f7bde1cc5a0" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f7bde1ceaf0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1ce4d0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f7bde1ce860" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0x7f7bde1cbc70" loc="49:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f7bde852210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1cb9f0" loc="49:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0x7f7bde1ca980" loc="51:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f7bde852210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1ca370" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f7bde1ca6f0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f7bde852210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f7bde1cb2a0" loc="47:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1cb020" loc="47:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f7bde1c8120" loc="53:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f7bde852210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f7bde1deb70" loc="67:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f7bde1de220" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f7bde1de5a0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde1de8d0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f7bde1d9660" loc="122:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1d9060" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bde1d9390" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f7bde1da790" loc="110:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f7bde1dcc00" loc="83:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1dc980" loc="83:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f7bde1dbde0" loc="97:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1db800" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f7bde1dbb50" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0x7f7bde1accc0" loc="59:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0x7f7bde1ab760" loc="72:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0x7f7bde1aa120" loc="79:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0x7f7bde1ac560" loc="48:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
        <long>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example). &#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f7bde194830" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f7bde1945b0" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0x7f7bde193070" loc="62:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f7bde195500" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f7bde195280" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bde195e80" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f7bde195c00" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="43:../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="38:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0x7f7bde19a500" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f7bde19a280" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0x7f7bde199aa0" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="65:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f7bde199820" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0x7f7bde199040" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="60:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
          <long>&#10; Returns the node address for the given entry.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f7bde19ad90" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x7f7bde1985e0" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f7bde198360" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0x7f7bde19ba20" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f7bde19b7a0" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0x7f7bde13b740" loc="40:../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0x7f7bde14ece0" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde14ea60" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0x7f7bde1362a0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde136020" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0x7f7bde135a30" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1357b0" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f7bde139a20" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1397a0" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f7bde13a2a0" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde13a020" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f7bde137750" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde137170" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f7bde1374c0" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f7bde139020" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde13aa00" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f7bde13ad50" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f7bde135020" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1369d0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f7bde136d20" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0x7f7bde147d60" loc="42:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
          <long>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0x7f7bde140730" loc="49:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0x7f7bde13da00" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde13d780" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0x7f7bde13f2a0" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde13f020" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0x7f7bde13fdb0" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
          <long>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde13fb30" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0x7f7bde113d60" loc="60:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
          <long>&#10; This event is fired when the specified timeout period expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0x7f7bde114e10" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f7bde854180"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0x7f7bde114b90" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f7bde854180"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f7bde1135f0" loc="55:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0x7f7bde114350" loc="45:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f7bde1125b0" loc="65:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
          <long>&#10; Returns the current time as measured by the radio stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f7bde854180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="37:../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0x7f7bde10ca90" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="69:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
          <long>&#10; Clears all metadata and sets all default values in the headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde10c810" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f7bde110e00" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde110b80" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f7bde10d4d0" loc="61:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f7bde10ec70" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
          <long>&#10; Sets the length of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde10e690" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f7bde10e9e0" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f7bde1102a0" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde110020" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f7bde10c020" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="63:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde10dce0" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f7bde15c3e0" loc="46:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f7bde15fb80" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde15f900" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f7bde15b020" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
          <long>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde15cc90" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0x7f7bde15b8c0" loc="59:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0x7f7bde159490" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde159210" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0x7f7bde1485f0" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
          <long>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde148370" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0x7f7bde150660" loc="86:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
          <long>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0x7f7bde152e40" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bde152830" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f7bde152bb0" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f7bde156940" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
          <long>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde1566c0" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0x7f7bde155490" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde155210" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0x7f7bde1533e0" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bde155d80" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f7bde153150" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0x7f7bde157020" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
          <long>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f7bde157e30" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde157890" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f7bde157ba0" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f7bde152020" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde153cd0" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0x7f7bde1220b0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde123dd0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0x7f7bde124680" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde124400" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0x7f7bde130df0" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde130820" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0x7f7bde130b60" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0x7f7bde12c020" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde12eca0" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0x7f7bde11d050" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde11ea40" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f7bde11ed90" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0x7f7bde12e430" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde12e1b0" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0x7f7bde1235e0" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde123020" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0x7f7bde123350" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0x7f7bde12b9d0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bde12b3c0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f7bde12b740" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0x7f7bde11e2a0" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde11e020" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0x7f7bde12f920" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde12f6a0" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0x7f7bde1283f0" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde128170" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0x7f7bde12a8b0" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bde12a2a0" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f7bde12a620" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0x7f7bde11a820" loc="178:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f7bde852630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f7bde11dad0" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde11d850" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f7bde11a020" loc="173:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f7bde852210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0x7f7bde11f6b0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde11f0d0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f7bde11f420" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0x7f7bde12cb20" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde12c8a0" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0x7f7bde126bf0" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
          <long>&#10; Sets the frame pending field in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde126620" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0x7f7bde126960" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0x7f7bde122e40" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde122870" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0x7f7bde122bb0" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f7bde1192a0" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde119020" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f7bde1272b0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
          <long>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde128bf0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f7bde127020" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0x7f7bde130040" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde133d90" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f7bde11b680" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde11b400" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0x7f7bde120910" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde120690" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0x7f7bde127db0" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde127b30" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x7f7bde14b2b0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
          <long>&#10; Sets the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde14cbd0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0x7f7bde14b020" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0x7f7bde14baa0" loc="58:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x7f7bde14d8e0" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde14d660" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x7f7bde14c3d0" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde14c150" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0x7f7bde143020" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde145c90" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0x7f7bde1453d0" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
          <long>&#10; Returns the initial amount of maximum backoff for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde145150" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0x7f7bde143870" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0x7f7bde142390" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde142110" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="38:../../tos/lib/rfxlink/util/BareSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f7bde071730" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde0714b0" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f7bde06e2a0" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde06e020" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f7bde06f6b0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde06f0d0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f7bde06f420" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="37:../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f7bde073d10" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
              <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bde073a50" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f7bde05b6a0" loc="50:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f7bde05a600" loc="60:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f7bde05be80" loc="55:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f7bde05fe30" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f7bde05f850" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f7bde847dc0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f7bde05fba0" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f7bddfb28e0" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f7bddfb1270" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f7bddfada10" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f7bddfad1f0" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f7bddfaf0e0" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f7bddfaf940" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f7bddfa4b50" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f7bddfaeb00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f7bddfa48d0" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f7bddfaeb00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f7bddfa8a80" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f7bddfa5620" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f7bddfaeb00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f7bddfa53a0" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f7bddfaeb00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f7bddfa4020" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f7bddfaeb00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="38:../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f7bdde37020" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
              <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdde38d30" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0x7f7bdde38390" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdde38110" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="38:../../tos/lib/rfxlink/util/RadioState.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="turnOff" ref="0x7f7bdddccd10" loc="45:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7f7bdddc9e60" loc="57:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f7bdddc8920" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f7bdddc86a0" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0x7f7bdddc6120" loc="70:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="66:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0x7f7bdddc9600" loc="51:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
          <long>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f7bdddc69d0" loc="75:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="72:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="38:../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0x7f7bdddc4730" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdddc44b0" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0x7f7bdddc3bc0" loc="64:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f7bdddc3350" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f7bdddc30d0" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f7bddd235e0" loc="53:../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f7bddd235e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f7bddd202a0" loc="64:../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f7bddd235e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f7bddd20020" loc="64:../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f7bddd235e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="37:../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0x7f7bddcf9a00" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="54:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bddcf9780" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f7bddcfc7f0" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
          <long>&#10; Returns if the flag is set for this message. &#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bddcfc570" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0x7f7bddcfa5e0" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
          <long>&#10; Sets the flag in this message to the specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bddcfa020" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f7bddcfa350" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f7bddcf9020" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bddcfad70" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="38:../../tos/lib/rfxlink/util/RadioCCA.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="done" ref="0x7f7bddcc7dc0" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f7bddcc7b40" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f7bddcc7350" loc="45:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f7bddc1f7f0" loc="89:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f7bddc204d0" loc="85:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f7bddc22070" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f7bddc1f020" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f7bddc20c40" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f7bddc21c40" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f7bddc219c0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f7bddc1d2a0" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f7bddc1d020" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f7bddc22810" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f7bddc212a0" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f7bddc21020" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x7f7bddc14b80" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x7f7bddc16ae0" loc="68:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x7f7bddc152b0" loc="74:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x7f7bddc15ae0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7f7bddc123b0" loc="98:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x7f7bddc14350" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7f7bddc17810" loc="57:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f7bde9142c0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f7bde9146e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7f7bddc162a0" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f7bde9142c0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f7bde9146e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7f7bddc16020" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f7bde9142c0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f7bde9146e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bdda1b020" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bdda1b020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f7bdda1b260" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bdda1b260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f7bdda1bd90" loc="66:../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bdda1b260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f7bdda1bb10" loc="66:../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bdda1b260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f7bdda1f610" loc="54:../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f7bdda1e7d0" loc="66:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f7bdda1e020" loc="61:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f7bdda1fd30" loc="61:../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f7bdda22d70" loc="53:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f7bdda26020" loc="62:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdda29ca0" loc="62:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f7bdda243c0" loc="74:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdda24140" loc="74:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f7bdda26890" loc="68:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f7bdda24e50" loc="81:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdda24bd0" loc="81:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f7bdd913600" loc="76:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f7bdd918c00" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f7bdd913020" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bdd913360" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f7bdd912b80" loc="88:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f7bdd911e50" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f7bdd912220" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bdd912560" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f7bdd9128d0" loc="89:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f7bdd9178a0" loc="45:../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f7bdd917620" loc="45:../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x7f7bdd8fd420" loc="86:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x7f7bdd8f31f0" loc="126:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x7f7bdd8f8b70" loc="117:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x7f7bdd8f3c10" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x7f7bdd8f3990" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x7f7bdd8fec40" loc="83:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x7f7bdd8f5750" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x7f7bdd8f54d0" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7f7bdd8f92a0" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x7f7bdd8f9020" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f7bdd8fb3b0" loc="97:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x7f7bdd8ed720" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x7f7bdd8ed4a0" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x7f7bdd8f9a40" loc="114:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x7f7bdd8f1d50" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x7f7bdd8f1ad0" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f7bdd8f0cf0" loc="136:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x7f7bdd8f4a30" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x7f7bdd8f47b0" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x7f7bdd8efc90" loc="140:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x7f7bdd8f65c0" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x7f7bdd8f6340" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f7bdd8fbd90" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdd8fbb10" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f7bdd8f8410" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x7f7bdd8f8190" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x7f7bdd8f4020" loc="123:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x7f7bdd8f13b0" loc="129:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x7f7bdd8f0510" loc="132:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x7f7bdd8ef4d0" loc="138:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x7f7bdd8f6d40" loc="120:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f7bdd8fdbb0" loc="89:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f7bdd8fa7c0" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdd8fa540" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f7bdd7a07a0" loc="43:../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bdd7a07a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7f7bdd79b020" loc="80:../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bdd7a07a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f7bdd798a50" loc="97:../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bdd7a07a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f7bdd7987d0" loc="97:../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bdd7a07a0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f7bdf3bab50"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x7f7bdf3bab50"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7f7bdd797a10" loc="108:../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bdd7a07a0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f7bdd797790" loc="108:../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f7bdd79d7e0" loc="57:../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f7bdd79c820" loc="72:../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f7bdd79bc00" loc="88:../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f7bdd7a07a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f7bdd79d070" loc="50:../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7f7bdd79c020" loc="65:../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncNotify" loc="41:../../tos/lib/ftsp/TimeSyncNotify.nc">
      <documentation loc="36:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <short>&#10; time sync module (TimeSyncM) provides notification of arriving&#10; and transmitted time-sync msgs through TimeSyncNotify interface:&#10;</short>
      </documentation>
      <function event="" provided="0" name="msg_received" ref="0x7f7bdd6f6cf0" loc="46:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <documentation loc="43:../../tos/lib/ftsp/TimeSyncNotify.nc">
          <short>&#10; fired when time-sync msg is received and accepted&#10;</short>
        </documentation>
        <interfacedef-ref qname="TimeSyncNotify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="msg_sent" ref="0x7f7bdd6f3480" loc="52:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <documentation loc="48:../../tos/lib/ftsp/TimeSyncNotify.nc">
          <short>&#10; fired when time-sync msg is sent by TimeSyncM or the sending did not&#10; succeed&#10;</short>
        </documentation>
        <interfacedef-ref qname="TimeSyncNotify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncAMSend" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bdd6eab90" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
          <interfacedef-ref qname="TimeSyncAMSend"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bdd6eab90"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f7bdd6eadd0" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
          <interfacedef-ref qname="TimeSyncAMSend"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bdd6eadd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="send" ref="0x7f7bdd6e6430" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="46:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; This command sends a regular message just like &#60;tt>AMSend.send&#60;/tt>, but&#10; it also performs sender-receiver time synchronization.</short>
          <long>&#10; This command sends a regular message just like &#60;tt>AMSend.send&#60;/tt>, but&#10; it also performs sender-receiver time synchronization. The &#60;tt>event_time&#60;/tt>&#10; parameter holds the time of some event as expressed in the local clock of&#10; the sender. The receiver can obtain the time of this event (expressed in its&#10; own local time) via the &#60;tt>TimeSyncPacket&#60;/tt> interface.&#10;&#10; @param addr         address to which to send the packet&#10; @param msg          the packet&#10; @param len          the length of the data in the packet payload&#10; @param event_time&#9;  the synchronization point to be transfered with the message&#10; @return             SUCCESS if the request to send succeeded and a&#10;                     sendDone will be signaled later, EBUSY if the&#10;                     abstraction cannot send now but will be able to&#10;                     later, or FAIL if the communication layer is not&#10;                     in a state that can send (e.g., off).&#10; @see sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bdd6eadd0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f7bdd6e76d0" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f7bde8451d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f7bdd6e7a50" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bdd6e7d80" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
          <variable name="event_time" ref="0x7f7bdd6e6180" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bdd6eadd0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f7bdd6e2ab0" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="105:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdd6e24b0" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bdd6e27e0" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f7bdd6e3bf0" loc="103:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="95:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f7bdd6e42a0" loc="80:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="66:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the&#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a&#10; sendFailed event, and never a sendSucceeded event.&#10;&#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdd6e4020" loc="80:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f7bdd6e32b0" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="82:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Signaled in response to an accepted send request.</short>
          <long>&#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdd6e4c40" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f7bdd6e3020" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncPacket" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f7bdd6d4100" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
          <interfacedef-ref qname="TimeSyncPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f7bdd6d4100"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f7bdd6d4340" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
          <interfacedef-ref qname="TimeSyncPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bdd6d4340"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="isValid" ref="0x7f7bdd6d3020" loc="48:../../tos/interfaces/TimeSyncPacket.nc">
        <documentation loc="39:../../tos/interfaces/TimeSyncPacket.nc">
          <short>&#10; Returns TRUE if the value returned by &#60;tt>getTime&#60;/tt> can be trusted.</short>
          <long>&#10; Returns TRUE if the value returned by &#60;tt>getTime&#60;/tt> can be trusted.&#10; Under certain circumstances the received message cannot be properly&#10; time stamped, so the sender-receiver synchronization cannot be finished&#10; on the receiver side. In this case, this command returns FALSE.&#10; This command MUST BE called only on the receiver side and only for&#10; messages transmitted via the TimeSyncSend interface. It is recommended&#10; that this command be called from the receive event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdd6d4c40" loc="48:../../tos/interfaces/TimeSyncPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="eventTime" ref="0x7f7bdd6d3c50" loc="58:../../tos/interfaces/TimeSyncPacket.nc">
        <documentation loc="50:../../tos/interfaces/TimeSyncPacket.nc">
          <short>&#10; This command should be called by the receiver of a message.</short>
          <long>&#10; This command should be called by the receiver of a message. The time&#10; of the synchronization event is returned as expressed in the local&#10; clock of the caller. This command MUST BE called only on the receiver&#10; side and only for messages transmitted via the TimeSyncSend interface.&#10; It is recommended that this command be called from the receive event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f7bdd6d4340"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdd6d39d0" loc="58:../../tos/interfaces/TimeSyncPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f7bdd367020" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdd368960" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f7bdd368ce0" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f7bdd369020" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f7bdd368020" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f7bdd3698b0" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f7bde82e160"/>
                <typename><typedef-ref name="message_t" ref="0x7f7bde82d7f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f7bdd369c20" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f7bdd331190" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f7bdd3349e0" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f7bdd33a270" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f7bdd3396c0" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f7bdd337390" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdd337110" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f7bdd338020" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f7bdd33ade0" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdd33ab60" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f7bdd337bf0" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f7bdd3388d0" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f7bdd343c10" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f7bdd341590" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f7bdd3432a0" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f7bdd343020" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f7bdd3402a0" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f7bdd340020" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f7bdd33e020" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f7bdd33ec40" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdd33e9c0" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f7bdd33d730" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f7bdd33d4b0" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f7bdd20cdd0" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f7bdd20c800" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bdd20cb40" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f7bdd206ac0" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f7bdd206840" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f7bdd203930" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f7bdd203360" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bdd2036a0" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f7bdd205740" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f7bdd2022c0" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f7bdd201920" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bdd201c60" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f7bdd202020" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f7bdd206070" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f7bdd207720" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f7bdd208db0" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f7bdd207130" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f7bdf3b4610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f7bdd207480" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f7bdd1e15b0" loc="50:../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f7bdd1e1330" loc="50:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f7bdd1e1df0" loc="59:../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f7bdd1e0cf0" loc="69:../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f7bdd1e0700" loc="69:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f7bdd1e0a60" loc="69:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f7bdd1deb50" loc="79:../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:../../tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:../../tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f7bdd1cb820" loc="44:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f7bdd1cc910" loc="42:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x7f7bdd1c7110" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdd1c8e60" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f7bdd1c8070" loc="47:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f7bdd1cf980" loc="40:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f7bdd1cc190" loc="41:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f7bdd1cb0e0" loc="43:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f7bde9b63a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x7f7bdd1ca020" loc="45:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f7bde9fd500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f7bdd1ca950" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f7bdd1ca6d0" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f7bdd1c8790" loc="48:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7bdf3b5ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7f7bdcffe720" loc="49:../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7f7bdcffe4a0" loc="49:../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
