<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="24:MCCC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f03d3343ce0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f03d4566e10"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f03d4566e10"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f03d455fdb0"/></to>
    </wire>
    <wire loc="26:MCCC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d33405f0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d416e790"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d416e790"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d41420c0"/></to>
    </wire>
    <wire loc="27:MCCC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d3341900"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d4171b00"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d4171b00"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d4143410"/></to>
    </wire>
    <wire loc="29:MCCC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d3342320"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d4565890"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d4565890"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d43892a0"/></to>
    </wire>
    <wire loc="30:MCCC.nc">
      <from><interface-ref name="MacControl" scoped="" ref="0x7f03d333fd00"/></from>
      <to><interface-ref name="MacPowerControl" scoped="" ref="0x7f03d47cc020"/></to>
    </wire>
    <wire loc="36:TdmaMacC.nc">
      <from><interface-ref name="MacPowerControl" scoped="" ref="0x7f03d47cc020"/></from>
      <to><interface-ref name="MacPowerControl" scoped="" ref="0x7f03d46e2dc0"/></to>
    </wire>
    <wire loc="31:MCCC.nc">
      <from><interface-ref name="MacSend" scoped="" ref="0x7f03d333d3b0"/></from>
      <to><interface-ref name="MacSend" scoped="" ref="0x7f03d4757c80"/></to>
    </wire>
    <wire loc="40:TdmaMacC.nc">
      <from><interface-ref name="MacSend" scoped="" ref="0x7f03d4757c80"/></from>
      <to><interface-ref name="MacSend" scoped="" ref="0x7f03d46e38e0"/></to>
    </wire>
    <wire loc="32:MCCC.nc">
      <from><interface-ref name="MacReceive" scoped="" ref="0x7f03d333c130"/></from>
      <to><interface-ref name="MacReceive" scoped="" ref="0x7f03d4753680"/></to>
    </wire>
    <wire loc="41:TdmaMacC.nc">
      <from><interface-ref name="MacReceive" scoped="" ref="0x7f03d4753680"/></from>
      <to><interface-ref name="MacReceive" scoped="" ref="0x7f03d46e2690"/></to>
    </wire>
    <wire loc="33:MCCC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d333c7c0"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d47d0020"/></to>
    </wire>
    <wire loc="37:TdmaMacC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d47d0020"/></from>
      <to><interface-ref name="Frame" scoped="" ref="0x7f03d46e4c80"/></to>
    </wire>
    <wire loc="49:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d2ef6020"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x7f03d3088bc0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x7f03d3083b50"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d30f8770"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d3295bb0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d2f243c0"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d2818420"/></to>
    </wire>
    <wire loc="120:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d3975600"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d3b90b40"/></to>
    </wire>
    <wire loc="52:../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d3c54080"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d2981760"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d29b0b60"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d2a75460"/></to>
    </wire>
    <wire loc="47:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d2b07d90"/></to>
    </wire>
    <wire loc="49:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d4360b30"/></to>
    </wire>
    <wire loc="35:MCCC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d36212e0"/></to>
    </wire>
    <wire loc="58:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d36212e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d3570c10"/></to>
    </wire>
    <wire loc="36:MCCC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f03d3622b30"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f03d4566e10"/></to>
    </wire>
    <wire loc="33:TdmaMacC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d47d2020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d46e4570"/></to>
    </wire>
    <wire loc="45:TdmaMacC.nc">
      <from><interface-ref name="Slotter" scoped="" ref="0x7f03d46b1b40"/></from>
      <to><interface-ref name="Slotter" scoped="" ref="0x7f03d45692f0"/></to>
    </wire>
    <wire loc="45:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Slotter" scoped="" ref="0x7f03d45692f0"/></from>
      <to><interface-ref name="Slotter" scoped="" ref="0x7f03d435dac0"/></to>
    </wire>
    <wire loc="46:TdmaMacC.nc">
      <from><interface-ref name="SlotterControl" scoped="" ref="0x7f03d46ab130"/></from>
      <to><interface-ref name="SlotterControl" scoped="" ref="0x7f03d4569950"/></to>
    </wire>
    <wire loc="53:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="SlotterControl" scoped="" ref="0x7f03d4569950"/></from>
      <to><interface-ref name="SlotterControl" scoped="" ref="0x7f03d435c150"/></to>
    </wire>
    <wire loc="47:TdmaMacC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d46b7330"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d4568970"/></to>
    </wire>
    <wire loc="46:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d4568970"/></from>
      <to><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d435b180"/></to>
    </wire>
    <wire loc="50:TdmaMacC.nc">
      <from><interface-ref name="RadioPowerControl" scoped="" ref="0x7f03d4691170"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d4176020"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d4176020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d41482e0"/></to>
    </wire>
    <wire loc="51:TdmaMacC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d46c14e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d416e790"/></to>
    </wire>
    <wire loc="52:TdmaMacC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d46d1020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d4171b00"/></to>
    </wire>
    <wire loc="53:TdmaMacC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d46d39a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d4565890"/></to>
    </wire>
    <wire loc="54:TdmaMacC.nc">
      <from><interface-ref name="ACK" scoped="" ref="0x7f03d4689630"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d416de40"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d416de40"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d4141800"/></to>
    </wire>
    <wire loc="55:TdmaMacC.nc">
      <from><interface-ref name="phyDataSend" scoped="" ref="0x7f03d468fc30"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d4175050"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:TdmaMacC.nc">
      <from><interface-ref name="phyDataReceive" scoped="" ref="0x7f03d468d9d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d4173210"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:TdmaMacC.nc">
      <from><interface-ref name="phyNotificationSend" scoped="" ref="0x7f03d467f6c0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d4175050"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:TdmaMacC.nc">
      <from><interface-ref name="phyNotificationReceive" scoped="" ref="0x7f03d468f570"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d4173210"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:TdmaMacC.nc">
      <from><interface-ref name="forwardQueue" scoped="" ref="0x7f03d469a730"/></from>
      <to><interface-ref name="PCQ" scoped="" ref="0x7f03d36362f0"/></to>
    </wire>
    <wire loc="17:PrioCritQueueC.nc">
      <from><interface-ref name="PCQ" scoped="" ref="0x7f03d36362f0"/></from>
      <to><interface-ref name="PrioCritQueue" scoped="" ref="0x7f03d27b3770"/></to>
    </wire>
    <wire loc="66:TdmaMacC.nc">
      <from><interface-ref name="GlobalTime" scoped="" ref="0x7f03d4679a10"/></from>
      <to><interface-ref name="GlobalTime" scoped="" ref="0x7f03d3620300"/></to>
    </wire>
    <wire loc="56:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="GlobalTime" scoped="" ref="0x7f03d3620300"/></from>
      <to><interface-ref name="GlobalTime" scoped="" ref="0x7f03d356faf0"/></to>
    </wire>
    <wire loc="67:TdmaMacC.nc">
      <from><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f03d4663990"/></from>
      <to><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f03d361e580"/></to>
    </wire>
    <wire loc="60:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f03d361e580"/></from>
      <to><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f03d356dbc0"/></to>
    </wire>
    <wire loc="68:TdmaMacC.nc">
      <from><interface-ref name="TimeSyncMode" scoped="" ref="0x7f03d465fc60"/></from>
      <to><interface-ref name="TimeSyncMode" scoped="" ref="0x7f03d361c650"/></to>
    </wire>
    <wire loc="61:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncMode" scoped="" ref="0x7f03d361c650"/></from>
      <to><interface-ref name="TimeSyncMode" scoped="" ref="0x7f03d356bbd0"/></to>
    </wire>
    <wire loc="70:TdmaMacC.nc">
      <from><interface-ref name="FaultClearTimer" scoped="" ref="0x7f03d466d850"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d36f6b00"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d36f6b00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f03d39ea2e0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="47:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f03d4564d90"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f03d435d310"/></to>
    </wire>
    <wire loc="44:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f03d434fa90"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f03d4566e10"/></to>
    </wire>
    <wire loc="50:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d435a290"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d41804e0"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d41804e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d2b8d890"/></to>
    </wire>
    <wire loc="54:../../tos/system/GenericSlotterC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d4350440"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d4565890"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f03d439a470"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f03d48f09d0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f03d48f09d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f03d481be40"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f03d4399020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f03d3868680"/></to>
    </wire>
    <wire loc="123:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f03d4399020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f03d3976a60"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f03d4399020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d4561d50"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d4561d50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d45530c0"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4399720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f03d455dd50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d2f6cc60"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f03d455dd50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d42592a0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f03d455d020"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f03d43ba690"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7f03d4552020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d43ba020"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f03d45537a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d43652e0"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f03d45537a0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f03d45559d0"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f03d45559d0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f03d454a530"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f03d454d110"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f03d455dd50"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7f03d4543ad0"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7f03d4538060"/></to>
    </wire>
    <wire loc="141:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7f03d4538060"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f03d44acda0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f03d4549cd0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f03d454d110"/></to>
    </wire>
    <wire loc="191:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7f03d4502cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d4412160"/></to>
    </wire>
    <wire loc="165:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7f03d451e4e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f03d44812b0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f03d44812b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2d52e20"/></to>
    </wire>
    <wire loc="176:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7f03d4511350"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f03d446f8f0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f03d446f8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2ce03f0"/></to>
    </wire>
    <wire loc="185:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7f03d4508cb0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f03d4460c10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f03d4460c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2c6c3f0"/></to>
    </wire>
    <wire loc="196:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x7f03d44fa060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d43f86d0"/></to>
    </wire>
    <wire loc="143:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7f03d4536670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f03d44a92b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f03d44a92b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e893f0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7f03d450a670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f03d44628f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f03d44628f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2c73e20"/></to>
    </wire>
    <wire loc="146:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7f03d4533cb0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f03d44a1a20"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f03d44a1a20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e2ba60"/></to>
    </wire>
    <wire loc="157:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7f03d4527cb0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f03d448f020"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f03d448f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2db90a0"/></to>
    </wire>
    <wire loc="168:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7f03d451be40"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f03d447e760"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f03d447e760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2d476d0"/></to>
    </wire>
    <wire loc="179:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7f03d450ecb0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f03d446cda0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f03d446cda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2cd6e20"/></to>
    </wire>
    <wire loc="138:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7f03d453c800"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f03d44b08f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f03d44b08f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e9a3f0"/></to>
    </wire>
    <wire loc="149:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7f03d452f670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f03d449d020"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f03d449d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e203f0"/></to>
    </wire>
    <wire loc="160:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7f03d4523670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f03d448c5d0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f03d448c5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2daf9b0"/></to>
    </wire>
    <wire loc="171:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7f03d4516670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f03d447ac10"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f03d447ac10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2d3d0a0"/></to>
    </wire>
    <wire loc="188:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7f03d4504670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f03d445c2b0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f03d445c2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2c62e20"/></to>
    </wire>
    <wire loc="194:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7f03d44feb20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d4402160"/></to>
    </wire>
    <wire loc="174:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7f03d4514cb0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f03d44725d0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f03d44725d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2ce7e20"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f03d44acda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e90e20"/></to>
    </wire>
    <wire loc="152:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7f03d452b020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f03d449a5d0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f03d449a5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e17e20"/></to>
    </wire>
    <wire loc="192:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7f03d45004e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d440ec90"/></to>
    </wire>
    <wire loc="155:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7f03d4529670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f03d4492d30"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f03d4492d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2dc0c90"/></to>
    </wire>
    <wire loc="166:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7f03d451d800"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f03d4480440"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f03d4480440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2d4e0a0"/></to>
    </wire>
    <wire loc="177:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7f03d4510670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f03d446ea80"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f03d446ea80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2cdc6d0"/></to>
    </wire>
    <wire loc="186:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7f03d4506020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f03d445fda0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f03d445fda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2c696d0"/></to>
    </wire>
    <wire loc="144:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7f03d4535990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f03d44a8440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f03d44a8440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e7f6d0"/></to>
    </wire>
    <wire loc="147:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7f03d4531020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f03d44a0c10"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f03d44a0c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e28e20"/></to>
    </wire>
    <wire loc="158:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7f03d4525020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f03d448e2b0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f03d448e2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2db53f0"/></to>
    </wire>
    <wire loc="169:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7f03d4519060"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f03d447d8f0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f03d447d8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2d449b0"/></to>
    </wire>
    <wire loc="180:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7f03d450c020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f03d446a020"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f03d446a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2cd20a0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7f03d453bb20"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f03d44afa80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f03d44afa80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e966d0"/></to>
    </wire>
    <wire loc="150:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7f03d452e990"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f03d449c2b0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f03d449c2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e1d6d0"/></to>
    </wire>
    <wire loc="161:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7f03d4522990"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f03d448b760"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f03d448b760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2dace20"/></to>
    </wire>
    <wire loc="189:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7f03d4503990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f03d445b440"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f03d445b440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2c5e0a0"/></to>
    </wire>
    <wire loc="164:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7f03d451f020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f03d4482020"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f03d4482020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2d55c90"/></to>
    </wire>
    <wire loc="175:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7f03d4512020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f03d4471760"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f03d4471760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2ce30a0"/></to>
    </wire>
    <wire loc="184:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7f03d4509990"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f03d4461a80"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f03d4461a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2c6f0a0"/></to>
    </wire>
    <wire loc="195:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7f03d44fde40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d43fec90"/></to>
    </wire>
    <wire loc="142:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7f03d4537350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f03d44aa020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f03d44aa020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e8c0a0"/></to>
    </wire>
    <wire loc="153:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7f03d452a350"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f03d4499760"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f03d4499760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e130a0"/></to>
    </wire>
    <wire loc="182:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7f03d450b350"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f03d44637a0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f03d44637a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2c76c90"/></to>
    </wire>
    <wire loc="156:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7f03d4528990"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f03d4491e60"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f03d4491e60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2dbde20"/></to>
    </wire>
    <wire loc="167:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7f03d451cb20"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f03d447f5d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f03d447f5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2d4b3f0"/></to>
    </wire>
    <wire loc="178:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7f03d450f990"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f03d446dc10"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f03d446dc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2cd99b0"/></to>
    </wire>
    <wire loc="187:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7f03d4505350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f03d445d020"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f03d445d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2c659b0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7f03d454b530"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f03d44b16b0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f03d44b16b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e9d0a0"/></to>
    </wire>
    <wire loc="148:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7f03d4530350"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f03d449fda0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f03d449fda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e240a0"/></to>
    </wire>
    <wire loc="159:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7f03d4524350"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f03d448d440"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f03d448d440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2db26d0"/></to>
    </wire>
    <wire loc="170:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7f03d4518350"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f03d447ba80"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f03d447ba80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2d41e20"/></to>
    </wire>
    <wire loc="193:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7f03d44ff800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d44086d0"/></to>
    </wire>
    <wire loc="173:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7f03d4515990"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f03d44733f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f03d44733f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2ceac90"/></to>
    </wire>
    <wire loc="162:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7f03d4521cb0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f03d448a8f0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f03d448a8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2da80a0"/></to>
    </wire>
    <wire loc="140:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7f03d453ae40"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f03d44adc10"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f03d44adc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e939b0"/></to>
    </wire>
    <wire loc="151:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7f03d452dcb0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f03d449b440"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f03d449b440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f03d2e1a9b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d481ad30"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f03d48142c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f03d48313b0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f03d47f6330"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f03d3ae9cb0"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d43652e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d438cc30"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f03d4388a00"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f03d438aa00"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f03d438aa00"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x7f03d453bb20"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f03d4387ca0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f03d4368ce0"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f03d4368ce0"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x7f03d453c800"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f03d4385020"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f03d4366020"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f03d4366020"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x7f03d454b530"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f03d2b860a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d2b937c0"/></to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d2b937c0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d2b7dd90"/></to>
    </wire>
    <wire loc="38:../../tos/platforms/mica/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d2b89c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d4206290"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d4206290"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d41c10f0"/></to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f03d2b780b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d4312a90"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d4312a90"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d42eeb80"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f03d2b73570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f03d42f9650"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d4306d80"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d42e6020"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f03d42fdbf0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f03d42e5850"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f03d42f9650"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f03d42e05a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f03d42f9650"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f03d42dcba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f03d42f9650"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f03d42d7120"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d4259a10"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d4312a90"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f03d41bf540"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d41fe290"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d41fe290"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d41f8020"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d41e5280"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d4312a90"/></to>
    </wire>
    <wire loc="75:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d41482e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d4120080"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f03d41714f0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f03d4145d60"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f03d4145d60"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f03d411cbb0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d4143410"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f03d411aa10"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d4175050"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d4147320"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d4147320"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d411e1d0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f03d4173df0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f03d41451d0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f03d41451d0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f03d411c020"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d41658a0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d4140320"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d4140320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d40ff320"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d4173210"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d4146510"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d4146510"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d411d3f0"/></to>
    </wire>
    <wire loc="85:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d4141800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d4100800"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f03d415ebf0"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f03d4140e10"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f03d4140e10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f03d40ffe10"/></to>
    </wire>
    <wire loc="83:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d41420c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d411b2d0"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f03d415a960"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f03d413fad0"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f03d413fad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f03d40fead0"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f03d41519e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d412e8a0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d412e8a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d40f1270"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d4150af0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d4127970"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d4127970"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d40ed3f0"/></to>
    </wire>
    <wire loc="254:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d4120080"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d3d28880"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d4134a00"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d40f61c0"/></to>
    </wire>
    <wire loc="345:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d40f61c0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d39943b0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f03d411cbb0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f03d3f0f3a0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f03d411aa10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d3f12720"/></to>
    </wire>
    <wire loc="136:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d411e1d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d3f11530"/></to>
    </wire>
    <wire loc="138:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f03d411c020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f03d3f10b00"/></to>
    </wire>
    <wire loc="91:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d4136400"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d40fbc90"/></to>
    </wire>
    <wire loc="343:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d40fbc90"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d3998e80"/></to>
    </wire>
    <wire loc="255:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d40ff320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d3d11270"/></to>
    </wire>
    <wire loc="137:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d411d3f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d3f103a0"/></to>
    </wire>
    <wire loc="309:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d40f1270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d39dd020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d412f270"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d40f4d70"/></to>
    </wire>
    <wire loc="347:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d40f4d70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d398aa40"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d4138df0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d40fd6d0"/></to>
    </wire>
    <wire loc="344:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d40fd6d0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d398fe70"/></to>
    </wire>
    <wire loc="288:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d4100800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d3c11560"/></to>
    </wire>
    <wire loc="226:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f03d40ffe10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f03d3d34d60"/></to>
    </wire>
    <wire loc="140:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d411b2d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d3f13020"/></to>
    </wire>
    <wire loc="264:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f03d40fead0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f03d3c9d5f0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d412b4c0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d40f4510"/></to>
    </wire>
    <wire loc="346:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d40f4510"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d398a1e0"/></to>
    </wire>
    <wire loc="310:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d40ed3f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d39e1020"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d3d28880"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f03d3d11d90"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d39943b0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d396ea40"/></to>
    </wire>
    <wire loc="172:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f03d4110020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f03d3e5dd30"/></to>
    </wire>
    <wire loc="160:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0x7f03d410f2c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f03d3e91390"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f03d3e91390"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f03d2a739d0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f03d3f0f3a0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f03d2ac7420"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d39e1020"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d28e4360"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d3f11530"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d2aca6c0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f03d3f10b00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f03d2ac8c90"/></to>
    </wire>
    <wire loc="173:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d41013c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d3d7edd0"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d3d7edd0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d2a062e0"/></to>
    </wire>
    <wire loc="174:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f03d4109890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d3e8ce00"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d3d11270"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d298a640"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d3998e80"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d3971550"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3f103a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d2ac8530"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d3f12720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d2acb8b0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d39dd020"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d28e02a0"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d398aa40"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d386c020"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d398fe70"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d3967560"/></to>
    </wire>
    <wire loc="170:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0x7f03d4111a60"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f03d3e5ea50"/></to>
    </wire>
    <wire loc="117:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f03d3d34d60"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f03d3d2e100"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d3f13020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d2acc270"/></to>
    </wire>
    <wire loc="171:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0x7f03d4118840"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f03d3e5d760"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f03d3c9d5f0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f03d2980d00"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d398a1e0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d39648b0"/></to>
    </wire>
    <wire loc="116:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d4051880"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d3d81e00"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d3d81e00"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d2a09020"/></to>
    </wire>
    <wire loc="117:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d404a8d0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3fbd480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f03d4049160"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d39dd020"/></to>
    </wire>
    <wire loc="119:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0x7f03d404e020"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3999d90"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3999d90"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3972470"/></to>
    </wire>
    <wire loc="124:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d3fba020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d3989dd0"/></to>
    </wire>
    <wire loc="101:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d3989dd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d3871ac0"/></to>
    </wire>
    <wire loc="125:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f03d3fbb140"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f03d40e8e50"/></to>
    </wire>
    <wire loc="131:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d3f0d8c0"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f03d406de30"/></to>
    </wire>
    <wire loc="132:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3f0e8f0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f03d3f06880"/></to>
    </wire>
    <wire loc="133:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3f0d2b0"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0x7f03d3e1b020"/></to>
    </wire>
    <wire loc="134:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d3f0fa30"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0x7f03d3e1b630"/></to>
    </wire>
    <wire loc="149:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f03d3ef6c00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f03d3e91390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3ef6310"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0x7f03d3e1c5d0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d3e5c390"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d3d81e00"/></to>
    </wire>
    <wire loc="166:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3e572b0"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f03d3e507c0"/></to>
    </wire>
    <wire loc="167:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3e57be0"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f03d3e1d120"/></to>
    </wire>
    <wire loc="168:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3e58470"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d3e1d730"/></to>
    </wire>
    <wire loc="182:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3e1a4a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d3d48840"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d3d48840"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d29b19b0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3e1add0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d3d7ce60"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3d7ce60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d2a03440"/></to>
    </wire>
    <wire loc="184:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d3e19410"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d7c080"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d7c080"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d2a04590"/></to>
    </wire>
    <wire loc="190:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d7b500"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d32a10"/></to>
    </wire>
    <wire loc="115:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d32a10"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d308c0"/></to>
    </wire>
    <wire loc="194:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d7a440"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d3d34790"/></to>
    </wire>
    <wire loc="114:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3d34790"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d302b0"/></to>
    </wire>
    <wire loc="217:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d3d46be0"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0x7f03d4083e40"/></to>
    </wire>
    <wire loc="218:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3d47a70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d3d3ee40"/></to>
    </wire>
    <wire loc="113:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d3d3ee40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f03d3d31950"/></to>
    </wire>
    <wire loc="219:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f03d3d44720"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f03d409c390"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f03d409c390"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f03d2b063d0"/></to>
    </wire>
    <wire loc="220:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d3d43400"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d409b150"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d3d2f720"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d3c11560"/></to>
    </wire>
    <wire loc="232:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3d31950"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d3d13440"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d3d13440"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f03d3d108c0"/></to>
    </wire>
    <wire loc="233:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d302b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d3d13d70"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3d13d70"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d0f2b0"/></to>
    </wire>
    <wire loc="234:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d308c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d123d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d123d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d0f8c0"/></to>
    </wire>
    <wire loc="250:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f03d3d11d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d3c9fa10"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d3c9fa10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d2983bf0"/></to>
    </wire>
    <wire loc="251:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3d108c0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d3c9e5d0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d3c9e5d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d2981d70"/></to>
    </wire>
    <wire loc="252:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d0f2b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d3c9d020"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3c9d020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d2980730"/></to>
    </wire>
    <wire loc="253:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d0f8c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d39dbc20"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f03d39dbc20"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d28dd020"/></to>
    </wire>
    <wire loc="260:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f03d3c9a8b0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f03d3c451d0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f03d3c451d0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f03d2943660"/></to>
    </wire>
    <wire loc="261:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3c99270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3d47270"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3d47270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d29b0400"/></to>
    </wire>
    <wire loc="262:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f03d3c9baa0"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f03d39acb60"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f03d39acb60"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f03d39a6410"/></to>
    </wire>
    <wire loc="263:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f03d3c9b020"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f03d40e8e50"/></to>
    </wire>
    <wire loc="268:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d46440"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3c45ac0"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3c45ac0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d2942020"/></to>
    </wire>
    <wire loc="277:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d3c410a0"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f03d407a6b0"/></to>
    </wire>
    <wire loc="278:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3c44310"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f03d3c3c470"/></to>
    </wire>
    <wire loc="279:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3c44c40"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3c3cd60"/></to>
    </wire>
    <wire loc="280:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3c43400"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3fbd480"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f03d3c0ee60"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f03d39d29b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3c0f0e0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3fbd480"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d3c0fd30"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f03d40899c0"/></to>
    </wire>
    <wire loc="293:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3c10020"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f03d3bf1270"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f03d3bf1270"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f03d3bebb00"/></to>
    </wire>
    <wire loc="294:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3c10950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3bf1b60"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3bf1b60"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f03d3bea450"/></to>
    </wire>
    <wire loc="299:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d3be82b0"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f03d4073a30"/></to>
    </wire>
    <wire loc="300:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d3bebb00"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f03d39aba40"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f03d39aba40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f03d39a5440"/></to>
    </wire>
    <wire loc="301:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3bea450"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d39aa400"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f03d39aa400"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f03d39a5d70"/></to>
    </wire>
    <wire loc="302:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0x7f03d3beabf0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f03d39995c0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f03d39995c0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f03d3973c40"/></to>
    </wire>
    <wire loc="307:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d39dac00"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d398aa40"/></to>
    </wire>
    <wire loc="308:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d39d8cd0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d39d1590"/></to>
    </wire>
    <wire loc="311:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f03d39d7b00"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f03d39d29b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d39b14a0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3999d90"/></to>
    </wire>
    <wire loc="326:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d39a2b40"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f03d4073a30"/></to>
    </wire>
    <wire loc="327:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d39a5440"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f03d399a460"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f03d399a460"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f03d3974aa0"/></to>
    </wire>
    <wire loc="328:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d39a5d70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d399add0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f03d399add0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3973480"/></to>
    </wire>
    <wire loc="329:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0x7f03d39a6410"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f03d399d600"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f03d399d600"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f03d3975c40"/></to>
    </wire>
    <wire loc="341:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d39841f0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f03d40927c0"/></to>
    </wire>
    <wire loc="342:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f03d39832e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d39dd020"/></to>
    </wire>
    <wire loc="349:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f03d397f110"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f03d39d29b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f03d397fca0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f03d39d29b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f03d397e8d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f03d39d29b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d397d470"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3fbd480"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f03d397c110"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f03d40e8e50"/></to>
    </wire>
    <wire loc="46:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d409b150"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d2b05150"/></to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3fbd480"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d2aeb300"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d2aea260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d3fba020"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f03d2ae6410"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f03d3fbb140"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f03d2ac48b0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f03d3f2c260"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d2ac7ab0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f03d3f0fa30"/></to>
    </wire>
    <wire loc="69:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d2ac68f0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f03d3f0e8f0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d2ac52b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f03d3f0d2b0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d2ac58c0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f03d3f0d8c0"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f03d3e90150"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f03d2a72850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f03d3e908d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f03d2a71020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d2a71910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d3e8f1f0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f03d2a6f120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f03d2a75a70"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f03d2a6fc20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f03d2a03a70"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f03d3f2c260"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d2a025d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d7b500"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d2a01440"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d7a440"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f03d29aee80"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f03d3d44720"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d29adab0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d3d43400"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d29af310"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f03d3d47a70"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d29afc40"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d46440"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0x7f03d29ae400"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f03d3d46be0"/></to>
    </wire>
    <wire loc="118:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f03d3d2ed90"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d3d2f720"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f03d297e590"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f03d3c9b020"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f03d297f670"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f03d3c9baa0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f03d297d060"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f03d3c9a8b0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f03d297d950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3c99270"/></to>
    </wire>
    <wire loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x7f03d297b940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0x7f03d297a160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0x7f03d297b160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d2942820"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f03d3c44310"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d293e020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f03d3c410a0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d29412b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f03d3c44c40"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d2941a10"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3c43400"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f03d2940720"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f03d3c5aa20"/></to>
    </wire>
    <wire loc="56:../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f03d3c5aa20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f03d3c53a20"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0x7f03d293eb20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f03d3c58920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f03d3c54940"/></to>
    </wire>
    <wire loc="54:../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d3c5e9a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d3c54080"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d3bf4ac0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f03d3bee120"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f03d3bf0400"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f03d3beabf0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f03d3bf2470"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f03d3bedbe0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3bf0b60"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f03d3be9440"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f03d3befa80"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f03d3be82b0"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f03d3bf3e80"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f03d3bed5d0"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f03d3bf3590"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f03d3beebe0"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d28d9cd0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f03d39d8cd0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d28dca70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d39dac00"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f03d28dac40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f03d3b91080"/></to>
    </wire>
    <wire loc="26:../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f03d3b91080"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f03d3b87020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f03d28dde60"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0x7f03d39d7b00"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f03d3b87020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f03d39fe790"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f03d3b8da40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d3a0c150"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d3b90b40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d3b84790"/></to>
    </wire>
    <wire loc="35:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d3b84790"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d3a8a530"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f03d3a07640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d3a5bd60"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d3a551d0"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7f03d3b811d0"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7f03d3b811d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d3a8ad40"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d39fda60"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7f03d3b7d850"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7f03d3b7d850"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d3a86180"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d3a86180"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d28b38d0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d3a8a530"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d28b8c20"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d3a8ad40"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d28b64b0"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d28b0bc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d3b06e20"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d3b06e20"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d3af3060"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d28abe20"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d3afe2b0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d3afe2b0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d3aee570"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f03d28a90a0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f03d3afd6b0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f03d3afd6b0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f03d3aed9d0"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f03d28a5450"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f03d3af9b30"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f03d3af9b30"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f03d3ae8460"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f03d3a52490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f03d3a01a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f03d39ea2e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f03d3b8da40"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d39ae0e0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f03d39a8920"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f03d39aab60"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f03d39a35a0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f03d39a9400"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f03d39a3d40"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f03d39a82b0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f03d39a2b40"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f03d39ac590"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f03d39a7d70"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f03d39aeb60"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f03d39a7440"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d3871ac0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d377fc60"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d3991940"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d396a020"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d386c020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f03d3779880"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f03d3955b50"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f03d39841f0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f03d3951a10"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f03d397f110"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f03d39506a0"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0x7f03d397fca0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f03d394f3a0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f03d397e8d0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f03d394d200"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f03d39832e0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f03d39589d0"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d386c020"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d394ab70"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d397d470"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f03d3963020"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0x7f03d3879940"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f03d3879940"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f03d4533cb0"/></to>
    </wire>
    <wire loc="105:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f03d3962380"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0x7f03d3876b50"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f03d3876b50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f03d384ebd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d395b270"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d3875920"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d3875920"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d3851320"/></to>
    </wire>
    <wire loc="108:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f03d395bdd0"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0x7f03d38744e0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f03d38744e0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x7f03d452a350"/></to>
    </wire>
    <wire loc="109:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f03d395f020"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f03d38737f0"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f03d38737f0"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x7f03d4536670"/></to>
    </wire>
    <wire loc="111:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f03d3956b30"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f03d3872b10"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f03d3872b10"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f03d386b9c0"/></to>
    </wire>
    <wire loc="112:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f03d394a080"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f03d397c110"/></to>
    </wire>
    <wire loc="113:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f03d3952430"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f03d3761990"/></to>
    </wire>
    <wire loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0x7f03d38b9e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f03d377fc60"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f03d27ec4c0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d3851320"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d3843660"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f03d3779880"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f03d376a020"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0x7f03d3863a20"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x7f03d4518350"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0x7f03d3861cc0"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x7f03d451be40"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f03d3866020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f03d42fdbf0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f03d3846e60"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f03d38422d0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f03d384fc20"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f03d3843020"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d3854630"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d3844900"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f03d384ebd0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f03d3789210"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f03d3789210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f03d28169d0"/></to>
    </wire>
    <wire loc="99:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d37870d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d3840050"/></to>
    </wire>
    <wire loc="100:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x7f03d3826a40"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x7f03d37e5c70"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x7f03d37e5c70"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x7f03d37deb40"/></to>
    </wire>
    <wire loc="101:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f03d38247b0"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f03d47f8bc0"/></to>
    </wire>
    <wire loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x7f03d3803190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x7f03d37d4e50"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f03d47f8bc0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x7f03d37d8390"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f03d4533cb0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7f03d37d7650"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x7f03d4531020"/></to>
    </wire>
    <wire loc="88:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x7f03d37d6800"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x7f03d4530350"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x7f03d37d5b10"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x7f03d452f670"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f03d3788020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f03d2815850"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f03d37887a0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f03d2814020"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d2814910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d37870d0"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f03d2813120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f03d2818a30"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f03d2813c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f03d27e97f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d4312a90"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f03d27e4c10"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f03d42f9650"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d3769300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d3772180"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f03d3770540"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d41fe290"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d36fc140"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f03d39ea2e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:PrioCritQueueC.nc">
      <from><interface-ref name="prio1Queue" scoped="" ref="0x7f03d27aab00"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f03d2798720"/></to>
    </wire>
    <wire loc="19:PrioCritQueueC.nc">
      <from><interface-ref name="prio2Queue" scoped="" ref="0x7f03d27a45e0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f03d2792a00"/></to>
    </wire>
    <wire loc="20:PrioCritQueueC.nc">
      <from><interface-ref name="prio3Queue" scoped="" ref="0x7f03d279f0f0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f03d278bd60"/></to>
    </wire>
    <wire loc="62:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f03d3618490"/></from>
      <to><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f03d356a590"/></to>
    </wire>
    <wire loc="57:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f03d3621960"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f03d356f270"/></to>
    </wire>
    <wire loc="59:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f03d356ad50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f03d3622b30"/></to>
    </wire>
    <wire loc="65:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x7f03d3569390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d3553da0"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d3553da0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d3531020"/></to>
    </wire>
    <wire loc="66:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d35680f0"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d353b920"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3564020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d3550e10"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="TimeSyncPacket" scoped="" ref="0x7f03d355dc80"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3537b00"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3537b00"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3516020"/></to>
    </wire>
    <wire loc="71:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f03d355a600"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f03d3b91080"/></to>
    </wire>
    <wire loc="74:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d3564710"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d33705a0"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d33705a0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f03d39ea2e0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f03d355f980"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f03d3c5aa20"/></to>
    </wire>
    <wire loc="84:../../tos/lib/ftsp/TimeSyncC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d355e270"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d33679c0"/></to>
    </wire>
    <wire loc="349:../../tos/lib/ftsp/TimeSyncP.nc">
      <from><interface-ref name="sendMsg" scoped="" ref="0x7f03d35596c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/lib/ftsp/TimeSyncP.nc">
      <from><interface-ref name="processMsg" scoped="" ref="0x7f03d3558020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d3531020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d41482e0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3516020"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3397600"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d354e080"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d352f2b0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d352f2b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d33a48b0"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d353b920"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d351cd60"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d351cd60"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d339c510"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f03d354fa20"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f03d3530c30"/></to>
    </wire>
    <wire loc="67:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f03d3530c30"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f03d33a6bf0"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d354ce80"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d352c320"/></to>
    </wire>
    <wire loc="70:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d352c320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d4140320"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d35463f0"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d3527920"/></to>
    </wire>
    <wire loc="73:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d3527920"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d33a3940"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3550e10"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d3530050"/></to>
    </wire>
    <wire loc="66:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3530050"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d33a6490"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d3542590"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d3523b00"/></to>
    </wire>
    <wire loc="74:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d3523b00"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d339f9b0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d354bdb0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d352a270"/></to>
    </wire>
    <wire loc="72:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d352a270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d412e8a0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d354c4e0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d352d800"/></to>
    </wire>
    <wire loc="69:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d352d800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d4141800"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d354ecf0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d352e020"/></to>
    </wire>
    <wire loc="65:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d352e020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d33a5270"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d353f220"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d3520780"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d3520780"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d4127970"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3397600"/></from>
      <to><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d26b4570"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d33a48b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d26c0720"/></to>
    </wire>
    <wire loc="79:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d339c510"/></from>
      <to><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d26bba60"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f03d33a6bf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f03d26c38b0"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d33a3940"/></from>
      <to><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d26bf7b0"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d33a6490"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d26c3150"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d339f9b0"/></from>
      <to><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d26b7ac0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d33a5270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d26c1020"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d33950a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d412e8a0"/></to>
    </wire>
    <wire loc="81:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d3391060"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d4127970"/></to>
    </wire>
    <wire loc="88:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d338fd80"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d398aa40"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d338c020"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d3991940"/></to>
    </wire>
    <wire loc="84:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubAMSend" scoped="" ref="0x7f03d26b3dc0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d269ccf0"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d269ccf0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d2646020"/></to>
    </wire>
    <wire loc="85:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubAMPacket" scoped="" ref="0x7f03d26b06b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d269a590"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d269a590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d26458b0"/></to>
    </wire>
    <wire loc="86:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f03d26afda0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d269b930"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d269b930"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d2646c30"/></to>
    </wire>
    <wire loc="89:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d26b1a50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d4173210"/>
      <arguments>
        <value cst="I:61">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="SubSnoop" scoped="" ref="0x7f03d26b00a0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f03d4173df0"/>
      <arguments>
        <value cst="I:61">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d26aee20"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d33950a0"/></to>
    </wire>
    <wire loc="93:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d26aace0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d3391060"/></to>
    </wire>
    <wire loc="95:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f03d26a5c40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f03d3b91080"/></to>
    </wire>
    <wire loc="96:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d26a7a90"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d338fd80"/></to>
    </wire>
    <wire loc="97:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d26a4df0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d338c020"/></to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d2646020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d2639a20"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d2646c30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d4171b00"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d26458b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d416e790"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f03d2699c10"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f03d2642020"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f03d2642020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d416de40"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d2638780"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d3419930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d2637400"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d416e790"/></to>
    </wire>
    <wire loc="53:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d3419930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d33cb4b0"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d33ca400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d4175050"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d33c9060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d416e790"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d33c8720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d4171b00"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f03d33c7480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f03d33c7c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f03d2f23330"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f03d2f2c510"/></to>
    </wire>
    <wire loc="67:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d2f1ed40"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d2f32540"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d2f32540"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d25e8390"/></to>
    </wire>
    <wire loc="68:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d2f1c9b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d2f31270"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d2f31270"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d32f7a00"/></to>
    </wire>
    <wire loc="71:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f03d2efd2a0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f03d2f21a70"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d32f7a00"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d3299400"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d2f31e80"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d32f6780"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d32f6780"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d329bcb0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f03d2f2f5d0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d32f5e40"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d32f5e40"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d3298060"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d25e7060"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d33089f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d25e7c70"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d32f6780"/></to>
    </wire>
    <wire loc="54:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d33089f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d33034b0"/></to>
    </wire>
    <wire loc="55:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d3302400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d32f81d0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f03d32f81d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f03d32ef7d0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f03d3301060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f03d32f6780"/></to>
    </wire>
    <wire loc="57:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f03d32ff720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f03d32f7a00"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f03d32fe480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f03d32fec60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d32f9140"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d32922f0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f03d32922f0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d326ac80"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d32f73f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d329b6c0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f03d3295bb0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f03d326a630"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d328e940"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d32f47e0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f03d32989f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d3291e10"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f03d3297760"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d3291320"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f03d328e020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f03d2f471e0"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f03d3291e10"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f03d313ade0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f03d3291320"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f03d313a6c0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f03d3139c20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f03d328e020"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d3262430"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d328e940"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d3137920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d328e940"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f03d312ecc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f03d328e940"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f03d3138590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f03d3266080"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f03d3138e80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f03d3263b10"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f03d3258410"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f03d3133e00"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f03d325eb80"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f03d3108150"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f03d3108150"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f03d31054b0"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f03d3125d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f03d3108960"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f03d3108960"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f03d30fe850"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f03d32046e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f03d323b660"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f03d3207c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f03d3200a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f03d3135020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f03d3135800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f03d3106020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f03d3105cb0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f03d3105cb0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f03d30b25a0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f03d30fe850"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f03d30b00c0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f03d31054b0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f03d30f8d80"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d30fdc20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d3020dc0"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d3020dc0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d2f58cd0"/></to>
    </wire>
    <wire loc="53:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d30ad810"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d30fdc20"/></to>
    </wire>
    <wire loc="56:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x7f03d30af0a0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f03d308e0f0"/></to>
    </wire>
    <wire loc="60:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x7f03d308e0f0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f03d30853f0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x7f03d30af880"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f03d308e990"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x7f03d308e990"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f03d3085cd0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x7f03d30ae0a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f03d308d3a0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x7f03d308d3a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f03d30845f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x7f03d308ac40"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x7f03d30815f0"/></to>
    </wire>
    <wire loc="64:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x7f03d308c9f0"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x7f03d30823f0"/></to>
    </wire>
    <wire loc="65:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x7f03d308a3b0"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x7f03d3082cd0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f03d3080b20"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f03d455d020"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f03d307f980"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f03d47f8bc0"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f03d2f540f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d301ade0"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f03d301ade0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f03d2f643c0"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d2f61660"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d3015cc0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d3015cc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d2ffe020"/></to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d300c020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d2ff92c0"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f03d300b850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f03d2ff89e0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f03d3007ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f03d2ff35a0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f03d3007ad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f03d2fefba0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f03d3007ad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f03d2fea120"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d2f6b410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f03d3015cc0"/></to>
    </wire>
    <wire loc="114:../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7f03d2f17d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f03d2ef6680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f03d2efd2a0"/></to>
    </wire>
    <wire loc="44:../../tos/lib/printf/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f03d2eefd50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f03d4566e10"/></to>
    </wire>
    <wire loc="47:../../tos/lib/printf/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f03d2eec4a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f03d32f9140"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f03d2eed370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f03d39ea2e0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TdmaMacC" loc="8:TdmaMacC.nc">
      <configuration/>
    </component>
    <component qname="TdmaMacP" loc="36:TdmaMacP.nc">
      <module/>
    </component>
    <component qname="GenericSlotterC" loc="30:../../tos/system/GenericSlotterC.nc">
      <documentation loc="23:../../tos/system/GenericSlotterC.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="80:../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:../../tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="GenericSlotterP" loc="30:../../tos/system/GenericSlotterP.nc">
      <documentation loc="23:../../tos/system/GenericSlotterP.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C" loc="26(GenericSlotterC.Alarm32khz32C):../../tos/platforms/mica/Alarm32khz32C.nc">
      <documentation loc="11:../../tos/platforms/mica/Alarm32khz32C.nc">
        <short>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register). Note that creating one of these Alarms consumes a 16-bit&#10; 32kHz Alarm (see Alarm32khz16C).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Alarm16" loc="28(GenericSlotterC.Alarm32khz32C.Alarm16):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm" loc="51(GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="22:../../tos/platforms/mica/Counter32khz32C.nc">
      <documentation loc="11:../../tos/platforms/mica/Counter32khz32C.nc">
        <short>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform32" loc="54(Counter32khz32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d4864950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f03d4863180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="counter_one_overflow_t" ref="0x7f03d481e1f0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.Transform32" loc="51(GenericSlotterC.Alarm32khz32C.Transform32):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d4864950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f03d4863180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="37:../../tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC" loc="35(RF230RadioC.NeighborhoodC):../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC.NeighborhoodP" loc="37(RF230RadioC.NeighborhoodC.NeighborhoodP):../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="37(RF230RadioC.UniqueLayerC.UniqueLayerP):../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../tos/system/RandomC.nc">
      <documentation loc="33:../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f03d3b7a8e0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="TdmaMacC.TimerMilliC" loc="44(TdmaMacC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.FaultClearTimer" loc="44(TdmaMacC.FaultClearTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC" loc="7(TdmaMacC.PrioCritQueueC):PrioCritQueueC.nc">
      <documentation loc="1:PrioCritQueueC.nc">
        <short>&#10;A priority queue supporting 3 levels of priority for MCC packets&#10;</short>
      </documentation>
      <instance number="0">
        <component-ref qname="PrioCritQueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:20">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.QP" loc="3(TdmaMacC.PrioCritQueueC.QP):PrioCritQueueP.nc">
      <instance number="0">
        <component-ref qname="PrioCritQueueP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f03d36ef4e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q1" loc="42(TdmaMacC.PrioCritQueueC.Q1):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f03d36ef4e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q2" loc="42(TdmaMacC.PrioCritQueueC.Q2):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f03d36ef4e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TdmaMacC.PrioCritQueueC.Q3" loc="42(TdmaMacC.PrioCritQueueC.Q3):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f03d36ef4e0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncC" loc="39:../../tos/lib/ftsp/TimeSyncC.nc">
      <configuration/>
    </component>
    <component qname="TimeSyncC.TimeSyncP" loc="37(TimeSyncC.TimeSyncP):../../tos/lib/ftsp/TimeSyncP.nc">
      <instance number="0">
        <component-ref qname="TimeSyncP"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncMessageC" loc="37:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC" loc="37:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC" loc="40(RF230TimeSyncMessageC.TimeSyncMessageLayerC):../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeSyncMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP" loc="37(RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP):../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeSyncMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC" loc="47(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:61">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC" loc="47(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP" loc="43(RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimeSyncC.TimerC" loc="44(TimeSyncC.TimerC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="NoLedsC" loc="45:../../tos/system/NoLedsC.nc">
      <documentation loc="35:../../tos/system/NoLedsC.nc">
        <short>&#10; A null operation replacement for the LedsC component.</short>
        <long>&#10; A null operation replacement for the LedsC component. As many&#10; components might concurrently signal information through LEDs,&#10; using LedsC and NoLedsC allows an application builder to select&#10; which components control the LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 19, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MCCP" loc="11:MCCP.nc">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:../../tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:../../tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:../../tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):../../tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:../../tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:../../tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:../../tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:../../tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:../../tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f03d481fd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f03d481fd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x7f03d481e670"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../tos/lib/printf/PutcharP.nc">
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../tos/lib/printf/SerialStartP.nc">
      <documentation loc="33:../../tos/lib/printf/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MCCC.TimerMilliC" loc="44(MCCC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f03d44f7590" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f03d44f7900" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f03d44f7c70" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f03d44e99e0" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f03d44e9d70" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f03d44e6170" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f03d44e64c0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f03d44520d0" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f03d4452460" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f03d44527f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f03d4452b40" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Alarm32khz32C" loc="26:../../tos/platforms/mica/Alarm32khz32C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/Alarm32khz32C.nc">
        <short>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register). Note that creating one of these Alarms consumes a 16-bit&#10; 32kHz Alarm (see Alarm32khz16C).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f03d42587c0" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f03d42587c0"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7f03d4258b30" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f03d4243500" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f03d4243500"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f03d4243cc0" loc="52:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f03d4243cc0"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x7f03d4242020" loc="53:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f03d41fa900" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f03d41fa900"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f03d41f7120" loc="43:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f03d41f7120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f03d41de830" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f03d41de830"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f03d41da020" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f03d41da020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f03d41da410" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f03d41da410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f03d41dabf0" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f03d41dabf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f03d41d9020" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f03d41d9820" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f03d41d9820"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f03d4208b30" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f03d4208b30"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f03d41b8370" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f03d41b8370"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f03d41b8760" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f03d41b8760"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f03d41b6020" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f03d41b6020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f03d41b63f0" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f03d40d87d0" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
          <component-ref qname="NeighborhoodC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f03d40cfe40" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
          <component-ref qname="NeighborhoodP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f03d3ef0590" loc="83:../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f03d3ee1060" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f03d3d77820" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
          <component-ref qname="UniqueLayerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f03d3d6a020" loc="37:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
          <component-ref qname="UniqueLayerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f03d3b7a8e0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f03d3b7a8e0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f03d3b7abf0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f03d3b6c400" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f03d3b6c400"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f03d3b6c710" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d3b82900" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d3b82900"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d3a4f870" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d3a4f870"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f03d3a4fba0" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d39ffdd0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d39ffdd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PrioCritQueueC" loc="7:PrioCritQueueC.nc" abstract="">
      <documentation loc="1:PrioCritQueueC.nc">
        <short>&#10;A priority queue supporting 3 levels of priority for MCC packets&#10;</short>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f03d36ef4e0" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f03d36ef4e0"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f03d36ef860" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit1" ref="0x7f03d36efbc0" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit2" ref="0x7f03d36ec020" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit3" ref="0x7f03d36ec380" loc="7:PrioCritQueueC.nc">
          <component-ref qname="PrioCritQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PrioCritQueueP" loc="3:PrioCritQueueP.nc" abstract="">
      <parameters>
        <typedef name="queue_t" ref="0x7f03d36e1d40" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f03d36e1d40"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f03d36de110" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit1" ref="0x7f03d36de470" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit2" ref="0x7f03d36de7d0" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
        <constant name="hiCrit3" ref="0x7f03d36deb30" loc="3:PrioCritQueueP.nc">
          <component-ref qname="PrioCritQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f03d3668290" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f03d3668290"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f03d3668610" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimeSyncP" loc="37:../../tos/lib/ftsp/TimeSyncP.nc" abstract="">
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d361a6f0" loc="37:../../tos/lib/ftsp/TimeSyncP.nc">
          <component-ref qname="TimeSyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d361a6f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimeSyncMessageLayerC" loc="40:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeSyncMessageLayerP" loc="37:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f03d343d910" loc="47:../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f03d34366a0" loc="47:../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f03d342c2e0" loc="43:../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f03d3413c80" loc="45:../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f03d3315b40" loc="47:../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:../../tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="1" name="MacReceive" ref="0x7f03d4753680" loc="16:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f03d4753680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d4753a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacPowerControl" ref="0x7f03d47cc020" loc="17:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacPowerControl" scoped="" ref="0x7f03d47cc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d47cc3a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d47cc530"/>
        <function-ref name="start" scoped="" ref="0x7f03d47cc6c0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d47cc850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d47d2020" loc="10:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d47d2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d47d23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacSend" ref="0x7f03d4757c80" loc="15:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f03d4757c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d47cf0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d47cf230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d47cf3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d47cf550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d47cf6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f03d47d0020" loc="11:TdmaMacC.nc">
      <component-ref qname="TdmaMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d47d0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f03d47d03a0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f03d47d0530"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f03d47d06c0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f03d47d0850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Slotter" ref="0x7f03d46b1b40" loc="62:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f03d46b1b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f03d46c0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacReceive" ref="0x7f03d46e2690" loc="45:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f03d46e2690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d46e2a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Frame" ref="0x7f03d46e4c80" loc="40:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Frame" scoped="" ref="0x7f03d46e4c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f03d46e30a0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f03d46e3230"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f03d46e33c0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f03d46e3550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacPowerControl" ref="0x7f03d46e2dc0" loc="46:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacPowerControl" scoped="" ref="0x7f03d46e2dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d46e1180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d46e1310"/>
        <function-ref name="start" scoped="" ref="0x7f03d46e14a0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d46e1630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f03d46de720" loc="50:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f03d46de720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f03d46deaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GlobalTime" ref="0x7f03d4679a10" loc="78:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f03d4679a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f03d467e6b0"/>
        <function-ref name="global2Local" scoped="" ref="0x7f03d467d660"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f03d467eb70"/>
        <function-ref name="local2Global" scoped="" ref="0x7f03d467d110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f03d46d1020" loc="59:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d46d1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d46d13a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d46d1530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d46d16c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d46d1850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d46d19e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GenericSlotterPowerControl" ref="0x7f03d46b25b0" loc="61:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GenericSlotterPowerControl" scoped="" ref="0x7f03d46b25b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d46b2930"/>
        <function-ref name="stop" scoped="" ref="0x7f03d46b2ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="forwardQueue" ref="0x7f03d469a730" loc="65:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="forwardQueue" scoped="" ref="0x7f03d469a730"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f03d46aac90"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f03d46979d0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d4695110"/>
        <function-ref name="clear" scoped="" ref="0x7f03d4695e60"/>
        <function-ref name="sizeLO_Q2" scoped="" ref="0x7f03d46920d0"/>
        <function-ref name="headPrio" scoped="" ref="0x7f03d4698770"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f03d4699170"/>
        <function-ref name="full" scoped="" ref="0x7f03d46aa810"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d4699640"/>
        <function-ref name="clearLO" scoped="" ref="0x7f03d46958e0"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f03d4694310"/>
        <function-ref name="sizeLO_Q3" scoped="" ref="0x7f03d4692550"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d4698e70"/>
        <function-ref name="sizeLO" scoped="" ref="0x7f03d4694790"/>
        <function-ref name="empty" scoped="" ref="0x7f03d46aa390"/>
        <function-ref name="headHI" scoped="" ref="0x7f03d4698260"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f03d4697550"/>
        <function-ref name="sizeLO_Q1" scoped="" ref="0x7f03d4694c10"/>
        <function-ref name="head" scoped="" ref="0x7f03d4699ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPowerControl" ref="0x7f03d4691170" loc="70:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPowerControl" scoped="" ref="0x7f03d4691170"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d46914f0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d4691680"/>
        <function-ref name="start" scoped="" ref="0x7f03d4691810"/>
        <function-ref name="stop" scoped="" ref="0x7f03d46919a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f03d46b51d0" loc="60:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f03d46b51d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f03d46b5550"/>
        <function-ref name="rand32" scoped="" ref="0x7f03d46b56e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ACK" ref="0x7f03d4689630" loc="66:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ACK" scoped="" ref="0x7f03d4689630"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d46899b0"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d4689b40"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d4689cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyDataSend" ref="0x7f03d468fc30" loc="73:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyDataSend" scoped="" ref="0x7f03d468fc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d468d020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d468d1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d468d340"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d468d4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d468d660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyNotificationReceive" ref="0x7f03d468f570" loc="72:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyNotificationReceive" scoped="" ref="0x7f03d468f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d468f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncInfo" ref="0x7f03d4663990" loc="80:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f03d4663990"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f03d4663d10"/>
        <function-ref name="getRootID" scoped="" ref="0x7f03d4668020"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f03d46681b0"/>
        <function-ref name="getOffset" scoped="" ref="0x7f03d4668340"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f03d46684d0"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f03d4668660"/>
        <function-ref name="getSkew" scoped="" ref="0x7f03d46687f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d46e4570" loc="39:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d46e4570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d46e48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MacSend" ref="0x7f03d46e38e0" loc="44:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f03d46e38e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d46e3c60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d46e3df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d46e2020"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d46e21b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d46e2340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncMode" ref="0x7f03d465fc60" loc="81:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7f03d465fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d4667210"/>
        <function-ref name="getMode" scoped="" ref="0x7f03d46673a0"/>
        <function-ref name="setMode" scoped="" ref="0x7f03d4667530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d46d39a0" loc="54:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d46d39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d46d3d20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d46df020"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d46df1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d46df340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d46df4d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d46df660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d46df7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d46dfe30"/>
        <function-ref name="set" scoped="" ref="0x7f03d46df980"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d46dfb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d46dfca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FrameConfiguration" ref="0x7f03d46b7330" loc="64:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d46b7330"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f03d46b76b0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f03d46b7840"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f03d46b79d0"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f03d46b7b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FaultClearTimer" ref="0x7f03d466d850" loc="79:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FaultClearTimer" scoped="" ref="0x7f03d466d850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d466bcf0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d4676300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d466b0d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d4676c00"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d466a660"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d466a1e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d4676780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d4677480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d466b6e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d4677950"/>
        <function-ref name="stop" scoped="" ref="0x7f03d4677e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f03d46c14e0" loc="58:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d46c14e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d46c1860"/>
        <function-ref name="source" scoped="" ref="0x7f03d46c19f0"/>
        <function-ref name="address" scoped="" ref="0x7f03d46c1b80"/>
        <function-ref name="destination" scoped="" ref="0x7f03d46c1d10"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d46d2020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d46d21b0"/>
        <function-ref name="type" scoped="" ref="0x7f03d46d2340"/>
        <function-ref name="setType" scoped="" ref="0x7f03d46d24d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d46d2660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d46d27f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d46d2980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyDataReceive" ref="0x7f03d468d9d0" loc="74:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyDataReceive" scoped="" ref="0x7f03d468d9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d468dd50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="phyNotificationSend" ref="0x7f03d467f6c0" loc="71:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="phyNotificationSend" scoped="" ref="0x7f03d467f6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d467fa40"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d467fbd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d467fd60"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d468f020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d468f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SlotterControl" ref="0x7f03d46ab130" loc="63:TdmaMacP.nc">
      <component-ref qname="TdmaMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f03d46ab130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d46b7020"/>
        <function-ref name="getSlot" scoped="" ref="0x7f03d46ab740"/>
        <function-ref name="synchronize" scoped="" ref="0x7f03d46ab8d0"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f03d46aba60"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d46abbf0"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f03d46abd80"/>
        <function-ref name="stop" scoped="" ref="0x7f03d46ab5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Slotter" ref="0x7f03d45692f0" loc="32:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f03d45692f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f03d4569670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f03d4564d90" loc="35:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f03d4564d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d4566180"/>
        <function-ref name="stop" scoped="" ref="0x7f03d4566310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f03d4568970" loc="34:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d4568970"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f03d4568cf0"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f03d4568e80"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f03d4567030"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f03d45671c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlotterControl" ref="0x7f03d4569950" loc="33:../../tos/system/GenericSlotterC.nc">
      <component-ref qname="GenericSlotterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f03d4569950"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d4568660"/>
        <function-ref name="getSlot" scoped="" ref="0x7f03d4569e60"/>
        <function-ref name="synchronize" scoped="" ref="0x7f03d4568020"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f03d45681b0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d4568340"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f03d45684d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d4569cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f03d4562540" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4562540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d45628c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f03d4566e10" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f03d4566e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f03d45621c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f03d455dd50" loc="52:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f03d455dd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d455c100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d4561d50" loc="46:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d4561d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d455e100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f03d455d020" loc="50:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f03d455d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f03d455d3a0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f03d455d530"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f03d455d6c0"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f03d455d850"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f03d455d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f03d45537a0" loc="45:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7f03d45537a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d4553b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d45530c0" loc="44:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d45530c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d4553440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7f03d4552020" loc="46:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7f03d4552020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d45523a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f03d454d110" loc="41:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f03d454d110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d454d490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f03d45559d0" loc="40:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f03d45559d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d4555d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f03d4549cd0" loc="45:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f03d4549cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d45480a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7f03d4543ad0" loc="44:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7f03d4543ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4543e50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4549020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45491b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4549340"/>
        <function-ref name="get" scoped="" ref="0x7f03d45494d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4549660"/>
        <function-ref name="set" scoped="" ref="0x7f03d45497f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4549980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f03d454a530" loc="43:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f03d454a530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d454a8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7f03d4502cb0" loc="98:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7f03d4502cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4501610"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d45017a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4501930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4501ac0"/>
        <function-ref name="get" scoped="" ref="0x7f03d4501c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4501de0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4500020"/>
        <function-ref name="clr" scoped="" ref="0x7f03d45001b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7f03d451e4e0" loc="72:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7f03d451e4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d451e860"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d451e9f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d451eb80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d451ed10"/>
        <function-ref name="get" scoped="" ref="0x7f03d451d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d451d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d451d340"/>
        <function-ref name="clr" scoped="" ref="0x7f03d451d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7f03d4511350" loc="83:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7f03d4511350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45116d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4511860"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45119f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4511b80"/>
        <function-ref name="get" scoped="" ref="0x7f03d4511d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4510020"/>
        <function-ref name="set" scoped="" ref="0x7f03d45101b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4510340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7f03d4508cb0" loc="92:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7f03d4508cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45070a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4507230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45073c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4507550"/>
        <function-ref name="get" scoped="" ref="0x7f03d45076e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4507870"/>
        <function-ref name="set" scoped="" ref="0x7f03d4507a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4507b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x7f03d44fa060" loc="103:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x7f03d44fa060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44fa3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44fa570"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44fa700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44fa890"/>
        <function-ref name="get" scoped="" ref="0x7f03d44faa20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44fabb0"/>
        <function-ref name="set" scoped="" ref="0x7f03d44fad40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7f03d4536670" loc="50:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7f03d4536670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45369f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4536b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4536d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4535020"/>
        <function-ref name="get" scoped="" ref="0x7f03d45351b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4535340"/>
        <function-ref name="set" scoped="" ref="0x7f03d45354d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4535660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7f03d450a670" loc="90:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7f03d450a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d450a9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d450ab80"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d450ad10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4509020"/>
        <function-ref name="get" scoped="" ref="0x7f03d45091b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4509340"/>
        <function-ref name="set" scoped="" ref="0x7f03d45094d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4509660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7f03d4533cb0" loc="53:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7f03d4533cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45320a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4532230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45323c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4532550"/>
        <function-ref name="get" scoped="" ref="0x7f03d45326e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4532870"/>
        <function-ref name="set" scoped="" ref="0x7f03d4532a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4532b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7f03d4527cb0" loc="64:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7f03d4527cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45260a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4526230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45263c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4526550"/>
        <function-ref name="get" scoped="" ref="0x7f03d45266e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4526870"/>
        <function-ref name="set" scoped="" ref="0x7f03d4526a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4526b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7f03d451be40" loc="75:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7f03d451be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d451a1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d451a370"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d451a500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d451a690"/>
        <function-ref name="get" scoped="" ref="0x7f03d451a820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d451a9b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d451ab40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d451acd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7f03d450ecb0" loc="86:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7f03d450ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d450d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d450d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d450d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d450d550"/>
        <function-ref name="get" scoped="" ref="0x7f03d450d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d450d870"/>
        <function-ref name="set" scoped="" ref="0x7f03d450da00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d450db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7f03d453c800" loc="45:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7f03d453c800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d453cb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d453cd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d453b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d453b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d453b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d453b4d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d453b660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d453b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7f03d452f670" loc="56:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7f03d452f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d452f9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d452fb80"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d452fd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d452e020"/>
        <function-ref name="get" scoped="" ref="0x7f03d452e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d452e340"/>
        <function-ref name="set" scoped="" ref="0x7f03d452e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d452e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7f03d4523670" loc="67:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7f03d4523670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45239f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4523b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4523d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4522020"/>
        <function-ref name="get" scoped="" ref="0x7f03d45221b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4522340"/>
        <function-ref name="set" scoped="" ref="0x7f03d45224d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4522660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7f03d4516670" loc="78:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7f03d4516670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45169f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4516b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4516d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4515020"/>
        <function-ref name="get" scoped="" ref="0x7f03d45151b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4515340"/>
        <function-ref name="set" scoped="" ref="0x7f03d45154d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4515660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7f03d4504670" loc="95:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7f03d4504670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45049f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4504b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4504d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4503020"/>
        <function-ref name="get" scoped="" ref="0x7f03d45031b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4503340"/>
        <function-ref name="set" scoped="" ref="0x7f03d45034d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4503660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7f03d44feb20" loc="101:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7f03d44feb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44fd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44fd1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44fd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44fd4d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d44fd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44fd7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d44fd980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44fdb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7f03d4514cb0" loc="81:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7f03d4514cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45130a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4513230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45133c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4513550"/>
        <function-ref name="get" scoped="" ref="0x7f03d45136e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4513870"/>
        <function-ref name="set" scoped="" ref="0x7f03d4513a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4513b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7f03d4538060" loc="48:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7f03d4538060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45383e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4538570"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4538700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4538890"/>
        <function-ref name="get" scoped="" ref="0x7f03d4538a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4538bb0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4538d40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4537020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7f03d452b020" loc="59:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7f03d452b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d452b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d452b530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d452b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d452b850"/>
        <function-ref name="get" scoped="" ref="0x7f03d452b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d452bb70"/>
        <function-ref name="set" scoped="" ref="0x7f03d452bd00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d452a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7f03d45004e0" loc="99:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7f03d45004e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4500860"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d45009f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4500b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4500d10"/>
        <function-ref name="get" scoped="" ref="0x7f03d44ff020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44ff1b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d44ff340"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44ff4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7f03d4529670" loc="62:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7f03d4529670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45299f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4529b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4529d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4528020"/>
        <function-ref name="get" scoped="" ref="0x7f03d45281b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4528340"/>
        <function-ref name="set" scoped="" ref="0x7f03d45284d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4528660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7f03d451d800" loc="73:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7f03d451d800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d451db80"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d451dd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d451c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d451c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d451c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d451c4d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d451c660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d451c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7f03d4510670" loc="84:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7f03d4510670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45109f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4510b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4510d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d450f020"/>
        <function-ref name="get" scoped="" ref="0x7f03d450f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d450f340"/>
        <function-ref name="set" scoped="" ref="0x7f03d450f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d450f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7f03d4506020" loc="93:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7f03d4506020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45063a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4506530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45066c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4506850"/>
        <function-ref name="get" scoped="" ref="0x7f03d45069e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4506b70"/>
        <function-ref name="set" scoped="" ref="0x7f03d4506d00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4505020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7f03d4535990" loc="51:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7f03d4535990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4535d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4533020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45331b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4533340"/>
        <function-ref name="get" scoped="" ref="0x7f03d45334d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4533660"/>
        <function-ref name="set" scoped="" ref="0x7f03d45337f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4533980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7f03d4531020" loc="54:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7f03d4531020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45313a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4531530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45316c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4531850"/>
        <function-ref name="get" scoped="" ref="0x7f03d45319e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4531b70"/>
        <function-ref name="set" scoped="" ref="0x7f03d4531d00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4530020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7f03d4525020" loc="65:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7f03d4525020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45253a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4525530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45256c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4525850"/>
        <function-ref name="get" scoped="" ref="0x7f03d45259e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4525b70"/>
        <function-ref name="set" scoped="" ref="0x7f03d4525d00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4524020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7f03d4519060" loc="76:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7f03d4519060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45193e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4519570"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4519700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4519890"/>
        <function-ref name="get" scoped="" ref="0x7f03d4519a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4519bb0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4519d40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4518020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7f03d450c020" loc="87:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7f03d450c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d450c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d450c530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d450c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d450c850"/>
        <function-ref name="get" scoped="" ref="0x7f03d450c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d450cb70"/>
        <function-ref name="set" scoped="" ref="0x7f03d450cd00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d450b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7f03d453bb20" loc="46:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7f03d453bb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d453a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d453a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d453a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d453a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d453a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d453a7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d453a980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d453ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7f03d452e990" loc="57:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7f03d452e990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d452ee10"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d452d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d452d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d452d340"/>
        <function-ref name="get" scoped="" ref="0x7f03d452d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d452d660"/>
        <function-ref name="set" scoped="" ref="0x7f03d452d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d452d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7f03d4522990" loc="68:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7f03d4522990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4522d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4521020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45211b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4521340"/>
        <function-ref name="get" scoped="" ref="0x7f03d45214d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4521660"/>
        <function-ref name="set" scoped="" ref="0x7f03d45217f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4521980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7f03d4503990" loc="96:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7f03d4503990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4503d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4502020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45021b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4502340"/>
        <function-ref name="get" scoped="" ref="0x7f03d45024d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4502660"/>
        <function-ref name="set" scoped="" ref="0x7f03d45027f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4502980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7f03d451f020" loc="71:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7f03d451f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d451f5a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d451f730"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d451f8c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d451fa50"/>
        <function-ref name="get" scoped="" ref="0x7f03d451fbe0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d451fd70"/>
        <function-ref name="set" scoped="" ref="0x7f03d451e020"/>
        <function-ref name="clr" scoped="" ref="0x7f03d451e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7f03d4512020" loc="82:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7f03d4512020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45123a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4512530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45126c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4512850"/>
        <function-ref name="get" scoped="" ref="0x7f03d45129e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4512b70"/>
        <function-ref name="set" scoped="" ref="0x7f03d4512d00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4511020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7f03d4509990" loc="91:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7f03d4509990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4509d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4508020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45081b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4508340"/>
        <function-ref name="get" scoped="" ref="0x7f03d45084d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4508660"/>
        <function-ref name="set" scoped="" ref="0x7f03d45087f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4508980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7f03d44fde40" loc="102:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7f03d44fde40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44fc1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44fc370"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44fc500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44fc690"/>
        <function-ref name="get" scoped="" ref="0x7f03d44fc820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44fc9b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d44fcb40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44fccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7f03d4537350" loc="49:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7f03d4537350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45376d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4537860"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45379f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4537b80"/>
        <function-ref name="get" scoped="" ref="0x7f03d4537d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4536020"/>
        <function-ref name="set" scoped="" ref="0x7f03d45361b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4536340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7f03d452a350" loc="60:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7f03d452a350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d452a6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d452a860"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d452a9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d452ab80"/>
        <function-ref name="get" scoped="" ref="0x7f03d452ad10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4529020"/>
        <function-ref name="set" scoped="" ref="0x7f03d45291b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4529340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7f03d450b350" loc="89:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7f03d450b350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d450b6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d450b860"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d450b9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d450bb80"/>
        <function-ref name="get" scoped="" ref="0x7f03d450bd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d450a020"/>
        <function-ref name="set" scoped="" ref="0x7f03d450a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d450a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7f03d4528990" loc="63:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7f03d4528990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4528d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4527020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45271b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4527340"/>
        <function-ref name="get" scoped="" ref="0x7f03d45274d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4527660"/>
        <function-ref name="set" scoped="" ref="0x7f03d45277f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4527980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7f03d451cb20" loc="74:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7f03d451cb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d451b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d451b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d451b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d451b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d451b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d451b7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d451b980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d451bb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7f03d450f990" loc="85:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7f03d450f990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d450fd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d450e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d450e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d450e340"/>
        <function-ref name="get" scoped="" ref="0x7f03d450e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d450e660"/>
        <function-ref name="set" scoped="" ref="0x7f03d450e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d450e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7f03d4505350" loc="94:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7f03d4505350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45056d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4505860"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45059f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4505b80"/>
        <function-ref name="get" scoped="" ref="0x7f03d4505d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4504020"/>
        <function-ref name="set" scoped="" ref="0x7f03d45041b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4504340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7f03d454b530" loc="44:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7f03d454b530"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d454b8b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d454ba40"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d454bbd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d454bd60"/>
        <function-ref name="get" scoped="" ref="0x7f03d453c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d453c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d453c340"/>
        <function-ref name="clr" scoped="" ref="0x7f03d453c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7f03d4530350" loc="55:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7f03d4530350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45306d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4530860"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45309f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4530b80"/>
        <function-ref name="get" scoped="" ref="0x7f03d4530d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d452f020"/>
        <function-ref name="set" scoped="" ref="0x7f03d452f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d452f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7f03d4524350" loc="66:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7f03d4524350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45246d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4524860"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45249f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4524b80"/>
        <function-ref name="get" scoped="" ref="0x7f03d4524d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4523020"/>
        <function-ref name="set" scoped="" ref="0x7f03d45231b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4523340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7f03d4518350" loc="77:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7f03d4518350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45186d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4518860"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45189f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4518b80"/>
        <function-ref name="get" scoped="" ref="0x7f03d4518d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4516020"/>
        <function-ref name="set" scoped="" ref="0x7f03d45161b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4516340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7f03d44ff800" loc="100:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7f03d44ff800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44ffb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44ffd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44fe020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44fe1b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d44fe340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44fe4d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d44fe660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44fe7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7f03d4515990" loc="80:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7f03d4515990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4515d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4514020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45141b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4514340"/>
        <function-ref name="get" scoped="" ref="0x7f03d45144d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4514660"/>
        <function-ref name="set" scoped="" ref="0x7f03d45147f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4514980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7f03d4521cb0" loc="69:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7f03d4521cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45200a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4520230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d45203c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4520550"/>
        <function-ref name="get" scoped="" ref="0x7f03d45206e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4520870"/>
        <function-ref name="set" scoped="" ref="0x7f03d4520a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4520b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7f03d453ae40" loc="47:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7f03d453ae40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d45391e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4539370"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4539500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4539690"/>
        <function-ref name="get" scoped="" ref="0x7f03d4539820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d45399b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4539b40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4539cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7f03d452dcb0" loc="58:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7f03d452dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d452c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d452c230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d452c3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d452c550"/>
        <function-ref name="get" scoped="" ref="0x7f03d452c6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d452c870"/>
        <function-ref name="set" scoped="" ref="0x7f03d452ca00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d452cb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f03d44afa80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f03d44afa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44afe00"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44ad020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44ad1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44ad340"/>
        <function-ref name="get" scoped="" ref="0x7f03d44ad4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44ad660"/>
        <function-ref name="set" scoped="" ref="0x7f03d44ad7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44ad980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f03d44aa020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f03d44aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44aa3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44aa530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44aa6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44aa850"/>
        <function-ref name="get" scoped="" ref="0x7f03d44aa9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44aab70"/>
        <function-ref name="set" scoped="" ref="0x7f03d44aad00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44a9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f03d44b16b0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f03d44b16b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44b1a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44b1bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44b1d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44b0020"/>
        <function-ref name="get" scoped="" ref="0x7f03d44b01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44b0340"/>
        <function-ref name="set" scoped="" ref="0x7f03d44b04d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44b0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f03d44adc10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f03d44adc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44ac020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44ac1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44ac340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44ac4d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d44ac660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44ac7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d44ac980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44acb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f03d44a92b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f03d44a92b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44a9630"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44a97c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44a9950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44a9ae0"/>
        <function-ref name="get" scoped="" ref="0x7f03d44a9c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44a9e00"/>
        <function-ref name="set" scoped="" ref="0x7f03d44a8020"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44a81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f03d44b08f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f03d44b08f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44b0c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44b0e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44af020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44af1b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d44af340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44af4d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d44af660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44af7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f03d44acda0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f03d44acda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44ab180"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44ab310"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44ab4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44ab630"/>
        <function-ref name="get" scoped="" ref="0x7f03d44ab7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44ab950"/>
        <function-ref name="set" scoped="" ref="0x7f03d44abae0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44abc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f03d44a8440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f03d44a8440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44a87c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44a8950"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44a8ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44a8c70"/>
        <function-ref name="get" scoped="" ref="0x7f03d44a8e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44a7020"/>
        <function-ref name="set" scoped="" ref="0x7f03d44a71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44a7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e9d0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e9d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e9d420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e9d5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e9d740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e9d8d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e9da60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e9dbf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e9dd80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e9c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e9a3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e9a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e9a770"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e9a900"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e9aa90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e9ac20"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e9adb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e98020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e981b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e98340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e966d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e966d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e96a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e96be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e96d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e95020"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e951b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e95340"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e954d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e95660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e939b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e939b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e93d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e92020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e921b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e92340"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e924d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e92660"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e927f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e92980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e90e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e90e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e8f1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e8f350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e8f4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e8f670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e8f800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e8f990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e8fb20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e8fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e8c0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e8c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e8c420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e8c5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e8c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e8c8d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e8ca60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e8cbf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e8cd80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e8b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e893f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e893f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e89770"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e89900"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e89a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e89c20"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e89db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e81020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e811b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e81340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e7f6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e7f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e7fa50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e7fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e7fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e7e020"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e7e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e7e340"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e7e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e7e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f03d449fda0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f03d449fda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d449e180"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d449e310"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d449e4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d449e630"/>
        <function-ref name="get" scoped="" ref="0x7f03d449e7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d449e950"/>
        <function-ref name="set" scoped="" ref="0x7f03d449eae0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d449ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f03d449b440" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f03d449b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d449b7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d449b950"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d449bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d449bc70"/>
        <function-ref name="get" scoped="" ref="0x7f03d449be00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d449a020"/>
        <function-ref name="set" scoped="" ref="0x7f03d449a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d449a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f03d44a1a20" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f03d44a1a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44a1da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44a0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44a01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44a0340"/>
        <function-ref name="get" scoped="" ref="0x7f03d44a04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44a0660"/>
        <function-ref name="set" scoped="" ref="0x7f03d44a07f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44a0980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f03d449d020" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f03d449d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d449d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d449d530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d449d6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d449d850"/>
        <function-ref name="get" scoped="" ref="0x7f03d449d9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d449db70"/>
        <function-ref name="set" scoped="" ref="0x7f03d449dd00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d449c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f03d449a5d0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f03d449a5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d449a950"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d449aae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d449ac70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d449ae00"/>
        <function-ref name="get" scoped="" ref="0x7f03d4499020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44991b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4499340"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44994d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f03d44a0c10" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f03d44a0c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d449f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d449f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d449f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d449f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d449f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d449f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d449f980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d449fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f03d449c2b0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f03d449c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d449c630"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d449c7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d449c950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d449cae0"/>
        <function-ref name="get" scoped="" ref="0x7f03d449cc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d449ce00"/>
        <function-ref name="set" scoped="" ref="0x7f03d449b020"/>
        <function-ref name="clr" scoped="" ref="0x7f03d449b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f03d4499760" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f03d4499760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4499ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4499c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4499e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4498020"/>
        <function-ref name="get" scoped="" ref="0x7f03d44981b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4498340"/>
        <function-ref name="set" scoped="" ref="0x7f03d44984d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4498660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e2ba60" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e2ba60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e2bde0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e2a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e2a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e2a340"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e2a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e2a660"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e2a7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e2a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e28e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e28e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e271c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e27350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e274e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e27670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e27800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e27990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e27b20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e27cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e240a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e240a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e24420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e245b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e24740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e248d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e24a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e24bf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e24d80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e22020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e203f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e203f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e20770"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e20900"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e20a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e20c20"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e20db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e1f020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e1f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e1f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e1d6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e1d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e1da50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e1dbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e1dd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e1c020"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e1c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e1c340"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e1c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e1c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e1a9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e1a9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e1ad30"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e19020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e191b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e19340"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e194d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e19660"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e197f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e19980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e17e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e17e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e161c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e16350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e164e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e16670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e16800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e16990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e16b20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e16cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2e130a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2e130a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2e13420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2e135b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2e13740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2e138d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2e13a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2e13bf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2e13d80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2e12020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f03d448f020" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f03d448f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d448f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d448f530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d448f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d448f850"/>
        <function-ref name="get" scoped="" ref="0x7f03d448f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d448fb70"/>
        <function-ref name="set" scoped="" ref="0x7f03d448fd00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d448e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f03d448c5d0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f03d448c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d448c950"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d448cae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d448cc70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d448ce00"/>
        <function-ref name="get" scoped="" ref="0x7f03d448b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d448b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d448b340"/>
        <function-ref name="clr" scoped="" ref="0x7f03d448b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f03d4492d30" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f03d4492d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44910e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4491270"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4491400"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4491590"/>
        <function-ref name="get" scoped="" ref="0x7f03d4491720"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44918b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4491a40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4491bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f03d448e2b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f03d448e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d448e630"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d448e7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d448e950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d448eae0"/>
        <function-ref name="get" scoped="" ref="0x7f03d448ec70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d448ee00"/>
        <function-ref name="set" scoped="" ref="0x7f03d448d020"/>
        <function-ref name="clr" scoped="" ref="0x7f03d448d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f03d448b760" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f03d448b760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d448bae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d448bc70"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d448be00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d448a020"/>
        <function-ref name="get" scoped="" ref="0x7f03d448a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d448a340"/>
        <function-ref name="set" scoped="" ref="0x7f03d448a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d448a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f03d4491e60" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f03d4491e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4490210"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44903a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4490530"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44906c0"/>
        <function-ref name="get" scoped="" ref="0x7f03d4490850"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44909e0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4490b70"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4490d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f03d448d440" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f03d448d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d448d7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d448d950"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d448dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d448dc70"/>
        <function-ref name="get" scoped="" ref="0x7f03d448de00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d448c020"/>
        <function-ref name="set" scoped="" ref="0x7f03d448c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d448c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f03d448a8f0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f03d448a8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d448ac70"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d448ae00"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4489020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44891b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d4489340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44894d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4489660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44897f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2dc0c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2dc0c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2dbf0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2dbf230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2dbf3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2dbf550"/>
        <function-ref name="get" scoped="" ref="0x7f03d2dbf6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2dbf870"/>
        <function-ref name="set" scoped="" ref="0x7f03d2dbfa00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2dbfb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2dbde20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2dbde20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2dbc1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2dbc350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2dbc4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2dbc670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2dbc800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2dbc990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2dbcb20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2dbccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2db90a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2db90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2db9420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2db95b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2db9740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2db98d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2db9a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2db9bf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2db9d80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2db7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2db53f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2db53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2db5770"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2db5900"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2db5a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2db5c20"/>
        <function-ref name="get" scoped="" ref="0x7f03d2db5db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2db4020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2db41b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2db4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2db26d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2db26d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2db2a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2db2be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2db2d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2db1020"/>
        <function-ref name="get" scoped="" ref="0x7f03d2db11b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2db1340"/>
        <function-ref name="set" scoped="" ref="0x7f03d2db14d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2db1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2daf9b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2daf9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2dafd30"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2dae020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2dae1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2dae340"/>
        <function-ref name="get" scoped="" ref="0x7f03d2dae4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2dae660"/>
        <function-ref name="set" scoped="" ref="0x7f03d2dae7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2dae980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2dace20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2dace20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2dab1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2dab350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2dab4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2dab670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2dab800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2dab990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2dabb20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2dabcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2da80a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2da80a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2da8420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2da85b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2da8740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2da88d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2da8a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2da8bf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2da8d80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2da7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f03d4480440" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f03d4480440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44807c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4480950"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4480ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4480c70"/>
        <function-ref name="get" scoped="" ref="0x7f03d4480e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d447f020"/>
        <function-ref name="set" scoped="" ref="0x7f03d447f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d447f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f03d447d8f0" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f03d447d8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d447dc70"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d447de00"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d447b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d447b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d447b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d447b4d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d447b660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d447b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f03d4482020" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f03d4482020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44823a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4482530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44826c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4482850"/>
        <function-ref name="get" scoped="" ref="0x7f03d44829e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4482b70"/>
        <function-ref name="set" scoped="" ref="0x7f03d4482d00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4481020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f03d447f5d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f03d447f5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d447f950"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d447fae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d447fc70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d447fe00"/>
        <function-ref name="get" scoped="" ref="0x7f03d447e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d447e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d447e340"/>
        <function-ref name="clr" scoped="" ref="0x7f03d447e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f03d447ba80" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f03d447ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d447be00"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d447a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d447a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d447a340"/>
        <function-ref name="get" scoped="" ref="0x7f03d447a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d447a660"/>
        <function-ref name="set" scoped="" ref="0x7f03d447a7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d447a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f03d44812b0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f03d44812b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4481630"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44817c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4481950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4481ae0"/>
        <function-ref name="get" scoped="" ref="0x7f03d4481c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4481e00"/>
        <function-ref name="set" scoped="" ref="0x7f03d4480020"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44801b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f03d447e760" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f03d447e760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d447eae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d447ec70"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d447ee00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d447d020"/>
        <function-ref name="get" scoped="" ref="0x7f03d447d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d447d340"/>
        <function-ref name="set" scoped="" ref="0x7f03d447d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d447d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f03d447ac10" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f03d447ac10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4479020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d44791b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4479340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44794d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d4479660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44797f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4479980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4479b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2d55c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2d55c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2d540a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2d54230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2d543c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2d54550"/>
        <function-ref name="get" scoped="" ref="0x7f03d2d546e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2d54870"/>
        <function-ref name="set" scoped="" ref="0x7f03d2d54a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2d54b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2d52e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2d52e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2d511c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2d51350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2d514e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2d51670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2d51800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2d51990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2d51b20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2d51cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2d4e0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2d4e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2d4e420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2d4e5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2d4e740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2d4e8d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2d4ea60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2d4ebf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2d4ed80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2d4d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2d4b3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2d4b3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2d4b770"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2d4b900"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2d4ba90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2d4bc20"/>
        <function-ref name="get" scoped="" ref="0x7f03d2d4bdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2d49020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2d491b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2d49340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2d476d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2d476d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2d47a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2d47be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2d47d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2d46020"/>
        <function-ref name="get" scoped="" ref="0x7f03d2d461b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2d46340"/>
        <function-ref name="set" scoped="" ref="0x7f03d2d464d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2d46660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2d449b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2d449b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2d44d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2d43020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2d431b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2d43340"/>
        <function-ref name="get" scoped="" ref="0x7f03d2d434d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2d43660"/>
        <function-ref name="set" scoped="" ref="0x7f03d2d437f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2d43980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2d41e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2d41e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2d401c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2d40350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2d404e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2d40670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2d40800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2d40990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2d40b20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2d40cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2d3d0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2d3d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2d3d420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2d3d5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2d3d740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2d3d8d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2d3da60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2d3dbf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2d3dd80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2d3c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f03d4471760" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f03d4471760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4471ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4471c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4471e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d446f020"/>
        <function-ref name="get" scoped="" ref="0x7f03d446f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d446f340"/>
        <function-ref name="set" scoped="" ref="0x7f03d446f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d446f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f03d446dc10" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f03d446dc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d446c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d446c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d446c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d446c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d446c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d446c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d446c980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d446cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f03d44733f0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f03d44733f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4473770"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4473900"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4473a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4473c20"/>
        <function-ref name="get" scoped="" ref="0x7f03d4473db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4472020"/>
        <function-ref name="set" scoped="" ref="0x7f03d44721b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4472340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f03d446f8f0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f03d446f8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d446fc70"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d446fe00"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d446e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d446e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d446e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d446e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d446e660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d446e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f03d446cda0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f03d446cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d446b180"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d446b310"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d446b4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d446b630"/>
        <function-ref name="get" scoped="" ref="0x7f03d446b7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d446b950"/>
        <function-ref name="set" scoped="" ref="0x7f03d446bae0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d446bc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f03d44725d0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f03d44725d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4472950"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4472ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4472c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4472e00"/>
        <function-ref name="get" scoped="" ref="0x7f03d4471020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44711b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4471340"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44714d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f03d446ea80" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f03d446ea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d446ee00"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d446d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d446d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d446d340"/>
        <function-ref name="get" scoped="" ref="0x7f03d446d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d446d660"/>
        <function-ref name="set" scoped="" ref="0x7f03d446d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d446d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f03d446a020" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f03d446a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d446a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d446a530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d446a6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d446a850"/>
        <function-ref name="get" scoped="" ref="0x7f03d446a9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d446ab70"/>
        <function-ref name="set" scoped="" ref="0x7f03d446ad00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4469020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2ceac90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2ceac90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2ce90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2ce9230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2ce93c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2ce9550"/>
        <function-ref name="get" scoped="" ref="0x7f03d2ce96e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2ce9870"/>
        <function-ref name="set" scoped="" ref="0x7f03d2ce9a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2ce9b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2ce7e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2ce7e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2ce61c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2ce6350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2ce64e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2ce6670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2ce6800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2ce6990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2ce6b20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2ce6cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2ce30a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2ce30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2ce3420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2ce35b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2ce3740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2ce38d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2ce3a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2ce3bf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2ce3d80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2ce2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2ce03f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2ce03f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2ce0770"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2ce0900"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2ce0a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2ce0c20"/>
        <function-ref name="get" scoped="" ref="0x7f03d2ce0db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2cde020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2cde1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2cde340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2cdc6d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2cdc6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2cdca50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2cdcbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2cdcd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2cdb020"/>
        <function-ref name="get" scoped="" ref="0x7f03d2cdb1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2cdb340"/>
        <function-ref name="set" scoped="" ref="0x7f03d2cdb4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2cdb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2cd99b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2cd99b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2cd9d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2cd8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2cd81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2cd8340"/>
        <function-ref name="get" scoped="" ref="0x7f03d2cd84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2cd8660"/>
        <function-ref name="set" scoped="" ref="0x7f03d2cd87f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2cd8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2cd6e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2cd6e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2cd51c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2cd5350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2cd54e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2cd5670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2cd5800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2cd5990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2cd5b20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2cd5cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2cd20a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2cd20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2cd2420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2cd25b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2cd2740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2cd28d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2cd2a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2cd2bf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2cd2d80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2cd1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f03d4461a80" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f03d4461a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4461e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4460020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d44601b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4460340"/>
        <function-ref name="get" scoped="" ref="0x7f03d44604d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4460660"/>
        <function-ref name="set" scoped="" ref="0x7f03d44607f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4460980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f03d445d020" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f03d445d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d445d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d445d530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d445d6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d445d850"/>
        <function-ref name="get" scoped="" ref="0x7f03d445d9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d445db70"/>
        <function-ref name="set" scoped="" ref="0x7f03d445dd00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d445c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f03d44637a0" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f03d44637a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4463b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4463cb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4463e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4462020"/>
        <function-ref name="get" scoped="" ref="0x7f03d44621b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4462340"/>
        <function-ref name="set" scoped="" ref="0x7f03d44624d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4462660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f03d4460c10" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f03d4460c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d445f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d445f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d445f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d445f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d445f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d445f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d445f980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d445fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f03d445c2b0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f03d445c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d445c630"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d445c7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d445c950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d445cae0"/>
        <function-ref name="get" scoped="" ref="0x7f03d445cc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d445ce00"/>
        <function-ref name="set" scoped="" ref="0x7f03d445b020"/>
        <function-ref name="clr" scoped="" ref="0x7f03d445b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f03d44628f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f03d44628f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4462c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4462e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4461020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d44611b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d4461340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d44614d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4461660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d44617f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f03d445fda0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f03d445fda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d445e180"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d445e310"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d445e4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d445e630"/>
        <function-ref name="get" scoped="" ref="0x7f03d445e7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d445e950"/>
        <function-ref name="set" scoped="" ref="0x7f03d445eae0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d445ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f03d445b440" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f03d445b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d445b7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d445b950"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d445bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d445bc70"/>
        <function-ref name="get" scoped="" ref="0x7f03d445be00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d445a020"/>
        <function-ref name="set" scoped="" ref="0x7f03d445a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d445a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2c76c90" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2c76c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2c750a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2c75230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2c753c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2c75550"/>
        <function-ref name="get" scoped="" ref="0x7f03d2c756e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2c75870"/>
        <function-ref name="set" scoped="" ref="0x7f03d2c75a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2c75b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2c73e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2c73e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2c721c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2c72350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2c724e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2c72670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2c72800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2c72990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2c72b20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2c72cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2c6f0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2c6f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2c6f420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2c6f5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2c6f740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2c6f8d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2c6fa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2c6fbf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2c6fd80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2c6e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2c6c3f0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2c6c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2c6c770"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2c6c900"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2c6ca90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2c6cc20"/>
        <function-ref name="get" scoped="" ref="0x7f03d2c6cdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2c6b020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2c6b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2c6b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2c696d0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2c696d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2c69a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2c69be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2c69d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2c67020"/>
        <function-ref name="get" scoped="" ref="0x7f03d2c671b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2c67340"/>
        <function-ref name="set" scoped="" ref="0x7f03d2c674d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2c67660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2c659b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2c659b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2c65d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2c64020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2c641b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2c64340"/>
        <function-ref name="get" scoped="" ref="0x7f03d2c644d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2c64660"/>
        <function-ref name="set" scoped="" ref="0x7f03d2c647f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2c64980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2c62e20" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2c62e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2c611c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2c61350"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2c614e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2c61670"/>
        <function-ref name="get" scoped="" ref="0x7f03d2c61800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2c61990"/>
        <function-ref name="set" scoped="" ref="0x7f03d2c61b20"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2c61cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d2c5e0a0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d2c5e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d2c5e420"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d2c5e5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d2c5e740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d2c5e8d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2c5ea60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d2c5ebf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2c5ed80"/>
        <function-ref name="clr" scoped="" ref="0x7f03d2c5d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d4453a20" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d4453a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4453da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d443c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d443c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d443c340"/>
        <function-ref name="get" scoped="" ref="0x7f03d443c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d443c660"/>
        <function-ref name="set" scoped="" ref="0x7f03d443c7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d443c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d44386d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d44386d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4438a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4438be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4438d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4437020"/>
        <function-ref name="get" scoped="" ref="0x7f03d44371b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4437340"/>
        <function-ref name="set" scoped="" ref="0x7f03d44374d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4437660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d4432160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d4432160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44324e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4432670"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4432800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4432990"/>
        <function-ref name="get" scoped="" ref="0x7f03d4432b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4432cb0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4432e40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4431020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d442ec90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d442ec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d442c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d442c230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d442c3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d442c550"/>
        <function-ref name="get" scoped="" ref="0x7f03d442c6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d442c870"/>
        <function-ref name="set" scoped="" ref="0x7f03d442ca00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d442cb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d44286d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d44286d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4428a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4428be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4428d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4427020"/>
        <function-ref name="get" scoped="" ref="0x7f03d44271b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4427340"/>
        <function-ref name="set" scoped="" ref="0x7f03d44274d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4427660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d4422160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d4422160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44224e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4422670"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4422800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4422990"/>
        <function-ref name="get" scoped="" ref="0x7f03d4422b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4422cb0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4422e40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4421020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d441ec90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d441ec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d441d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d441d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d441d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d441d550"/>
        <function-ref name="get" scoped="" ref="0x7f03d441d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d441d870"/>
        <function-ref name="set" scoped="" ref="0x7f03d441da00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d441db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d44186d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d44186d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4418a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4418be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4418d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4417020"/>
        <function-ref name="get" scoped="" ref="0x7f03d44171b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4417340"/>
        <function-ref name="set" scoped="" ref="0x7f03d44174d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4417660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d4412160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d4412160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44124e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4412670"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4412800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4412990"/>
        <function-ref name="get" scoped="" ref="0x7f03d4412b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4412cb0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4412e40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4411020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d440ec90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d440ec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d440d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d440d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d440d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d440d550"/>
        <function-ref name="get" scoped="" ref="0x7f03d440d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d440d870"/>
        <function-ref name="set" scoped="" ref="0x7f03d440da00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d440db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d44086d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d44086d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4408a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4408be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4408d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4407020"/>
        <function-ref name="get" scoped="" ref="0x7f03d44071b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4407340"/>
        <function-ref name="set" scoped="" ref="0x7f03d44074d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4407660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d4402160" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d4402160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d44024e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4402670"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d4402800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4402990"/>
        <function-ref name="get" scoped="" ref="0x7f03d4402b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4402cb0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4402e40"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4401020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d43fec90" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d43fec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d43fd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d43fd230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d43fd3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d43fd550"/>
        <function-ref name="get" scoped="" ref="0x7f03d43fd6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d43fd870"/>
        <function-ref name="set" scoped="" ref="0x7f03d43fda00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d43fdb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f03d43f86d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f03d43f86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d43f8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d43f8be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d43f8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d43f7020"/>
        <function-ref name="get" scoped="" ref="0x7f03d43f71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d43f7340"/>
        <function-ref name="set" scoped="" ref="0x7f03d43f74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d43f7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d43ba020" loc="61:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d43ba020"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f03d492f3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f03d492f3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d43ba3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f03d43ba690" loc="62:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f03d43ba690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f03d43baa10"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f03d43baba0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f03d43bad30"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f03d43b9020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f03d43b91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f03d4399720" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d4399720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d4399aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f03d455fdb0" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f03d455fdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f03d439a180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f03d4399020" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f03d4399020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d43993a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f03d439a470" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f03d439a470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d439a7f0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f03d439a980"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f03d439ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f03d48e6bd0" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f03d48e6bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d4966020"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d49661b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f03d48f09d0" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f03d48f09d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d48f0d50"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f03d52f4020"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f03d52f41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f03d481ad30" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f03d481ad30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d48190e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d4819270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f03d48142c0" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f03d48142c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f03d4814640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f03d48147d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f03d4814960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f03d481be40" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f03d481be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d481a1e0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f03d481a370"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f03d481a500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f03d47f6330" loc="86:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f03d47f6330"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f03d47f66b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f03d48313b0" loc="82:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f03d48313b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f03d4831730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f03d48318c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f03d4831a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f03d47f8bc0" loc="83:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f03d47f8bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f03d47fa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f03d4565890" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d4565890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d4565c10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d4565da0"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d438d020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d438d1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d438d340"/>
        <function-ref name="get" scoped="" ref="0x7f03d438d4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d438d660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d438dca0"/>
        <function-ref name="set" scoped="" ref="0x7f03d438d7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d438d980"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d438db10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f03d4388a00" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f03d4388a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d4388d80"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4387020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d43871b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4387340"/>
        <function-ref name="get" scoped="" ref="0x7f03d43874d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4387660"/>
        <function-ref name="set" scoped="" ref="0x7f03d43877f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4387980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d438cc30" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d438cc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d4389020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f03d4387ca0" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f03d4387ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d43860a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4386230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d43863c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4386550"/>
        <function-ref name="get" scoped="" ref="0x7f03d43866e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4386870"/>
        <function-ref name="set" scoped="" ref="0x7f03d4386a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4386b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f03d43892a0" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d43892a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d4389620"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d43897b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d4389940"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d4389ad0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d4389c60"/>
        <function-ref name="get" scoped="" ref="0x7f03d4389df0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d4388020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d4388660"/>
        <function-ref name="set" scoped="" ref="0x7f03d43881b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d4388340"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d43884d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f03d4385020" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f03d4385020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d43853a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4385530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d43856c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4385850"/>
        <function-ref name="get" scoped="" ref="0x7f03d43859e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4385b70"/>
        <function-ref name="set" scoped="" ref="0x7f03d4385d00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4384020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f03d438aa00" loc="44:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f03d438aa00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d438ad80"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4368020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d43681b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4368340"/>
        <function-ref name="get" scoped="" ref="0x7f03d43684d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4368660"/>
        <function-ref name="set" scoped="" ref="0x7f03d43687f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4368980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f03d4368ce0" loc="45:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f03d4368ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d43670a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4367230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d43673c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4367550"/>
        <function-ref name="get" scoped="" ref="0x7f03d43676e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4367870"/>
        <function-ref name="set" scoped="" ref="0x7f03d4367a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4367b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f03d43652e0" loc="47:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d43652e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d4365660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f03d4366020" loc="46:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f03d4366020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d43663a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d4366530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d43666c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d4366850"/>
        <function-ref name="get" scoped="" ref="0x7f03d43669e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d4366b70"/>
        <function-ref name="set" scoped="" ref="0x7f03d4366d00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d4365020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Slotter" ref="0x7f03d435dac0" loc="34:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Slotter" scoped="" ref="0x7f03d435dac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Slotter"/>
      </instance>
      <interface-functions>
        <function-ref name="slot" scoped="" ref="0x7f03d435de40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f03d434fa90" loc="42:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f03d434fa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f03d434fe10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f03d435a290" loc="39:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d435a290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d4864950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f03d4863180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d4351b30"/>
        <function-ref name="fired" scoped="" ref="0x7f03d4359aa0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d43514e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d4351020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d4350020"/>
        <function-ref name="start" scoped="" ref="0x7f03d43590d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d43595e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d4360b30" loc="32:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d4360b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d435d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d4350440" loc="40:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d4350440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d43507c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d4350950"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d4350ae0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d4350c70"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d4350e00"/>
        <function-ref name="get" scoped="" ref="0x7f03d434f020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d434f1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d434f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d434f340"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d434f4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d434f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f03d435d310" loc="33:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f03d435d310"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d435d690"/>
        <function-ref name="stop" scoped="" ref="0x7f03d435d820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FrameConfiguration" ref="0x7f03d435b180" loc="36:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d435b180"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f03d435b500"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f03d435b690"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f03d435b820"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f03d435b9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlotterControl" ref="0x7f03d435c150" loc="35:../../tos/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlotterControl" scoped="" ref="0x7f03d435c150"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlotterControl"/>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d435ce30"/>
        <function-ref name="getSlot" scoped="" ref="0x7f03d435c660"/>
        <function-ref name="synchronize" scoped="" ref="0x7f03d435c7f0"/>
        <function-ref name="isSynchornized" scoped="" ref="0x7f03d435c980"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d435cb10"/>
        <function-ref name="getRemaining" scoped="" ref="0x7f03d435cca0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d435c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d41804e0" loc="28:../../tos/platforms/mica/Alarm32khz32C.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d41804e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d4864950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f03d4863180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d417edb0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d417fda0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d417e760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d417e2a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d417d2a0"/>
        <function-ref name="start" scoped="" ref="0x7f03d417f3d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d417f8e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d2b937c0" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d2b937c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d2b8f020"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2b90020"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d2b909a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d2b904e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d2b8f4e0"/>
        <function-ref name="start" scoped="" ref="0x7f03d2b92620"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2b92b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f03d4306d80" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d4306d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f03d430e180"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f03d430e310"/>
        <function-ref name="getControlA" scoped="" ref="0x7f03d430e4a0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f03d430e630"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f03d430e7c0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f03d430e950"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f03d430eae0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f03d430ec70"/>
        <function-ref name="setControlC" scoped="" ref="0x7f03d430ee00"/>
        <function-ref name="setControlA" scoped="" ref="0x7f03d430d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f03d42fdbf0" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f03d42fdbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f03d42fa020"/>
        <function-ref name="test" scoped="" ref="0x7f03d42fb630"/>
        <function-ref name="get" scoped="" ref="0x7f03d43048a0"/>
        <function-ref name="captured" scoped="" ref="0x7f03d43032a0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d43037b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d42fbaf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4304d60"/>
        <function-ref name="start" scoped="" ref="0x7f03d4303c70"/>
        <function-ref name="stop" scoped="" ref="0x7f03d42fb170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f03d42f9650" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f03d42f9650"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d42f0110"/>
        <function-ref name="fired" scoped="" ref="0x7f03d42f8da0"/>
        <function-ref name="get" scoped="" ref="0x7f03d42f83d0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d42f12a0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d42f05d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d42f8890"/>
        <function-ref name="start" scoped="" ref="0x7f03d42f1760"/>
        <function-ref name="stop" scoped="" ref="0x7f03d42f1c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d4312a90" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d4312a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d4310e60"/>
        <function-ref name="test" scoped="" ref="0x7f03d43104e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d431b6f0"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d430f350"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d430f860"/>
        <function-ref name="reset" scoped="" ref="0x7f03d431a5d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d431a110"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d43109a0"/>
        <function-ref name="set" scoped="" ref="0x7f03d431bbb0"/>
        <function-ref name="start" scoped="" ref="0x7f03d431aa90"/>
        <function-ref name="stop" scoped="" ref="0x7f03d4310020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f03d42e6020" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d42e6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f03d42e63a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f03d42e6530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f03d42e66c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f03d42e6850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f03d42e69e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f03d42e6b70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f03d42e6d00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f03d42e5020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f03d42e51b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f03d42e5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f03d42e05a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f03d42e05a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d42dc020"/>
        <function-ref name="fired" scoped="" ref="0x7f03d42dfc10"/>
        <function-ref name="get" scoped="" ref="0x7f03d42df240"/>
        <function-ref name="reset" scoped="" ref="0x7f03d42de110"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d42dc4e0"/>
        <function-ref name="set" scoped="" ref="0x7f03d42df700"/>
        <function-ref name="start" scoped="" ref="0x7f03d42de5d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d42dea90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f03d42e5850" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f03d42e5850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f03d42e2e60"/>
        <function-ref name="test" scoped="" ref="0x7f03d42e24e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d42e44c0"/>
        <function-ref name="captured" scoped="" ref="0x7f03d42e3020"/>
        <function-ref name="reset" scoped="" ref="0x7f03d42e3530"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d42e29a0"/>
        <function-ref name="set" scoped="" ref="0x7f03d42e4980"/>
        <function-ref name="start" scoped="" ref="0x7f03d42e39f0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d42e2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f03d42dcba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f03d42dcba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d42d9550"/>
        <function-ref name="fired" scoped="" ref="0x7f03d42da1f0"/>
        <function-ref name="get" scoped="" ref="0x7f03d42db7f0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d42da6b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d42d9a10"/>
        <function-ref name="set" scoped="" ref="0x7f03d42dbcb0"/>
        <function-ref name="start" scoped="" ref="0x7f03d42dab70"/>
        <function-ref name="stop" scoped="" ref="0x7f03d42d9090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f03d42d7120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f03d42d7120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d42d5a90"/>
        <function-ref name="fired" scoped="" ref="0x7f03d42d6770"/>
        <function-ref name="get" scoped="" ref="0x7f03d42d7d50"/>
        <function-ref name="reset" scoped="" ref="0x7f03d42d6c30"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d42d4020"/>
        <function-ref name="set" scoped="" ref="0x7f03d42d6260"/>
        <function-ref name="start" scoped="" ref="0x7f03d42d5110"/>
        <function-ref name="stop" scoped="" ref="0x7f03d42d55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d42eeb80" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d42eeb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d42e8020"/>
        <function-ref name="test" scoped="" ref="0x7f03d42e9550"/>
        <function-ref name="get" scoped="" ref="0x7f03d42eb7d0"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d42e84e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d42e89f0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d42ea6b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d42ea1f0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d42e9a10"/>
        <function-ref name="set" scoped="" ref="0x7f03d42ebc90"/>
        <function-ref name="start" scoped="" ref="0x7f03d42eab70"/>
        <function-ref name="stop" scoped="" ref="0x7f03d42e9090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d42592a0" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d42592a0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f03d492f020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f03d492f020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d4259620"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f03d4259a10" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d4259a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d4249e60"/>
        <function-ref name="test" scoped="" ref="0x7f03d42494e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d424b6b0"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d4247350"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d4247860"/>
        <function-ref name="reset" scoped="" ref="0x7f03d424a590"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d424a0d0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d42499a0"/>
        <function-ref name="set" scoped="" ref="0x7f03d424bb70"/>
        <function-ref name="start" scoped="" ref="0x7f03d424aa50"/>
        <function-ref name="stop" scoped="" ref="0x7f03d4249020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d2b7dd90" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d2b7dd90"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f03d4930c00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f03d4930c00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d2b79670"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2b7a5d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d2b79020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d2b7aa90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d2b79b30"/>
        <function-ref name="start" scoped="" ref="0x7f03d2b7bbc0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2b7a110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7f03d2b73570" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f03d2b73570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d2b6f020"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2b72bc0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2b721f0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2b700d0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2b6f4e0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2b726b0"/>
        <function-ref name="start" scoped="" ref="0x7f03d2b70590"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2b70a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7f03d2b780b0" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Alarm16.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f03d2b780b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d2b744e0"/>
        <function-ref name="test" scoped="" ref="0x7f03d2b75a50"/>
        <function-ref name="get" scoped="" ref="0x7f03d2b78ce0"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d2b749a0"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d2b73020"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2b77bf0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d2b77730"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2b74020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2b77220"/>
        <function-ref name="start" scoped="" ref="0x7f03d2b750d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2b75590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d4206290" loc="24:../../tos/platforms/mica/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d4206290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d4864950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f03d4863180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d42050d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d4205a50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d4205590"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d4201020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d41fe290" loc="24:../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d41fe290"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d41fd0d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d41fda50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d41fd590"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d41fc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d41f8020" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d41f8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d41f8e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d41e6800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d41e6340"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d41e6cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f03d41e5280" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d41e5280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d41e1810"/>
        <function-ref name="test" scoped="" ref="0x7f03d41e3e60"/>
        <function-ref name="get" scoped="" ref="0x7f03d41e4020"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d41e1cd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d41e0260"/>
        <function-ref name="reset" scoped="" ref="0x7f03d41e3020"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d41e49f0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d41e1350"/>
        <function-ref name="set" scoped="" ref="0x7f03d41e44e0"/>
        <function-ref name="start" scoped="" ref="0x7f03d41e34e0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d41e39a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f03d41bf540" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f03d41bf540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d41bd3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d41bdd50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d41bd890"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d41bc260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d41c10f0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d41c10f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d4864950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f03d4863180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d41c0020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d41c09a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d41c04e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d41c0e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d2b8d890" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d2b8d890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d4864950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f03d4863180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d2b890d0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2b8b0d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d2b8ba50"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d2b8b590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d2b89590"/>
        <function-ref name="start" scoped="" ref="0x7f03d2b8c6e0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2b8cbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f03d2b860a0" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x7f03d2b860a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d2b83b30"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2b859f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d2b834e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d2b83020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d2b82020"/>
        <function-ref name="start" scoped="" ref="0x7f03d2b85020"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2b85530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f03d2b89c00" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="GenericSlotterC.Alarm32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d2b89c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d4864950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f03d4863180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d2b88a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d2b874e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d2b87020"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d2b879a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d4176020" loc="41:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d4176020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d41763a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d4176530"/>
        <function-ref name="start" scoped="" ref="0x7f03d41766c0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d4176850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f03d41714f0" loc="46:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f03d41714f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f03d4171870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d4171b00" loc="48:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d4171b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d4171e80"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d416e030"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d416e1c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d416e350"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d416e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d4175050" loc="43:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d4175050"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d41753d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d4175560"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d41756f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d4175880"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d4175a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d4173df0" loc="45:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d4173df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d41721c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f03d41658a0" loc="52:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d41658a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f03d4165c20"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f03d4165db0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f03d416b020"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f03d416b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d4173210" loc="44:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d4173210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d4173590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f03d416de40" loc="51:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d416de40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d416c1e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d416c370"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d416c500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f03d415ebf0" loc="53:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f03d415ebf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f03d416a020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f03d416a1b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f03d416a340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f03d416a4d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f03d416a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d416e790" loc="49:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d416e790"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d416eb10"/>
        <function-ref name="source" scoped="" ref="0x7f03d416eca0"/>
        <function-ref name="address" scoped="" ref="0x7f03d416ee30"/>
        <function-ref name="destination" scoped="" ref="0x7f03d416d020"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d416d1b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d416d340"/>
        <function-ref name="type" scoped="" ref="0x7f03d416d4d0"/>
        <function-ref name="setType" scoped="" ref="0x7f03d416d660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d416d7f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d416d980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d416db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f03d415a960" loc="54:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f03d415a960"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f03d415ace0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d415ae70"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d4164030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0x7f03d41519e0" loc="56:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f03d41519e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d4159020"/>
        <function-ref name="clear" scoped="" ref="0x7f03d4159750"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d415c890"/>
        <function-ref name="set" scoped="" ref="0x7f03d4159e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f03d4150af0" loc="57:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d4150af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d414e210"/>
        <function-ref name="clear" scoped="" ref="0x7f03d414e940"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d414fa80"/>
        <function-ref name="set" scoped="" ref="0x7f03d414c090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d41482e0" loc="45:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d41482e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d4148660"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d41487f0"/>
        <function-ref name="start" scoped="" ref="0x7f03d4148980"/>
        <function-ref name="stop" scoped="" ref="0x7f03d4148b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f03d4134a00" loc="62:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d4134a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d41311b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d4132c00"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d41326b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4131700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f03d4145d60" loc="50:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f03d4145d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f03d4143180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d4143410" loc="52:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d4143410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d4143790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d4143920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d4143ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d4143c40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d4143dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d4147320" loc="47:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d4147320"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d41476a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d4147830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d41479c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d4147b50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d4147ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d41451d0" loc="49:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d41451d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d4145550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f03d4136400" loc="61:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d4136400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d4135c10"/>
        <function-ref name="get" scoped="" ref="0x7f03d41356c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d4135170"/>
        <function-ref name="set" scoped="" ref="0x7f03d41341b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f03d4140320" loc="56:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d4140320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f03d41406a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f03d4140830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f03d41409c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f03d4140b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d4146510" loc="48:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d4146510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d4146890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f03d412e8a0" loc="66:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d412e8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d4129e10"/>
        <function-ref name="clear" scoped="" ref="0x7f03d41285a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d41296e0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4128cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f03d412f270" loc="65:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d412f270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d412e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f03d4138df0" loc="60:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d4138df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d413c5e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d413c090"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d413dac0"/>
        <function-ref name="set" scoped="" ref="0x7f03d413cb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f03d4141800" loc="55:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d4141800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d4141b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d4141d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d4140020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f03d4140e10" loc="57:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f03d4140e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f03d413f1c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f03d413f350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f03d413f4e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f03d413f670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f03d413f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d41420c0" loc="53:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d41420c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d4142440"/>
        <function-ref name="source" scoped="" ref="0x7f03d41425d0"/>
        <function-ref name="address" scoped="" ref="0x7f03d4142760"/>
        <function-ref name="destination" scoped="" ref="0x7f03d41428f0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d4142a80"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d4142c10"/>
        <function-ref name="type" scoped="" ref="0x7f03d4142da0"/>
        <function-ref name="setType" scoped="" ref="0x7f03d4141020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d41411b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d4141340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d41414d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f03d413fad0" loc="58:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f03d413fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f03d413fe50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d413e020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d413e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f03d412b4c0" loc="63:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d412b4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f03d412b840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f03d4127970" loc="67:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d4127970"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d4124020"/>
        <function-ref name="clear" scoped="" ref="0x7f03d4124750"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d41257c0"/>
        <function-ref name="set" scoped="" ref="0x7f03d4124e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d4120080" loc="41:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d4120080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d4120400"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d4120590"/>
        <function-ref name="start" scoped="" ref="0x7f03d4120720"/>
        <function-ref name="stop" scoped="" ref="0x7f03d41208b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f03d40f61c0" loc="85:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d40f61c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d40f5910"/>
        <function-ref name="get" scoped="" ref="0x7f03d40f53c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d40f6df0"/>
        <function-ref name="set" scoped="" ref="0x7f03d40f5e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0x7f03d4110020" loc="65:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f03d4110020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f03d41103a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0x7f03d410f2c0" loc="67:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0x7f03d410f2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d410f640"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d410f7d0"/>
        <function-ref name="request" scoped="" ref="0x7f03d410f960"/>
        <function-ref name="granted" scoped="" ref="0x7f03d410faf0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d410fc80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f03d411cbb0" loc="57:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f03d411cbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f03d411b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f03d40ed3f0" loc="90:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d40ed3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d40ec970"/>
        <function-ref name="clear" scoped="" ref="0x7f03d40eb0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d40ec240"/>
        <function-ref name="set" scoped="" ref="0x7f03d40eb800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d411e1d0" loc="54:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d411e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d411e550"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d411e6e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d411e870"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d411ea00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d411eb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d411c020" loc="56:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d411c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d411c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f03d41013c0" loc="69:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d41013c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f03d4101740"/>
        <function-ref name="address" scoped="" ref="0x7f03d41018d0"/>
        <function-ref name="destination" scoped="" ref="0x7f03d4101a60"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d4101bf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d4101d80"/>
        <function-ref name="pan" scoped="" ref="0x7f03d4109020"/>
        <function-ref name="setPan" scoped="" ref="0x7f03d41091b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d4109340"/>
        <function-ref name="localPan" scoped="" ref="0x7f03d41094d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0x7f03d4109890" loc="70:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f03d4109890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d4109d10"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d4100020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d41001b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d4100340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d41004d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f03d40ff320" loc="74:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d40ff320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f03d40ff6a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f03d40ff830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f03d40ff9c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f03d40ffb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f03d40fbc90" loc="84:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d40fbc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d40f83c0"/>
        <function-ref name="get" scoped="" ref="0x7f03d40f9e30"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d40f98e0"/>
        <function-ref name="set" scoped="" ref="0x7f03d40f8910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d411d3f0" loc="55:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d411d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d411d770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0x7f03d411aa10" loc="59:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f03d411aa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d411ad90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d4119020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d41191b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d4119340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d41194d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f03d40f1270" loc="89:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d40f1270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d40f0800"/>
        <function-ref name="clear" scoped="" ref="0x7f03d40ef020"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d40f00d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d40ef750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f03d40f4d70" loc="88:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d40f4d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d40f29c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f03d40fd6d0" loc="83:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d40fd6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d40fce70"/>
        <function-ref name="get" scoped="" ref="0x7f03d40fc920"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d40fc3d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d40fb3f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f03d4100800" loc="73:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d4100800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d4100b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d4100d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d40ff020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f03d4111a60" loc="63:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f03d4111a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d4111de0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d4118020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d41181b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d4118340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d41184d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f03d40ffe10" loc="75:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f03d40ffe10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f03d40fe1c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f03d40fe350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f03d40fe4e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f03d40fe670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f03d40fe800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d411b2d0" loc="58:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d411b2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d411b650"/>
        <function-ref name="source" scoped="" ref="0x7f03d411b7e0"/>
        <function-ref name="address" scoped="" ref="0x7f03d411b970"/>
        <function-ref name="destination" scoped="" ref="0x7f03d411bb00"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d411bc90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d411be20"/>
        <function-ref name="type" scoped="" ref="0x7f03d411a020"/>
        <function-ref name="setType" scoped="" ref="0x7f03d411a1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d411a340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d411a4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d411a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f03d4118840" loc="64:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f03d4118840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d4118bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f03d40fead0" loc="81:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f03d40fead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f03d40fee50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d40fd020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d40fd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f03d40f4510" loc="86:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d40f4510"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f03d40f4890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0x7f03d40e8e50" loc="44:../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f03d40e8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f03d40d9210"/>
        <function-ref name="suspend" scoped="" ref="0x7f03d40d93a0"/>
        <function-ref name="resume" scoped="" ref="0x7f03d40d9530"/>
        <function-ref name="run" scoped="" ref="0x7f03d40d96c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f03d409b150" loc="38:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d409b150"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d409b4f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7f03d409b680"/>
        <function-ref name="get" scoped="" ref="0x7f03d409b810"/>
        <function-ref name="set" scoped="" ref="0x7f03d409b9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f03d409c390" loc="37:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f03d409c390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f03d409c710"/>
        <function-ref name="insertNode" scoped="" ref="0x7f03d409c8a0"/>
        <function-ref name="getNode" scoped="" ref="0x7f03d409ca30"/>
        <function-ref name="evicted" scoped="" ref="0x7f03d409cbc0"/>
        <function-ref name="getIndex" scoped="" ref="0x7f03d409cd50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f03d2b05150" loc="43:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d2b05150"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2b054f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7f03d2b05680"/>
        <function-ref name="get" scoped="" ref="0x7f03d2b05810"/>
        <function-ref name="set" scoped="" ref="0x7f03d2b059a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f03d2b063d0" loc="42:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f03d2b063d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f03d2b06750"/>
        <function-ref name="insertNode" scoped="" ref="0x7f03d2b068e0"/>
        <function-ref name="getNode" scoped="" ref="0x7f03d2b06a70"/>
        <function-ref name="evicted" scoped="" ref="0x7f03d2b06c00"/>
        <function-ref name="getIndex" scoped="" ref="0x7f03d2b06d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d2b07d90" loc="41:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d2b07d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d2b06180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0x7f03d4073a30" loc="51:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0x7f03d4073a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f03d4073db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0x7f03d4082020" loc="47:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0x7f03d4082020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0x7f03d40823a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0x7f03d406de30" loc="50:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f03d406de30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d40741e0"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f03d4074370"/>
        <function-ref name="source" scoped="" ref="0x7f03d4074500"/>
        <function-ref name="destination" scoped="" ref="0x7f03d4074690"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d4074820"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d40749b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d4074b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0x7f03d4076cf0" loc="49:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0x7f03d4076cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0x7f03d407e0a0"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0x7f03d407e230"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0x7f03d407e3c0"/>
        <function-ref name="getTransmitTime" scoped="" ref="0x7f03d407e550"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0x7f03d407e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f03d404a8d0" loc="61:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d404a8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f03d404ac50"/>
        <function-ref name="wait" scoped="" ref="0x7f03d404ade0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d404f020"/>
        <function-ref name="isFree" scoped="" ref="0x7f03d404f1b0"/>
        <function-ref name="getNow" scoped="" ref="0x7f03d404f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0x7f03d404e020" loc="62:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0x7f03d404e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d404e3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d404e530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d404e6c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d404e850"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d404e9e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d404eb70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f03d4049160" loc="64:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f03d4049160"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d40427c0"/>
        <function-ref name="clear" scoped="" ref="0x7f03d4041020"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d4042090"/>
        <function-ref name="set" scoped="" ref="0x7f03d4041750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0x7f03d40927c0" loc="43:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f03d40927c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d4092b40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d4092cd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d4092e60"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f03d4096020"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f03d40961b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0x7f03d4081990" loc="46:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0x7f03d4081990"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0x7f03d4081d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0x7f03d40899c0" loc="44:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f03d40899c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f03d4089d40"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f03d4095020"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f03d40951b0"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f03d4095340"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f03d40954d0"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f03d4095660"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f03d40957f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f03d4095980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f03d4051880" loc="60:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d4051880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f03d4051c00"/>
        <function-ref name="getDSN" scoped="" ref="0x7f03d4051d90"/>
        <function-ref name="setFCF" scoped="" ref="0x7f03d406b020"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f03d406b1b0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f03d406b340"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f03d406b4d0"/>
        <function-ref name="setDSN" scoped="" ref="0x7f03d406b660"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f03d406b7f0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f03d406b980"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f03d406bb10"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f03d406bca0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f03d406be30"/>
        <function-ref name="localAddr" scoped="" ref="0x7f03d4069020"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f03d40692b0"/>
        <function-ref name="localPan" scoped="" ref="0x7f03d4069440"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f03d40695d0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f03d4069760"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f03d40698f0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f03d4069a80"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d4069c10"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f03d4069da0"/>
        <function-ref name="getFCF" scoped="" ref="0x7f03d4050020"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f03d40501b0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f03d4050340"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f03d40504d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0x7f03d4083e40" loc="45:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f03d4083e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f03d40901e0"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f03d4090370"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f03d4090500"/>
        <function-ref name="getSender" scoped="" ref="0x7f03d4090690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0x7f03d407a6b0" loc="48:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f03d407a6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f03d407aa30"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f03d407abc0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f03d407ad50"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f03d407f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f03d3fbd480" loc="41:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3fbd480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f03d3fbd820"/>
        <function-ref name="wait" scoped="" ref="0x7f03d3fbd9b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3fbdb40"/>
        <function-ref name="isFree" scoped="" ref="0x7f03d3fbdcd0"/>
        <function-ref name="getNow" scoped="" ref="0x7f03d3fbde60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f03d3fba020" loc="47:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d3fba020"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f03d492f3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f03d492f3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f03d4788180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3fb8870"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3fb9840"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d3fb8220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3fb9d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d3fb8d30"/>
        <function-ref name="start" scoped="" ref="0x7f03d3fbae30"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3fb9380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f03d3fbb140" loc="46:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f03d3fbb140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f03d3fbb4c0"/>
        <function-ref name="suspend" scoped="" ref="0x7f03d3fbb650"/>
        <function-ref name="resume" scoped="" ref="0x7f03d3fbb7e0"/>
        <function-ref name="run" scoped="" ref="0x7f03d3fbb970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f03d2aeb300" loc="54:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d2aeb300"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f03d2aeb6a0"/>
        <function-ref name="wait" scoped="" ref="0x7f03d2aeb830"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2aeb9c0"/>
        <function-ref name="isFree" scoped="" ref="0x7f03d2aebb50"/>
        <function-ref name="getNow" scoped="" ref="0x7f03d2aebce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f03d2aea260" loc="59:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d2aea260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f03d4788180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d2ae7b30"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2ae8a60"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d2ae74e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d2ae7020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d2ae6020"/>
        <function-ref name="start" scoped="" ref="0x7f03d2ae8090"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2ae85a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f03d2ae6410" loc="60:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f03d2ae6410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f03d2ae6790"/>
        <function-ref name="suspend" scoped="" ref="0x7f03d2ae6920"/>
        <function-ref name="resume" scoped="" ref="0x7f03d2ae6ab0"/>
        <function-ref name="run" scoped="" ref="0x7f03d2ae6c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3f0e8f0" loc="50:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3f0e8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3f0ec70"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3f0ee00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3f0d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3f0d2b0" loc="51:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3f0d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3f0d630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f03d3f0f3a0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f03d3f0f3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f03d3f0f740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d3f12720" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d3f12720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3f12aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3f12c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3f12dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3f11020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3f111b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d3f11530" loc="41:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d3f11530"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3f118d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3f11a60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3f11bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3f11d80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3f10020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d3f10b00" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d3f10b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3f0f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d3f0fa30" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d3f0fa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3f0fdb0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3f0e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3f0e1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3f0e340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3f0e4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3f0e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d3f0d8c0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d3f0d8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d3f0dc40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f03d3f0ddd0"/>
        <function-ref name="source" scoped="" ref="0x7f03d3f0b020"/>
        <function-ref name="destination" scoped="" ref="0x7f03d3f0b1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d3f0b340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d3f0b4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d3f0b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d3f103a0" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3f103a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3f10740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d3f13020" loc="39:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d3f13020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d3f133a0"/>
        <function-ref name="source" scoped="" ref="0x7f03d3f13530"/>
        <function-ref name="address" scoped="" ref="0x7f03d3f136c0"/>
        <function-ref name="destination" scoped="" ref="0x7f03d3f13850"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d3f139e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d3f13b70"/>
        <function-ref name="type" scoped="" ref="0x7f03d3f13d00"/>
        <function-ref name="setType" scoped="" ref="0x7f03d3f12020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d3f121b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d3f12340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d3f124d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d2ac68f0" loc="54:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d2ac68f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d2ac6c70"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2ac6e00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d2ac5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d2ac52b0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d2ac52b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d2ac5630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f03d2ac7420" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f03d2ac7420"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f03d2ac77c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d2acb8b0" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d2acb8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2acbc30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d2acbdc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2aca020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2aca1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d2aca340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d2acd360" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d2acd360"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2acd6e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d2acd870"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2acda00"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d2acdb90"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d2acdd20"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d2acc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d2aca6c0" loc="45:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d2aca6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d2acaa60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2acabf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2acad80"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2ac8020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d2ac81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d2ac8c90" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d2ac8c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d2ac70a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d2ac7ab0" loc="53:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d2ac7ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2ac7e30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d2ac6020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2ac61b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d2ac6340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d2ac64d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d2ac6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d2ac8530" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d2ac8530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d2ac88d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d2ac58c0" loc="56:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d2ac58c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d2ac5c40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f03d2ac5dd0"/>
        <function-ref name="source" scoped="" ref="0x7f03d2ac4020"/>
        <function-ref name="destination" scoped="" ref="0x7f03d2ac41b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d2ac4340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d2ac44d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d2ac4660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f03d2ac48b0" loc="57:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f03d2ac48b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f03d2ac4c30"/>
        <function-ref name="changed" scoped="" ref="0x7f03d2ac4dc0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f03d2ac3020"/>
        <function-ref name="setAddress" scoped="" ref="0x7f03d2ac31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d2acc270" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d2acc270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d2acc5f0"/>
        <function-ref name="source" scoped="" ref="0x7f03d2acc780"/>
        <function-ref name="address" scoped="" ref="0x7f03d2acc910"/>
        <function-ref name="destination" scoped="" ref="0x7f03d2accaa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d2accc30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d2accdc0"/>
        <function-ref name="type" scoped="" ref="0x7f03d2acb020"/>
        <function-ref name="setType" scoped="" ref="0x7f03d2acb1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d2acb340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d2acb4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d2acb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f03d3f2c260" loc="54:../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f03d3f2c260"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f03d3f2c5e0"/>
        <function-ref name="changed" scoped="" ref="0x7f03d3f2c770"/>
        <function-ref name="amGroup" scoped="" ref="0x7f03d3f2c900"/>
        <function-ref name="setAddress" scoped="" ref="0x7f03d3f2ca90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3ef6310" loc="44:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3ef6310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3ef6690"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3ef6820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3ef69b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f03d3ef6c00" loc="45:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f03d3ef6c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d3ef5020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d3ef51b0"/>
        <function-ref name="request" scoped="" ref="0x7f03d3ef5340"/>
        <function-ref name="granted" scoped="" ref="0x7f03d3ef54d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d3ef5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f03d3f06880" loc="39:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f03d3f06880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3f06c00"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3f06d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3ef6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f03d3e90150" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f03d3e90150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f03d3e904f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f03d3e90680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f03d3e8f1f0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d3e8f1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f03d3e8f590"/>
        <function-ref name="configure" scoped="" ref="0x7f03d3e8f720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f03d3e91390" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f03d3e91390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d3e91730"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d3e918c0"/>
        <function-ref name="request" scoped="" ref="0x7f03d3e91a50"/>
        <function-ref name="granted" scoped="" ref="0x7f03d3e91be0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d3e91d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f03d3e908d0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f03d3e908d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f03d3e90c50"/>
        <function-ref name="userId" scoped="" ref="0x7f03d3e90de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d2a75460" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d2a75460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d2a757e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f03d2a75a70" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f03d2a75a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f03d2a75df0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f03d2a74020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f03d2a741b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d2a74340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f03d2a72850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f03d2a72850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f03d2a72bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f03d2a72d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f03d2a71910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d2a71910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f03d2a71cb0"/>
        <function-ref name="configure" scoped="" ref="0x7f03d2a71e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f03d2a6f120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f03d2a6f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f03d2a6f4a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f03d2a6f630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f03d2a6f7c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d2a6f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f03d2a739d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f03d2a739d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d2a73d70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d2a72020"/>
        <function-ref name="request" scoped="" ref="0x7f03d2a721b0"/>
        <function-ref name="granted" scoped="" ref="0x7f03d2a72340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d2a724d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f03d2a71020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f03d2a71020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f03d2a713a0"/>
        <function-ref name="userId" scoped="" ref="0x7f03d2a71530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f03d2a6fc20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f03d2a6fc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d2a6e020"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d2a6e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3e572b0" loc="49:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3e572b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3e57630"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3e577c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3e57950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3e57be0" loc="50:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3e57be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3e56020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f03d3e5dd30" loc="42:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f03d3e5dd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f03d3e5c0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d3e8ce00" loc="39:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d3e8ce00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3e5e1c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3e5e350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3e5e4e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3e5e670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3e5e800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7f03d3e58470" loc="48:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3e58470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3e587f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3e58980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3e58b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3e58ca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3e58e30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3e57020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f03d3e5c390" loc="47:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d3e5c390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f03d3e5c710"/>
        <function-ref name="getDSN" scoped="" ref="0x7f03d3e5c8a0"/>
        <function-ref name="setFCF" scoped="" ref="0x7f03d3e5ca30"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f03d3e5cbc0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f03d3e5cd50"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f03d3e5a020"/>
        <function-ref name="setDSN" scoped="" ref="0x7f03d3e5a1b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f03d3e5a340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f03d3e5a4d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f03d3e5a660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f03d3e5a7f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f03d3e5a980"/>
        <function-ref name="localAddr" scoped="" ref="0x7f03d3e5ab10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f03d3e5ada0"/>
        <function-ref name="localPan" scoped="" ref="0x7f03d3e59020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f03d3e591b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f03d3e59340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f03d3e594d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f03d3e59660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d3e597f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f03d3e59980"/>
        <function-ref name="getFCF" scoped="" ref="0x7f03d3e59b10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f03d3e59ca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f03d3e59e30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f03d3e58020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f03d3e5ea50" loc="40:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f03d3e5ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3e5edd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3e5d020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3e5d1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3e5d340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3e5d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f03d3e5d760" loc="41:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f03d3e5d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3e5dae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3e1a4a0" loc="69:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3e1a4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3e1a820"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3e1a9b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3e1ab40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3e1add0" loc="70:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3e1add0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3e19180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f03d3e1d730" loc="57:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d3e1d730"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3e1dab0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3e1dc40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3e1ddd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3e1c020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3e1c1b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3e1c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0x7f03d3e1b020" loc="62:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0x7f03d3e1b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3e1b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d3e19410" loc="71:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d3e19410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3e19790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3e19920"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3e19ab0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3e19c40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3e19dd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3e18020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0x7f03d3e1c5d0" loc="61:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0x7f03d3e1c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3e1c950"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3e1cae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3e1cc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f03d3e507c0" loc="55:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f03d3e507c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3e50b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3e50cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3e50e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f03d3e1d120" loc="56:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f03d3e1d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3e1d4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0x7f03d3e1b630" loc="63:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0x7f03d3e1b630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3e1b9b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3e1bb40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3e1bcd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3e1be60"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3e1a020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3e1a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3d7a440" loc="48:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d7a440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3d7a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f03d3d7edd0" loc="40:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d3d7edd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f03d3d7d180"/>
        <function-ref name="address" scoped="" ref="0x7f03d3d7d310"/>
        <function-ref name="destination" scoped="" ref="0x7f03d3d7d4a0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d3d7d630"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d3d7d7c0"/>
        <function-ref name="pan" scoped="" ref="0x7f03d3d7d950"/>
        <function-ref name="setPan" scoped="" ref="0x7f03d3d7dae0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d3d7dc70"/>
        <function-ref name="localPan" scoped="" ref="0x7f03d3d7de00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d3d7c080" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d7c080"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3d7c400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3d7c590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3d7c720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3d7c8b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3d7ca40"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3d7cbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f03d3d81e00" loc="39:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d3d81e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f03d3d801c0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f03d3d80350"/>
        <function-ref name="setFCF" scoped="" ref="0x7f03d3d804e0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f03d3d80670"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f03d3d80800"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f03d3d80990"/>
        <function-ref name="setDSN" scoped="" ref="0x7f03d3d80b20"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f03d3d80cb0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f03d3d80e40"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f03d3d7f020"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f03d3d7f1b0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f03d3d7f340"/>
        <function-ref name="localAddr" scoped="" ref="0x7f03d3d7f4d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f03d3d7f760"/>
        <function-ref name="localPan" scoped="" ref="0x7f03d3d7f8f0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f03d3d7fa80"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f03d3d7fc10"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f03d3d7fda0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f03d3d7e020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d3d7e1b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f03d3d7e340"/>
        <function-ref name="getFCF" scoped="" ref="0x7f03d3d7e4d0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f03d3d7e660"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f03d3d7e7f0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f03d3d7e980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d3d7b500" loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d7b500"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3d7b880"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3d7ba10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3d7bba0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3d7bd30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3d7a020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3d7a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d3d7ce60" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3d7ce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3d7b210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d2a01440" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d2a01440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d2a017c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f03d2a062e0" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f03d2a062e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f03d2a06660"/>
        <function-ref name="address" scoped="" ref="0x7f03d2a067f0"/>
        <function-ref name="destination" scoped="" ref="0x7f03d2a06980"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d2a06b10"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d2a06ca0"/>
        <function-ref name="pan" scoped="" ref="0x7f03d2a06e30"/>
        <function-ref name="setPan" scoped="" ref="0x7f03d2a04020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d2a041b0"/>
        <function-ref name="localPan" scoped="" ref="0x7f03d2a04340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d2a04590" loc="43:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d2a04590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2a04910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d2a04aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2a04c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d2a04dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d2a03020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d2a031b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f03d2a09020" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f03d2a09020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f03d2a093a0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f03d2a09530"/>
        <function-ref name="setFCF" scoped="" ref="0x7f03d2a096c0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f03d2a09850"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f03d2a099e0"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f03d2a09b70"/>
        <function-ref name="setDSN" scoped="" ref="0x7f03d2a09d00"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f03d2a08020"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f03d2a081b0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f03d2a08340"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f03d2a084d0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f03d2a08660"/>
        <function-ref name="localAddr" scoped="" ref="0x7f03d2a087f0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f03d2a08a80"/>
        <function-ref name="localPan" scoped="" ref="0x7f03d2a08c10"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f03d2a08da0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f03d2a07020"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f03d2a071b0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f03d2a07340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d2a074d0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f03d2a07660"/>
        <function-ref name="getFCF" scoped="" ref="0x7f03d2a077f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f03d2a07980"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f03d2a07b10"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f03d2a07ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f03d2a03a70" loc="49:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f03d2a03a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f03d2a03df0"/>
        <function-ref name="changed" scoped="" ref="0x7f03d2a02020"/>
        <function-ref name="amGroup" scoped="" ref="0x7f03d2a021b0"/>
        <function-ref name="setAddress" scoped="" ref="0x7f03d2a02340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d2a03440" loc="44:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d2a03440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d2a037c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d2a025d0" loc="50:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d2a025d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2a02950"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d2a02ae0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2a02c70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d2a02e00"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d2a01020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d2a011b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3d47a70" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3d47a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3d47df0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3d46020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3d461b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3d46440" loc="46:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d46440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3d467c0"/>
        <function-ref name="header" scoped="" ref="0x7f03d3d46950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f03d3d43400" loc="51:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d3d43400"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3d43780"/>
        <function-ref name="clearAll" scoped="" ref="0x7f03d3d43910"/>
        <function-ref name="get" scoped="" ref="0x7f03d3d43aa0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3d43c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d3d48840" loc="40:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d3d48840"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3d48bc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3d48d50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3d47020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d3d46be0" loc="48:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d3d46be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f03d3d44020"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f03d3d441b0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f03d3d44340"/>
        <function-ref name="getSender" scoped="" ref="0x7f03d3d444d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d3d47270" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3d47270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3d475f0"/>
        <function-ref name="header" scoped="" ref="0x7f03d3d47780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f03d3d44720" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f03d3d44720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f03d3d44aa0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f03d3d44c30"/>
        <function-ref name="getNode" scoped="" ref="0x7f03d3d44dc0"/>
        <function-ref name="evicted" scoped="" ref="0x7f03d3d43020"/>
        <function-ref name="getIndex" scoped="" ref="0x7f03d3d431b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d29af310" loc="49:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d29af310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d29af690"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d29af820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d29af9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d29afc40" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d29afc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d29ae020"/>
        <function-ref name="header" scoped="" ref="0x7f03d29ae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f03d29adab0" loc="54:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f03d29adab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d29ade30"/>
        <function-ref name="clearAll" scoped="" ref="0x7f03d29ab020"/>
        <function-ref name="get" scoped="" ref="0x7f03d29ab1b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d29ab340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d29b19b0" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d29b19b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d29b1d30"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d29b0020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d29b01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f03d29aee80" loc="53:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f03d29aee80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f03d29ad220"/>
        <function-ref name="insertNode" scoped="" ref="0x7f03d29ad3b0"/>
        <function-ref name="getNode" scoped="" ref="0x7f03d29ad540"/>
        <function-ref name="evicted" scoped="" ref="0x7f03d29ad6d0"/>
        <function-ref name="getIndex" scoped="" ref="0x7f03d29ad860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d29b0400" loc="42:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d29b0400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d29b0780"/>
        <function-ref name="header" scoped="" ref="0x7f03d29b0910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d29b0b60" loc="44:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d29b0b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d29af020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0x7f03d29ae400" loc="52:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f03d29ae400"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f03d29ae780"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f03d29ae910"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f03d29aeaa0"/>
        <function-ref name="getSender" scoped="" ref="0x7f03d29aec30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3d31950" loc="85:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3d31950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3d31cd0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3d31e60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3d30020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3d302b0" loc="86:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d302b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3d30630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0x7f03d3d2ed90" loc="93:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f03d3d2ed90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d3d2d180"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d3d2d310"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d3d2d4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d3d3ee40" loc="77:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d3d3ee40"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3d341e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3d34370"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3d34500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d3d32a10" loc="80:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d32a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3d32d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3d31020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3d311b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3d31340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3d314d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3d31660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d3d308c0" loc="87:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d308c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3d30c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3d30dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3d2f020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3d2f1b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3d2f340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3d2f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0x7f03d3d2e100" loc="92:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f03d3d2e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f03d3d2e480"/>
        <function-ref name="setRetries" scoped="" ref="0x7f03d3d2e610"/>
        <function-ref name="getRetries" scoped="" ref="0x7f03d3d2e7a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f03d3d2e930"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f03d3d2eac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d3d34790" loc="78:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3d34790"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3d34b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f03d3d2f720" loc="88:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d3d2f720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d3d2faa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d3d2fc30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d3d2fdc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f03d3d34d60" loc="79:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f03d3d34d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f03d3d32180"/>
        <function-ref name="setRetries" scoped="" ref="0x7f03d3d32310"/>
        <function-ref name="getRetries" scoped="" ref="0x7f03d3d324a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f03d3d32630"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f03d3d327c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d3d28880" loc="39:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d3d28880"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d3d28c00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3d28d90"/>
        <function-ref name="start" scoped="" ref="0x7f03d3d13020"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3d131b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3d108c0" loc="49:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3d108c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3d10c40"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3d10dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3d0f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3d0f2b0" loc="50:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3d0f2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3d0f630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d3d13440" loc="40:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d3d13440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3d137c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3d13950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3d13ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d3d123d0" loc="42:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3d123d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3d12750"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3d128e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3d12a70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3d12c00"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3d12d90"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3d11020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f03d3d11270" loc="44:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d3d11270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f03d3d115f0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f03d3d11780"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f03d3d11910"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f03d3d11aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f03d3d11d90" loc="48:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f03d3d11d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d3d10180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3d10310"/>
        <function-ref name="start" scoped="" ref="0x7f03d3d104a0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3d10630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d3d13d70" loc="41:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3d13d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3d12180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d3d0f8c0" loc="51:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d3d0f8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3d0fc40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3d0fdd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3d0d020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3d0d1b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3d0d340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3d0d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f03d298a640" loc="37:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d298a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f03d298a9c0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f03d298ab50"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f03d298ace0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f03d298ae70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d3c9fa10" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d3c9fa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d3c9fd90"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3c9e020"/>
        <function-ref name="start" scoped="" ref="0x7f03d3c9e1b0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3c9e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f03d3c9baa0" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f03d3c9baa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f03d3c9be20"/>
        <function-ref name="turnOn" scoped="" ref="0x7f03d3c9a020"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d3c9a1b0"/>
        <function-ref name="done" scoped="" ref="0x7f03d3c9a340"/>
        <function-ref name="standby" scoped="" ref="0x7f03d3c9a4d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d3c9a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d3c9e5d0" loc="40:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d3c9e5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3c9e950"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3c9eae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3c9ec70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f03d3c99270" loc="49:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3c99270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3c995f0"/>
        <function-ref name="header" scoped="" ref="0x7f03d3c99780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d3c9d020" loc="41:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3c9d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3c9d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f03d3c9a8b0" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d3c9a8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3c9ac30"/>
        <function-ref name="ready" scoped="" ref="0x7f03d3c9adc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3c99020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f03d3c9d5f0" loc="42:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f03d3c9d5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f03d3c9d970"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d3c9db00"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d3c9dc90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f03d3c9b020" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f03d3c9b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f03d3c9b3a0"/>
        <function-ref name="suspend" scoped="" ref="0x7f03d3c9b530"/>
        <function-ref name="resume" scoped="" ref="0x7f03d3c9b6c0"/>
        <function-ref name="run" scoped="" ref="0x7f03d3c9b850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d2983bf0" loc="43:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d2983bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d2981020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d29811b0"/>
        <function-ref name="start" scoped="" ref="0x7f03d2981340"/>
        <function-ref name="stop" scoped="" ref="0x7f03d29814d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f03d2981760" loc="44:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d2981760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d2981ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f03d297f670" loc="52:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f03d297f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f03d297f9f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f03d297fb80"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d297fd10"/>
        <function-ref name="done" scoped="" ref="0x7f03d297e020"/>
        <function-ref name="standby" scoped="" ref="0x7f03d297e1b0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d297e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d2981d70" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d2981d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d2980180"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2980310"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d29804a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x7f03d297b940" loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x7f03d297b940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d297bcc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d297be50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f03d297d950" loc="55:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d297d950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d297dcd0"/>
        <function-ref name="header" scoped="" ref="0x7f03d297de60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0x7f03d297a160" loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0x7f03d297a160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d297a4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d297a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d2980730" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d2980730"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d2980ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0x7f03d297b160" loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0x7f03d297b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d297b4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d297b670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f03d297d060" loc="54:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d297d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d297d3e0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d297d570"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d297d700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f03d2980d00" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f03d2980d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f03d297f0a0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d297f230"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d297f3c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f03d297e590" loc="53:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f03d297e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f03d297e910"/>
        <function-ref name="suspend" scoped="" ref="0x7f03d297eaa0"/>
        <function-ref name="resume" scoped="" ref="0x7f03d297ec30"/>
        <function-ref name="run" scoped="" ref="0x7f03d297edc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3c44310" loc="44:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3c44310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3c44690"/>
        <function-ref name="ready" scoped="" ref="0x7f03d3c44820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3c449b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3c44c40" loc="45:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3c44c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3c43020"/>
        <function-ref name="header" scoped="" ref="0x7f03d3c431b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f03d3c43400" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3c43400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f03d3c43780"/>
        <function-ref name="wait" scoped="" ref="0x7f03d3c43910"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3c43aa0"/>
        <function-ref name="isFree" scoped="" ref="0x7f03d3c43c30"/>
        <function-ref name="getNow" scoped="" ref="0x7f03d3c43dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d3c410a0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d3c410a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f03d3c41420"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f03d3c415b0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f03d3c41740"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f03d3c418d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d3c45ac0" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3c45ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3c45e40"/>
        <function-ref name="header" scoped="" ref="0x7f03d3c44020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f03d3c451d0" loc="39:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d3c451d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3c45550"/>
        <function-ref name="ready" scoped="" ref="0x7f03d3c456e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3c45870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d2942820" loc="47:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d2942820"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d2942ba0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d2942d30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d2941020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d29412b0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d29412b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d2941630"/>
        <function-ref name="header" scoped="" ref="0x7f03d29417c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f03d2941a10" loc="49:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d2941a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f03d2941d90"/>
        <function-ref name="wait" scoped="" ref="0x7f03d2940020"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d29401b0"/>
        <function-ref name="isFree" scoped="" ref="0x7f03d2940340"/>
        <function-ref name="getNow" scoped="" ref="0x7f03d29404d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f03d2940720" loc="50:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f03d2940720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f03d2940aa0"/>
        <function-ref name="rand32" scoped="" ref="0x7f03d2940c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d293e020" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d293e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f03d293e3a0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f03d293e530"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f03d293e6c0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f03d293e850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d2942020" loc="43:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d2942020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d29423a0"/>
        <function-ref name="header" scoped="" ref="0x7f03d2942530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f03d2943660" loc="42:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d2943660"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d29439e0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d2943b70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d2943d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0x7f03d293eb20" loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0x7f03d293eb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d293d020"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d293d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f03d3c5aa20" loc="46:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f03d3c5aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f03d3c5ada0"/>
        <function-ref name="rand32" scoped="" ref="0x7f03d3c59020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f03d3c58920" loc="45:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f03d3c58920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3c5a560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3c5e9a0" loc="44:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3c5e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3c5ed20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f03d3c53a20" loc="48:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f03d3c53a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f03d3c53da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f03d3c52020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f03d3c54940" loc="47:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f03d3c54940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3c53560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3c54080" loc="46:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3c54080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3c54400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3c10020" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3c10020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3c103a0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d3c10530"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3c106c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3c10950" loc="50:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3c10950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3c10cd0"/>
        <function-ref name="header" scoped="" ref="0x7f03d3c10e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f03d3c0f0e0" loc="51:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d3c0f0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f03d3c0f460"/>
        <function-ref name="wait" scoped="" ref="0x7f03d3c0f5f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3c0f780"/>
        <function-ref name="isFree" scoped="" ref="0x7f03d3c0f910"/>
        <function-ref name="getNow" scoped="" ref="0x7f03d3c0faa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0x7f03d3c0ee60" loc="54:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f03d3c0ee60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3c0d210"/>
        <function-ref name="get" scoped="" ref="0x7f03d3c0d3a0"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d3c0d530"/>
        <function-ref name="set" scoped="" ref="0x7f03d3c0d6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d3c0fd30" loc="53:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d3c0fd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f03d3c0e0e0"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f03d3c0e270"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f03d3c0e400"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f03d3c0e590"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f03d3c0e720"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f03d3c0e8b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f03d3c0ea40"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f03d3c0ebd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d3c3cd60" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3c3cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3c11180"/>
        <function-ref name="header" scoped="" ref="0x7f03d3c11310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f03d3c3c470" loc="42:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d3c3c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3c3c7f0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d3c3c980"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3c3cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f03d3c11560" loc="44:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d3c11560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d3c118e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d3c11a70"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d3c11c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d3bf4ac0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d3bf4ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d3bf4e40"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3bf3020"/>
        <function-ref name="start" scoped="" ref="0x7f03d3bf31b0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3bf3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f03d3bf0400" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f03d3bf0400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f03d3bf0780"/>
        <function-ref name="request" scoped="" ref="0x7f03d3bf0910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d3bebb00" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d3bebb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3bebe80"/>
        <function-ref name="ready" scoped="" ref="0x7f03d3bea030"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3bea1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3bea450" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3bea450"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3bea7d0"/>
        <function-ref name="header" scoped="" ref="0x7f03d3bea960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f03d3bf2470" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f03d3bf2470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f03d3bf27f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f03d3bf2980"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d3bf2b10"/>
        <function-ref name="done" scoped="" ref="0x7f03d3bf2ca0"/>
        <function-ref name="standby" scoped="" ref="0x7f03d3bf2e30"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d3bf1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d3bf0b60" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3bf0b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3bef020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3bef1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3bef340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3bef4d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3bef660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3bef7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f03d3bedbe0" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f03d3bedbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f03d3beb0a0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f03d3beb230"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d3beb3c0"/>
        <function-ref name="done" scoped="" ref="0x7f03d3beb550"/>
        <function-ref name="standby" scoped="" ref="0x7f03d3beb6e0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d3beb870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f03d3befa80" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f03d3befa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f03d3befe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d3bf1b60" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3bf1b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3bf0020"/>
        <function-ref name="header" scoped="" ref="0x7f03d3bf01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f03d3bed5d0" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f03d3bed5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3bed950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f03d3bee120" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f03d3bee120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d3bee4a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3bee630"/>
        <function-ref name="start" scoped="" ref="0x7f03d3bee7c0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3bee950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d3be9440" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d3be9440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3be97c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3be9950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3be9ae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3be9c70"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3be9e00"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3be8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f03d3bf3e80" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f03d3bf3e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3bf2220"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d3be82b0" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d3be82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f03d3be8630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f03d3beebe0" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f03d3beebe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3bed020"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3bed1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3bed340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f03d3bf1270" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d3bf1270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3bf15f0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d3bf1780"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3bf1910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f03d3beabf0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f03d3beabf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f03d3be9020"/>
        <function-ref name="request" scoped="" ref="0x7f03d3be91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f03d3bf3590" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f03d3bf3590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3bf3910"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3bf3aa0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3bf3c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f03d39d7b00" loc="50:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f03d39d7b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39d7e80"/>
        <function-ref name="get" scoped="" ref="0x7f03d39d6030"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d39d61c0"/>
        <function-ref name="set" scoped="" ref="0x7f03d39d6350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d39dbc20" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d39dbc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39da020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d39da1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d39da340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d39da4d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d39da660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d39da7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d39d8cd0" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d39d8cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39d70a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d39d7230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d39d73c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d39d7550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d39d76e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d39d7870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f03d39dd020" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d39dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d39dc5a0"/>
        <function-ref name="clear" scoped="" ref="0x7f03d39dccd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d39dde30"/>
        <function-ref name="set" scoped="" ref="0x7f03d39db460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f03d39dac00" loc="48:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d39dac00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d39d88a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f03d39e1020" loc="41:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d39e1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d39e05a0"/>
        <function-ref name="clear" scoped="" ref="0x7f03d39e0cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d39e1e30"/>
        <function-ref name="set" scoped="" ref="0x7f03d39df460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f03d28dde60" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f03d28dde60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d28dc210"/>
        <function-ref name="get" scoped="" ref="0x7f03d28dc3a0"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d28dc530"/>
        <function-ref name="set" scoped="" ref="0x7f03d28dc6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d28dd020" loc="44:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d28dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d28dd3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d28dd530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d28dd6c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d28dd850"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d28dd9e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d28ddb70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d28d9cd0" loc="54:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d28d9cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d28d80a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d28d8230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d28d83c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d28d8550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d28d86e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d28d8870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f03d28e02a0" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d28e02a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d28df800"/>
        <function-ref name="clear" scoped="" ref="0x7f03d28de020"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d28df0d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d28de750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f03d28dca70" loc="51:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d28dca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d28da6f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f03d28dac40" loc="52:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f03d28dac40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d28d98a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f03d28e4360" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d28e4360"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d28e38e0"/>
        <function-ref name="clear" scoped="" ref="0x7f03d28e2090"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d28e31b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d28e27c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f03d3b91080" loc="20:../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f03d3b91080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3b91cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f03d3b8da40" loc="46:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f03d3b8da40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3b88020"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3b8b510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d3b8a300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d3b8be10"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d3b88920"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d3b884a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3b8b990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d3b8c670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d3b8a910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d3b8cb40"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3b8b090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f03d3b87020" loc="47:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f03d3b87020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3b87c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3b90b40" loc="45:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3b90b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3b8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7f03d3b7d850" loc="29:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7f03d3b7d850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3b7c6a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d3b7b090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d3b7cb60"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d3b7b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3b84790" loc="27:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3b84790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3b84b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7f03d3b811d0" loc="28:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7f03d3b811d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3b7fb30"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3b809f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d3b7f4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3b7f020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d3b7d020"/>
        <function-ref name="start" scoped="" ref="0x7f03d3b80020"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3b80530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d3a8ad40" loc="61:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d3a8ad40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3a87670"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3a88590"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d3a87020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3a88a50"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d3a87b30"/>
        <function-ref name="start" scoped="" ref="0x7f03d3a89ba0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3a880d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3a8a530" loc="60:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3a8a530"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f03d492f020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f03d492f020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3a8a8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d3a86180" loc="62:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d3a86180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3a84020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d3a849a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d3a844e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d3a84e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x7f03d28abe20" loc="66:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d28abe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f03d28aa1c0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f03d28aa350"/>
        <function-ref name="getControlA" scoped="" ref="0x7f03d28aa4e0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f03d28aa670"/>
        <function-ref name="setControlB" scoped="" ref="0x7f03d28aa800"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f03d28aa990"/>
        <function-ref name="getControlB" scoped="" ref="0x7f03d28aab20"/>
        <function-ref name="setControlA" scoped="" ref="0x7f03d28aacb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d28b64b0" loc="61:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d28b64b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d28b4db0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d28b5da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d28b4760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d28b42a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d28b32a0"/>
        <function-ref name="start" scoped="" ref="0x7f03d28b53d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d28b58e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d28b8c20" loc="60:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d28b8c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d28b6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d28b38d0" loc="62:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d28b38d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d28b1780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d28b0150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d28b1c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d28b0610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x7f03d28a5450" loc="68:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f03d28a5450"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f03d28a57d0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f03d28a5960"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f03d28a5af0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f03d28a5c80"/>
        <function-ref name="countBusy" scoped="" ref="0x7f03d28a5e10"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f03d28a4020"/>
        <function-ref name="getAssr" scoped="" ref="0x7f03d28a41b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f03d28a4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x7f03d28a90a0" loc="67:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f03d28a90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d28a6a10"/>
        <function-ref name="fired" scoped="" ref="0x7f03d28a86c0"/>
        <function-ref name="get" scoped="" ref="0x7f03d28a9cd0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d28a8b80"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d28a5020"/>
        <function-ref name="set" scoped="" ref="0x7f03d28a81b0"/>
        <function-ref name="start" scoped="" ref="0x7f03d28a6090"/>
        <function-ref name="stop" scoped="" ref="0x7f03d28a6550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f03d28b0bc0" loc="65:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d28b0bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d28ab020"/>
        <function-ref name="test" scoped="" ref="0x7f03d28ad590"/>
        <function-ref name="get" scoped="" ref="0x7f03d28af820"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d28ab4e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d28ab9f0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d28ae720"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d28ae260"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d28ada50"/>
        <function-ref name="set" scoped="" ref="0x7f03d28afce0"/>
        <function-ref name="start" scoped="" ref="0x7f03d28aebe0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d28ad0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f03d3afe2b0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d3afe2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f03d3afe630"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f03d3afe7c0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f03d3afe950"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f03d3afeae0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f03d3afec70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f03d3afee00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f03d3afd020"/>
        <function-ref name="setControlA" scoped="" ref="0x7f03d3afd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f03d3af9b30" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f03d3af9b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f03d3af8020"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f03d3af81b0"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f03d3af8340"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f03d3af84d0"/>
        <function-ref name="countBusy" scoped="" ref="0x7f03d3af8660"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f03d3af87f0"/>
        <function-ref name="getAssr" scoped="" ref="0x7f03d3af8980"/>
        <function-ref name="setAssr" scoped="" ref="0x7f03d3af8b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f03d3afd6b0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f03d3afd6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d3af9110"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3afcda0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3afc3d0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d3afa2a0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d3af95d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3afc890"/>
        <function-ref name="start" scoped="" ref="0x7f03d3afa760"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3afac20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d3b06e20" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d3b06e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d3aff350"/>
        <function-ref name="test" scoped="" ref="0x7f03d3b009a0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3b03ac0"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d3aff810"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d3affd20"/>
        <function-ref name="reset" scoped="" ref="0x7f03d3b029f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d3b02530"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d3b00e60"/>
        <function-ref name="set" scoped="" ref="0x7f03d3b02020"/>
        <function-ref name="start" scoped="" ref="0x7f03d3b00020"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3b004e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f03d3aee570" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d3aee570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f03d3aee8f0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f03d3aeea80"/>
        <function-ref name="getControlA" scoped="" ref="0x7f03d3aeec10"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f03d3aeeda0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f03d3aed020"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f03d3aed1b0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f03d3aed340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f03d3aed4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f03d3ae9cb0" loc="85:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f03d3ae9cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f03d3ae80a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f03d3ae8460" loc="86:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f03d3ae8460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f03d3ae87e0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f03d3ae8970"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f03d3ae8b00"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f03d3ae8c90"/>
        <function-ref name="countBusy" scoped="" ref="0x7f03d3ae8e20"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f03d3ae7020"/>
        <function-ref name="getAssr" scoped="" ref="0x7f03d3ae71b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f03d3ae7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f03d3aed9d0" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f03d3aed9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d3ae9350"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3aea020"/>
        <function-ref name="get" scoped="" ref="0x7f03d3aeb630"/>
        <function-ref name="reset" scoped="" ref="0x7f03d3aea4e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d3ae9810"/>
        <function-ref name="set" scoped="" ref="0x7f03d3aebaf0"/>
        <function-ref name="start" scoped="" ref="0x7f03d3aea9a0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3aeae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d3af3060" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d3af3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d3aef4e0"/>
        <function-ref name="test" scoped="" ref="0x7f03d3af0a10"/>
        <function-ref name="get" scoped="" ref="0x7f03d3af3c90"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d3aef9a0"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d3aee020"/>
        <function-ref name="reset" scoped="" ref="0x7f03d3af2b80"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d3af26c0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d3aef020"/>
        <function-ref name="set" scoped="" ref="0x7f03d3af21b0"/>
        <function-ref name="start" scoped="" ref="0x7f03d3af0090"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3af0550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f03d3a52490" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7f03d3a52490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d3a52810"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d3a529a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f03d3a551d0" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d3a551d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3a53b30"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3a549f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d3a534e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3a53020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d3a52020"/>
        <function-ref name="start" scoped="" ref="0x7f03d3a54020"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3a54530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d3a5bd60" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d3a5bd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3a57220"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3a597d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d3a58590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d3a58110"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d3a57b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d3a576a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3a59c50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d3a5a980"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d3a58ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d3a5ae50"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3a59350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f03d3a01a00" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7f03d3a01a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d3a01d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d3a00020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f03d3a07640" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7f03d3a07640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3a03c40"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3a041e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d3a03020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d3a04ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d3a01590"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d3a01110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3a04660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d3a05390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d3a03630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d3a05860"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3a05d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d3a0c150" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d3a0c150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3a08700"/>
        <function-ref name="fired" scoped="" ref="0x7f03d3a0bc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d3a0aa50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d3a0a5b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d3a07090"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d3a08ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3a0a110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d3a0cd60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d3a080d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d3a0b2a0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3a0b790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f03d39fe790" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f03d39fe790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d39fd3f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f03d39fda60" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d39fda60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d39f3890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d39f2260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d39f3d50"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d39f2720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f03d39ea2e0" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f03d39ea2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d39e7870"/>
        <function-ref name="fired" scoped="" ref="0x7f03d39e9e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d39e8c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d39e8780"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d39e51e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d39e7cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d39e8300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d39e9020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d39e7260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d39e94f0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d39e99c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d39d1590" loc="43:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d39d1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39d1910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d39d1aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d39d1c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d39d1dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d39b1020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d39b11b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d39b14a0" loc="48:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d39b14a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39b1820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d39b19b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d39b1b40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d39b1cd0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d39b1e60"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d39b0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x7f03d39d29b0" loc="42:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x7f03d39d29b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39d2d50"/>
        <function-ref name="get" scoped="" ref="0x7f03d39d1020"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d39d11b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d39d1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d39ae0e0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d39ae0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d39ae460"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d39ae5f0"/>
        <function-ref name="start" scoped="" ref="0x7f03d39ae780"/>
        <function-ref name="stop" scoped="" ref="0x7f03d39ae910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f03d39aab60" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f03d39aab60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f03d39a9020"/>
        <function-ref name="request" scoped="" ref="0x7f03d39a91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d39a5440" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d39a5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d39a57c0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d39a5950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d39a5ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d39a5d70" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d39a5d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d39a3180"/>
        <function-ref name="header" scoped="" ref="0x7f03d39a3310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f03d39acb60" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f03d39acb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f03d39ab020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f03d39ab1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d39ab340"/>
        <function-ref name="done" scoped="" ref="0x7f03d39ab4d0"/>
        <function-ref name="standby" scoped="" ref="0x7f03d39ab660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d39ab7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d39a9400" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d39a9400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39a9780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d39a9910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d39a9aa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d39a9c30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d39a9dc0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d39a8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f03d39a6410" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f03d39a6410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f03d39a6890"/>
        <function-ref name="turnOn" scoped="" ref="0x7f03d39a6a20"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d39a6bb0"/>
        <function-ref name="done" scoped="" ref="0x7f03d39a6d40"/>
        <function-ref name="standby" scoped="" ref="0x7f03d39a5020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d39a51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f03d39a82b0" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f03d39a82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f03d39a8630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d39aa400" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d39aa400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d39aa780"/>
        <function-ref name="header" scoped="" ref="0x7f03d39aa910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f03d39a7d70" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f03d39a7d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d39a6180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f03d39a8920" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f03d39a8920"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d39a8ca0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d39a8e30"/>
        <function-ref name="start" scoped="" ref="0x7f03d39a7020"/>
        <function-ref name="stop" scoped="" ref="0x7f03d39a71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d39a3d40" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d39a3d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39a20e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d39a2270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d39a2400"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d39a2590"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d39a2720"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d39a28b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f03d39ac590" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f03d39ac590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d39ac910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d39a2b40" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d39a2b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f03d39a1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f03d39a7440" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f03d39a7440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d39a77c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d39a7950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d39a7ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f03d39aba40" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d39aba40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d39abdc0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d39aa020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d39aa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f03d39a35a0" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f03d39a35a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f03d39a3920"/>
        <function-ref name="request" scoped="" ref="0x7f03d39a3ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f03d39aeb60" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f03d39aeb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d39ac020"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d39ac1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d39ac340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f03d39995c0" loc="45:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f03d39995c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f03d3999940"/>
        <function-ref name="request" scoped="" ref="0x7f03d3999ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f03d39943b0" loc="49:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d39943b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3993ac0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3993570"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d3993020"/>
        <function-ref name="set" scoped="" ref="0x7f03d3991090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f03d397fca0" loc="64:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f03d397fca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d397e0a0"/>
        <function-ref name="get" scoped="" ref="0x7f03d397e230"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d397e3c0"/>
        <function-ref name="set" scoped="" ref="0x7f03d397e550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f03d39832e0" loc="61:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f03d39832e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d3982840"/>
        <function-ref name="clear" scoped="" ref="0x7f03d3980020"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d3982110"/>
        <function-ref name="set" scoped="" ref="0x7f03d3980750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f03d399d600" loc="42:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f03d399d600"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f03d399d980"/>
        <function-ref name="turnOn" scoped="" ref="0x7f03d399db10"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d399dca0"/>
        <function-ref name="done" scoped="" ref="0x7f03d399de30"/>
        <function-ref name="standby" scoped="" ref="0x7f03d399a020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d399a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f03d397d470" loc="66:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d397d470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f03d397d7f0"/>
        <function-ref name="wait" scoped="" ref="0x7f03d397d980"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d397db10"/>
        <function-ref name="isFree" scoped="" ref="0x7f03d397dca0"/>
        <function-ref name="getNow" scoped="" ref="0x7f03d397de30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f03d3998e80" loc="48:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d3998e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39965e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3996090"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d3997ad0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3996b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d3999d90" loc="46:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3999d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3998180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3998310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d39984a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3998630"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d39987c0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3998950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d39841f0" loc="60:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d39841f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3984670"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3984800"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3984990"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f03d3984b20"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f03d3984cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d399add0" loc="44:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d399add0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3999180"/>
        <function-ref name="header" scoped="" ref="0x7f03d3999310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d3989dd0" loc="55:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d3989dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f03d4788180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d39856e0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d39876b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d3985090"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3987b70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d3985ba0"/>
        <function-ref name="start" scoped="" ref="0x7f03d3988ca0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d39871f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f03d3991940" loc="50:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d3991940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d398f090"/>
        <function-ref name="get" scoped="" ref="0x7f03d3990af0"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d39905a0"/>
        <function-ref name="set" scoped="" ref="0x7f03d398f5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f03d398aa40" loc="54:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d398aa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d39896b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f03d399a460" loc="43:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d399a460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d399a7e0"/>
        <function-ref name="ready" scoped="" ref="0x7f03d399a970"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d399ab00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f03d398fe70" loc="51:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d398fe70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d398c5e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d398c090"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d398dad0"/>
        <function-ref name="set" scoped="" ref="0x7f03d398cb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f03d397e8d0" loc="65:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f03d397e8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d397ec50"/>
        <function-ref name="get" scoped="" ref="0x7f03d397ede0"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d397d020"/>
        <function-ref name="set" scoped="" ref="0x7f03d397d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f03d397f110" loc="63:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f03d397f110"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d397f490"/>
        <function-ref name="get" scoped="" ref="0x7f03d397f620"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d397f7b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d397f940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f03d398a1e0" loc="52:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d398a1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f03d398a560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f03d397c110" loc="67:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f03d397c110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f03d397c490"/>
        <function-ref name="suspend" scoped="" ref="0x7f03d397c620"/>
        <function-ref name="resume" scoped="" ref="0x7f03d397c7b0"/>
        <function-ref name="run" scoped="" ref="0x7f03d397c940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f03d3973c40" loc="52:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f03d3973c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f03d3972020"/>
        <function-ref name="request" scoped="" ref="0x7f03d39721b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f03d3952430" loc="74:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f03d3952430"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f03d39583d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f03d396ea40" loc="56:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f03d396ea40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d396b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d396dc00"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d396d6b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d396b700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f03d39506a0" loc="80:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f03d39506a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3950a20"/>
        <function-ref name="get" scoped="" ref="0x7f03d3950bb0"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d3950d40"/>
        <function-ref name="set" scoped="" ref="0x7f03d394f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f03d3975600" loc="47:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f03d3975600"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f03d492f3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f03d492f3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3975980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f03d394d200" loc="83:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f03d394d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d394c970"/>
        <function-ref name="clear" scoped="" ref="0x7f03d394b0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d394c240"/>
        <function-ref name="set" scoped="" ref="0x7f03d394b800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f03d395f020" loc="70:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f03d395f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d395f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d395f530"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d395f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d395f850"/>
        <function-ref name="get" scoped="" ref="0x7f03d395f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d395fb70"/>
        <function-ref name="set" scoped="" ref="0x7f03d395fd00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d395a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f03d394ab70" loc="86:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f03d394ab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f03d3948020"/>
        <function-ref name="wait" scoped="" ref="0x7f03d39481b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3948340"/>
        <function-ref name="isFree" scoped="" ref="0x7f03d39484d0"/>
        <function-ref name="getNow" scoped="" ref="0x7f03d3948660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f03d3975c40" loc="49:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f03d3975c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f03d3974020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f03d39741b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f03d3974340"/>
        <function-ref name="done" scoped="" ref="0x7f03d39744d0"/>
        <function-ref name="standby" scoped="" ref="0x7f03d3974660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f03d39747f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7f03d39589d0" loc="75:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f03d39589d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3955630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f03d3971550" loc="55:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f03d3971550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3970c50"/>
        <function-ref name="get" scoped="" ref="0x7f03d3970700"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d39701b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d396e1f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f03d3972470" loc="53:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f03d3972470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d39727f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3972980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3972b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3972ca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d3972e30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3971020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0x7f03d395bdd0" loc="69:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f03d395bdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d3960180"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d3960310"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d39604a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d3960630"/>
        <function-ref name="get" scoped="" ref="0x7f03d39607c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d3960950"/>
        <function-ref name="set" scoped="" ref="0x7f03d3960ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d3960c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f03d3955b50" loc="77:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f03d3955b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3951020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f03d39511b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f03d3951340"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f03d39514d0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f03d3951660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f03d3973480" loc="51:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f03d3973480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3973800"/>
        <function-ref name="header" scoped="" ref="0x7f03d3973990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0x7f03d38b9e40" loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0x7f03d38b9e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d38b81e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d38b8370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f03d396a020" loc="57:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d396a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3969740"/>
        <function-ref name="get" scoped="" ref="0x7f03d39691f0"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d396ac50"/>
        <function-ref name="set" scoped="" ref="0x7f03d3969c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f03d3976a60" loc="46:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f03d3976a60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f03d492f3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f03d492f3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3976de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f03d3962380" loc="65:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f03d3962380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d3962700"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d3962890"/>
        <function-ref name="request" scoped="" ref="0x7f03d3962a20"/>
        <function-ref name="granted" scoped="" ref="0x7f03d3962bb0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d3962d40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0x7f03d3963020" loc="64:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f03d3963020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d39634a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d3963630"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d39637c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d3963950"/>
        <function-ref name="get" scoped="" ref="0x7f03d3963ae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d3963c70"/>
        <function-ref name="set" scoped="" ref="0x7f03d3963e00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d3962020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f03d3967560" loc="58:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f03d3967560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3966c90"/>
        <function-ref name="get" scoped="" ref="0x7f03d3966740"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d39661f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3964230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f03d3974aa0" loc="50:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f03d3974aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3974e20"/>
        <function-ref name="ready" scoped="" ref="0x7f03d3973020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d39731b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0x7f03d3956b30" loc="72:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f03d3956b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f03d3959020"/>
        <function-ref name="disable" scoped="" ref="0x7f03d39591b0"/>
        <function-ref name="captured" scoped="" ref="0x7f03d3959340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f03d39594d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0x7f03d395b270" loc="67:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d395b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f03d395b5f0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f03d395b780"/>
        <function-ref name="splitRead" scoped="" ref="0x7f03d395b910"/>
        <function-ref name="write" scoped="" ref="0x7f03d395baa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f03d394f3a0" loc="81:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f03d394f3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d394f720"/>
        <function-ref name="get" scoped="" ref="0x7f03d394f8b0"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d394fa40"/>
        <function-ref name="set" scoped="" ref="0x7f03d394fbd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f03d3951a10" loc="79:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f03d3951a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3951d90"/>
        <function-ref name="get" scoped="" ref="0x7f03d3950020"/>
        <function-ref name="setValue" scoped="" ref="0x7f03d39501b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3950340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f03d39648b0" loc="59:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f03d39648b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f03d3964c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f03d394a080" loc="85:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f03d394a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f03d394a400"/>
        <function-ref name="suspend" scoped="" ref="0x7f03d394a590"/>
        <function-ref name="resume" scoped="" ref="0x7f03d394a720"/>
        <function-ref name="run" scoped="" ref="0x7f03d394a8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f03d38737f0" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f03d38737f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d3873b70"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d3873d00"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d3872020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d38721b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3872340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d38724d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3872660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d38727f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0x7f03d38744e0" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f03d38744e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d3874860"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d38749f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d3874b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d3874d10"/>
        <function-ref name="get" scoped="" ref="0x7f03d3873020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d38731b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3873340"/>
        <function-ref name="clr" scoped="" ref="0x7f03d38734d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d3871ac0" loc="49:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d3871ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d386d390"/>
        <function-ref name="fired" scoped="" ref="0x7f03d386e360"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d386ece0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d386e820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d386d850"/>
        <function-ref name="start" scoped="" ref="0x7f03d3870970"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3870e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0x7f03d3876b50" loc="42:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f03d3876b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d3875020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d38751b0"/>
        <function-ref name="request" scoped="" ref="0x7f03d3875340"/>
        <function-ref name="granted" scoped="" ref="0x7f03d38754d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d3875660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0x7f03d3879940" loc="41:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f03d3879940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d3879cc0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d3879e50"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d3876020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d38761b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3876340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d38764d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3876660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d38767f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f03d3872b10" loc="48:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f03d3872b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f03d3871020"/>
        <function-ref name="disable" scoped="" ref="0x7f03d38711b0"/>
        <function-ref name="captured" scoped="" ref="0x7f03d3871340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f03d38714d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f03d3875920" loc="43:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d3875920"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f03d3875ca0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f03d3875e30"/>
        <function-ref name="splitRead" scoped="" ref="0x7f03d3874020"/>
        <function-ref name="write" scoped="" ref="0x7f03d38741b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f03d386c020" loc="50:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d386c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d386cc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0x7f03d3863a20" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0x7f03d3863a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d3863da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d3861020"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d38611b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d3861340"/>
        <function-ref name="get" scoped="" ref="0x7f03d38614d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d3861660"/>
        <function-ref name="set" scoped="" ref="0x7f03d38617f0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d3861980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0x7f03d3866020" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f03d3866020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f03d38634e0"/>
        <function-ref name="test" scoped="" ref="0x7f03d3864a10"/>
        <function-ref name="get" scoped="" ref="0x7f03d3866c50"/>
        <function-ref name="captured" scoped="" ref="0x7f03d3865660"/>
        <function-ref name="reset" scoped="" ref="0x7f03d3865b70"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d3863020"/>
        <function-ref name="set" scoped="" ref="0x7f03d3865150"/>
        <function-ref name="start" scoped="" ref="0x7f03d3864090"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3864550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0x7f03d3861cc0" loc="47:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0x7f03d3861cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d38600a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d3860230"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d38603c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d3860550"/>
        <function-ref name="get" scoped="" ref="0x7f03d38606e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d3860870"/>
        <function-ref name="set" scoped="" ref="0x7f03d3860a00"/>
        <function-ref name="clr" scoped="" ref="0x7f03d3860b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f03d3868680" loc="40:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f03d3868680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3868a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f03d386b9c0" loc="39:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f03d386b9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f03d386bd40"/>
        <function-ref name="disable" scoped="" ref="0x7f03d3868020"/>
        <function-ref name="captured" scoped="" ref="0x7f03d38681b0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f03d3868340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f03d3846e60" loc="84:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f03d3846e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d384e210"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d384e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f03d384fc20" loc="82:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f03d384fc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f03d3851020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3854630" loc="81:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3854630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d38549b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f03d3851320" loc="83:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d3851320"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f03d38516a0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f03d3851830"/>
        <function-ref name="splitRead" scoped="" ref="0x7f03d38519c0"/>
        <function-ref name="write" scoped="" ref="0x7f03d3851b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f03d384ebd0" loc="85:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f03d384ebd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d384d020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d384d1b0"/>
        <function-ref name="request" scoped="" ref="0x7f03d384d340"/>
        <function-ref name="granted" scoped="" ref="0x7f03d384d4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d384d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f03d3840050" loc="95:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d3840050"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f03d38403d0"/>
        <function-ref name="configure" scoped="" ref="0x7f03d3840560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x7f03d3803190" loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x7f03d3803190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d3803510"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d38036a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f03d38422d0" loc="94:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f03d38422d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3842650"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d38427e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f03d3843020" loc="92:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f03d3843020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f03d38433a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3844900" loc="91:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3844900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3844c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x7f03d3826a40" loc="98:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x7f03d3826a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f03d3826dc0"/>
        <function-ref name="sleep" scoped="" ref="0x7f03d3824340"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f03d383f1b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f03d38244d0"/>
        <function-ref name="initMaster" scoped="" ref="0x7f03d383f4d0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f03d383f660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f03d383f7f0"/>
        <function-ref name="read" scoped="" ref="0x7f03d383f980"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f03d383fb10"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f03d383fca0"/>
        <function-ref name="setClock" scoped="" ref="0x7f03d383fe30"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f03d383e020"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f03d383e1b0"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f03d383e440"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f03d383e5d0"/>
        <function-ref name="write" scoped="" ref="0x7f03d383e760"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f03d383e8f0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f03d383ea80"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f03d383ec10"/>
        <function-ref name="getClock" scoped="" ref="0x7f03d383eda0"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f03d3824020"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f03d383f020"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f03d383f340"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f03d38241b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f03d3843660" loc="93:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f03d3843660"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f03d38439e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f03d3843b70"/>
        <function-ref name="splitRead" scoped="" ref="0x7f03d3843d00"/>
        <function-ref name="write" scoped="" ref="0x7f03d3842020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f03d38247b0" loc="99:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f03d38247b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f03d3824b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x7f03d37e5c70" loc="76:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x7f03d37e5c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f03d37e1020"/>
        <function-ref name="sleep" scoped="" ref="0x7f03d37df4d0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f03d37e1340"/>
        <function-ref name="dataReady" scoped="" ref="0x7f03d37df660"/>
        <function-ref name="initMaster" scoped="" ref="0x7f03d37e1660"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f03d37e17f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f03d37e1980"/>
        <function-ref name="read" scoped="" ref="0x7f03d37e1b10"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f03d37e1ca0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f03d37e1e30"/>
        <function-ref name="setClock" scoped="" ref="0x7f03d37e0020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f03d37e01b0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f03d37e0340"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f03d37e05d0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f03d37e0760"/>
        <function-ref name="write" scoped="" ref="0x7f03d37e08f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f03d37e0a80"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f03d37e0c10"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f03d37e0da0"/>
        <function-ref name="getClock" scoped="" ref="0x7f03d37df020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f03d37df1b0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f03d37e11b0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f03d37e14d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f03d37df340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x7f03d37d5b10" loc="81:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x7f03d37d5b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d37d4020"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d37d41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d37d4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d37d44d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d37d4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d37d47f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d37d4980"/>
        <function-ref name="clr" scoped="" ref="0x7f03d37d4b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7f03d37d7650" loc="79:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7f03d37d7650"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d37d79d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d37d7b60"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d37d7cf0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d37d7e80"/>
        <function-ref name="get" scoped="" ref="0x7f03d37d6030"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d37d61c0"/>
        <function-ref name="set" scoped="" ref="0x7f03d37d6350"/>
        <function-ref name="clr" scoped="" ref="0x7f03d37d64e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x7f03d37d8390" loc="78:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x7f03d37d8390"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d37d8710"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d37d88a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d37d8a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d37d8bc0"/>
        <function-ref name="get" scoped="" ref="0x7f03d37d8d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d37d7020"/>
        <function-ref name="set" scoped="" ref="0x7f03d37d71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f03d37d7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f03d37d9990" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f03d37d9990"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d37d9d10"/>
        <function-ref name="stop" scoped="" ref="0x7f03d37d8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x7f03d37d4e50" loc="82:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x7f03d37d4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f03d37d3210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x7f03d37deb40" loc="74:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x7f03d37deb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f03d37db020"/>
        <function-ref name="sleep" scoped="" ref="0x7f03d37d94d0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f03d37db340"/>
        <function-ref name="dataReady" scoped="" ref="0x7f03d37d9660"/>
        <function-ref name="initMaster" scoped="" ref="0x7f03d37db660"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f03d37db7f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f03d37db980"/>
        <function-ref name="read" scoped="" ref="0x7f03d37dbb10"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f03d37dbca0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f03d37dbe30"/>
        <function-ref name="setClock" scoped="" ref="0x7f03d37da020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f03d37da1b0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f03d37da340"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f03d37da5d0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f03d37da760"/>
        <function-ref name="write" scoped="" ref="0x7f03d37da8f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f03d37daa80"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f03d37dac10"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f03d37dada0"/>
        <function-ref name="getClock" scoped="" ref="0x7f03d37d9020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f03d37d91b0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f03d37db1b0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f03d37db4d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f03d37d9340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x7f03d37d6800" loc="80:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x7f03d37d6800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f03d37d6b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f03d37d6d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f03d37d5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f03d37d51b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d37d5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f03d37d54d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d37d5660"/>
        <function-ref name="clr" scoped="" ref="0x7f03d37d57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f03d3788020" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f03d3788020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f03d37883c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f03d3788550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f03d37870d0" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d37870d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f03d3787470"/>
        <function-ref name="configure" scoped="" ref="0x7f03d3787600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f03d3789210" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f03d3789210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d37895b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d3789740"/>
        <function-ref name="request" scoped="" ref="0x7f03d37898d0"/>
        <function-ref name="granted" scoped="" ref="0x7f03d3789a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d3789bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f03d37887a0" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f03d37887a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f03d3788b20"/>
        <function-ref name="userId" scoped="" ref="0x7f03d3788cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d2818420" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d2818420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d28187a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f03d2818a30" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f03d2818a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f03d2818db0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f03d2817020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f03d28171b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d2817340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f03d2815850" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f03d2815850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f03d2815bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f03d2815d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f03d2814910" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f03d2814910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f03d2814cb0"/>
        <function-ref name="configure" scoped="" ref="0x7f03d2814e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f03d2813120" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f03d2813120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f03d28134a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f03d2813630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f03d28137c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d2813950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f03d28169d0" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f03d28169d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f03d2816d70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f03d2815020"/>
        <function-ref name="request" scoped="" ref="0x7f03d28151b0"/>
        <function-ref name="granted" scoped="" ref="0x7f03d2815340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f03d28154d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f03d2814020" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f03d2814020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f03d28143a0"/>
        <function-ref name="userId" scoped="" ref="0x7f03d2814530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f03d2813c20" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f03d2813c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d2811020"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d28111b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d377fc60" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d377fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d377b4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d377c4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d377ce60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d377c9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d377b9a0"/>
        <function-ref name="start" scoped="" ref="0x7f03d377eac0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d377c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f03d27ec4c0" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f03d27ec4c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f03d4930c00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f03d4930c00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TOne" ref="0x7f03d481f9a0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d27eadb0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d27ebda0"/>
        <function-ref name="startAt" scoped="" ref="0x7f03d27ea760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d27ea2a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f03d27e92a0"/>
        <function-ref name="start" scoped="" ref="0x7f03d27eb3d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d27eb8e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7f03d27e4c10" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f03d27e4c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d27e05d0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d27e12a0"/>
        <function-ref name="get" scoped="" ref="0x7f03d27e28a0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d27e1760"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d27e0a90"/>
        <function-ref name="set" scoped="" ref="0x7f03d27e2d60"/>
        <function-ref name="start" scoped="" ref="0x7f03d27e1c20"/>
        <function-ref name="stop" scoped="" ref="0x7f03d27e0110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7f03d27e97f0" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f03d27e97f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d27e5cd0"/>
        <function-ref name="test" scoped="" ref="0x7f03d27e5350"/>
        <function-ref name="get" scoped="" ref="0x7f03d27e74c0"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d27e41b0"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d27e46c0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d27e64e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d27e6020"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d27e5810"/>
        <function-ref name="set" scoped="" ref="0x7f03d27e7980"/>
        <function-ref name="start" scoped="" ref="0x7f03d27e69a0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d27e6e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f03d3779880" loc="39:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f03d3779880"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3776500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f03d3770540" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f03d3770540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d376e3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d376ed50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d376e890"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d376d260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d3772180" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d3772180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3771020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d37719a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d37714e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d3771e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f03d376a020" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f03d376a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d376ac50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f03d3769300" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d3769300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3768150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d3768ad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d3768610"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d3767020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f03d3761990" loc="36:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f03d3761990"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f03d375d7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d36fc140" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TdmaMacC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d36fc140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d36f9630"/>
        <function-ref name="fired" scoped="" ref="0x7f03d36fbb70"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d36fa920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d36fa4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d36f7020"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d36f9ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d36fa020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d36fcd30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d36f9020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d36fb220"/>
        <function-ref name="stop" scoped="" ref="0x7f03d36fb6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d36f6b00" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TdmaMacC.FaultClearTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d36f6b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d36f1110"/>
        <function-ref name="fired" scoped="" ref="0x7f03d36f45b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d36f34a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d36f3020"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d36f1a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d36f1590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d36f4a30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d36f5750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d36f3ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d36f5c20"/>
        <function-ref name="stop" scoped="" ref="0x7f03d36f4130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PCQ" ref="0x7f03d36362f0" loc="8:PrioCritQueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCQ" scoped="" ref="0x7f03d36362f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f03d3635920"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f03d3631650"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d3631d50"/>
        <function-ref name="clear" scoped="" ref="0x7f03d362fad0"/>
        <function-ref name="sizeLO_Q2" scoped="" ref="0x7f03d362eda0"/>
        <function-ref name="headPrio" scoped="" ref="0x7f03d36323a0"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f03d3635da0"/>
        <function-ref name="full" scoped="" ref="0x7f03d36354a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d36342a0"/>
        <function-ref name="clearLO" scoped="" ref="0x7f03d362f550"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f03d362e020"/>
        <function-ref name="sizeLO_Q3" scoped="" ref="0x7f03d362d260"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d3632aa0"/>
        <function-ref name="sizeLO" scoped="" ref="0x7f03d362e4a0"/>
        <function-ref name="empty" scoped="" ref="0x7f03d3635020"/>
        <function-ref name="headHI" scoped="" ref="0x7f03d3634e60"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f03d36311d0"/>
        <function-ref name="sizeLO_Q1" scoped="" ref="0x7f03d362e920"/>
        <function-ref name="head" scoped="" ref="0x7f03d3634720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PrioCritQueue" ref="0x7f03d27b3770" loc="4:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PrioCritQueue" scoped="" ref="0x7f03d27b3770"/></type-interface>
      <instance>
        <interfacedef-ref qname="PrioCritQueue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x7f03d27b2c90"/>
        <function-ref name="dequeuePrio" scoped="" ref="0x7f03d27ae9d0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d27ac110"/>
        <function-ref name="clear" scoped="" ref="0x7f03d27ace60"/>
        <function-ref name="sizeLO_Q2" scoped="" ref="0x7f03d27aa0d0"/>
        <function-ref name="headPrio" scoped="" ref="0x7f03d27af770"/>
        <function-ref name="sizePrio" scoped="" ref="0x7f03d27b1170"/>
        <function-ref name="full" scoped="" ref="0x7f03d27b2810"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d27b1640"/>
        <function-ref name="clearLO" scoped="" ref="0x7f03d27ac8e0"/>
        <function-ref name="sizeHI" scoped="" ref="0x7f03d27ab310"/>
        <function-ref name="sizeLO_Q3" scoped="" ref="0x7f03d27aa550"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d27afe70"/>
        <function-ref name="sizeLO" scoped="" ref="0x7f03d27ab790"/>
        <function-ref name="empty" scoped="" ref="0x7f03d27b2390"/>
        <function-ref name="headHI" scoped="" ref="0x7f03d27af260"/>
        <function-ref name="dequeueHI" scoped="" ref="0x7f03d27ae550"/>
        <function-ref name="sizeLO_Q1" scoped="" ref="0x7f03d27abc10"/>
        <function-ref name="head" scoped="" ref="0x7f03d27b1ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio3Queue" ref="0x7f03d279f0f0" loc="9:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio3Queue" scoped="" ref="0x7f03d279f0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f03d279d020"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d279dd80"/>
        <function-ref name="element" scoped="" ref="0x7f03d279b440"/>
        <function-ref name="full" scoped="" ref="0x7f03d279e1e0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d279eae0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d279d6d0"/>
        <function-ref name="empty" scoped="" ref="0x7f03d279fce0"/>
        <function-ref name="size" scoped="" ref="0x7f03d279e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio1Queue" ref="0x7f03d27aab00" loc="7:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio1Queue" scoped="" ref="0x7f03d27aab00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f03d27a7990"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d27a6740"/>
        <function-ref name="element" scoped="" ref="0x7f03d27a6db0"/>
        <function-ref name="full" scoped="" ref="0x7f03d27a8bd0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d27a7510"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d27a6090"/>
        <function-ref name="empty" scoped="" ref="0x7f03d27a8750"/>
        <function-ref name="size" scoped="" ref="0x7f03d27a7090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="prio2Queue" ref="0x7f03d27a45e0" loc="8:PrioCritQueueP.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.QP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="prio2Queue" scoped="" ref="0x7f03d27a45e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f03d27a24a0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d27a0260"/>
        <function-ref name="element" scoped="" ref="0x7f03d27a08d0"/>
        <function-ref name="full" scoped="" ref="0x7f03d27a3680"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d27a2020"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d27a2b50"/>
        <function-ref name="empty" scoped="" ref="0x7f03d27a3200"/>
        <function-ref name="size" scoped="" ref="0x7f03d27a3b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f03d2798720" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f03d2798720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f03d27955f0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d27943a0"/>
        <function-ref name="element" scoped="" ref="0x7f03d2794a10"/>
        <function-ref name="full" scoped="" ref="0x7f03d2797810"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d2795170"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d2795ca0"/>
        <function-ref name="empty" scoped="" ref="0x7f03d2797390"/>
        <function-ref name="size" scoped="" ref="0x7f03d2797c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f03d2792a00" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f03d2792a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f03d278f920"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d278e6d0"/>
        <function-ref name="element" scoped="" ref="0x7f03d278ed40"/>
        <function-ref name="full" scoped="" ref="0x7f03d2790af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d278f4a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d278e020"/>
        <function-ref name="empty" scoped="" ref="0x7f03d2790670"/>
        <function-ref name="size" scoped="" ref="0x7f03d278f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f03d278bd60" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="TdmaMacC.PrioCritQueueC.Q3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f03d278bd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:28" alignment="I:1"><struct-ref name="__mccpacket" ref="0x7f03d46ee4c0"/>
              <typename><typedef-ref name="mccpacket" ref="0x7f03d46eba10"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f03d2789c00"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d27879a0"/>
        <function-ref name="element" scoped="" ref="0x7f03d2786090"/>
        <function-ref name="full" scoped="" ref="0x7f03d278ae00"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d2789780"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d27872f0"/>
        <function-ref name="empty" scoped="" ref="0x7f03d278a980"/>
        <function-ref name="size" scoped="" ref="0x7f03d2789300"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f03d3622b30" loc="41:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f03d3622b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f03d3621020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GlobalTime" ref="0x7f03d3620300" loc="44:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f03d3620300"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f03d361f020"/>
        <function-ref name="global2Local" scoped="" ref="0x7f03d361e020"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f03d361f4e0"/>
        <function-ref name="local2Global" scoped="" ref="0x7f03d361fa30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncInfo" ref="0x7f03d361e580" loc="47:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f03d361e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f03d361e900"/>
        <function-ref name="getRootID" scoped="" ref="0x7f03d361ea90"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f03d361ec20"/>
        <function-ref name="getOffset" scoped="" ref="0x7f03d361edb0"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f03d361c020"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f03d361c1b0"/>
        <function-ref name="getSkew" scoped="" ref="0x7f03d361c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d36212e0" loc="42:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d36212e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3621660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncMode" ref="0x7f03d361c650" loc="48:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7f03d361c650"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d361c9d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f03d361cb60"/>
        <function-ref name="setMode" scoped="" ref="0x7f03d361ccf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncNotify" ref="0x7f03d3618490" loc="49:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f03d3618490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncNotify"/>
      </instance>
      <interface-functions>
        <function-ref name="msg_received" scoped="" ref="0x7f03d3618810"/>
        <function-ref name="msg_sent" scoped="" ref="0x7f03d36189a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f03d3621960" loc="43:../../tos/lib/ftsp/TimeSyncC.nc">
      <component-ref qname="TimeSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f03d3621960"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d3621ce0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3621e70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f03d356ad50" loc="52:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f03d356ad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f03d3569100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GlobalTime" ref="0x7f03d356faf0" loc="43:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GlobalTime" scoped="" ref="0x7f03d356faf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GlobalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getLocalTime" scoped="" ref="0x7f03d356e790"/>
        <function-ref name="global2Local" scoped="" ref="0x7f03d356d740"/>
        <function-ref name="getGlobalTime" scoped="" ref="0x7f03d356ec50"/>
        <function-ref name="local2Global" scoped="" ref="0x7f03d356d1f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7f03d355a600" loc="60:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f03d355a600"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3559250"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x7f03d3569390" loc="53:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x7f03d3569390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d3569710"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d35698a0"/>
        <function-ref name="start" scoped="" ref="0x7f03d3569a30"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3569bc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f03d35680f0" loc="54:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d35680f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3567020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3565930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d35654b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d35678f0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3567e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f03d355f980" loc="57:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f03d355f980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f03d355fd00"/>
        <function-ref name="rand32" scoped="" ref="0x7f03d355e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncInfo" ref="0x7f03d356dbc0" loc="46:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncInfo" scoped="" ref="0x7f03d356dbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getSyncPoint" scoped="" ref="0x7f03d356b020"/>
        <function-ref name="getRootID" scoped="" ref="0x7f03d356b1b0"/>
        <function-ref name="getSeqNum" scoped="" ref="0x7f03d356b340"/>
        <function-ref name="getOffset" scoped="" ref="0x7f03d356b4d0"/>
        <function-ref name="getNumEntries" scoped="" ref="0x7f03d356b660"/>
        <function-ref name="getHeartBeats" scoped="" ref="0x7f03d356b7f0"/>
        <function-ref name="getSkew" scoped="" ref="0x7f03d356b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3570c10" loc="41:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3570c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d356f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f03d3564020" loc="55:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3564020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d35643a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncMode" ref="0x7f03d356bbd0" loc="47:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncMode" scoped="" ref="0x7f03d356bbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncMode"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d356a020"/>
        <function-ref name="getMode" scoped="" ref="0x7f03d356a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f03d356a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendMsg" ref="0x7f03d35596c0" loc="349:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendMsg" scoped="" ref="0x7f03d35596c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d3559a40"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d3559bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="processMsg" ref="0x7f03d3558020" loc="292:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="processMsg" scoped="" ref="0x7f03d3558020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d35583a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d3558530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d355e270" loc="58:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d355e270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d355e6f0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d355e880"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d355ea10"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d355eba0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d355ed30"/>
        <function-ref name="get" scoped="" ref="0x7f03d355d020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d355d1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d355d7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d355d4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d355d340"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d355d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncNotify" ref="0x7f03d356a590" loc="48:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncNotify" scoped="" ref="0x7f03d356a590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncNotify"/>
      </instance>
      <interface-functions>
        <function-ref name="msg_received" scoped="" ref="0x7f03d356a910"/>
        <function-ref name="msg_sent" scoped="" ref="0x7f03d356aaa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f03d356f270" loc="42:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f03d356f270"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d356f5f0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d356f780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f03d3564710" loc="56:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d3564710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d3560c40"/>
        <function-ref name="fired" scoped="" ref="0x7f03d35611e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d3560020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d3561ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d355f590"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d355f110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d3561660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d3563390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d3560630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d3563860"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3563d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncPacket" ref="0x7f03d355dc80" loc="59:../../tos/lib/ftsp/TimeSyncP.nc">
      <component-ref qname="TimeSyncC.TimeSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacket" scoped="" ref="0x7f03d355dc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d355ba80"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d355a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d3553da0" loc="41:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d3553da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d3550180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3550310"/>
        <function-ref name="start" scoped="" ref="0x7f03d35504a0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3550630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f03d3537b00" loc="56:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3537b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d3536a40"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d3534020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d354e080" loc="45:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d354e080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d354e400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d354e590"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d354e720"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d354e8b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d354ea40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f03d353b920" loc="55:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d353b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d353a740"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3537090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3539bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3539090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d35395a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d354fa20" loc="44:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d354fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d354fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f03d354ce80" loc="48:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d354ce80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f03d354b220"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f03d354b3b0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f03d354b540"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f03d354b6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f03d35463f0" loc="51:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d35463f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3545200"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3543af0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3543670"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3545ad0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3543020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d3550e10" loc="43:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3550e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d354f1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f03d3542590" loc="52:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d3542590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d3540390"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d35408a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f03d354bdb0" loc="50:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d354bdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d3549370"/>
        <function-ref name="clear" scoped="" ref="0x7f03d3549aa0"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d354abf0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3547210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f03d354c4e0" loc="47:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d354c4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d354c860"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d354c9f0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d354cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d354ecf0" loc="46:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d354ecf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d354d0a0"/>
        <function-ref name="source" scoped="" ref="0x7f03d354d230"/>
        <function-ref name="address" scoped="" ref="0x7f03d354d3c0"/>
        <function-ref name="destination" scoped="" ref="0x7f03d354d550"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d354d6e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d354d870"/>
        <function-ref name="type" scoped="" ref="0x7f03d354da00"/>
        <function-ref name="setType" scoped="" ref="0x7f03d354db90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d354dd20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d354c020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d354c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f03d353f220" loc="54:../../tos/platforms/iris/TimeSyncMessageC.nc">
      <component-ref qname="TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d353f220"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d353e7c0"/>
        <function-ref name="clear" scoped="" ref="0x7f03d353c020"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d353e090"/>
        <function-ref name="set" scoped="" ref="0x7f03d353c750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d3531020" loc="41:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d3531020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d35313a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3531530"/>
        <function-ref name="start" scoped="" ref="0x7f03d35316c0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3531850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f03d3516020" loc="56:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3516020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d3515020"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d3515530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d352f2b0" loc="45:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d352f2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d352f630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d352f7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d352f950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d352fae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d352fc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f03d351cd60" loc="55:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d351cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d351ab60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d35184a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3518020"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3519450"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3519960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d3530c30" loc="44:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d3530c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d352f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f03d352c320" loc="48:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f03d352c320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f03d352c6a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f03d352c830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f03d352c9c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f03d352cb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f03d3527920" loc="51:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d3527920"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3525740"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3523090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3524bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3524090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d35245a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d3530050" loc="43:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3530050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d35303d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f03d3523b00" loc="52:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d3523b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d3521930"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d3521e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f03d352a270" loc="50:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d352a270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d3529800"/>
        <function-ref name="clear" scoped="" ref="0x7f03d3528020"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d35290d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3528750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f03d352d800" loc="47:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d352d800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d352db80"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d352dd10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d352c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d352e020" loc="46:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d352e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d352e3a0"/>
        <function-ref name="source" scoped="" ref="0x7f03d352e530"/>
        <function-ref name="address" scoped="" ref="0x7f03d352e6c0"/>
        <function-ref name="destination" scoped="" ref="0x7f03d352e850"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d352e9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d352eb70"/>
        <function-ref name="type" scoped="" ref="0x7f03d352ed00"/>
        <function-ref name="setType" scoped="" ref="0x7f03d352d020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d352d1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d352d340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d352d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f03d3520780" loc="54:../../tos/chips/rf230/RF230TimeSyncMessageC.nc">
      <component-ref qname="RF230TimeSyncMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d3520780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d351ed00"/>
        <function-ref name="clear" scoped="" ref="0x7f03d351d460"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d351e5d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d351db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f03d3397600" loc="53:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d3397600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d33963f0"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d3396900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d33a48b0" loc="47:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d33a48b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d33a4c30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d33a4dc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d33a3020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d33a31b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d33a3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d33a6bf0" loc="45:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d33a6bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d33a5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f03d339c510" loc="52:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d339c510"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d339b390"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3399d00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3399860"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d339bc80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d33991f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f03d33a3940" loc="49:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d33a3940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d33a1780"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d339f110"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d33a0c30"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d33a0090"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d33a05c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d33a6490" loc="44:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d33a6490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d33a6830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f03d339f9b0" loc="50:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d339f9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d339d7a0"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d339dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampRadio" ref="0x7f03d33950a0" loc="58:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d33950a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d3394750"/>
        <function-ref name="clear" scoped="" ref="0x7f03d3394e80"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d3394020"/>
        <function-ref name="set" scoped="" ref="0x7f03d33925d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f03d338fd80" loc="61:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d338fd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d338d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f03d338c020" loc="62:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d338c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d338b740"/>
        <function-ref name="get" scoped="" ref="0x7f03d338b1f0"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d338cc50"/>
        <function-ref name="set" scoped="" ref="0x7f03d338bc90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d33a5270" loc="46:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d33a5270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d33a55f0"/>
        <function-ref name="source" scoped="" ref="0x7f03d33a5780"/>
        <function-ref name="address" scoped="" ref="0x7f03d33a5910"/>
        <function-ref name="destination" scoped="" ref="0x7f03d33a5aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d33a5c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d33a5dc0"/>
        <function-ref name="type" scoped="" ref="0x7f03d33a4020"/>
        <function-ref name="setType" scoped="" ref="0x7f03d33a41b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d33a4340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d33a44d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d33a4660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampMilli" ref="0x7f03d3391060" loc="59:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d3391060"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d33905d0"/>
        <function-ref name="clear" scoped="" ref="0x7f03d3390d00"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d3391e70"/>
        <function-ref name="set" scoped="" ref="0x7f03d338f460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d26b1a50" loc="56:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d26b1a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d26b1dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMSend" ref="0x7f03d26b3dc0" loc="55:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMSend" scoped="" ref="0x7f03d26b3dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d26b1180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d26b1310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d26b14a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d26b1630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d26b17c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketMilli" ref="0x7f03d26b4570" loc="50:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketMilli" scoped="" ref="0x7f03d26b4570"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d26b3390"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d26b38a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d26c0720" loc="44:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d26c0720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d26c0aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d26c0c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d26c0dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d26bf020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d26bf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendMilli" ref="0x7f03d26bba60" loc="47:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendMilli" scoped="" ref="0x7f03d26bba60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d26ba890"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d26b7220"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d26b8d50"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d26b81b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d26b86e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f03d26c38b0" loc="42:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f03d26c38b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d26c3c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f03d26afda0" loc="59:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f03d26afda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d26ae310"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d26ae4a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d26ae630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d26ae7c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d26ae950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncAMSendRadio" ref="0x7f03d26bf7b0" loc="46:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncAMSendRadio" scoped="" ref="0x7f03d26bf7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d26be5e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d26bb090"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d26bdbc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d26bd020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d26bd550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMPacket" ref="0x7f03d26b06b0" loc="58:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMPacket" scoped="" ref="0x7f03d26b06b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d26b0a30"/>
        <function-ref name="source" scoped="" ref="0x7f03d26b0bc0"/>
        <function-ref name="address" scoped="" ref="0x7f03d26b0d50"/>
        <function-ref name="destination" scoped="" ref="0x7f03d26af020"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d26af1b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d26af340"/>
        <function-ref name="type" scoped="" ref="0x7f03d26af4d0"/>
        <function-ref name="setType" scoped="" ref="0x7f03d26af660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d26af7f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d26af980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d26afb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d26c3150" loc="41:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d26c3150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d26c34f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimeSyncPacketRadio" ref="0x7f03d26b7ac0" loc="49:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncPacketRadio" scoped="" ref="0x7f03d26b7ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="isValid" scoped="" ref="0x7f03d26b5930"/>
        <function-ref name="eventTime" scoped="" ref="0x7f03d26b5e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampRadio" ref="0x7f03d26aee20" loc="61:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f03d26aee20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d26ac3f0"/>
        <function-ref name="clear" scoped="" ref="0x7f03d26acb20"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d26adca0"/>
        <function-ref name="set" scoped="" ref="0x7f03d26aa2a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f03d26a4df0" loc="67:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f03d26a4df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d26a25e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d26a2090"/>
        <function-ref name="isSet" scoped="" ref="0x7f03d26a3ac0"/>
        <function-ref name="set" scoped="" ref="0x7f03d26a2b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f03d26a7a90" loc="64:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f03d26a7a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TRadio" ref="0x7f03d478ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d26a56f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f03d26a5c40" loc="65:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f03d26a5c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d26a48a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d26c1020" loc="43:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d26c1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d26c13a0"/>
        <function-ref name="source" scoped="" ref="0x7f03d26c1530"/>
        <function-ref name="address" scoped="" ref="0x7f03d26c16c0"/>
        <function-ref name="destination" scoped="" ref="0x7f03d26c1850"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d26c19e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d26c1b70"/>
        <function-ref name="type" scoped="" ref="0x7f03d26c1d00"/>
        <function-ref name="setType" scoped="" ref="0x7f03d26c0020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d26c01b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d26c0340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d26c04d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSnoop" ref="0x7f03d26b00a0" loc="57:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSnoop" scoped="" ref="0x7f03d26b00a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d26b0420"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStampMilli" ref="0x7f03d26aace0" loc="62:../../tos/lib/rfxlink/layers/TimeSyncMessageLayerP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.TimeSyncMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f03d26aace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f03d26a82e0"/>
        <function-ref name="clear" scoped="" ref="0x7f03d26a8a10"/>
        <function-ref name="isValid" scoped="" ref="0x7f03d26a9b60"/>
        <function-ref name="set" scoped="" ref="0x7f03d26a7170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d269ccf0" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d269ccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d269b0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d269b230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d269b3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d269b550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d269b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d269b930" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d269b930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d269bcb0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d269be40"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d269a020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d269a1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d269a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d269a590" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d269a590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d269a910"/>
        <function-ref name="source" scoped="" ref="0x7f03d269aaa0"/>
        <function-ref name="address" scoped="" ref="0x7f03d269ac30"/>
        <function-ref name="destination" scoped="" ref="0x7f03d269adc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d2699020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d26991b0"/>
        <function-ref name="type" scoped="" ref="0x7f03d2699340"/>
        <function-ref name="setType" scoped="" ref="0x7f03d26994d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d2699660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d26997f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d2699980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f03d2699c10" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f03d2699c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d2698020"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d26981b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d2698340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d2646020" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d2646020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d26463a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2646530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d26466c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2646850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d26469e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d2646c30" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d2646c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2645020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d26451b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2645340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d26454d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d2645660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d26458b0" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d26458b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d2645c30"/>
        <function-ref name="source" scoped="" ref="0x7f03d2645dc0"/>
        <function-ref name="address" scoped="" ref="0x7f03d2643020"/>
        <function-ref name="destination" scoped="" ref="0x7f03d26431b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d2643340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d26434d0"/>
        <function-ref name="type" scoped="" ref="0x7f03d2643660"/>
        <function-ref name="setType" scoped="" ref="0x7f03d26437f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d2643980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d2643b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d2643ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f03d2642020" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f03d2642020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d26423a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d2642530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d26426c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d2639a20" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d2639a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d2639da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2638020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d26381b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2638340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d26384d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f03d2638780" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d2638780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d2638b00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2638c90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2638e20"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2637020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d26371b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f03d2637400" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="RF230TimeSyncMessageC.TimeSyncMessageLayerC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d2637400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d2637780"/>
        <function-ref name="source" scoped="" ref="0x7f03d2637910"/>
        <function-ref name="address" scoped="" ref="0x7f03d2637aa0"/>
        <function-ref name="destination" scoped="" ref="0x7f03d2637c30"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d2637dc0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d2636020"/>
        <function-ref name="type" scoped="" ref="0x7f03d26361b0"/>
        <function-ref name="setType" scoped="" ref="0x7f03d2636340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d26364d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d2636660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d26367f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d3419930" loc="43:../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d3419930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3419cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3419e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3415020"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d34151b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3415340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f03d33ca400" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d33ca400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d33ca7a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d33ca930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d33caac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d33cac50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d33cade0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d33cb4b0" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d33cb4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d33cb850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d33cb9e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d33cbb70"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d33cbd00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d33ca020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f03d33c8720" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d33c8720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d33c8aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d33c8c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d33c8dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d33c7020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d33c71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f03d33c7480" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7f03d33c7480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d33c7800"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d33c7990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f03d33c7c60" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7f03d33c7c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d33c6020"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d33c61b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f03d33c9060" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d33c9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d33c93e0"/>
        <function-ref name="source" scoped="" ref="0x7f03d33c9570"/>
        <function-ref name="address" scoped="" ref="0x7f03d33c9700"/>
        <function-ref name="destination" scoped="" ref="0x7f03d33c9890"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d33c9a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d33c9bb0"/>
        <function-ref name="type" scoped="" ref="0x7f03d33c9d40"/>
        <function-ref name="setType" scoped="" ref="0x7f03d33c8020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d33c81b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d33c8340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d33c84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d33705a0" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="TimeSyncC.TimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d33705a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d336ca80"/>
        <function-ref name="fired" scoped="" ref="0x7f03d336d090"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d336de10"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d336d990"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d336b4a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d336b020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d336d510"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d336f200"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d336c470"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d336f6d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d336fba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3367380" loc="46:../../tos/system/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3367380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3367700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f03d33679c0" loc="47:../../tos/system/NoLedsC.nc">
      <component-ref qname="NoLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d33679c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d3367d40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d3366020"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d33661b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d3366340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d33664d0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3366660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d33667f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d3366e30"/>
        <function-ref name="set" scoped="" ref="0x7f03d3366980"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d3366b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d3366ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacReceive" ref="0x7f03d333c130" loc="28:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacReceive" scoped="" ref="0x7f03d333c130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d333c4b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f03d3343ce0" loc="18:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f03d3343ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f03d33420a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f03d3341900" loc="20:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d3341900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3341c80"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3341e10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3340020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d33401b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3340340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FlowSend" ref="0x7f03d3343020" loc="14:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FlowSend" scoped="" ref="0x7f03d3343020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d33433a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3343530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d33436c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3343850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d33439e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacControl" ref="0x7f03d333fd00" loc="22:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacControl" scoped="" ref="0x7f03d333fd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d333e0a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d333e230"/>
        <function-ref name="start" scoped="" ref="0x7f03d333e3c0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d333e550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MacSend" ref="0x7f03d333d3b0" loc="27:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MacSend" scoped="" ref="0x7f03d333d3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d333d730"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d333d8c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d333da50"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d333dbe0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d333dd70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d3342320" loc="19:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d3342320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d33426a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d3342830"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d33429c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d3342b50"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d3342ce0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3342e70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d3341030"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d3341670"/>
        <function-ref name="set" scoped="" ref="0x7f03d33411c0"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d3341350"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d33414e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f03d333e880" loc="23:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d333e880"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d333ec00"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d333ed90"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d333d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FrameConfiguration" ref="0x7f03d333c7c0" loc="29:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FrameConfiguration" scoped="" ref="0x7f03d333c7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FrameConfiguration"/>
      </instance>
      <interface-functions>
        <function-ref name="setFrameLength" scoped="" ref="0x7f03d333cb40"/>
        <function-ref name="setSlotLength" scoped="" ref="0x7f03d333ccd0"/>
        <function-ref name="getSlotLength" scoped="" ref="0x7f03d333ce60"/>
        <function-ref name="getFrameLength" scoped="" ref="0x7f03d333b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f03d33405f0" loc="21:MCCP.nc">
      <component-ref qname="MCCP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d33405f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d3340970"/>
        <function-ref name="source" scoped="" ref="0x7f03d3340b00"/>
        <function-ref name="address" scoped="" ref="0x7f03d3340c90"/>
        <function-ref name="destination" scoped="" ref="0x7f03d3340e20"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d333f020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d333f1b0"/>
        <function-ref name="type" scoped="" ref="0x7f03d333f340"/>
        <function-ref name="setType" scoped="" ref="0x7f03d333f4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d333f660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d333f7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d333f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d2f32540" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d2f32540"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d2f328c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2f32a50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2f32be0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2f32d70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d2f31020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d2f31270" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d2f31270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2f315f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d2f31780"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2f31910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2f31aa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d2f31c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d2f31e80" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d2f31e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d2f30220"/>
        <function-ref name="source" scoped="" ref="0x7f03d2f303b0"/>
        <function-ref name="address" scoped="" ref="0x7f03d2f30540"/>
        <function-ref name="destination" scoped="" ref="0x7f03d2f306d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d2f30860"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d2f309f0"/>
        <function-ref name="type" scoped="" ref="0x7f03d2f30b80"/>
        <function-ref name="setType" scoped="" ref="0x7f03d2f30d10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d2f2f020"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d2f2f1b0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d2f2f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f03d2f2f5d0" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f03d2f2f5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d2f2f950"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d2f2fae0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d2f2fc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d25e8390" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d25e8390"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d25e8710"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d25e88a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d25e8a30"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d25e8bc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d25e8d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f03d25e7060" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d25e7060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d25e73e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d25e7570"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d25e7700"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d25e7890"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d25e7a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f03d25e7c70" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d25e7c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d25e6020"/>
        <function-ref name="source" scoped="" ref="0x7f03d25e61b0"/>
        <function-ref name="address" scoped="" ref="0x7f03d25e6340"/>
        <function-ref name="destination" scoped="" ref="0x7f03d25e64d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d25e6660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d25e67f0"/>
        <function-ref name="type" scoped="" ref="0x7f03d25e6980"/>
        <function-ref name="setType" scoped="" ref="0x7f03d25e6b10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d25e6ca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d25e6e30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d25e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d33089f0" loc="44:../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d33089f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3308d70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3305020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d33051b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3305340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d33054d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f03d3302400" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d3302400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d33027a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3302930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3302ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3302c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3302de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d33034b0" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d33034b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3303850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d33039e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3303b70"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3303d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3302020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f03d32ff720" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d32ff720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d32ffaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d32ffc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d32ffdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d32fe020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d32fe1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f03d32fe480" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7f03d32fe480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d32fe800"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d32fe990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f03d32fec60" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7f03d32fec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d32fd020"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d32fd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f03d3301060" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d3301060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d33013e0"/>
        <function-ref name="source" scoped="" ref="0x7f03d3301570"/>
        <function-ref name="address" scoped="" ref="0x7f03d3301700"/>
        <function-ref name="destination" scoped="" ref="0x7f03d3301890"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d3301a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d3301bb0"/>
        <function-ref name="type" scoped="" ref="0x7f03d3301d40"/>
        <function-ref name="setType" scoped="" ref="0x7f03d32ff020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d32ff1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d32ff340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d32ff4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d32f9140" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d32f9140"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d32f94c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d32f9650"/>
        <function-ref name="start" scoped="" ref="0x7f03d32f97e0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d32f9970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d32f81d0" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d32f81d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d32f8550"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d32f86e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d32f8870"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d32f8a00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d32f8b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d32f7a00" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d32f7a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d32f7d80"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d32f6020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d32f61b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d32f6340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d32f64d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d32f73f0" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d32f73f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d32f7770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d32f47e0" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d32f47e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d32f4b60"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d32f4cf0"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d32f4e80"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d32f3030"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d32f31c0"/>
        <function-ref name="get" scoped="" ref="0x7f03d32f3350"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d32f34e0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d32f3b20"/>
        <function-ref name="set" scoped="" ref="0x7f03d32f3670"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d32f3800"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d32f3990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f03d32f5e40" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d32f5e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d32f41e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d32f4370"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d32f4500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d32f6780" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d32f6780"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d32f6b00"/>
        <function-ref name="source" scoped="" ref="0x7f03d32f6c90"/>
        <function-ref name="address" scoped="" ref="0x7f03d32f6e20"/>
        <function-ref name="destination" scoped="" ref="0x7f03d32f5020"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d32f51b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d32f5340"/>
        <function-ref name="type" scoped="" ref="0x7f03d32f54d0"/>
        <function-ref name="setType" scoped="" ref="0x7f03d32f5660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d32f57f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d32f5980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d32f5b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f03d32989f0" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f03d32989f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3298d70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3297020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d32971b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3297340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d32974d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f03d3297760" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f03d3297760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d3297ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f03d32ef7d0" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d32ef7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d32efb70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d32efd00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d329b020"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d329b1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d329b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f03d3299400" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d3299400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d3299780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d3299910"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3299aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d3299c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d3299dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d329b6c0" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d329b6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d329ba60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f03d3298060" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f03d3298060"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f03d32983e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f03d3298570"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f03d3298700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f03d329bcb0" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f03d329bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f03d329a0a0"/>
        <function-ref name="source" scoped="" ref="0x7f03d329a230"/>
        <function-ref name="address" scoped="" ref="0x7f03d329a3c0"/>
        <function-ref name="destination" scoped="" ref="0x7f03d329a550"/>
        <function-ref name="setSource" scoped="" ref="0x7f03d329a6e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f03d329a870"/>
        <function-ref name="type" scoped="" ref="0x7f03d329aa00"/>
        <function-ref name="setType" scoped="" ref="0x7f03d329ab90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f03d329ad20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f03d3299020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f03d32991b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d32922f0" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d32922f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d3292670"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3292800"/>
        <function-ref name="start" scoped="" ref="0x7f03d3292990"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3292b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d3291e10" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d3291e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f03d4770be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d32901c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3290350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d32904e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3290670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3290800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d3295bb0" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d3295bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3292020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d3291320" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d3291320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f03d4770be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d32916a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d328e940" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d328e940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d328ecc0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d328ee50"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d328d020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d328d1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d328d340"/>
        <function-ref name="get" scoped="" ref="0x7f03d328d4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d328d660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d328dca0"/>
        <function-ref name="set" scoped="" ref="0x7f03d328d7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d328d980"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d328db10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f03d328e020" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f03d328e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f03d4770be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f03d328e3a0"/>
        <function-ref name="offset" scoped="" ref="0x7f03d328e530"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f03d328e6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f03d326ac80" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f03d326ac80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d32690a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d3269230"/>
        <function-ref name="start" scoped="" ref="0x7f03d32693c0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3269550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f03d32046e0" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x7f03d32046e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d3204a60"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d3204bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f03d325eb80" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f03d325eb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d3257020"/>
        <function-ref name="stop" scoped="" ref="0x7f03d32571b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f03d323b660" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x7f03d323b660"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d323b9e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d323bb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d326a630" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d326a630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d326a9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f03d3254870" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x7f03d3254870"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f03d3254bf0"/>
        <function-ref name="flush" scoped="" ref="0x7f03d3254d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f03d3207c70" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x7f03d3207c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d3206020"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d32061b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f03d3258410" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f03d3258410"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f03d3258790"/>
        <function-ref name="resetSend" scoped="" ref="0x7f03d3258920"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f03d3258ab0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f03d3258c40"/>
        <function-ref name="putData" scoped="" ref="0x7f03d3258dd0"/>
        <function-ref name="putDone" scoped="" ref="0x7f03d3262020"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f03d32621b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d3262430" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d3262430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d32627b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d3262940"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d3262ad0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d3262c60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d3262df0"/>
        <function-ref name="get" scoped="" ref="0x7f03d325e020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d325e1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d325e7f0"/>
        <function-ref name="set" scoped="" ref="0x7f03d325e340"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d325e4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d325e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f03d3200a00" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f03d3200a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d3200d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d31ff020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f03d3263b10" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f03d3263b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f03d3267020"/>
        <function-ref name="nextByte" scoped="" ref="0x7f03d32671b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f03d3267340"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f03d32674d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f03d3266080" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f03d3266080"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f03d3266400"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f03d3266590"/>
        <function-ref name="endPacket" scoped="" ref="0x7f03d3266720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f03d3135020" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x7f03d3135020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d31353a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d3135530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f03d313ade0" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f03d313ade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f03d4770be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d31391c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d3139350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d31394e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d3139670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3139800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f03d3135800" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x7f03d3135800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d3135b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d3135d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f03d313a6c0" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f03d313a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f03d4770be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f03d313aa60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f03d3139c20" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x7f03d3139c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f03d4770be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f03d3138020"/>
        <function-ref name="offset" scoped="" ref="0x7f03d31381b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f03d3138340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d3137920" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d3137920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d3137ca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d3137e30"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d3136020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d31361b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d3136340"/>
        <function-ref name="get" scoped="" ref="0x7f03d31364d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d3136660"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d3136ca0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3136980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d31367f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d3136b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f03d3138e80" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f03d3138e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f03d3137220"/>
        <function-ref name="nextByte" scoped="" ref="0x7f03d31373b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f03d3137540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f03d31376d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f03d3138590" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f03d3138590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f03d3138910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f03d3138aa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f03d3138c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f03d3125d20" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f03d3125d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d312e0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f03d312e270"/>
        <function-ref name="receive" scoped="" ref="0x7f03d312e400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f03d312e590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f03d312e720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f03d312e8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d312ea40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f03d3133e00" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f03d3133e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f03d31301c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f03d3130350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f03d31304e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f03d3130670"/>
        <function-ref name="putData" scoped="" ref="0x7f03d3130800"/>
        <function-ref name="putDone" scoped="" ref="0x7f03d3130990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f03d3130b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d312ecc0" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d312ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d312d0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d312d230"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d312d3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d312d550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d312d6e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d312d870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d312da00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d31221b0"/>
        <function-ref name="set" scoped="" ref="0x7f03d312db90"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d312dd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d3122020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f03d3106020" loc="42:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f03d3106020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d31063a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f03d3106530"/>
        <function-ref name="receive" scoped="" ref="0x7f03d31066c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f03d3106850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f03d3108960" loc="41:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f03d3108960"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d3108ce0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f03d3108e70"/>
        <function-ref name="receive" scoped="" ref="0x7f03d3107030"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f03d31071c0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f03d3107350"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f03d31074e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d3107670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f03d3108150" loc="40:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f03d3108150"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d31084d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3108660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f03d3105cb0" loc="41:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f03d3105cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d30fe0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f03d30fe230"/>
        <function-ref name="receive" scoped="" ref="0x7f03d30fe3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f03d30fe550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f03d30fe850" loc="42:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f03d30fe850"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d30febd0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f03d30fed60"/>
        <function-ref name="receive" scoped="" ref="0x7f03d30fd020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f03d30fd1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f03d30fd340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f03d30fd4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d30fd660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f03d30fdc20" loc="43:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d30fdc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d30fca80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d30fb4e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d30fb020"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d30fb9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f03d31054b0" loc="40:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f03d31054b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d3105830"/>
        <function-ref name="stop" scoped="" ref="0x7f03d31059c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f03d30b25a0" loc="50:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f03d30b25a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d30b2920"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f03d30b2ab0"/>
        <function-ref name="receive" scoped="" ref="0x7f03d30b2c40"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f03d30b2dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x7f03d30af0a0" loc="53:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x7f03d30af0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d30af420"/>
        <function-ref name="stop" scoped="" ref="0x7f03d30af5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d30f8770" loc="48:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d30f8770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d30f8af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f03d30b00c0" loc="51:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f03d30b00c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d30b0440"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f03d30b05d0"/>
        <function-ref name="receive" scoped="" ref="0x7f03d30b0760"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f03d30b08f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f03d30b0a80"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f03d30b0c10"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d30b0da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f03d30ad810" loc="56:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d30ad810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d30ac6a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d30ab090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d30acb60"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d30ab550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x7f03d30ae0a0" loc="55:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x7f03d30ae0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f03d30ae420"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f03d30ae5b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f03d30ae740"/>
        <function-ref name="txDone" scoped="" ref="0x7f03d30ae8d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f03d30aea60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f03d30aebf0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f03d30aed80"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f03d30ad020"/>
        <function-ref name="tx" scoped="" ref="0x7f03d30ad1b0"/>
        <function-ref name="rx" scoped="" ref="0x7f03d30ad340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f03d30f8d80" loc="49:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f03d30f8d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d30b2180"/>
        <function-ref name="stop" scoped="" ref="0x7f03d30b2310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x7f03d30af880" loc="54:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x7f03d30af880"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d30afc00"/>
        <function-ref name="stop" scoped="" ref="0x7f03d30afd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f03d308d3a0" loc="49:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f03d308d3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f03d308d720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f03d308d8b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f03d308da40"/>
        <function-ref name="txDone" scoped="" ref="0x7f03d308dbd0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f03d308dd60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f03d308c020"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f03d308c1b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f03d308c340"/>
        <function-ref name="tx" scoped="" ref="0x7f03d308c4d0"/>
        <function-ref name="rx" scoped="" ref="0x7f03d308c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f03d308ac40" loc="53:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f03d308ac40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f03d3089020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f03d30891b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f03d3089340"/>
        <function-ref name="txDone" scoped="" ref="0x7f03d30894d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f03d3089660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f03d30897f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f03d3089980"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f03d3089b10"/>
        <function-ref name="tx" scoped="" ref="0x7f03d3089ca0"/>
        <function-ref name="rx" scoped="" ref="0x7f03d3089e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f03d308e990" loc="48:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f03d308e990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d308ed10"/>
        <function-ref name="stop" scoped="" ref="0x7f03d308d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f03d308c9f0" loc="51:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f03d308c9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d308cd70"/>
        <function-ref name="stop" scoped="" ref="0x7f03d308a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f03d308a3b0" loc="52:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f03d308a3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d308a730"/>
        <function-ref name="stop" scoped="" ref="0x7f03d308a8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f03d308e0f0" loc="47:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f03d308e0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d308e470"/>
        <function-ref name="stop" scoped="" ref="0x7f03d308e600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x7f03d3088bc0" loc="114:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x7f03d3088bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3085020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f03d30845f0" loc="117:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f03d30845f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f03d3084970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f03d3084b00"/>
        <function-ref name="rxDone" scoped="" ref="0x7f03d3084c90"/>
        <function-ref name="txDone" scoped="" ref="0x7f03d3084e20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f03d3083020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f03d30831b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f03d3083340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f03d30834d0"/>
        <function-ref name="tx" scoped="" ref="0x7f03d3083660"/>
        <function-ref name="rx" scoped="" ref="0x7f03d30837f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x7f03d3083b50" loc="119:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x7f03d3083b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d3082020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f03d30815f0" loc="122:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f03d30815f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f03d3081970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f03d3081b00"/>
        <function-ref name="rxDone" scoped="" ref="0x7f03d3081c90"/>
        <function-ref name="txDone" scoped="" ref="0x7f03d3081e20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f03d3080020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f03d30801b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f03d3080340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f03d30804d0"/>
        <function-ref name="tx" scoped="" ref="0x7f03d3080660"/>
        <function-ref name="rx" scoped="" ref="0x7f03d30807f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f03d3085cd0" loc="116:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f03d3085cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d30840a0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3084230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f03d30823f0" loc="120:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f03d30823f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d3082770"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3082900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f03d3082cd0" loc="121:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f03d3082cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d30810a0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3081230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7f03d3080b20" loc="124:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f03d3080b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f03d307f020"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f03d307f1b0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f03d307f340"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f03d307f4d0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f03d307f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f03d307f980" loc="125:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f03d307f980"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f03d307fd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f03d30853f0" loc="115:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f03d30853f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f03d3085770"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3085900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d3020dc0" loc="24:../../tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d3020dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d301dca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d301c670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d301c1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d301cb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d301ade0" loc="24:../../tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d301ade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f03d481fd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d3017ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d3016670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d30161b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d3016b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f03d300c020" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d300c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f03d300c3a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f03d300c530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f03d300c6c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f03d300c850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f03d300c9e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f03d300cb70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f03d300cd00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f03d300b020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f03d300b1b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f03d300b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f03d300b850" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f03d300b850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f03d3008e60"/>
        <function-ref name="test" scoped="" ref="0x7f03d30084e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d300a4c0"/>
        <function-ref name="captured" scoped="" ref="0x7f03d3009020"/>
        <function-ref name="reset" scoped="" ref="0x7f03d3009530"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d30089a0"/>
        <function-ref name="set" scoped="" ref="0x7f03d300a980"/>
        <function-ref name="start" scoped="" ref="0x7f03d30099f0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3008020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f03d3007ad0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f03d3007ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d30034e0"/>
        <function-ref name="fired" scoped="" ref="0x7f03d30041b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3005790"/>
        <function-ref name="reset" scoped="" ref="0x7f03d3004670"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d30039a0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3005c50"/>
        <function-ref name="start" scoped="" ref="0x7f03d3004b30"/>
        <function-ref name="stop" scoped="" ref="0x7f03d3003020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d3015cc0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d3015cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d300e090"/>
        <function-ref name="test" scoped="" ref="0x7f03d300f6e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d3012980"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d300e550"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d300ea60"/>
        <function-ref name="reset" scoped="" ref="0x7f03d3010840"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d3010380"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d300fba0"/>
        <function-ref name="set" scoped="" ref="0x7f03d3012e40"/>
        <function-ref name="start" scoped="" ref="0x7f03d3010d00"/>
        <function-ref name="stop" scoped="" ref="0x7f03d300f220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f03d2ff92c0" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f03d2ff92c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f03d2ff9640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f03d2ff97d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f03d2ff9960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f03d2ff9af0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f03d2ff9c80"/>
        <function-ref name="setControlB" scoped="" ref="0x7f03d2ff9e10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f03d2ff8020"/>
        <function-ref name="getControlB" scoped="" ref="0x7f03d2ff81b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7f03d2ff8340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f03d2ff84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f03d2ff35a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f03d2ff35a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d2fef020"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2ff2c10"/>
        <function-ref name="get" scoped="" ref="0x7f03d2ff2240"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2ff0110"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2fef4e0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2ff2700"/>
        <function-ref name="start" scoped="" ref="0x7f03d2ff05d0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2ff0a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f03d2ff89e0" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f03d2ff89e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f03d2ff4e60"/>
        <function-ref name="test" scoped="" ref="0x7f03d2ff44e0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2ff76b0"/>
        <function-ref name="captured" scoped="" ref="0x7f03d2ff50d0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2ff55e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2ff49a0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2ff7b70"/>
        <function-ref name="start" scoped="" ref="0x7f03d2ff5aa0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2ff4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f03d2fefba0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f03d2fefba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d2feb550"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2fed1f0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2fee7f0"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2fed6b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2feba10"/>
        <function-ref name="set" scoped="" ref="0x7f03d2feecb0"/>
        <function-ref name="start" scoped="" ref="0x7f03d2fedb70"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2feb090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f03d2fea120" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f03d2fea120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f03d2fe7a90"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2fe9770"/>
        <function-ref name="get" scoped="" ref="0x7f03d2fead50"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2fe9c30"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2fe6020"/>
        <function-ref name="set" scoped="" ref="0x7f03d2fe9260"/>
        <function-ref name="start" scoped="" ref="0x7f03d2fe7110"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2fe75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d2ffe020" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d2ffe020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d2ffa350"/>
        <function-ref name="test" scoped="" ref="0x7f03d2ffc9a0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2ffec50"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d2ffa810"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d2ffad20"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2ffdb20"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d2ffd660"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2ffce60"/>
        <function-ref name="set" scoped="" ref="0x7f03d2ffd150"/>
        <function-ref name="start" scoped="" ref="0x7f03d2ffc020"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2ffc4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d2f6cc60" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d2f6cc60"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f03d492f020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f03d492f020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d2f6b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f03d2f6b410" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d2f6b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d2f67810"/>
        <function-ref name="test" scoped="" ref="0x7f03d2f69e60"/>
        <function-ref name="get" scoped="" ref="0x7f03d2f6a090"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d2f67cd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d2f66260"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2f69020"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d2f6aa60"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2f67350"/>
        <function-ref name="set" scoped="" ref="0x7f03d2f6a550"/>
        <function-ref name="start" scoped="" ref="0x7f03d2f694e0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2f699a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d2f643c0" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d2f643c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f03d481fd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d2f62240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d2f62bc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d2f62700"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d2f610d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f03d2f61660" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d2f61660"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f03d2f5da90"/>
        <function-ref name="test" scoped="" ref="0x7f03d2f5d110"/>
        <function-ref name="get" scoped="" ref="0x7f03d2f603d0"/>
        <function-ref name="setScale" scoped="" ref="0x7f03d2f5c020"/>
        <function-ref name="getScale" scoped="" ref="0x7f03d2f5c530"/>
        <function-ref name="reset" scoped="" ref="0x7f03d2f5e2a0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d2f60da0"/>
        <function-ref name="isOn" scoped="" ref="0x7f03d2f5d5d0"/>
        <function-ref name="set" scoped="" ref="0x7f03d2f60890"/>
        <function-ref name="start" scoped="" ref="0x7f03d2f5e760"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2f5ec20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f03d2f540f0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f03d2f540f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TThree" ref="0x7f03d481fd40"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d2f53020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d2f539a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d2f534e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d2f53e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f03d2f58cd0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f03d2f58cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48635c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f03d4863930"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f03d2f57b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f03d2f56550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f03d2f56090"/>
        <function-ref name="overflow" scoped="" ref="0x7f03d2f56a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f03d2f471e0" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x7f03d2f471e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f03d2f47560"/>
        <function-ref name="offset" scoped="" ref="0x7f03d2f476f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f03d2f47880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f03d2f2c510" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f03d2f2c510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f03d2f294a0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d2f28260"/>
        <function-ref name="element" scoped="" ref="0x7f03d2f288d0"/>
        <function-ref name="full" scoped="" ref="0x7f03d2f2b5b0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d2f29020"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d2f29b50"/>
        <function-ref name="empty" scoped="" ref="0x7f03d2f2b130"/>
        <function-ref name="size" scoped="" ref="0x7f03d2f2ba30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f03d2f23330" loc="93:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f03d2f23330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f03d2f1f260"/>
        <function-ref name="enqueue" scoped="" ref="0x7f03d2f1e020"/>
        <function-ref name="element" scoped="" ref="0x7f03d2f1e690"/>
        <function-ref name="full" scoped="" ref="0x7f03d2f224a0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f03d2f22da0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f03d2f1f910"/>
        <function-ref name="empty" scoped="" ref="0x7f03d2f22020"/>
        <function-ref name="size" scoped="" ref="0x7f03d2f22920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f03d2f1ed40" loc="94:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f03d2f1ed40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f03d2f1c0e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2f1c270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2f1c400"/>
        <function-ref name="cancel" scoped="" ref="0x7f03d2f1c590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f03d2f1c720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f03d2f1c9b0" loc="95:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f03d2f1c9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f03d2f1cd30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f03d2f1b020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f03d2f1b1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f03d2f1b340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f03d2f1b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7f03d2f17d10" loc="114:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="retrySend" scoped="" ref="0x7f03d2f17d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f03d2f150e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f03d2f15270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d2f243c0" loc="89:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d2f243c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d2f24740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f03d2f1b750" loc="96:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f03d2f1b750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f03d2f1bad0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f03d2f1bc60"/>
        <function-ref name="led1On" scoped="" ref="0x7f03d2f1bdf0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f03d2f1a020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f03d2f1a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f03d2f1a340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f03d2f1a4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f03d2f1ab10"/>
        <function-ref name="set" scoped="" ref="0x7f03d2f1a660"/>
        <function-ref name="led0On" scoped="" ref="0x7f03d2f1a7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f03d2f1a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7f03d2f21a70" loc="90:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f03d2f21a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f03d2f21df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f03d2efd2a0" loc="43:../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f03d2efd2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f03d2efd620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f03d2ef6020" loc="94:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f03d2ef6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f03d2ef63a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f03d2ef6680" loc="95:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x7f03d2ef6680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f03d2ef6a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f03d2eefd50" loc="39:../../tos/lib/printf/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f03d2eefd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f03d2eec100"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f03d2eec4a0" loc="40:../../tos/lib/printf/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f03d2eec4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f03d2eec820"/>
        <function-ref name="stopDone" scoped="" ref="0x7f03d2eec9b0"/>
        <function-ref name="start" scoped="" ref="0x7f03d2eecb40"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2eeccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f03d2eed370" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MCCC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f03d2eed370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f03d48641a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f03d4864510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f03d2ee3870"/>
        <function-ref name="fired" scoped="" ref="0x7f03d2ee6e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f03d2ee4c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f03d2ee4780"/>
        <function-ref name="getdt" scoped="" ref="0x7f03d2ee21e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f03d2ee3cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f03d2ee4300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f03d2ee6020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f03d2ee3260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f03d2ee64f0"/>
        <function-ref name="stop" scoped="" ref="0x7f03d2ee69c0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f03d4758d10" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
              <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d47583b0" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f03d4758700" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d4758a30" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f03d47525c0" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f03d4752340" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f03d4751ab0" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f03d4751830" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f03d4755920" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f03d4752e10" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f03d47d3b50" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <function command="" provided="0" name="send" ref="0x7f03d475f5e0" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d475f020" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d475f350" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f03d475abb0" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d475a5b0" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d475a8e0" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f03d475cd20" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f03d475d900" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d475d680" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f03d475be00" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d475b820" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f03d475bb70" loc="100:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FrameConfiguration" loc="31:../../tos/interfaces/FrameConfiguration.nc">
      <documentation loc="23:../../tos/interfaces/FrameConfiguration.nc">
        <short>&#10; </short>
        <long>&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision$&#10; @date $Date$&#10;&#10; This interface will be implemented by the different TDMA protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="setFrameLength" ref="0x7f03d47cece0" loc="33:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="numSlots" ref="0x7f03d47cea60" loc="33:../../tos/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlotLength" ref="0x7f03d47ce350" loc="32:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="slotTimeBms" ref="0x7f03d47ce0d0" loc="32:../../tos/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlotLength" ref="0x7f03d47cd4b0" loc="34:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getFrameLength" ref="0x7f03d47cdc00" loc="35:../../tos/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Slotter" loc="30:../../tos/interfaces/Slotter.nc">
      <documentation loc="23:../../tos/interfaces/Slotter.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <function event="" provided="0" name="slot" ref="0x7f03d46b18a0" loc="31:../../tos/interfaces/Slotter.nc">
        <interfacedef-ref qname="Slotter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="num" ref="0x7f03d46b1620" loc="31:../../tos/interfaces/Slotter.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f03d46de350" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GlobalTime" loc="37:../../tos/lib/ftsp/GlobalTime.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d4680590" loc="37:../../tos/lib/ftsp/GlobalTime.nc">
          <interfacedef-ref qname="GlobalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d4680590"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getLocalTime" ref="0x7f03d467c020" loc="42:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="39:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Returns the current local time of this mote.</short>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="global2Local" ref="0x7f03d4679390" loc="76:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="68:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Converts the global time given in &#60;code>time&#60;/code> into the&#10; correspoding local time and stores this again in&#10; &#60;code>time&#60;/code>.</short>
          <long>&#10; Converts the global time given in &#60;code>time&#60;/code> into the&#10; correspoding local time and stores this again in&#10; &#60;code>time&#60;/code>. This method performs the inverse of the&#10; &#60;code>local2Global&#60;/clode> transformation.&#10;&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f03d4679110" loc="76:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getGlobalTime" ref="0x7f03d467cab0" loc="49:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="44:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Reads the current global time.</short>
          <long>&#10; Reads the current global time. This method is a combination&#10; of &#60;code>getLocalTime&#60;/code> and &#60;code>local2Global&#60;/code>.&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f03d467c830" loc="49:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="local2Global" ref="0x7f03d467a640" loc="66:../../tos/lib/ftsp/GlobalTime.nc">
        <documentation loc="51:../../tos/lib/ftsp/GlobalTime.nc">
          <short>&#10; Converts the local time given in &#60;code>time&#60;/code> into the&#10; corresponding global time and stores this again in&#10; &#60;code>time&#60;/code>.</short>
          <long>&#10; Converts the local time given in &#60;code>time&#60;/code> into the&#10; corresponding global time and stores this again in&#10; &#60;code>time&#60;/code>. The following equation is used to compute the&#10; conversion:&#10;&#10;&#9;globalTime = localTime + offset + skew * (localTime - syncPoint)&#10;&#10; The skew is normalized to 0.0 (1.0 is subtracted) to increase the&#10; machine precision. The syncPoint value is periodically updated to&#10; increase the machine precision of the floating point arithmetic and&#10; also to allow time wrap.&#10;&#10; @return SUCCESS if this mote is synchronized, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GlobalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f03d467a3c0" loc="66:../../tos/lib/ftsp/GlobalTime.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
                <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f03d46bf8a0" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d46bf620" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f03d46bd950" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d46bd6d0" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f03d46bad30" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d46ba730" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d46baa60" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f03d46bcda0" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f03d46bbdd0" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d46bb810" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d46bbb40" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f03d46b4760" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f03d46b2020" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PrioCritQueue" loc="9:PrioCritQueue.nc">
      <documentation loc="1:PrioCritQueue.nc">
        <short>&#10;  Interface to a priority queue that contains items&#10;  of multiple priority levels.</short>
        <long>&#10;  Interface to a priority queue that contains items&#10;  of multiple priority levels. The queue has a maximum size.&#10;&#10;  @author James Harbin&#10;  @date   $Date: 2017-08-31 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f03d46b0560" loc="9:PrioCritQueue.nc">
          <interfacedef-ref qname="PrioCritQueue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="size" ref="0x7f03d46a8d50" loc="30:PrioCritQueue.nc">
        <documentation loc="24:PrioCritQueue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeuePrio" ref="0x7f03d46a05b0" loc="82:PrioCritQueue.nc">
        <documentation loc="76:PrioCritQueue.nc">
          <short>&#10; Remove the head of the queue of particular priority.</short>
          <long>&#10; Remove the head of the queue of particular priority. If that queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f03d46a0330" loc="82:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f03d469f7f0" loc="91:PrioCritQueue.nc">
        <documentation loc="84:PrioCritQueue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f03d469f220" loc="91:PrioCritQueue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f03d52eeb50"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x7f03d52eeb50"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
          <variable name="prio" ref="0x7f03d469f560" loc="91:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f03d469ed00" loc="97:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeLO_Q2" ref="0x7f03d469ba70" loc="107:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headPrio" ref="0x7f03d46a4350" loc="62:PrioCritQueue.nc">
        <documentation loc="55:PrioCritQueue.nc">
          <short>&#10; Get the head of the queue of a particular priority without&#10; removing it.</short>
          <long>&#10; Get the head of the queue of a particular priority without&#10; removing it. If that queue is empty, the return value is&#10; undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f03d46a40d0" loc="62:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sizePrio" ref="0x7f03d46a77f0" loc="33:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="prio" ref="0x7f03d46a7570" loc="33:PrioCritQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f03d46a85d0" loc="22:PrioCritQueue.nc">
        <documentation loc="17:PrioCritQueue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f03d46a5020" loc="40:PrioCritQueue.nc">
        <documentation loc="35:PrioCritQueue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearLO" ref="0x7f03d469e530" loc="94:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeHI" ref="0x7f03d469c460" loc="100:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeLO_Q3" ref="0x7f03d469a1f0" loc="108:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f03d46a1020" loc="70:PrioCritQueue.nc">
        <documentation loc="64:PrioCritQueue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeLO" ref="0x7f03d469cb80" loc="103:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f03d46b0e10" loc="15:PrioCritQueue.nc">
        <documentation loc="10:PrioCritQueue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headHI" ref="0x7f03d46a39c0" loc="53:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="q_status" ref="0x7f03d46a3740" loc="53:PrioCritQueue.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeueHI" ref="0x7f03d46a1be0" loc="74:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sizeLO_Q1" ref="0x7f03d469b350" loc="106:PrioCritQueue.nc">
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="head" ref="0x7f03d46a5a60" loc="50:PrioCritQueue.nc">
        <documentation loc="42:PrioCritQueue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined. q_status is a pointer&#10; to an error_t to set as SUCCESS or FAIL depending on whether&#10; there was anything returned&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PrioCritQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d46b0560"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="q_status" ref="0x7f03d46a57e0" loc="50:PrioCritQueue.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../tos/interfaces/Random.nc">
      <documentation loc="34:../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f03d46b6e50" loc="52:../../tos/interfaces/Random.nc">
        <documentation loc="48:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f03d46b6650" loc="46:../../tos/interfaces/Random.nc">
        <documentation loc="42:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f03d468e800" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d468e580" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f03d468ca00" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d468c780" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f03d468bb90" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d468b910" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f03d4687020" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f03d46885e0" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f03d4688960" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d4688c90" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f03d4683660" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4683060" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d4683390" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f03d4682790" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f03d4686390" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4686110" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f03d46848b0" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d46842d0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f03d4684620" loc="110:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncInfo" loc="36:../../tos/lib/ftsp/TimeSyncInfo.nc">
      <function command="" provided="0" name="getSyncPoint" ref="0x7f03d46654e0" loc="55:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="50:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the local time of the last synchronization point.</short>
          <long>&#10; Returns the local time of the last synchronization point. This &#10; value is close to the current local time and updated when a new&#10; time synchronization message arrives.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRootID" ref="0x7f03d4665d60" loc="60:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="57:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the current root to which this node is synchronized.</short>
          <long>&#10; Returns the current root to which this node is synchronized. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSeqNum" ref="0x7f03d46645b0" loc="65:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="62:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the latest seq number seen from the current root.</short>
          <long>&#10; Returns the latest seq number seen from the current root.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOffset" ref="0x7f03d4666480" loc="41:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="38:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns current offset of the local time wrt global time.</short>
          <long>&#10; Returns current offset of the local time wrt global time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNumEntries" ref="0x7f03d4664de0" loc="71:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="67:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the number of entries stored currently in the &#10; regerssion table.</short>
          <long>&#10; Returns the number of entries stored currently in the &#10; regerssion table.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeartBeats" ref="0x7f03d4663690" loc="76:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="73:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns the value of heartBeats variable.</short>
          <long>&#10; Returns the value of heartBeats variable. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSkew" ref="0x7f03d4666c20" loc="48:../../tos/lib/ftsp/TimeSyncInfo.nc">
        <documentation loc="43:../../tos/lib/ftsp/TimeSyncInfo.nc">
          <short>&#10; Returns current skew of the local time wrt global time.</short>
          <long>&#10; Returns current skew of the local time wrt global time.&#10; This value is normalized to 0.0 (1.0 is subtracted) to get maximum &#10; representation precision.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-float cname="float" size="I:4" alignment="I:1"></type-float>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncMode" loc="44:../../tos/lib/ftsp/TimeSyncMode.nc">
      <documentation loc="36:../../tos/lib/ftsp/TimeSyncMode.nc">
        <short>&#10; the time sync module can work in two modes:&#10;            - TS_TIMER_MODE (default): TS msgs sent period.</short>
        <long>&#10; the time sync module can work in two modes:&#10;            - TS_TIMER_MODE (default): TS msgs sent period. from the timer&#10;            - TS_USER_MODE: TS msgs sent only when explic. asked by user &#10;                            via TimeSyncMode.send() command, TimeSync.Timer &#10;                            is stopped in this mode&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f03d465f910" loc="61:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="57:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; command to send out time synchronization message.</short>
          <long>&#10; command to send out time synchronization message.&#10; returns FAIL if TimeSync not in TS_USER_MODE&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f03d465f190" loc="55:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="52:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; Gets the current mode of the TimeSync module.</short>
          <long>&#10; Gets the current mode of the TimeSync module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f03d4660950" loc="50:../../tos/lib/ftsp/TimeSyncMode.nc">
        <documentation loc="46:../../tos/lib/ftsp/TimeSyncMode.nc">
          <short>&#10; Sets the current mode of the TimeSync module.</short>
          <long>&#10; Sets the current mode of the TimeSync module.&#10; returns FAIL if didn't succeed&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncMode"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f03d46606d0" loc="50:../../tos/lib/ftsp/TimeSyncMode.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f03d46daa00" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f03d46d81f0" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f03d46d89d0" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f03d46d7940" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f03d46d4120" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f03d46d4930" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f03d46d7190" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d46d34c0" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f03d46d3240" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f03d46da270" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f03d46d6190" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f03d46d6920" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d4675350" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d4675350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f03d466e1f0" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f03d4673a60" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f03d4670820" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f03d4670250" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f03d4670590" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f03d4672a60" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f03d466d270" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f03d466e980" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f03d4672270" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f03d4674020" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f03d4675c40" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f03d466f820" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f03d466f250" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f03d466f590" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f03d4674ae0" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f03d4674860" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f03d4673350" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f03d46c4d30" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46c4ab0" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f03d46ce920" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46ce6a0" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f03d46ddd20" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f03d46d0820" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46d05a0" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f03d46cb360" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46cfd30" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f03d46cb0d0" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f03d46ccd30" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46cc750" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f03d46ccaa0" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f03d46c8810" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46c8590" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f03d46c6b90" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46c65e0" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f03d46c6900" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f03d477b9e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f03d46c9600" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46c9380" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f03d46c32f0" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f03d46c7cf0" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f03d46c3060" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f03d46c1190" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlotterControl" loc="30:../../tos/interfaces/SlotterControl.nc">
      <documentation loc="23:../../tos/interfaces/SlotterControl.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision$&#10; @date $Date$&#10;</long>
      </documentation>
      <function command="" provided="0" name="stop" ref="0x7f03d46ac700" loc="37:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlot" ref="0x7f03d46ace50" loc="38:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="synchronize" ref="0x7f03d46af020" loc="31:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="toSlot" ref="0x7f03d46c0c90" loc="31:../../tos/interfaces/SlotterControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSynchornized" ref="0x7f03d46af790" loc="32:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f03d46ae020" loc="34:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemaining" ref="0x7f03d46ac020" loc="36:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f03d46ae770" loc="35:../../tos/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f03d4564120" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f03d4564970" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7f03d4556b70" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7f03d45568f0" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7f03d455b0e0" loc="31:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7f03d455bb60" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f03d455b8e0" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7f03d455a6e0" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f03d455a460" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7f03d4556020" loc="53:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f03d45440e0" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f03d4544810" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f03d45462b0" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f03d4543760" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f03d45469b0" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f03d4543020" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d45474c0" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f03d4547b90" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f03d48f1620" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f03d48f0650" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f03d48f1d90" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f03d48e8a30" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f03d48e62b0" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f03d48157f0" loc="85:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f03d4814020" loc="86:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f03d4815020" loc="79:../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f03d47fae20" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f03d488fdf0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f03d47f8810" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d4358510" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d4358510"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f03d4358750" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f03d4353350" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f03d4355350" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f03d4354940" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f03d4354370" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f03d43546b0" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f03d4355b30" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f03d4353b40" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f03d43572e0" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f03d4357060" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d4358750"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f03d4357b10" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x7f03d430b850" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f03d4308de0" loc="87:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f03d430c8d0" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f03d4306020" loc="91:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f03d4307810" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f03d4307590" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f03d4309c40" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f03d43099c0" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f03d4306a20" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f03d43067a0" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f03d430b0e0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x7f03d4308610" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f03d4308390" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f03d43092a0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f03d4309020" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f03d430d8a0" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d430d8a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7f03d42fd6a0" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7f03d42fd420" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f03d42fe4c0" loc="76:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f03d4302270" loc="47:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d430d8a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f03d4301670" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d430d8a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f03d43013f0" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d430d8a0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f03d4301e20" loc="64:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f03d42fec80" loc="82:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d4302c10" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d430d8a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f03d4302990" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d430d8a0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f03d43005d0" loc="67:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f03d4300d20" loc="70:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f03d42faa80" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d42faa80"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7f03d42f33e0" loc="74:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f03d42f65c0" loc="58:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f03d42f7420" loc="48:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d42faa80"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f03d42f6d30" loc="62:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f03d42f3ba0" loc="80:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d42f7de0" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d42faa80"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f03d42f7b60" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d42faa80"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f03d42f44e0" loc="65:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f03d42f4c30" loc="68:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f03d431cab0" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f03d431cab0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7f03d4313350" loc="98:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f03d43153e0" loc="87:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f03d4319420" loc="61:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f03d431cab0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7f03d4313d30" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7f03d4313ab0" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7f03d4312550" loc="110:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f03d4317d50" loc="75:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f03d43175c0" loc="70:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f03d4315ba0" loc="93:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d4319dd0" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f03d431cab0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f03d4319b50" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f03d431cab0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f03d43164e0" loc="78:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f03d4316c30" loc="81:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d4207780" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d4207780"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f03d42079c0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d42079c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f03d4204350" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d42079c0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f03d42034b0" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f03d4204bd0" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f03d4203c10" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f03d416f630" loc="59:../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f03d416f020" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f03d416f3a0" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f03d4168e30" loc="65:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4168810" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f03d4168ba0" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f03d4165020" loc="71:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4167d70" loc="71:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f03d4168020" loc="57:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f03d4169520" loc="52:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f03d41692a0" loc="52:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f03d415f390" loc="65:../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d415f110" loc="65:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f03d4163410" loc="46:../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d416bd90" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f03d4163180" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f03d4160350" loc="59:../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d41600d0" loc="59:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f03d4162830" loc="53:../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4162210" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f03d41625a0" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f03d415e390" loc="71:../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d415e110" loc="71:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="37:../../tos/lib/rfxlink/util/RadioChannel.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="setChannelDone" ref="0x7f03d415bde0" loc="50:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f03d415b5d0" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f03d415b350" loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f03d415a660" loc="55:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d41647a0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d41647a0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f03d41649e0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d41649e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f03d4156840" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d41649e0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d41565c0" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f03d41549d0" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4154750" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f03d41585f0" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4158370" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d4153d00" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d41649e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4153710" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f03d4153a70" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d41649e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0x7f03d413e8a0" loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f03d413e8a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0x7f03d413aa90" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
          <long>&#10; Clears the isSet flag.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d413a810" loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f03d413a020" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f03d413e8a0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d413bc90" loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f03d413b490" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d413b210" loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d4138810" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="55:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
          <long>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f03d413e8a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4138210" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f03d4138580" loc="59:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f03d413e8a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d412c350" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d412c350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f03d412cc70" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f03d52e7170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f03d412dac0" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d412d840" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f03d410cbf0" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f03d410dbe0" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f03d410d270" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f03d410c420" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f03d410b8b0" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0x7f03d4107d40" loc="41:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4107ac0" loc="41:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f03d410a8e0" loc="37:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f03d4107350" loc="39:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d41070d0" loc="39:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f03d4105830" loc="45:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4105210" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f03d41055a0" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f03d4106af0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d41064d0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f03d4106860" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0x7f03d4103c70" loc="49:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f03d4786210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d41039f0" loc="49:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0x7f03d4102980" loc="51:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f03d4786210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4102370" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f03d41026f0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f03d4786210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f03d41032a0" loc="47:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4103020" loc="47:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f03d4101120" loc="53:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f03d4786210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f03d4116b70" loc="67:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f03d4116220" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f03d41165a0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d41168d0" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f03d4111660" loc="122:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4111060" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d4111390" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f03d4112790" loc="110:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f03d4114c00" loc="83:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4114980" loc="83:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f03d4113de0" loc="97:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4113800" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f03d4113b50" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0x7f03d40e4cc0" loc="59:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0x7f03d40e3760" loc="72:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0x7f03d40e2120" loc="79:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0x7f03d40e4560" loc="48:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
        <long>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example). &#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f03d40cc830" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f03d40cc5b0" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0x7f03d40cb070" loc="62:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f03d40cd500" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f03d40cd280" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d40cde80" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f03d40cdc00" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="43:../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="38:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0x7f03d40d2500" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f03d40d2280" loc="58:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0x7f03d40d1aa0" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="65:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f03d40d1820" loc="72:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0x7f03d40d1040" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="60:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
          <long>&#10; Returns the node address for the given entry.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f03d40d2d90" loc="63:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x7f03d40d05e0" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f03d40d0360" loc="81:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0x7f03d40d3a20" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f03d40d37a0" loc="50:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0x7f03d4073740" loc="40:../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0x7f03d4086ce0" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4086a60" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0x7f03d406e2a0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d406e020" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0x7f03d406da30" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d406d7b0" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f03d4071a20" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d40717a0" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f03d40722a0" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4072020" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f03d4070750" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4070170" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f03d40704c0" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f03d4071020" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4072a00" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f03d4072d50" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f03d406d020" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d406e9d0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f03d406ed20" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0x7f03d407fd60" loc="42:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
          <long>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0x7f03d4078730" loc="49:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0x7f03d4076a00" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4076780" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0x7f03d40772a0" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4077020" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0x7f03d4077db0" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
          <long>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4077b30" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0x7f03d404bd60" loc="60:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
          <long>&#10; This event is fired when the specified timeout period expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0x7f03d404de10" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f03d4788180"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0x7f03d404db90" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f03d4788180"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f03d404b5f0" loc="55:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0x7f03d404d350" loc="45:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f03d404a5b0" loc="65:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
          <long>&#10; Returns the current time as measured by the radio stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f03d4788180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="37:../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0x7f03d4044a90" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="69:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
          <long>&#10; Clears all metadata and sets all default values in the headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4044810" loc="72:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f03d4048e00" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4048b80" loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f03d40454d0" loc="61:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f03d4046c70" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
          <long>&#10; Sets the length of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4046690" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f03d40469e0" loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f03d40482a0" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4048020" loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f03d4044020" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="63:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4045ce0" loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f03d40943e0" loc="46:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f03d4097b80" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4097900" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f03d4093020" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
          <long>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4094c90" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0x7f03d40938c0" loc="59:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0x7f03d4092490" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4092210" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0x7f03d40815f0" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
          <long>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4081370" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0x7f03d4089660" loc="86:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
          <long>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0x7f03d408ae40" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d408a830" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f03d408abb0" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f03d408e940" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
          <long>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d408e6c0" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0x7f03d408d490" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d408d210" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0x7f03d408b3e0" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d408dd80" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f03d408b150" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0x7f03d408f020" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
          <long>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f03d408fe30" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d408f890" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f03d408fba0" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f03d408a020" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d408bcd0" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0x7f03d405a0b0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d405bdd0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0x7f03d405c680" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d405c400" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0x7f03d4068df0" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4068820" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0x7f03d4068b60" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0x7f03d4064020" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4066ca0" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0x7f03d4055050" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4056a40" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f03d4056d90" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0x7f03d4066430" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d40661b0" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0x7f03d405b5e0" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d405b020" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0x7f03d405b350" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0x7f03d40639d0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d40633c0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f03d4063740" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0x7f03d40562a0" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4056020" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0x7f03d4067920" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d40676a0" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0x7f03d40603f0" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4060170" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0x7f03d40628b0" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d40622a0" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f03d4062620" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0x7f03d4052820" loc="178:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f03d4786630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f03d4055ad0" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4055850" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f03d4052020" loc="173:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f03d4786210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0x7f03d40576b0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d40570d0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f03d4057420" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0x7f03d4064b20" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d40648a0" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0x7f03d405ebf0" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
          <long>&#10; Sets the frame pending field in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d405e620" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0x7f03d405e960" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0x7f03d405ae40" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d405a870" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0x7f03d405abb0" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f03d40512a0" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4051020" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f03d405f2b0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
          <long>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4060bf0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f03d405f020" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0x7f03d4068040" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d406cd90" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f03d4053680" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4053400" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0x7f03d4059910" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4059690" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0x7f03d405fdb0" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d405fb30" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x7f03d40832b0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
          <long>&#10; Sets the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4084bd0" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0x7f03d4083020" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0x7f03d4083aa0" loc="58:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x7f03d40858e0" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4085660" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x7f03d40843d0" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d4084150" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0x7f03d407c020" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d407dc90" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0x7f03d407d3d0" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
          <long>&#10; Returns the initial amount of maximum backoff for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d407d150" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0x7f03d407c870" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0x7f03d407a390" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d407a110" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="38:../../tos/lib/rfxlink/util/BareSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f03d3fa9730" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3fa94b0" loc="49:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f03d3fa62a0" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3fa6020" loc="67:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f03d3fa86b0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3fa80d0" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f03d3fa8420" loc="57:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="37:../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f03d3fabd10" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
              <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3faba50" loc="44:../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f03d3f946a0" loc="50:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f03d3f92600" loc="60:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f03d3f94e80" loc="55:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f03d3f97e30" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f03d3f97850" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f03d477bdc0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f03d3f97ba0" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f03d3eeb8e0" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f03d3ee9270" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f03d3ee5a10" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f03d3ee51f0" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f03d3ee70e0" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f03d3ee7940" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f03d3edcb50" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f03d3ee4b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f03d3edc8d0" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f03d3ee4b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f03d3ee0a80" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f03d3edd620" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f03d3ee4b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f03d3edd3a0" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f03d3ee4b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f03d3edc020" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f03d3ee4b00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="38:../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f03d3d6f020" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
              <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3d71d30" loc="54:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0x7f03d3d71390" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3d71110" loc="47:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="38:../../tos/lib/rfxlink/util/RadioState.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="turnOff" ref="0x7f03d3d04d10" loc="45:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7f03d3d01e60" loc="57:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f03d3d00920" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f03d3d006a0" loc="64:../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0x7f03d3cff120" loc="70:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="66:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0x7f03d3d01600" loc="51:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
          <long>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f03d3cff9d0" loc="75:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="72:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="38:../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0x7f03d3cfc730" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3cfc4b0" loc="49:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0x7f03d3cfbbc0" loc="64:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f03d3cfb350" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f03d3cfb0d0" loc="57:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f03d3c5b5e0" loc="53:../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f03d3c5b5e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f03d3c582a0" loc="64:../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f03d3c5b5e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f03d3c58020" loc="64:../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f03d3c5b5e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="37:../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0x7f03d3c31a00" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="54:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3c31780" loc="57:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f03d3c347f0" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
          <long>&#10; Returns if the flag is set for this message. &#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3c34570" loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0x7f03d3c335e0" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
          <long>&#10; Sets the flag in this message to the specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3c33020" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f03d3c33350" loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f03d3c31020" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="49:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3c33d70" loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="38:../../tos/lib/rfxlink/util/RadioCCA.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="done" ref="0x7f03d3bffdc0" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f03d3bffb40" loc="53:../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f03d3bff350" loc="45:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f03d3b577f0" loc="89:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f03d3b584d0" loc="85:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f03d3b5b070" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f03d3b57020" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f03d3b58c40" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f03d3b59c40" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f03d3b599c0" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f03d3b562a0" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f03d3b56020" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f03d3b5b810" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f03d3b592a0" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f03d3b59020" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x7f03d3b4cb80" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x7f03d3b4eae0" loc="68:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x7f03d3b4d2b0" loc="74:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x7f03d3b4dae0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7f03d3b4a3b0" loc="98:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x7f03d3b4c350" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7f03d3b4f810" loc="57:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f03d48482c0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f03d48486e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7f03d3b4e2a0" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f03d48482c0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f03d48486e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7f03d3b4e020" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f03d48482c0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f03d48486e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d3954020" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d3954020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f03d3954260" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d3954260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f03d3954d90" loc="66:../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d3954260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f03d3954b10" loc="66:../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d3954260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f03d3957610" loc="54:../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f03d39567d0" loc="66:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f03d3956020" loc="61:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f03d3957d30" loc="61:../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f03d395ad70" loc="53:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f03d395e020" loc="62:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d3961ca0" loc="62:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f03d395d3c0" loc="74:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d395d140" loc="74:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f03d395e890" loc="68:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f03d395de50" loc="81:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d395dbd0" loc="81:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f03d384b600" loc="76:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f03d3850c00" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f03d384b020" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d384b360" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f03d384ab80" loc="88:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f03d3849e50" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f03d384a220" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d384a560" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f03d384a8d0" loc="89:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f03d384f8a0" loc="45:../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f03d384f620" loc="45:../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x7f03d3835420" loc="86:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x7f03d382b1f0" loc="126:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x7f03d3830b70" loc="117:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x7f03d382bc10" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x7f03d382b990" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x7f03d3836c40" loc="83:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x7f03d382d750" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x7f03d382d4d0" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7f03d38312a0" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x7f03d3831020" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f03d38343b0" loc="97:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x7f03d3826720" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x7f03d38264a0" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x7f03d3831a40" loc="114:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x7f03d3829d50" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x7f03d3829ad0" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f03d3828cf0" loc="136:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x7f03d382ca30" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x7f03d382c7b0" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x7f03d3827c90" loc="140:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x7f03d382e5c0" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x7f03d382e340" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f03d3834d90" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d3834b10" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f03d3830410" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x7f03d3830190" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x7f03d382c020" loc="123:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x7f03d38293b0" loc="129:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x7f03d3828510" loc="132:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x7f03d38274d0" loc="138:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x7f03d382ed40" loc="120:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f03d3835bb0" loc="89:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f03d38327c0" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d3832540" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f03d36d4a10" loc="43:../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d36d4a10"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7f03d36ce270" loc="80:../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d36d4a10"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f03d36cdcb0" loc="97:../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d36d4a10"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f03d36cda30" loc="97:../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d36d4a10"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f03d52eeb50"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x7f03d52eeb50"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7f03d36cac70" loc="108:../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d36d4a10"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f03d36ca9f0" loc="108:../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f03d36d1ac0" loc="57:../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f03d36cfa70" loc="72:../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f03d36cee50" loc="88:../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f03d36d4a10"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f03d36d1350" loc="50:../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7f03d36cf270" loc="65:../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncNotify" loc="41:../../tos/lib/ftsp/TimeSyncNotify.nc">
      <documentation loc="36:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <short>&#10; time sync module (TimeSyncM) provides notification of arriving&#10; and transmitted time-sync msgs through TimeSyncNotify interface:&#10;</short>
      </documentation>
      <function event="" provided="0" name="msg_received" ref="0x7f03d361ba20" loc="46:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <documentation loc="43:../../tos/lib/ftsp/TimeSyncNotify.nc">
          <short>&#10; fired when time-sync msg is received and accepted&#10;</short>
        </documentation>
        <interfacedef-ref qname="TimeSyncNotify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="msg_sent" ref="0x7f03d3618190" loc="52:../../tos/lib/ftsp/TimeSyncNotify.nc">
        <documentation loc="48:../../tos/lib/ftsp/TimeSyncNotify.nc">
          <short>&#10; fired when time-sync msg is sent by TimeSyncM or the sending did not&#10; succeed&#10;</short>
        </documentation>
        <interfacedef-ref qname="TimeSyncNotify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncAMSend" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d360f870" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
          <interfacedef-ref qname="TimeSyncAMSend"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d360f870"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f03d360fab0" loc="44:../../tos/interfaces/TimeSyncAMSend.nc">
          <interfacedef-ref qname="TimeSyncAMSend"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d360fab0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="send" ref="0x7f03d360b0e0" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="46:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; This command sends a regular message just like &#60;tt>AMSend.send&#60;/tt>, but&#10; it also performs sender-receiver time synchronization.</short>
          <long>&#10; This command sends a regular message just like &#60;tt>AMSend.send&#60;/tt>, but&#10; it also performs sender-receiver time synchronization. The &#60;tt>event_time&#60;/tt>&#10; parameter holds the time of some event as expressed in the local clock of&#10; the sender. The receiver can obtain the time of this event (expressed in its&#10; own local time) via the &#60;tt>TimeSyncPacket&#60;/tt> interface.&#10;&#10; @param addr         address to which to send the packet&#10; @param msg          the packet&#10; @param len          the length of the data in the packet payload&#10; @param event_time&#9;  the synchronization point to be transfered with the message&#10; @return             SUCCESS if the request to send succeeded and a&#10;                     sendDone will be signaled later, EBUSY if the&#10;                     abstraction cannot send now but will be able to&#10;                     later, or FAIL if the communication layer is not&#10;                     in a state that can send (e.g., off).&#10; @see sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d360fab0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f03d360c3a0" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f03d47791d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f03d360c720" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d360ca50" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
          <variable name="event_time" ref="0x7f03d360cde0" loc="64:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d360fab0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f03d3607810" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="105:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d3607210" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d3607540" loc="114:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f03d3608960" loc="103:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="95:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f03d3609020" loc="80:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="66:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the&#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a&#10; sendFailed event, and never a sendSucceeded event.&#10;&#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d360bc70" loc="80:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f03d3608020" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
        <documentation loc="82:../../tos/interfaces/TimeSyncAMSend.nc">
          <short>&#10; Signaled in response to an accepted send request.</short>
          <long>&#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncAMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d36099c0" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f03d3609d10" loc="93:../../tos/interfaces/TimeSyncAMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSyncPacket" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f03d35fcdb0" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
          <interfacedef-ref qname="TimeSyncPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f03d35fcdb0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f03d35f9020" loc="37:../../tos/interfaces/TimeSyncPacket.nc">
          <interfacedef-ref qname="TimeSyncPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d35f9020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="isValid" ref="0x7f03d35f9ba0" loc="48:../../tos/interfaces/TimeSyncPacket.nc">
        <documentation loc="39:../../tos/interfaces/TimeSyncPacket.nc">
          <short>&#10; Returns TRUE if the value returned by &#60;tt>getTime&#60;/tt> can be trusted.</short>
          <long>&#10; Returns TRUE if the value returned by &#60;tt>getTime&#60;/tt> can be trusted.&#10; Under certain circumstances the received message cannot be properly&#10; time stamped, so the sender-receiver synchronization cannot be finished&#10; on the receiver side. In this case, this command returns FALSE.&#10; This command MUST BE called only on the receiver side and only for&#10; messages transmitted via the TimeSyncSend interface. It is recommended&#10; that this command be called from the receive event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d35f9920" loc="48:../../tos/interfaces/TimeSyncPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="eventTime" ref="0x7f03d35f8800" loc="58:../../tos/interfaces/TimeSyncPacket.nc">
        <documentation loc="50:../../tos/interfaces/TimeSyncPacket.nc">
          <short>&#10; This command should be called by the receiver of a message.</short>
          <long>&#10; This command should be called by the receiver of a message. The time&#10; of the synchronization event is returned as expressed in the local&#10; clock of the caller. This command MUST BE called only on the receiver&#10; side and only for messages transmitted via the TimeSyncSend interface.&#10; It is recommended that this command be called from the receive event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSyncPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f03d35f9020"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d35f8580" loc="58:../../tos/interfaces/TimeSyncPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f03d328a630" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d328a020" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f03d328a3a0" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f03d328c670" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f03d328b620" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f03d328b020" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f03d4762160"/>
                <typename><typedef-ref name="message_t" ref="0x7f03d47617f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f03d328b390" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f03d3254580" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f03d3257dd0" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f03d325d770" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f03d325cbe0" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f03d325a840" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d325a5c0" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f03d325b4a0" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f03d325c350" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d325c0d0" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f03d32580e0" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f03d325bd50" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f03d3264190" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f03d3264ac0" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f03d32657b0" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f03d3265530" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f03d3263690" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f03d3263410" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f03d32613e0" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f03d3260030" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d3261d80" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f03d3260b00" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f03d3260880" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f03d312fdd0" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f03d312f800" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d312fb40" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f03d3127ac0" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f03d3127840" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f03d3126930" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f03d3126360" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d31266a0" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f03d3128740" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f03d31252c0" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f03d3124920" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d3124c60" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f03d3125020" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f03d3127070" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f03d312a720" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f03d312bdb0" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f03d312a130" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f03d52e8610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f03d312a480" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f03d31045b0" loc="50:../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f03d3104330" loc="50:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f03d3104df0" loc="59:../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f03d3103cf0" loc="69:../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f03d3103700" loc="69:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f03d3103a60" loc="69:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f03d3101b50" loc="79:../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:../../tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:../../tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f03d30ee820" loc="44:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f03d30ef910" loc="42:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x7f03d30ea110" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d30ebe60" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f03d30eb070" loc="47:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f03d30f2980" loc="40:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f03d30ef190" loc="41:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f03d30ee0e0" loc="43:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f03d48ea3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x7f03d30ec020" loc="45:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f03d4931500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f03d30ec950" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f03d30ec6d0" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f03d30eb790" loc="48:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f03d52e9ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7f03d2f21720" loc="49:../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7f03d2f214a0" loc="49:../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
